CVM Configuration:
	Java stack chunk size (stackChunkSize): 2048
	Java stack minimum size (stackMinSize): 3072
	Java stack maximum size (stackMaxSize): 131072
WARNING: Start heap size 16777216 is larger than maximum size 5242880, setting both to 16777216
GC[SS]: Initialized semi-space gen for generational GC
	Size of *each* semispace in bytes=1048576
	Limits of generation = [0x2ab84000,0x2ad84000)
	First semispace      = [0x2ab84000,0x2ac84000)
	Second semispace     = [0x2ac84000,0x2ad84000)
	Current semispace    = First semispace
GC[MC]: Initialized mark-compact gen for generational GC
	Size of the space in bytes=15728640
	Limits of generation = [0x2ad84000,0x2bc84000)
GC[generational]: Sizes
	youngGen = min 1048576 start 1048576 max 1048576
	oldGen   = min 1048576 start 15728640 max 15728640
	overall  = min 2097152 start 16777216 max 16777216
GC[generational]: Auxiliary data structures
	heapBaseMemoryArea=[0x2ab84000,0x2bc84000)
	cardTable=[0x2bc84000,0x2bc8c800)
	objectHeaderTable=[0x2bc8d000,0x2bc95800)
	summaryTable=[0x2bc96000,0x2bcb8000)
JIT Configuration:
	Interpreter transition cost (icost): 20
	Mixed transition cost (mcost): 50
	Backwards branch cost (bcost): 4
	Compilation threshold (climit): 20000
	When to compile (compile): policy
	What to inline (inline): none
	Max Inlining Depth (maxInliningDepth): 12
	Max Inlining Code Length (maxInliningCodeLength): 68
	Min Inlining Code Length (minInliningCodeLength): 16
	Policy Triggered Decompilations (policyTriggeredDecompilations): true
	Max Working Memory Size (maxWorkingMemorySize): 1048576
	Max Compiled Method Size (maxCompiledMethodSize): 65535
	Code Cache Size (codeCacheSize): 524288
	Upper Code Cache Threshold (upperCodeCacheThreshold): 95%
	Lower Code Cache Threshold (lowerCodeCacheThreshold): 90%
	Pass Phi values in registers (XregisterPhis): true
	Pass locals in registers between blocks (XregisterLocals): true
	Compiling Causes Class Loading (XcompilingCausesClassLoading): false
	Trace (trace): status+error+bctoir+codegen+stats+iropt+inlining+osr+reglocals
JS: ATTEMPTING TO COMPILE java.lang.Object.<init>()V
JS: COMPILING java.lang.Object.<init>()V

#################################################

The maximum node counts per root node are 1
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 2 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: java.lang.Object.<init>()V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x6cc064):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 2) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 14
ESTIMATED BUFFER SIZE = 120
CODE BUFFER ADDRESS = 0x2bcb94b4
PC MAP TABLE ADDRESS = 0x2bcb94bc
CODE ENTRY ADDRESS = 0x2bcb94e0
          		@ Method prologue
0x2bcb94e0	0:	addiu	a1, JSP, 36	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcb94e4	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcb94e8	8:	sltu	t7, a1, CHUNKEND
0x2bcb94ec	12:	bne	t7, zero, PC=0x2bcb94e0	@ goto .skip
0x2bcb94f0	16:	nop
0x2bcb94f4	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcb94f8	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcb94ec) >>>>>>>>
0x2bcb94ec	12:	bne	t7, zero, PC=0x2bcb94fc	@ goto .skip
0x2bcb94f0	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcb94fc) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcb94fc	28:	sw	JFP, 4(JSP)	@ Store curr JFP into new frame
0x2bcb9500	32:	addiu	JFP, JSP, 4	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcb9504	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcb9508	40:	addiu	a3, zero, 0
0x2bcb950c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcb9510	48:	addiu	a3, zero, -1
0x2bcb9514	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcb9518	56:	move	a0, EE
0x2bcb951c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcb9520	64:	lui	t9, hi16(0x65)
0x2bcb9524	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcb9528	72:	jalr	t9
0x2bcb952c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcb9530	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcb9534	84:	nop
0x2bcb9538	88:	nop
0x2bcb953c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=96
0x2bcb9540	96:	addiu	JSP, JFP, -8
0x2bcb9544	100:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcb9548	104:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcb954c	108:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcb94e0) >>>>>>>>
          		@ Capacity is 10 word(s)
0x2bcb94e0	0:	addiu	a1, JSP, 36
<<<<<<<<<Pop Code Buffer to PC = 112 (0x2bcb9550) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcb9530) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcb9530	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcb9534	84:	lui	CP, hi16(0x2bcb)
0x2bcb9538	88:	ori	CP, CP, lo16(0x2bcb9550)
0x2bcb953c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 112 (0x2bcb9550) <<<<<<<<<
JS: COMPILED: size=160 startPC=0x2bcb94e0 java.lang.Object.<init>()V
JS: ATTEMPTING TO COMPILE java.lang.String.lastIndexOf(II)I
JS: COMPILING java.lang.String.lastIndexOf(II)I
orig bkID(4) Incoming Locals(1 0x0): 5- 
o1   bkID(4) Incoming Locals(1 0x0): 5- 
s1   bkID(4) Incoming Locals(2 0x0): 5- 3- 
s1   bkID(4) Incoming Locals(3 0x0): 5- 3- 4- 
s1   bkID(4) Incoming Locals(4 0x0): 5- 3- 4- 1- 
s1   bkID(4) Incoming Locals(5 0x0): 5- 3- 4- 1- 0- 
o1   bkID(4) Incoming Locals(5 0x0): 5- 3- 4- 1- 0- 
orig bkID(5) Incoming Locals(5 0x0): 5- 3- 4- 1- 0- 
o1   bkID(5) Incoming Locals(2 0x0): 5- 3- 
o1   bkID(5) Incoming Locals(4 0x0): 5- 3- 4- 1- 
s1   bkID(5) Incoming Locals(4 0x0): 5- 3- 4- 1- 
s1   bkID(5) Incoming Locals(4 0x0): 5- 3- 4- 1- 
s1   bkID(5) Incoming Locals(4 0x0): 5- 3- 4- 1- 
s1   bkID(5) Incoming Locals(4 0x0): 5- 3- 4- 1- 
s1   bkID(5) Incoming Locals(5 0x0): 5- 3- 4- 1- 0- 
o1   bkID(5) Incoming Locals(5 0x0): 5- 3- 4- 1- 0- 
orig bkID(0) Incoming Locals(2 0x0): 0- 2- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 2- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 2- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 2- 
orig bkID(4) Incoming Locals(5 0x0): 5- 3- 4- 1- 0- 
o1   bkID(4) Incoming Locals(1 0x0): 5- 
s1   bkID(4) Incoming Locals(2 0x0): 5- 3- 
s1   bkID(4) Incoming Locals(3 0x0): 5- 3- 4- 
s1   bkID(4) Incoming Locals(4 0x0): 5- 3- 4- 1- 
s1   bkID(4) Incoming Locals(5 0x0): 5- 3- 4- 1- 0- 
o1   bkID(4) Incoming Locals(5 0x0): 5- 3- 4- 1- 0- 
orig bkID(5) Incoming Locals(5 0x0): 5- 3- 4- 1- 0- 
o1   bkID(5) Incoming Locals(2 0x0): 5- 3- 
o1   bkID(5) Incoming Locals(4 0x0): 5- 3- 4- 1- 
s1   bkID(5) Incoming Locals(4 0x0): 5- 3- 4- 1- 
s1   bkID(5) Incoming Locals(4 0x0): 5- 3- 4- 1- 
s1   bkID(5) Incoming Locals(4 0x0): 5- 3- 4- 1- 
s1   bkID(5) Incoming Locals(4 0x0): 5- 3- 4- 1- 
s1   bkID(5) Incoming Locals(5 0x0): 5- 3- 4- 1- 0- 
o1   bkID(5) Incoming Locals(5 0x0): 5- 3- 4- 1- 0- 
orig bkID(0) Incoming Locals(2 0x0): 0- 2- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 2- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 2- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 2- 
bkID(4) local(0 #5)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(4) Incoming Locals(5 0x0): 5- 3- 4- 1- 0- 
+bk  bkID(4) Incoming Locals(5 0x1): 5+ 3- 4- 1- 0- 
-gbk bkID(5) Incoming Locals(5 0x0): 5- 3- 4- 1- 0- 
+gbk bkID(5) Incoming Locals(5 0x1): 5+ 3- 4- 1- 0- 
bkID(4) local(0 #5)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(5 0x1): 5+ 3- 4- 1- 0- 
dstBk(4) local(0 5) found in slot(0)
local(0 5) same slot
+bk  bkID(4) Incoming Locals(5 0x1): 5+ 3- 4- 1- 0- 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1): 5+ 3- 4- 1- 0- 
dstBk(5) local(0 5) found in slot(0)
local(0 5) same slot
+gbk bkID(5) Incoming Locals(5 0x1): 5+ 3- 4- 1- 0- 
bkID(4) local(1 #3)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(4) Incoming Locals(5 0x1): 5+ 3- 4- 1- 0- 
+bk  bkID(4) Incoming Locals(5 0x3): 5+ 3+ 4- 1- 0- 
-gbk bkID(5) Incoming Locals(5 0x1): 5+ 3- 4- 1- 0- 
+gbk bkID(5) Incoming Locals(5 0x3): 5+ 3+ 4- 1- 0- 
bkID(4) local(1 #3)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(5 0x3): 5+ 3+ 4- 1- 0- 
dstBk(4) local(1 3) found in slot(1)
local(1 3) same slot
+bk  bkID(4) Incoming Locals(5 0x3): 5+ 3+ 4- 1- 0- 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x3): 5+ 3+ 4- 1- 0- 
dstBk(5) local(1 3) found in slot(1)
local(1 3) same slot
+gbk bkID(5) Incoming Locals(5 0x3): 5+ 3+ 4- 1- 0- 
bkID(4) local(2 #4)  not ordered
bestLocal(2) bestLocalScore(8)
-bk  bkID(4) Incoming Locals(5 0x3): 5+ 3+ 4- 1- 0- 
+bk  bkID(4) Incoming Locals(5 0x7): 5+ 3+ 4+ 1- 0- 
-gbk bkID(5) Incoming Locals(5 0x3): 5+ 3+ 4- 1- 0- 
+gbk bkID(5) Incoming Locals(5 0x7): 5+ 3+ 4+ 1- 0- 
bkID(4) local(2 #4)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(5 0x7): 5+ 3+ 4+ 1- 0- 
dstBk(4) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(4) Incoming Locals(5 0x7): 5+ 3+ 4+ 1- 0- 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x7): 5+ 3+ 4+ 1- 0- 
dstBk(5) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(5) Incoming Locals(5 0x7): 5+ 3+ 4+ 1- 0- 
bkID(4) local(3 #1)  not ordered
bestLocal(3) bestLocalScore(8)
-bk  bkID(4) Incoming Locals(5 0x7): 5+ 3+ 4+ 1- 0- 
+bk  bkID(4) Incoming Locals(5 0xf): 5+ 3+ 4+ 1+ 0- 
-gbk bkID(5) Incoming Locals(5 0x7): 5+ 3+ 4+ 1- 0- 
+gbk bkID(5) Incoming Locals(5 0xf): 5+ 3+ 4+ 1+ 0- 
bkID(4) local(3 #1)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(5 0xf): 5+ 3+ 4+ 1+ 0- 
dstBk(4) local(3 1) found in slot(3)
local(3 1) same slot
+bk  bkID(4) Incoming Locals(5 0xf): 5+ 3+ 4+ 1+ 0- 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0xf): 5+ 3+ 4+ 1+ 0- 
dstBk(5) local(3 1) found in slot(3)
local(3 1) same slot
+gbk bkID(5) Incoming Locals(5 0xf): 5+ 3+ 4+ 1+ 0- 
bkID(4) local(4 #0)  not ordered
bestLocal(4) bestLocalScore(8)
-bk  bkID(4) Incoming Locals(5 0xf): 5+ 3+ 4+ 1+ 0- 
+bk  bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
-gbk bkID(5) Incoming Locals(5 0xf): 5+ 3+ 4+ 1+ 0- 
+gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(4) local(4 #0)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(4) local(4 0) found in slot(4)
local(4 0) same slot
+bk  bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(4 0) found in slot(4)
local(4 0) same slot
+gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
Pushing blockID(5)
bkID(5) local(0 #5)  not found in goalBk
bkID(5) local(1 #3)  not found in goalBk
bkID(5) local(2 #4)  not found in goalBk
bkID(5) local(3 #1)  not found in goalBk
bkID(5) local(4 #0)  not found in goalBk
bkID(5) local(0 #5)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(0 5) found in slot(0)
local(0 5) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(0 5) found in slot(0)
local(0 5) same slot
+gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
-gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(4) local(0 5) found in slot(0)
local(0 5) same slot
+gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(5) local(1 #3)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(1 3) found in slot(1)
local(1 3) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(1 3) found in slot(1)
local(1 3) same slot
+gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
-gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(4) local(1 3) found in slot(1)
local(1 3) same slot
+gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(5) local(2 #4)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
-gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(4) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(5) local(3 #1)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(3 1) found in slot(3)
local(3 1) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(3 1) found in slot(3)
local(3 1) same slot
+gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
-gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(4) local(3 1) found in slot(3)
local(3 1) same slot
+gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(5) local(4 #0)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(4 0) found in slot(4)
local(4 0) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(4 0) found in slot(4)
local(4 0) same slot
+gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
-gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(4) local(4 0) found in slot(4)
local(4 0) same slot
+gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(5) local(0 #5)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(0 5) found in slot(0)
local(0 5) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(0 5) found in slot(0)
local(0 5) same slot
+gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(5) local(1 #3)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(1 3) found in slot(1)
local(1 3) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(1 3) found in slot(1)
local(1 3) same slot
+gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(5) local(2 #4)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(5) local(3 #1)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(3 1) found in slot(3)
local(3 1) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(3 1) found in slot(3)
local(3 1) same slot
+gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(5) local(4 #0)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(4 0) found in slot(4)
local(4 0) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(4 0) found in slot(4)
local(4 0) same slot
+gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(5) local(0 #5)  not found in goalBk
bkID(5) local(1 #3)  not found in goalBk
bkID(5) local(2 #4)  not found in goalBk
bkID(5) local(3 #1)  not found in goalBk
bkID(5) local(4 #0)  not found in goalBk
bkID(5) local(0 #5)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(0 5) found in slot(0)
local(0 5) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(4) local(0 5) found in slot(0)
local(0 5) same slot
+gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(5) local(1 #3)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(1 3) found in slot(1)
local(1 3) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(4) local(1 3) found in slot(1)
local(1 3) same slot
+gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(5) local(2 #4)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(4) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(5) local(3 #1)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(3 1) found in slot(3)
local(3 1) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(4) local(3 1) found in slot(3)
local(3 1) same slot
+gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(5) local(4 #0)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(4 0) found in slot(4)
local(4 0) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(4) local(4 0) found in slot(4)
local(4 0) same slot
+gbk bkID(4) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(4) local(0 #5)  not found in goalBk
bkID(4) local(1 #3)  not found in goalBk
bkID(4) local(2 #4)  not found in goalBk
bkID(4) local(3 #1)  not found in goalBk
bkID(4) local(4 #0)  not found in goalBk
Popping blockID(5)
Pushing blockID(5)
bkID(0) local(0 #0)  not found in goalBk
bkID(0) local(1 #2)  not found in goalBk
bkID(0) local(0 #0)  not found in goalBk
bkID(0) local(1 #2)  not found in goalBk
bkID(0) local(0 #0)  ordered in goalBk(5)
-bk  bkID(0) Incoming Locals(2 0x0): 0- 2- 
dstBk(0) local(4 0) found in slot(0)
local(#4) swapped with local(#0)
+bk  bkID(0) Incoming Locals(5 0x10): <null> 2- <null> <null> 0+ 
bkID(0) local(1 #2)  not found in goalBk
bkID(0) local(4 #0)  ordered in goalBk(5)
-bk  bkID(0) Incoming Locals(5 0x10): <null> 2- <null> <null> 0+ 
dstBk(0) local(4 0) found in slot(4)
local(4 0) same slot
+bk  bkID(0) Incoming Locals(5 0x10): <null> 2- <null> <null> 0+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
dstBk(5) local(4 0) found in slot(4)
local(4 0) same slot
+gbk bkID(5) Incoming Locals(5 0x1f): 5+ 3+ 4+ 1+ 0+ 
bkID(5) local(0 #5)  not found in goalBk
bkID(5) local(1 #3)  not found in goalBk
bkID(5) local(2 #4)  not found in goalBk
bkID(5) local(3 #1)  not found in goalBk
bkID(5) local(4 #0)  not found in goalBk
bkID(5) local(0 #5)  not found in goalBk
bkID(5) local(1 #3)  not found in goalBk
bkID(5) local(2 #4)  not found in goalBk
bkID(5) local(3 #1)  not found in goalBk
bkID(5) local(4 #0)  not found in goalBk
pre  bkID(0) Incoming Locals(5 0x10): <null> 2- <null> <null> 0+ 
local(#1) swapped with local(#0)
post bkID(0) Incoming Locals(5 0x11): 2+ <null> <null> <null> 0+ 

#################################################

The maximum node counts per root node are 6
IR block list contains 6 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 16 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x11
* Source: java.lang.String.lastIndexOf(II)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<0>  (0x6cd060):    aload_0 
<1>  (0x6cd061):    getfield_quick #3
<4>  (0x6cd064):    istore_3 
<5>  (0x6cd065):    aload_0 
<6>  (0x6cd066):    agetfield_quick #2
<9>  (0x6cd069):    astore 4
<11>  (0x6cd06b):    aload_0 
<12>  (0x6cd06c):    getfield_quick #3
<15>  (0x6cd06f):    iload_2 
<16>  (0x6cd070):    aload_0 
<17>  (0x6cd071):    getfield_quick #4
<20>  (0x6cd074):    if_icmplt <32>
<23>  (0x6cd077):    aload_0 
<24>  (0x6cd078):    getfield_quick #4
<27>  (0x6cd07b):    iconst_1 
<28>  (0x6cd07c):    isub 
<29>  (0x6cd07d):    goto <33>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(2)	ID(10)
 
Incoming Locals(5): 
	local(2)	ID(10)
 	<null>
	<null>
	<null>
	local(0)	ID(2)
 
Assigned Locals(2): 
	ASSIGN(16): local(3)	ID(15)	rhsID(5)
 	ASSIGN(19): local(4)	ID(18)	rhsID(8)
 
Successor Blocks(2): 
	ID(1) LocalOrder(2) AssignOrder(2) RefsOK(1) Locals()
	ID(2) LocalOrder(2) AssignOrder(2) RefsOK(1) Locals()

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (32-bit field)  (ref count: 4)
      <(ID: 17) FETCH (32-bit field) 
         <(ID: 4) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 3)
               <(ID: 9) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 8) IDENTITY (reference)  (ref count: 2)
      <(ID: 20) FETCH (reference) 
         <(ID: 7) FIELD_REF (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 3)
            <(ID: 6) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 13) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 25) FETCH (32-bit field) 
         <(ID: 12) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 3)
            <(ID: 11) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 16) ASSIGN (32-bit field)  (assignIdx: 0)
      <(ID: 15) LOCAL (32-bit field)   3>
      <(ID: 5) IDENTITY (32-bit field)  (ref count: 4)

   <(ID: 19) ASSIGN (reference)  (assignIdx: 1)
      <(ID: 18) LOCAL (reference)   4>
      <(ID: 8) IDENTITY (reference)  (ref count: 2)

   <(ID: 22) DEFINE (32-bit field) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 5) IDENTITY (32-bit field)  (ref count: 4)


   <(ID: 10) IDENTITY (int)  (ref count: 2)
      <(ID: 24) LOCAL (int)   2>

   <(ID: 23) LOAD_PHIS (NONE) 

   <(ID: 14) BCOND (int) 
   target: (BlockID: 1 BlockPC: 32)
   condition: LT
   flags: 0
      <(ID: 10) IDENTITY (int)  (ref count: 2)
      <(ID: 13) IDENTITY (32-bit field)  (ref count: 3)


   <(ID: 26) RELEASE_PHIS (NONE) 

   <(ID: 30) DEFINE (32-bit field) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 5) IDENTITY (32-bit field)  (ref count: 4)


   <(ID: 32) DEFINE (int) 
   spillLocation: 1
   registerSpillOk: 1
   operand:       <(ID: 28) SUB (int) 
         <(ID: 13) IDENTITY (32-bit field)  (ref count: 3)
         <(ID: 27) CONST_JAVA_NUMERIC32 (int)  (1)


   <(ID: 33) LOAD_PHIS (NONE) 

   <(ID: 34) RELEASE_PHIS (NONE) 

   <(ID: 35) GOTO (NONE) 
   target: (BlockID: 2 BlockPC: 33)


*************************************************
*
* (block ID:1 block PC:32 )
* IR root list contains 5 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.lang.String.lastIndexOf(II)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<32>  (0x6cd080):    iload_2 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 
*************************************************

Number and size of USED nodes in phi array: 1 1

Successor Blocks(1): 
	ID(2) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 36) MAP_PC (NONE)   32>

   <(ID: 38) DEFINE (32-bit field) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 21) USED (32-bit field) 
      spillLocation: 0
      registerSpillOk: 1



   <(ID: 39) DEFINE (int) 
   spillLocation: 1
   registerSpillOk: 1
   operand:       <(ID: 37) LOCAL (int)   2>


   <(ID: 40) LOAD_PHIS (NONE) 

   <(ID: 41) RELEASE_PHIS (NONE) 


*************************************************
*
* (block ID:2 block PC:33 )
* IR root list contains 2 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.lang.String.lastIndexOf(II)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<33>  (0x6cd081):    iadd 
<34>  (0x6cd082):    istore 5
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 
*************************************************

Number and size of USED nodes in phi array: 2 2

Assigned Locals(1): 
	ASSIGN(45): local(5)	ID(44)	rhsID(43)
 
Successor Blocks(1): 
	ID(5) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(5 3 4 1 0)

   <(ID: 42) MAP_PC (NONE)   33>

   <(ID: 45) ASSIGN (int)  (assignIdx: 0)
      <(ID: 44) LOCAL (int)   5>
      <(ID: 43) ADD (int) 
         <(ID: 29) USED (32-bit field) 
         spillLocation: 0
         registerSpillOk: 1

         <(ID: 31) USED (int) 
         spillLocation: 1
         registerSpillOk: 1



*************************************************
*
* (block ID:5 block PC:36 )
* IR root list contains 6 root nodes: in block 
* flags: 0x321
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1f
* Source: java.lang.String.lastIndexOf(II)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<36>  (0x6cd084):    iload 5
<38>  (0x6cd086):    iload_3 
<39>  (0x6cd087):    if_icmplt <65>
<42>  (0x6cd08a):    aload 4
<44>  (0x6cd08c):    iload 5
<46>  (0x6cd08e):    caload 
<47>  (0x6cd08f):    iload_1 
<48>  (0x6cd090):    if_icmpne <59>
<51>  (0x6cd093):    iload 5
<53>  (0x6cd095):    aload_0 
<54>  (0x6cd096):    getfield_quick #3
<57>  (0x6cd099):    isub 
<58>  (0x6cd09a):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(5): 
	local(5)	ID(47)
 	local(3)	ID(48)
 	local(4)	ID(50)
 	local(1)	ID(55)
 	local(0)	ID(60)
 
Incoming Locals(5): 
	local(5)	ID(47)
 	local(3)	ID(48)
 	local(4)	ID(50)
 	local(1)	ID(55)
 	local(0)	ID(60)
 
Successor Blocks(2): 
	ID(3) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals()
	ID(4) LocalOrder(4) AssignOrder(0) RefsOK(1) Locals(5 3 4 1 0)

   <(ID: 46) MAP_PC (NONE)   36>

   <(ID: 49) BCOND (int) 
   target: (BlockID: 3 BlockPC: 65)
   condition: LT
   flags: 0
      <(ID: 47) IDENTITY (int)  (ref count: 3)
         <(ID: 57) LOCAL (int)   5>
      <(ID: 48) LOCAL (int)   3>


   <(ID: 54) IDENTITY (int)  (ref count: 2)
      <(ID: 59) FETCH (int) 
         <(ID: 53) INDEX (int) 
            <(ID: 50) IDENTITY (reference)  (ref count: 2)
               <(ID: 58) LOCAL (reference)   4>
            <(ID: 52) BOUNDS_CHECK (int) 
               <(ID: 47) IDENTITY (int)  (ref count: 3)
               <(ID: 51) ARRAY_LENGTH (int) 
                  <(ID: 50) IDENTITY (reference)  (ref count: 2)

   <(ID: 56) BCOND (int) 
   target: (BlockID: 4 BlockPC: 59)
   condition: NE
   flags: 0
      <(ID: 54) IDENTITY (int)  (ref count: 2)
      <(ID: 55) LOCAL (int)   1>


   <(ID: 63) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 66) FETCH (32-bit field) 
         <(ID: 62) FIELD_REF (32-bit field) 
            <(ID: 60) LOCAL (reference)   0>
            <(ID: 61) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 65) RETURN_VALUE (int) 
      <(ID: 64) SUB (int) 
         <(ID: 47) IDENTITY (int)  (ref count: 3)
         <(ID: 63) IDENTITY (32-bit field)  (ref count: 2)


*************************************************
*
* (block ID:4 block PC:59 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1f
* Source: java.lang.String.lastIndexOf(II)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<59>  (0x6cd09b):    iinc 5 255
<62>  (0x6cd09e):    goto <36>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(5)	ID(71)
 
Incoming Locals(5): 
	local(5)	ID(71)
 	local(3)	ID(48)
 	local(4)	ID(50)
 	local(1)	ID(55)
 	local(0)	ID(60)
 
Assigned Locals(1): 
	ASSIGN(75): local(5)	ID(74)	rhsID(73)
 
Successor Blocks(1): 
	ID(5) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(5 3 4 1 0)

   <(ID: 70) MAP_PC (NONE)   59>

   <(ID: 71) IDENTITY (int)  (ref count: 2)
      <(ID: 76) LOCAL (int)   5>

   <(ID: 75) ASSIGN (int)  (assignIdx: 0)
      <(ID: 74) LOCAL (int)   5>
      <(ID: 73) SUB (int) 
         <(ID: 71) IDENTITY (int)  (ref count: 2)
         <(ID: 72) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 77) GOTO (NONE) 
   target: (BlockID: 5 BlockPC: 36)


*************************************************
*
* (block ID:3 block PC:65 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: java.lang.String.lastIndexOf(II)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<65>  (0x6cd0a1):    iconst_m1 
<66>  (0x6cd0a2):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 
*************************************************

Number and size of USED nodes in phi array: 0 0

   <(ID: 67) MAP_PC (NONE)   65>

   <(ID: 69) RETURN_VALUE (int) 
      <(ID: 68) CONST_JAVA_NUMERIC32 (int)  (-1)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 8
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 410
ESTIMATED BUFFER SIZE = 560
CODE BUFFER ADDRESS = 0x2bcb9554
PC MAP TABLE ADDRESS = 0x2bcb955c
GC CHECK PCS ADDRESS = 0x2bcb9578
CODE ENTRY ADDRESS = 0x2bcb95a8
          		@ Method prologue
0x2bcb95a8	0:	addiu	a1, JSP, 64	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcb95ac	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcb95b0	8:	sltu	t7, a1, CHUNKEND
0x2bcb95b4	12:	bne	t7, zero, PC=0x2bcb95a8	@ goto .skip
0x2bcb95b8	16:	nop
0x2bcb95bc	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcb95c0	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcb95b4) >>>>>>>>
0x2bcb95b4	12:	bne	t7, zero, PC=0x2bcb95c4	@ goto .skip
0x2bcb95b8	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcb95c4) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcb95c4	28:	sw	JFP, 12(JSP)	@ Store curr JFP into new frame
0x2bcb95c8	32:	addiu	JFP, JSP, 12	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcb95cc	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcb95d0	40:	addiu	a3, zero, 0
0x2bcb95d4	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcb95d8	48:	addiu	a3, zero, -1
0x2bcb95dc	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcb95e0	56:	move	a0, EE
0x2bcb95e4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcb95e8	64:	lui	t9, hi16(0x65)
0x2bcb95ec	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcb95f0	72:	jalr	t9
0x2bcb95f4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcb95f8	80:	addiu	JSP, JFP, 36	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcb95fc	84:	nop
0x2bcb9600	88:	nop
0x2bcb9604	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(2) reg(20)
0x2bcb9608	96:	lw	s4, -16(JFP)	@ Java local cell # 2
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
0x2bcb960c	100:	lw	ra, -24(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcb9610	104:	lw	s4, 12(ra)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcb9614	108:	lw	s7, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcb9618	112:	lw	s6, 16(ra)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcb961c	116:	sw	s4, -12(JFP)	@ Java local cell # 3
0x2bcb9620	120:	sw	s7, -8(JFP)	@ Java local cell # 4
			@ Processing DEFINE(0) reg(20): in correct register
			@ Loading DEFINE(0) register(20): in correct register
0x2bcb9624	124:	lw	s5, -16(JFP)	@ Java local cell # 2
          		@ deferred comparison: 
0x2bcb9628	128:	slt	t7, s5, s6
0x2bcb962c	132:	bne	t7, zero, PC=0x2bcb9628	@ branch to block L1
0x2bcb9630	136:	nop
			@ Processing DEFINE(0) reg(20): in correct register
0x2bcb9634	140:	addiu	s5, s6, -1
			@ Processing DEFINE(1) reg(21): in correct register
			@ Loading DEFINE(0) register(20): in correct register
			@ Loading DEFINE(1) register(21): in correct register
0x2bcb9638	144:	b	PC=0x2bcb9638	@ branch to block L2
0x2bcb963c	148:	nop
			@ Initial Temp REF set is 
	L1:	152:	@ entry point for branches
--->Fixed instruction at 132(0x2bcb962c) to reference 152
          		@ MAP_PC idepth=0 javaPc=32 compiledPc=152
			@ Processing DEFINE(0) reg(20): in correct register
0x2bcb9640	152:	lw	ra, -16(JFP)	@ Java local cell # 2
			@ Processing DEFINE(1) reg(21): in wrong register
			@ Loading DEFINE(0) register(20): in correct register
			@ Loading DEFINE(1) register(21): in wrong register
0x2bcb9644	156:	move	s5, ra
			@ Initial Temp REF set is 
	L2:	160:	@ entry point for branches
--->Fixed instruction at 144(0x2bcb9638) to reference 160
          		@ MAP_PC idepth=0 javaPc=33 compiledPc=160
0x2bcb9648	160:	addu	s4, s4, s5
0x2bcb964c	164:	sw	s4, -4(JFP)	@ Java local cell # 5
			@ Outgoing local(5) reg(20): in correct register
			@ Outgoing local(3) reg(21): not in register
0x2bcb9650	168:	lw	s5, -12(JFP)	@ Java local cell # 3
			@ Outgoing local(4) reg(22): not in register
0x2bcb9654	172:	lw	s6, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(1) reg(23): not in register
0x2bcb9658	176:	lw	s7, -20(JFP)	@ Java local cell # 1
0x2bcb965c	180:	b	PC=0x2bcb965c	@ fallthrough to block L5, which is backward branch target
0x2bcb9660	184:	nop
			@ Initial Temp REF set is 
	L5:	188:	@ Patchable GC Check point
0x2bcb9664	188:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcb9664	188:	nop
0x2bcb9668	192:	nop
          		@ Captured a stackmap here.
	L5:	196:	@ entry point when locals need to be loaded
			@ Preloading incoming local(5) reg(20)
0x2bcb966c	196:	lw	s4, -4(JFP)	@ Java local cell # 5
			@ Preloading incoming local(3) reg(21)
0x2bcb9670	200:	lw	s5, -12(JFP)	@ Java local cell # 3
			@ Preloading incoming local(4) reg(22)
0x2bcb9674	204:	lw	s6, -8(JFP)	@ Java local cell # 4
			@ Preloading incoming local(1) reg(23)
0x2bcb9678	208:	lw	s7, -20(JFP)	@ Java local cell # 1
	L5:	212:	@ entry point for branches
--->Fixed instruction at 180(0x2bcb965c) to reference 212
          		@ MAP_PC idepth=0 javaPc=36 compiledPc=196
          		@ deferred comparison: 
0x2bcb967c	212:	slt	t7, s4, s5
0x2bcb9680	216:	bne	t7, zero, PC=0x2bcb967c	@ branch to block L3
0x2bcb9684	220:	nop
0x2bcb9688	224:	lw	ra, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcb968c	228:	sltu	t7, s4, ra
0x2bcb9690	232:	bne	t7, zero, PC=0x2bcb968c	@ br .skip
0x2bcb9694	236:	nop
0x2bcb9698	240:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb969c	244:	nop
		.skip
--->Fixed instruction at 232(0x2bcb9690) to reference 248
          		@ Do load(arrayObj, index) (elem type=5,C):
0x2bcb96a0	248:	sll	t9, s4, 1
0x2bcb96a4	252:	addu	t9, s6, t9
0x2bcb96a8	256:	lhu	ra, 12(t9)
			@ Outgoing local(5) reg(20): in correct register
			@ Outgoing local(3) reg(21): in correct register
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(1) reg(23): in correct register
          		@ deferred comparison: 
0x2bcb96ac	260:	bne	ra, s7, PC=0x2bcb96ac	@ branch to block L4
0x2bcb96b0	264:	nop
0x2bcb96b4	268:	lw	ra, -24(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcb96b8	272:	lw	t9, 12(ra)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcb96bc	276:	subu	t8, s4, t9
0x2bcb96c0	280:	sw	t8, -24(JFP)	@ Java local cell # 0
0x2bcb96c4	284:	addiu	JSP, JFP, -20
0x2bcb96c8	288:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcb96cc	292:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcb96d0	296:	nop
			@ Initial Temp REF set is 
	L4:	300:	@ entry point for branches
			@ Binding Incoming Local(5) to reg(20)
			@ Binding Incoming Local(3) to reg(21)
			@ Binding Incoming Local(4) to reg(22)
			@ Binding Incoming Local(1) to reg(23)
--->Fixed instruction at 260(0x2bcb96ac) to reference 300
          		@ MAP_PC idepth=0 javaPc=59 compiledPc=300
0x2bcb96d4	300:	addiu	s4, s4, -1
0x2bcb96d8	304:	sw	s4, -4(JFP)	@ Java local cell # 5
			@ Outgoing local(5) reg(20): in correct register
			@ Outgoing local(3) reg(21): in correct register
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(1) reg(23): in correct register
          		@ Patchable backwards branch:
0x2bcb96dc	308:	b	PC=0x2bcb9664	@ branch to block L5
0x2bcb96e0	312:	nop
0x2bcb96dc	308:	b	PC=0x2bcb967c	@ branch to block L5, skip GC
0x2bcb96e0	312:	nop
			@ Initial Temp REF set is 
	L3:	316:	@ entry point for branches
--->Fixed instruction at 216(0x2bcb9680) to reference 316
          		@ MAP_PC idepth=0 javaPc=65 compiledPc=316
0x2bcb96e4	316:	addiu	s7, zero, -1	@ const -1
0x2bcb96e8	320:	sw	s7, -24(JFP)	@ Java local cell # 0
0x2bcb96ec	324:	addiu	JSP, JFP, -20
0x2bcb96f0	328:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcb96f4	332:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcb96f8	336:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcb95a8) >>>>>>>>
          		@ Capacity is 19 word(s)
0x2bcb95a8	0:	addiu	a1, JSP, 64
<<<<<<<<<Pop Code Buffer to PC = 340 (0x2bcb96fc) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcb95f8) >>>>>>>>
          		@ spillSize is 2 word(s), add to JFP+28
0x2bcb95f8	80:	addiu	JSP, JFP, 36
          		@ setup cp base register
0x2bcb95fc	84:	lui	CP, hi16(0x2bcb)
0x2bcb9600	88:	ori	CP, CP, lo16(0x2bcb96fc)
0x2bcb9604	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 340 (0x2bcb96fc) <<<<<<<<<
JS: COMPILED: size=440 startPC=0x2bcb95a8 java.lang.String.lastIndexOf(II)I
OSR: Intr2Comp: java.lang.String.lastIndexOf(II)I
JS: ATTEMPTING TO COMPILE java.lang.String.replace(CC)Ljava/lang/String;
JS: COMPILING java.lang.String.replace(CC)Ljava/lang/String;
CSE: Forgetting all CSE'd array read expressions
CSE: Local 8 changed: Forgetting CSE'd array expressions referring to it
orig bkID(1) Incoming Locals(1 0x0): 0- 
orig bkID(6) Incoming Locals(1 0x0): 3- 
orig bkID(4) Incoming Locals(6 0x0): 4- 3- 5- 6- 7- 1- 
o1   bkID(4) Incoming Locals(2 0x0): 4- 3- 
s1   bkID(4) Incoming Locals(2 0x0): 4- 3- 
o1   bkID(4) Incoming Locals(6 0x0): 4- 3- 5- 6- 7- 1- 
o1   bkID(4) Incoming Locals(6 0x0): 4- 3- 5- 6- 7- 1- 
o1   bkID(4) Incoming Locals(6 0x0): 4- 3- 5- 6- 7- 1- 
orig bkID(5) Incoming Locals(5 0x0): 8- 4- 7- 5- 6- 
o1   bkID(5) Incoming Locals(2 0x0): 8- 4- 
s1   bkID(5) Incoming Locals(2 0x0): 8- 4- 
s1   bkID(5) Incoming Locals(3 0x0): 8- 4- 3- 
s1   bkID(5) Incoming Locals(4 0x0): 8- 4- 3- 5- 
s1   bkID(5) Incoming Locals(5 0x0): 8- 4- 3- 5- 6- 
s1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
s1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
o1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
s1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
s1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
s1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
s1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
s1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
o1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
orig bkID(2) Incoming Locals(2 0x0): 4- 3- 
o1   bkID(2) Incoming Locals(2 0x0): 4- 3- 
s1   bkID(2) Incoming Locals(3 0x0): 4- 3- 0- 
o1   bkID(2) Incoming Locals(3 0x0): 4- 3- 0- 
s1   bkID(2) Incoming Locals(3 0x0): 4- 3- 0- 
s1   bkID(2) Incoming Locals(3 0x0): 4- 3- 0- 
s1   bkID(2) Incoming Locals(4 0x0): 4- 3- 0- 6- 
o1   bkID(2) Incoming Locals(4 0x0): 4- 3- 0- 6- 
orig bkID(3) Incoming Locals(5 0x0): 4- 3- 5- 6- 1- 
o1   bkID(3) Incoming Locals(2 0x0): 4- 3- 
s1   bkID(3) Incoming Locals(2 0x0): 4- 3- 
s1   bkID(3) Incoming Locals(3 0x0): 4- 3- 0- 
s1   bkID(3) Incoming Locals(4 0x0): 4- 3- 0- 6- 
o1   bkID(3) Incoming Locals(6 0x0): 4- 3- 0- 6- 5- 1- 
s1   bkID(3) Incoming Locals(6 0x0): 4- 3- 0- 6- 5- 1- 
s1   bkID(3) Incoming Locals(6 0x0): 4- 3- 0- 6- 5- 1- 
s1   bkID(3) Incoming Locals(6 0x0): 4- 3- 0- 6- 5- 1- 
s1   bkID(3) Incoming Locals(6 0x0): 4- 3- 0- 6- 5- 1- 
s1   bkID(3) Incoming Locals(6 0x0): 4- 3- 0- 6- 5- 1- 
o1   bkID(3) Incoming Locals(6 0x0): 4- 3- 0- 6- 5- 1- 
orig bkID(0) Incoming Locals(3 0x0): 1- 2- 0- 
o1   bkID(0) Incoming Locals(2 0x0): 1- 2- 
s1   bkID(0) Incoming Locals(3 0x0): 1- 2- 0- 
o1   bkID(0) Incoming Locals(3 0x0): 1- 2- 0- 
s1   bkID(0) Incoming Locals(3 0x0): 1- 2- 0- 
s1   bkID(0) Incoming Locals(3 0x0): 1- 2- 0- 
o1   bkID(0) Incoming Locals(3 0x0): 1- 2- 0- 
orig bkID(1) Incoming Locals(1 0x0): 0- 
orig bkID(6) Incoming Locals(1 0x0): 3- 
orig bkID(4) Incoming Locals(6 0x0): 4- 3- 5- 6- 7- 1- 
o1   bkID(4) Incoming Locals(2 0x0): 4- 3- 
s1   bkID(4) Incoming Locals(2 0x0): 4- 3- 
o1   bkID(4) Incoming Locals(6 0x0): 4- 3- 5- 6- 7- 1- 
o1   bkID(4) Incoming Locals(6 0x0): 4- 3- 5- 6- 7- 1- 
o1   bkID(4) Incoming Locals(6 0x0): 4- 3- 5- 6- 7- 1- 
orig bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
o1   bkID(5) Incoming Locals(2 0x0): 8- 4- 
s1   bkID(5) Incoming Locals(2 0x0): 8- 4- 
s1   bkID(5) Incoming Locals(3 0x0): 8- 4- 3- 
s1   bkID(5) Incoming Locals(4 0x0): 8- 4- 3- 5- 
s1   bkID(5) Incoming Locals(5 0x0): 8- 4- 3- 5- 6- 
s1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
s1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
o1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
s1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
s1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
s1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
s1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
s1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
o1   bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
orig bkID(2) Incoming Locals(4 0x0): 4- 3- 0- 6- 
o1   bkID(2) Incoming Locals(2 0x0): 4- 3- 
s1   bkID(2) Incoming Locals(3 0x0): 4- 3- 0- 
o1   bkID(2) Incoming Locals(3 0x0): 4- 3- 0- 
s1   bkID(2) Incoming Locals(3 0x0): 4- 3- 0- 
s1   bkID(2) Incoming Locals(3 0x0): 4- 3- 0- 
s1   bkID(2) Incoming Locals(4 0x0): 4- 3- 0- 6- 
o1   bkID(2) Incoming Locals(4 0x0): 4- 3- 0- 6- 
orig bkID(3) Incoming Locals(6 0x0): 4- 3- 0- 6- 5- 1- 
o1   bkID(3) Incoming Locals(2 0x0): 4- 3- 
s1   bkID(3) Incoming Locals(2 0x0): 4- 3- 
s1   bkID(3) Incoming Locals(3 0x0): 4- 3- 0- 
s1   bkID(3) Incoming Locals(4 0x0): 4- 3- 0- 6- 
o1   bkID(3) Incoming Locals(6 0x0): 4- 3- 0- 6- 5- 1- 
s1   bkID(3) Incoming Locals(6 0x0): 4- 3- 0- 6- 5- 1- 
s1   bkID(3) Incoming Locals(6 0x0): 4- 3- 0- 6- 5- 1- 
s1   bkID(3) Incoming Locals(6 0x0): 4- 3- 0- 6- 5- 1- 
s1   bkID(3) Incoming Locals(6 0x0): 4- 3- 0- 6- 5- 1- 
s1   bkID(3) Incoming Locals(6 0x0): 4- 3- 0- 6- 5- 1- 
o1   bkID(3) Incoming Locals(6 0x0): 4- 3- 0- 6- 5- 1- 
orig bkID(0) Incoming Locals(3 0x0): 1- 2- 0- 
o1   bkID(0) Incoming Locals(2 0x0): 1- 2- 
s1   bkID(0) Incoming Locals(3 0x0): 1- 2- 0- 
o1   bkID(0) Incoming Locals(3 0x0): 1- 2- 0- 
s1   bkID(0) Incoming Locals(3 0x0): 1- 2- 0- 
s1   bkID(0) Incoming Locals(3 0x0): 1- 2- 0- 
o1   bkID(0) Incoming Locals(3 0x0): 1- 2- 0- 
Pushing blockID(4)
bkID(4) local(0 #4)  not found in goalBk
bkID(4) local(1 #3)  not ordered
bestLocal(0) bestLocalScore(80)
-bk  bkID(4) Incoming Locals(6 0x0): 4- 3- 5- 6- 7- 1- 
+bk  bkID(4) Incoming Locals(6 0x1): 3+ 4- 5- 6- 7- 1- 
-gbk bkID(6) Incoming Locals(1 0x0): 3- 
+gbk bkID(6) Incoming Locals(1 0x1): 3+ 
bkID(4) local(1 #4)  not found in goalBk
bkID(4) local(2 #5)  not found in goalBk
bkID(4) local(3 #6)  not found in goalBk
bkID(4) local(4 #7)  not found in goalBk
bkID(4) local(5 #1)  not found in goalBk
bkID(4) local(0 #3)  not found in goalBk
bkID(4) local(1 #4)  not found in goalBk
bkID(4) local(2 #5)  not found in goalBk
bkID(4) local(3 #6)  not found in goalBk
bkID(4) local(4 #7)  not found in goalBk
bkID(4) local(5 #1)  not found in goalBk
bkID(4) local(0 #3)  not found in goalBk
bkID(4) local(1 #4)  not found in goalBk
bkID(4) local(2 #5)  not found in goalBk
bkID(4) local(3 #6)  not found in goalBk
bkID(4) local(4 #7)  not found in goalBk
bkID(4) local(5 #1)  not found in goalBk
bkID(4) local(0 #3)  ordered in goalBk(4)
-bk  bkID(4) Incoming Locals(6 0x1): 3+ 4- 5- 6- 7- 1- 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(4) Incoming Locals(6 0x1): 3+ 4- 5- 6- 7- 1- 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x1): 3+ 4- 5- 6- 7- 1- 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(4) Incoming Locals(6 0x1): 3+ 4- 5- 6- 7- 1- 
bkID(4) local(1 #4)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(4) Incoming Locals(6 0x1): 3+ 4- 5- 6- 7- 1- 
+bk  bkID(4) Incoming Locals(6 0x3): 3+ 4+ 5- 6- 7- 1- 
bkID(4) local(1 #4)  ordered in goalBk(4)
-bk  bkID(4) Incoming Locals(6 0x3): 3+ 4+ 5- 6- 7- 1- 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(4) Incoming Locals(6 0x3): 3+ 4+ 5- 6- 7- 1- 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3): 3+ 4+ 5- 6- 7- 1- 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3): 3+ 4+ 5- 6- 7- 1- 
bkID(4) local(2 #5)  not ordered
bestLocal(2) bestLocalScore(8)
-bk  bkID(4) Incoming Locals(6 0x3): 3+ 4+ 5- 6- 7- 1- 
+bk  bkID(4) Incoming Locals(6 0x7): 3+ 4+ 5+ 6- 7- 1- 
bkID(4) local(2 #5)  ordered in goalBk(4)
-bk  bkID(4) Incoming Locals(6 0x7): 3+ 4+ 5+ 6- 7- 1- 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(4) Incoming Locals(6 0x7): 3+ 4+ 5+ 6- 7- 1- 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x7): 3+ 4+ 5+ 6- 7- 1- 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(4) Incoming Locals(6 0x7): 3+ 4+ 5+ 6- 7- 1- 
bkID(4) local(3 #6)  not ordered
bestLocal(3) bestLocalScore(8)
-bk  bkID(4) Incoming Locals(6 0x7): 3+ 4+ 5+ 6- 7- 1- 
+bk  bkID(4) Incoming Locals(6 0xf): 3+ 4+ 5+ 6+ 7- 1- 
bkID(4) local(3 #6)  ordered in goalBk(4)
-bk  bkID(4) Incoming Locals(6 0xf): 3+ 4+ 5+ 6+ 7- 1- 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(4) Incoming Locals(6 0xf): 3+ 4+ 5+ 6+ 7- 1- 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0xf): 3+ 4+ 5+ 6+ 7- 1- 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0xf): 3+ 4+ 5+ 6+ 7- 1- 
bkID(4) local(4 #7)  not ordered
bestLocal(4) bestLocalScore(8)
-bk  bkID(4) Incoming Locals(6 0xf): 3+ 4+ 5+ 6+ 7- 1- 
+bk  bkID(4) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 1- 
bkID(4) local(4 #7)  ordered in goalBk(4)
-bk  bkID(4) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 1- 
dstBk(4) local(4 7) found in slot(4)
local(4 7) same slot
+bk  bkID(4) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 1- 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 1- 
dstBk(4) local(4 7) found in slot(4)
local(4 7) same slot
+gbk bkID(4) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 1- 
bkID(4) local(5 #1)  not ordered
bestLocal(5) bestLocalScore(8)
-bk  bkID(4) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 1- 
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(4) local(5 #1)  ordered in goalBk(4)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(5 1) found in slot(5)
local(5 1) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(5 1) found in slot(5)
local(5 1) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(4) local(0 #3)  ordered in goalBk(6)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(1 0x1): 3+ 
dstBk(6) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(6) Incoming Locals(1 0x1): 3+ 
bkID(4) local(1 #4)  not found in goalBk
bkID(4) local(2 #5)  not found in goalBk
bkID(4) local(3 #6)  not found in goalBk
bkID(4) local(4 #7)  not found in goalBk
bkID(4) local(5 #1)  not found in goalBk
bkID(4) local(0 #3)  not found in goalBk
bkID(4) local(1 #4)  not found in goalBk
bkID(4) local(2 #5)  not found in goalBk
bkID(4) local(3 #6)  not found in goalBk
bkID(4) local(4 #7)  not found in goalBk
bkID(4) local(5 #1)  not found in goalBk
bkID(4) local(0 #3)  not found in goalBk
bkID(4) local(1 #4)  not found in goalBk
bkID(4) local(2 #5)  not found in goalBk
bkID(4) local(3 #6)  not found in goalBk
bkID(4) local(4 #7)  not found in goalBk
bkID(4) local(5 #1)  not found in goalBk
Popping blockID(4)
bkID(5) local(0 #8)  not found in goalBk
bkID(5) local(1 #4)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x0): 8- 4- 3- 5- 6- 7- 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x2): 8- 4+ 3- 5- 6- 7- 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x2): 8- 4+ 3- 5- 6- 7- 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x2): 8- 4+ 3- 5- 6- 7- 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(2 #3)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x2): 8- 4+ 3- 5- 6- 7- 
dstBk(5) local(0 3) found in slot(2)
local(#0) swapped with local(#2)
+bk  bkID(5) Incoming Locals(6 0x3): 3+ 4+ 8- 5- 6- 7- 
bkID(5) local(3 #5)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3): 3+ 4+ 8- 5- 6- 7- 
dstBk(5) local(2 5) found in slot(3)
local(#2) swapped with local(#3)
+bk  bkID(5) Incoming Locals(6 0x7): 3+ 4+ 5+ 8- 6- 7- 
bkID(5) local(4 #6)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x7): 3+ 4+ 5+ 8- 6- 7- 
dstBk(5) local(3 6) found in slot(4)
local(#3) swapped with local(#4)
+bk  bkID(5) Incoming Locals(6 0xf): 3+ 4+ 5+ 6+ 8- 7- 
bkID(5) local(5 #7)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0xf): 3+ 4+ 5+ 6+ 8- 7- 
dstBk(5) local(4 7) found in slot(5)
local(#4) swapped with local(#5)
+bk  bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
bkID(5) local(0 #3)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
bkID(5) local(1 #4)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
bkID(5) local(2 #5)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
bkID(5) local(3 #6)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
bkID(5) local(4 #7)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
dstBk(5) local(4 7) found in slot(4)
local(4 7) same slot
+bk  bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
dstBk(5) local(4 7) found in slot(4)
local(4 7) same slot
+gbk bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
bkID(5) local(5 #8)  not ordered
bestLocal(5) bestLocalScore(8)
-bk  bkID(5) Incoming Locals(6 0x1f): 3+ 4+ 5+ 6+ 7+ 8- 
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(5 #8)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(5 8) found in slot(5)
local(5 8) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(5 8) found in slot(5)
local(5 8) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(0 #3)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(1 #4)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(2 #5)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(3 #6)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(4 #7)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 7) found in slot(4)
local(4 7) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 7) found in slot(4)
local(4 7) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(5 #8)  not found in goalBk
Pushing blockID(5)
Pushing blockID(4)
bkID(2) local(0 #4)  not found in goalBk
bkID(2) local(1 #3)  not found in goalBk
bkID(2) local(2 #0)  not ordered
bestLocal(0) bestLocalScore(32)
-bk  bkID(2) Incoming Locals(4 0x0): 4- 3- 0- 6- 
+bk  bkID(2) Incoming Locals(4 0x1): 0+ 3- 4- 6- 
-gbk bkID(1) Incoming Locals(1 0x0): 0- 
+gbk bkID(1) Incoming Locals(1 0x1): 0+ 
bkID(2) local(2 #4)  not found in goalBk
bkID(2) local(3 #6)  not found in goalBk
bkID(2) local(0 #0)  not found in goalBk
bkID(2) local(1 #3)  ordered in goalBk(5)
-bk  bkID(2) Incoming Locals(4 0x1): 0+ 3- 4- 6- 
dstBk(2) local(0 3) found in slot(1)
srcIdx local(0 3) already ordered in dst
+bk  bkID(2) Incoming Locals(4 0x1): 0+ 3- 4- 6- 
bkID(2) local(2 #4)  ordered in goalBk(5)
-bk  bkID(2) Incoming Locals(4 0x1): 0+ 3- 4- 6- 
dstBk(2) local(1 4) found in slot(2)
local(#1) swapped with local(#2)
+bk  bkID(2) Incoming Locals(4 0x3): 0+ 4+ 3- 6- 
bkID(2) local(3 #6)  ordered in goalBk(5)
-bk  bkID(2) Incoming Locals(4 0x3): 0+ 4+ 3- 6- 
dstBk(2) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(2) local(0 #0)  not found in goalBk
bkID(2) local(1 #4)  ordered in goalBk(4)
-bk  bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
dstBk(2) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(2) local(2 #3)  ordered in goalBk(4)
-bk  bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
dstBk(2) local(0 3) found in slot(2)
srcIdx local(0 3) already ordered in dst
+bk  bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
bkID(2) local(3 #6)  ordered in goalBk(4)
-bk  bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
dstBk(2) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(2) local(0 #0)  not found in goalBk
bkID(2) local(1 #4)  ordered in goalBk(5)
-bk  bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
dstBk(2) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(2) local(2 #3)  ordered in goalBk(5)
-bk  bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
dstBk(2) local(0 3) found in slot(2)
srcIdx local(0 3) already ordered in dst
+bk  bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
bkID(2) local(3 #6)  ordered in goalBk(5)
-bk  bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
dstBk(2) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(0 #3)  not found in goalBk
bkID(5) local(1 #4)  not found in goalBk
bkID(5) local(2 #5)  not found in goalBk
bkID(5) local(3 #6)  not found in goalBk
bkID(5) local(4 #7)  not found in goalBk
bkID(5) local(5 #8)  not found in goalBk
bkID(5) local(0 #3)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(1 #4)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(2 #5)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(3 #6)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(4 #7)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 7) found in slot(4)
local(4 7) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 7) found in slot(4)
local(4 7) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 7) found in slot(4)
local(4 7) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(5 #8)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(5 8) found in slot(5)
local(5 8) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(5 8) found in slot(5)
local(5 8) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(0 #3)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(1 #4)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(2 #5)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(3 #6)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(4 #7)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 7) found in slot(4)
local(4 7) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 7) found in slot(4)
local(4 7) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(5 #8)  not found in goalBk
bkID(4) local(0 #3)  not found in goalBk
bkID(4) local(1 #4)  not found in goalBk
bkID(4) local(2 #5)  not found in goalBk
bkID(4) local(3 #6)  not found in goalBk
bkID(4) local(4 #7)  not found in goalBk
bkID(4) local(5 #1)  not found in goalBk
bkID(4) local(0 #3)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(4) local(1 #4)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(4) local(2 #5)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(4) local(3 #6)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(4) local(4 #7)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 7) found in slot(4)
local(4 7) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 7) found in slot(4)
local(4 7) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(4) local(5 #1)  not found in goalBk
bkID(5) local(0 #3)  not found in goalBk
bkID(5) local(1 #4)  not found in goalBk
bkID(5) local(2 #5)  not found in goalBk
bkID(5) local(3 #6)  not found in goalBk
bkID(5) local(4 #7)  not found in goalBk
bkID(5) local(5 #8)  not found in goalBk
Pushing blockID(5)
bkID(3) local(0 #4)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(6 0x0): 4- 3- 0- 6- 5- 1- 
dstBk(3) local(1 4) found in slot(0)
local(#1) swapped with local(#0)
+bk  bkID(3) Incoming Locals(6 0x2): 3- 4+ 0- 6- 5- 1- 
bkID(3) local(1 #4)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(6 0x2): 3- 4+ 0- 6- 5- 1- 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(3) Incoming Locals(6 0x2): 3- 4+ 0- 6- 5- 1- 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x2): 3- 4+ 0- 6- 5- 1- 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x2): 3- 4+ 0- 6- 5- 1- 
-gbk bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
dstBk(2) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
bkID(3) local(2 #0)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(6 0x2): 3- 4+ 0- 6- 5- 1- 
dstBk(3) local(0 0) found in slot(2)
local(#0) swapped with local(#2)
+bk  bkID(3) Incoming Locals(6 0x3): 0+ 4+ 3- 6- 5- 1- 
bkID(3) local(3 #6)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(6 0x3): 0+ 4+ 3- 6- 5- 1- 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(3) Incoming Locals(6 0xb): 0+ 4+ 3- 6+ 5- 1- 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0xb): 0+ 4+ 3- 6+ 5- 1- 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0xb): 0+ 4+ 3- 6+ 5- 1- 
-gbk bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
dstBk(2) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
bkID(3) local(4 #5)  not found in goalBk
bkID(3) local(5 #1)  not found in goalBk
bkID(3) local(0 #0)  ordered in goalBk(3)
-bk  bkID(3) Incoming Locals(6 0xb): 0+ 4+ 3- 6+ 5- 1- 
dstBk(3) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(3) Incoming Locals(6 0xb): 0+ 4+ 3- 6+ 5- 1- 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0xb): 0+ 4+ 3- 6+ 5- 1- 
dstBk(3) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(3) Incoming Locals(6 0xb): 0+ 4+ 3- 6+ 5- 1- 
bkID(3) local(1 #4)  ordered in goalBk(3)
-bk  bkID(3) Incoming Locals(6 0xb): 0+ 4+ 3- 6+ 5- 1- 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(3) Incoming Locals(6 0xb): 0+ 4+ 3- 6+ 5- 1- 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0xb): 0+ 4+ 3- 6+ 5- 1- 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0xb): 0+ 4+ 3- 6+ 5- 1- 
bkID(3) local(2 #3)  not ordered
bestLocal(4) bestLocalScore(32)
-bk  bkID(3) Incoming Locals(6 0xb): 0+ 4+ 3- 6+ 5- 1- 
+bk  bkID(3) Incoming Locals(6 0x1b): 0+ 4+ 5- 6+ 3+ 1- 
-gbk bkID(2) Incoming Locals(4 0xb): 0+ 4+ 3- 6+ 
+gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
bkID(3) local(2 #5)  not ordered
bestLocal(2) bestLocalScore(80)
-bk  bkID(3) Incoming Locals(6 0x1b): 0+ 4+ 5- 6+ 3+ 1- 
+bk  bkID(3) Incoming Locals(6 0x1f): 0+ 4+ 5+ 6+ 3+ 1- 
bkID(3) local(2 #5)  ordered in goalBk(3)
-bk  bkID(3) Incoming Locals(6 0x1f): 0+ 4+ 5+ 6+ 3+ 1- 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(3) Incoming Locals(6 0x1f): 0+ 4+ 5+ 6+ 3+ 1- 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x1f): 0+ 4+ 5+ 6+ 3+ 1- 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(3) Incoming Locals(6 0x1f): 0+ 4+ 5+ 6+ 3+ 1- 
bkID(3) local(3 #6)  ordered in goalBk(3)
-bk  bkID(3) Incoming Locals(6 0x1f): 0+ 4+ 5+ 6+ 3+ 1- 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(3) Incoming Locals(6 0x1f): 0+ 4+ 5+ 6+ 3+ 1- 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x1f): 0+ 4+ 5+ 6+ 3+ 1- 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x1f): 0+ 4+ 5+ 6+ 3+ 1- 
bkID(3) local(4 #3)  ordered in goalBk(3)
-bk  bkID(3) Incoming Locals(6 0x1f): 0+ 4+ 5+ 6+ 3+ 1- 
dstBk(3) local(4 3) found in slot(4)
local(4 3) same slot
+bk  bkID(3) Incoming Locals(6 0x1f): 0+ 4+ 5+ 6+ 3+ 1- 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x1f): 0+ 4+ 5+ 6+ 3+ 1- 
dstBk(3) local(4 3) found in slot(4)
local(4 3) same slot
+gbk bkID(3) Incoming Locals(6 0x1f): 0+ 4+ 5+ 6+ 3+ 1- 
bkID(3) local(5 #1)  not ordered
bestLocal(5) bestLocalScore(32)
-bk  bkID(3) Incoming Locals(6 0x1f): 0+ 4+ 5+ 6+ 3+ 1- 
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(3) local(5 #1)  ordered in goalBk(3)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(5 1) found in slot(5)
local(5 1) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(5 1) found in slot(5)
local(5 1) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(5 1) found in slot(5)
local(5 1) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(3) local(0 #0)  not found in goalBk
bkID(3) local(1 #4)  ordered in goalBk(5)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(3) local(2 #5)  ordered in goalBk(5)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(3) local(3 #6)  ordered in goalBk(5)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(3) local(4 #3)  ordered in goalBk(5)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(3) local(5 #1)  not found in goalBk
bkID(3) local(0 #0)  not found in goalBk
bkID(3) local(1 #4)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(3) local(2 #5)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(3) local(3 #6)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(3) local(4 #3)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(3) local(5 #1)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(5 1) found in slot(5)
local(5 1) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(5 1) found in slot(5)
local(5 1) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(3) local(0 #0)  not found in goalBk
bkID(3) local(1 #4)  ordered in goalBk(5)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(3) local(2 #5)  ordered in goalBk(5)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(3) local(3 #6)  ordered in goalBk(5)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(3) local(4 #3)  ordered in goalBk(5)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(3) local(5 #1)  not found in goalBk
bkID(5) local(0 #3)  ordered in goalBk(2)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
dstBk(2) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
bkID(5) local(1 #4)  ordered in goalBk(2)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
dstBk(2) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
bkID(5) local(2 #5)  not found in goalBk
bkID(5) local(3 #6)  ordered in goalBk(2)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
dstBk(2) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
bkID(5) local(4 #7)  not found in goalBk
bkID(5) local(5 #8)  not found in goalBk
bkID(5) local(0 #3)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(1 #4)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(2 #5)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(3 #6)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(4 #7)  not found in goalBk
bkID(5) local(5 #8)  not found in goalBk
bkID(5) local(0 #3)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(1 #4)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(2 #5)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(3 #6)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(4 #7)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 7) found in slot(4)
local(4 7) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 7) found in slot(4)
local(4 7) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 7) found in slot(4)
local(4 7) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(5 #8)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(5 8) found in slot(5)
local(5 8) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(5 8) found in slot(5)
local(5 8) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(0 #3)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(1 #4)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(2 #5)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(3 #6)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(4 #7)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 7) found in slot(4)
local(4 7) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 7) found in slot(4)
local(4 7) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(5 #8)  not found in goalBk
bkID(4) local(0 #3)  ordered in goalBk(2)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
dstBk(2) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
bkID(4) local(1 #4)  ordered in goalBk(2)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
dstBk(2) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
bkID(4) local(2 #5)  not found in goalBk
bkID(4) local(3 #6)  ordered in goalBk(2)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
dstBk(2) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
bkID(4) local(4 #7)  not found in goalBk
bkID(4) local(5 #1)  not found in goalBk
bkID(4) local(0 #3)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(4) local(1 #4)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(4) local(2 #5)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(4) local(3 #6)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(4) local(4 #7)  not found in goalBk
bkID(4) local(5 #1)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(5 1) found in slot(5)
local(5 1) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(5 1) found in slot(5)
local(5 1) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(4) local(0 #3)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(4) local(1 #4)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(4) local(2 #5)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(4) local(3 #6)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(4) local(4 #7)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 7) found in slot(4)
local(4 7) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 7) found in slot(4)
local(4 7) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(4) local(5 #1)  not found in goalBk
bkID(5) local(0 #3)  ordered in goalBk(2)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
dstBk(2) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
bkID(5) local(1 #4)  ordered in goalBk(2)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
dstBk(2) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
bkID(5) local(2 #5)  not found in goalBk
bkID(5) local(3 #6)  ordered in goalBk(2)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
dstBk(2) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
bkID(5) local(4 #7)  not found in goalBk
bkID(5) local(5 #8)  not found in goalBk
bkID(5) local(0 #3)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(1 #4)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(2 #5)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(3 #6)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(4 #7)  not found in goalBk
bkID(5) local(5 #8)  not found in goalBk
bkID(3) local(0 #0)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
dstBk(2) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
bkID(3) local(1 #4)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
dstBk(2) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
bkID(3) local(2 #5)  not found in goalBk
bkID(3) local(3 #6)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
dstBk(2) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
bkID(3) local(4 #3)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(4 3) found in slot(4)
local(4 3) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
dstBk(2) local(4 3) found in slot(4)
local(4 3) same slot
+gbk bkID(2) Incoming Locals(5 0x1b): 0+ 4+ <null> 6+ 3+ 
bkID(3) local(5 #1)  not found in goalBk
Pushing blockID(3)
bkID(0) local(0 #1)  not found in goalBk
bkID(0) local(1 #2)  not found in goalBk
bkID(0) local(2 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(3 0x0): 1- 2- 0- 
dstBk(0) local(0 0) found in slot(2)
local(#0) swapped with local(#2)
+bk  bkID(0) Incoming Locals(3 0x1): 0+ 2- 1- 
bkID(0) local(0 #0)  ordered in goalBk(3)
-bk  bkID(0) Incoming Locals(3 0x1): 0+ 2- 1- 
dstBk(0) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(0) Incoming Locals(3 0x1): 0+ 2- 1- 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(0) local(1 #2)  not found in goalBk
bkID(0) local(2 #1)  ordered in goalBk(3)
-bk  bkID(0) Incoming Locals(3 0x1): 0+ 2- 1- 
dstBk(0) local(5 1) found in slot(2)
local(#5) swapped with local(#2)
+bk  bkID(0) Incoming Locals(6 0x21): 0+ 2- <null> <null> <null> 1+ 
bkID(0) local(5 #1)  ordered in goalBk(3)
-bk  bkID(0) Incoming Locals(6 0x21): 0+ 2- <null> <null> <null> 1+ 
dstBk(0) local(5 1) found in slot(5)
local(5 1) same slot
+bk  bkID(0) Incoming Locals(6 0x21): 0+ 2- <null> <null> <null> 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(5 1) found in slot(5)
local(5 1) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(5 1) found in slot(5)
local(5 1) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(5 1) found in slot(5)
local(5 1) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(0) local(0 #0)  ordered in goalBk(3)
-bk  bkID(0) Incoming Locals(6 0x21): 0+ 2- <null> <null> <null> 1+ 
dstBk(0) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(0) Incoming Locals(6 0x21): 0+ 2- <null> <null> <null> 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(0) local(1 #2)  not found in goalBk
bkID(0) local(5 #1)  ordered in goalBk(3)
-bk  bkID(0) Incoming Locals(6 0x21): 0+ 2- <null> <null> <null> 1+ 
dstBk(0) local(5 1) found in slot(5)
local(5 1) same slot
+bk  bkID(0) Incoming Locals(6 0x21): 0+ 2- <null> <null> <null> 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(5 1) found in slot(5)
local(5 1) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(5 1) found in slot(5)
local(5 1) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(0) local(0 #0)  not found in goalBk
bkID(0) local(1 #2)  not found in goalBk
bkID(0) local(5 #1)  not found in goalBk
bkID(0) local(0 #0)  not found in goalBk
bkID(0) local(1 #2)  not found in goalBk
bkID(0) local(5 #1)  ordered in goalBk(4)
-bk  bkID(0) Incoming Locals(6 0x21): 0+ 2- <null> <null> <null> 1+ 
dstBk(0) local(5 1) found in slot(5)
local(5 1) same slot
+bk  bkID(0) Incoming Locals(6 0x21): 0+ 2- <null> <null> <null> 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(5 1) found in slot(5)
local(5 1) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(0) local(0 #0)  not found in goalBk
bkID(0) local(1 #2)  not found in goalBk
bkID(0) local(5 #1)  not found in goalBk
bkID(5) local(0 #3)  not found in goalBk
bkID(5) local(1 #4)  not found in goalBk
bkID(5) local(2 #5)  not found in goalBk
bkID(5) local(3 #6)  not found in goalBk
bkID(5) local(4 #7)  not found in goalBk
bkID(5) local(5 #8)  not found in goalBk
bkID(5) local(0 #3)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(1 #4)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(2 #5)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(3 #6)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(4 #7)  not found in goalBk
bkID(5) local(5 #8)  not found in goalBk
bkID(5) local(0 #3)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(1 #4)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(2 #5)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(3 #6)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(4 #7)  not found in goalBk
bkID(5) local(5 #8)  not found in goalBk
bkID(5) local(0 #3)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(1 #4)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(2 #5)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(3 #6)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(4 #7)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 7) found in slot(4)
local(4 7) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 7) found in slot(4)
local(4 7) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 7) found in slot(4)
local(4 7) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(5 #8)  ordered in goalBk(5)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(5 8) found in slot(5)
local(5 8) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(5 8) found in slot(5)
local(5 8) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(5) local(0 #3)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(1 #4)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(2 #5)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(3 #6)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(4 #7)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 7) found in slot(4)
local(4 7) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 7) found in slot(4)
local(4 7) same slot
+gbk bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
bkID(5) local(5 #8)  not found in goalBk
bkID(4) local(0 #3)  not found in goalBk
bkID(4) local(1 #4)  not found in goalBk
bkID(4) local(2 #5)  not found in goalBk
bkID(4) local(3 #6)  not found in goalBk
bkID(4) local(4 #7)  not found in goalBk
bkID(4) local(5 #1)  not found in goalBk
bkID(4) local(0 #3)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(4) local(1 #4)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(4) local(2 #5)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(4) local(3 #6)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(4) local(4 #7)  not found in goalBk
bkID(4) local(5 #1)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(5 1) found in slot(5)
local(5 1) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(5 1) found in slot(5)
local(5 1) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(5 1) found in slot(5)
local(5 1) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(4) local(0 #3)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(4) local(1 #4)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(4) local(2 #5)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(4) local(3 #6)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(4) local(4 #7)  not found in goalBk
bkID(4) local(5 #1)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(5 1) found in slot(5)
local(5 1) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(5 1) found in slot(5)
local(5 1) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(4) local(0 #3)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(4) local(1 #4)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(4) local(2 #5)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(4) local(3 #6)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(4) local(4 #7)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
dstBk(4) local(4 7) found in slot(4)
local(4 7) same slot
+bk  bkID(4) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 7) found in slot(4)
local(4 7) same slot
+gbk bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
bkID(4) local(5 #1)  not found in goalBk
bkID(5) local(0 #3)  not found in goalBk
bkID(5) local(1 #4)  not found in goalBk
bkID(5) local(2 #5)  not found in goalBk
bkID(5) local(3 #6)  not found in goalBk
bkID(5) local(4 #7)  not found in goalBk
bkID(5) local(5 #8)  not found in goalBk
bkID(5) local(0 #3)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(1 #4)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(2 #5)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(3 #6)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(4 #7)  not found in goalBk
bkID(5) local(5 #8)  not found in goalBk
bkID(5) local(0 #3)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(4 3) found in slot(0)
dstIdx local(0 3) already ordered in dst
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 3) found in slot(4)
dstIdx local(4 3) already ordered in dst
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(1 #4)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(2 #5)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(3 #6)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
dstBk(5) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(5) Incoming Locals(6 0x3f): 3+ 4+ 5+ 6+ 7+ 8+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(5) local(4 #7)  not found in goalBk
bkID(5) local(5 #8)  not found in goalBk
bkID(3) local(0 #0)  ordered in goalBk(1)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
-gbk bkID(1) Incoming Locals(1 0x1): 0+ 
dstBk(1) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(1) Incoming Locals(1 0x1): 0+ 
bkID(3) local(1 #4)  not found in goalBk
bkID(3) local(2 #5)  not found in goalBk
bkID(3) local(3 #6)  not found in goalBk
bkID(3) local(4 #3)  not found in goalBk
bkID(3) local(5 #1)  not found in goalBk
bkID(3) local(0 #0)  ordered in goalBk(3)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(3) local(1 #4)  ordered in goalBk(3)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(1 4) found in slot(1)
local(1 4) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(3) local(2 #5)  ordered in goalBk(3)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(2 5) found in slot(2)
local(2 5) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(3) local(3 #6)  ordered in goalBk(3)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(3 6) found in slot(3)
local(3 6) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(3) local(4 #3)  ordered in goalBk(3)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(4 3) found in slot(4)
local(4 3) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(4 3) found in slot(4)
local(4 3) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(3) local(5 #1)  ordered in goalBk(3)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(5 1) found in slot(5)
local(5 1) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(5 1) found in slot(5)
local(5 1) same slot
+gbk bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
bkID(3) local(0 #0)  ordered in goalBk(1)
-bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
dstBk(3) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(3) Incoming Locals(6 0x3f): 0+ 4+ 5+ 6+ 3+ 1+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(1 0x1): 0+ 
dstBk(1) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(1) Incoming Locals(1 0x1): 0+ 
bkID(3) local(1 #4)  not found in goalBk
bkID(3) local(2 #5)  not found in goalBk
bkID(3) local(3 #6)  not found in goalBk
bkID(3) local(4 #3)  not found in goalBk
bkID(3) local(5 #1)  not found in goalBk
Pushing blockID(3)
pre  bkID(0) Incoming Locals(6 0x21): 0+ 2- <null> <null> <null> 1+ 
local(#1) swapped with local(#1)
post bkID(0) Incoming Locals(6 0x23): 0+ 2+ <null> <null> <null> 1+ 

#################################################

The maximum node counts per root node are 6
IR block list contains 9 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 9 root nodes: in block 
* flags: 0x41
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x23
* Source: java.lang.String.replace(CC)Ljava/lang/String;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<0>  (0x6cd4d4):    iload_1 
<1>  (0x6cd4d5):    iload_2 
<2>  (0x6cd4d6):    if_icmpeq <137>
<5>  (0x6cd4d9):    aload_0 
<6>  (0x6cd4da):    getfield_quick #4
<9>  (0x6cd4dd):    istore_3 
<10>  (0x6cd4de):    iconst_m1 
<11>  (0x6cd4df):    istore 4
<13>  (0x6cd4e1):    aload_0 
<14>  (0x6cd4e2):    agetfield_quick #2
<17>  (0x6cd4e5):    astore 5
<19>  (0x6cd4e7):    aload_0 
<20>  (0x6cd4e8):    getfield_quick #3
<23>  (0x6cd4eb):    istore 6
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(3): 
	local(1)	ID(2)
 	local(2)	ID(3)
 	local(0)	ID(5)
 
Incoming Locals(6): 
	local(0)	ID(29)
 	local(2)	ID(3)
 	<null>
	<null>
	<null>
	local(1)	ID(2)
 
Assigned Locals(4): 
	ASSIGN(18): local(3)	ID(17)	rhsID(8)
 	ASSIGN(21): local(4)	ID(20)	rhsID(9)
 	ASSIGN(23): local(5)	ID(22)	rhsID(12)
 	ASSIGN(26): local(6)	ID(25)	rhsID(16)
 
Successor Blocks(2): 
	ID(1) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(0 <null>)
	ID(3) LocalOrder(3) AssignOrder(4) RefsOK(1) Locals(0 4 5 6 3 1)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 4) BCOND (int) 
   target: (BlockID: 1 BlockPC: 137)
   condition: EQ
   flags: 0
      <(ID: 2) LOCAL (int)   1>
      <(ID: 3) LOCAL (int)   2>


   <(ID: 8) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 19) FETCH (32-bit field) 
         <(ID: 7) FIELD_REF (32-bit field) 
            <(ID: 5) IDENTITY (reference)  (ref count: 3)
               <(ID: 13) LOCAL (reference)   0>
            <(ID: 6) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 12) IDENTITY (reference)  (ref count: 2)
      <(ID: 24) FETCH (reference) 
         <(ID: 11) FIELD_REF (reference) 
            <(ID: 5) IDENTITY (reference)  (ref count: 3)
            <(ID: 10) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 16) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 27) FETCH (32-bit field) 
         <(ID: 15) FIELD_REF (32-bit field) 
            <(ID: 5) IDENTITY (reference)  (ref count: 3)
            <(ID: 14) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 18) ASSIGN (32-bit field)  (assignIdx: 0)
      <(ID: 17) LOCAL (32-bit field)   3>
      <(ID: 8) IDENTITY (32-bit field)  (ref count: 2)

   <(ID: 21) ASSIGN (int)  (assignIdx: 1)
      <(ID: 20) LOCAL (int)   4>
      <(ID: 9) CONST_JAVA_NUMERIC32 (int)  (-1)

   <(ID: 23) ASSIGN (reference)  (assignIdx: 2)
      <(ID: 22) LOCAL (reference)   5>
      <(ID: 12) IDENTITY (reference)  (ref count: 2)

   <(ID: 26) ASSIGN (32-bit field)  (assignIdx: 3)
      <(ID: 25) LOCAL (32-bit field)   6>
      <(ID: 16) IDENTITY (32-bit field)  (ref count: 2)


*************************************************
*
* (block ID:3 block PC:25 )
* IR root list contains 6 root nodes: in block 
* flags: 0x361
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3f
* Source: java.lang.String.replace(CC)Ljava/lang/String;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<25>  (0x6cd4ed):    iinc 4 1
<28>  (0x6cd4f0):    iload 4
<30>  (0x6cd4f2):    iload_3 
<31>  (0x6cd4f3):    if_icmpge <46>
<34>  (0x6cd4f6):    aload 5
<36>  (0x6cd4f8):    iload 6
<38>  (0x6cd4fa):    iload 4
<40>  (0x6cd4fc):    iadd 
<41>  (0x6cd4fd):    caload 
<42>  (0x6cd4fe):    iload_1 
<43>  (0x6cd4ff):    if_icmpne <25>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 5 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(5): 
	local(4)	ID(32)
 	local(3)	ID(35)
 	local(5)	ID(41)
 	local(6)	ID(42)
 	local(1)	ID(48)
 
Incoming Locals(6): 
	local(0)	ID(29)
 	local(4)	ID(32)
 	local(5)	ID(41)
 	local(6)	ID(94)
 	local(3)	ID(35)
 	local(1)	ID(48)
 
Assigned Locals(1): 
	ASSIGN(38): local(4)	ID(37)	rhsID(34)
 
Successor Blocks(2): 
	ID(2) LocalOrder(2) AssignOrder(1) RefsOK(1) Locals(0 4 <null> 6 3)
	ID(3) LocalOrder(5) AssignOrder(1) RefsOK(1) Locals(0 4 5 6 3 1)

   <(ID: 31) MAP_PC (NONE)   25>

   <(ID: 32) IDENTITY (int)  (ref count: 2)
      <(ID: 39) LOCAL (int)   4>

   <(ID: 38) ASSIGN (int)  (assignIdx: 0)
      <(ID: 37) LOCAL (int)   4>
      <(ID: 34) IDENTITY (int)  (ref count: 3)
         <(ID: 40) ADD (int) 
            <(ID: 32) IDENTITY (int)  (ref count: 2)
            <(ID: 33) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 36) BCOND (int) 
   target: (BlockID: 2 BlockPC: 46)
   condition: GE
   flags: 0
      <(ID: 34) IDENTITY (int)  (ref count: 3)
      <(ID: 35) LOCAL (int)   3>


   <(ID: 47) IDENTITY (int)  (ref count: 2)
      <(ID: 51) FETCH (int) 
         <(ID: 46) INDEX (int) 
            <(ID: 41) IDENTITY (reference)  (ref count: 2)
               <(ID: 50) LOCAL (reference)   5>
            <(ID: 45) BOUNDS_CHECK (int) 
               <(ID: 43) ADD (int) 
                  <(ID: 42) LOCAL (int)   6>
                  <(ID: 34) IDENTITY (int)  (ref count: 3)
               <(ID: 44) ARRAY_LENGTH (int) 
                  <(ID: 41) IDENTITY (reference)  (ref count: 2)

   <(ID: 49) BCOND (int) 
   target: (BlockID: 3 BlockPC: 25)
   condition: NE
   flags: 0
      <(ID: 47) IDENTITY (int)  (ref count: 2)
      <(ID: 48) LOCAL (int)   1>



*************************************************
*
* (block ID:2 block PC:46 )
* IR root list contains 5 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1b
* Source: java.lang.String.replace(CC)Ljava/lang/String;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<46>  (0x6cd502):    iload 4
<48>  (0x6cd504):    iload_3 
<49>  (0x6cd505):    if_icmpge <137>
<52>  (0x6cd508):    iload_3 
<53>  (0x6cd509):    newarray char
<55>  (0x6cd50b):    astore 7
<57>  (0x6cd50d):    iconst_0 
<58>  (0x6cd50e):    istore 8
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 5 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(4)	ID(53)
 	local(3)	ID(54)
 
Incoming Locals(5): 
	local(0)	ID(29)
 	local(4)	ID(53)
 	<null>
	local(6)	ID(94)
 	local(3)	ID(54)
 
Assigned Locals(2): 
	ASSIGN(60): local(7)	ID(59)	rhsID(56)
 	ASSIGN(63): local(8)	ID(62)	rhsID(58)
 
Successor Blocks(2): 
	ID(1) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(0 <null>)
	ID(5) LocalOrder(2) AssignOrder(2) RefsOK(0) Locals(3 4 5 6 7 8)

   <(ID: 52) MAP_PC (NONE)   46>

   <(ID: 55) BCOND (int) 
   target: (BlockID: 1 BlockPC: 137)
   condition: GE
   flags: 0
      <(ID: 53) LOCAL (int)   4>
      <(ID: 54) IDENTITY (int)  (ref count: 2)
         <(ID: 57) LOCAL (int)   3>


   <(ID: 56) IDENTITY (reference)  (ref count: 2)
      <(ID: 61) NEW_ARRAY_CHAR (reference) 
         <(ID: 54) IDENTITY (int)  (ref count: 2)

   <(ID: 60) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 59) LOCAL (reference)   7>
      <(ID: 56) IDENTITY (reference)  (ref count: 2)

   <(ID: 63) ASSIGN (int)  (assignIdx: 1)
      <(ID: 62) LOCAL (int)   8>
      <(ID: 58) CONST_JAVA_NUMERIC32 (int)  (0)


*************************************************
*
* (block ID:5 block PC:60 )
* IR root list contains 6 root nodes: in block 
* flags: 0x321
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3f
* Source: java.lang.String.replace(CC)Ljava/lang/String;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<60>  (0x6cd510):    iload 8
<62>  (0x6cd512):    iload 4
<64>  (0x6cd514):    if_icmpge <86>
<67>  (0x6cd517):    aload 7
<69>  (0x6cd519):    iload 8
<71>  (0x6cd51b):    aload 5
<73>  (0x6cd51d):    iload 6
<75>  (0x6cd51f):    iload 8
<77>  (0x6cd521):    iadd 
<78>  (0x6cd522):    caload 
<79>  (0x6cd523):    castore 
<80>  (0x6cd524):    iinc 8 1
<83>  (0x6cd527):    goto <60>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 5 7 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(5): 
	local(8)	ID(65)
 	local(4)	ID(66)
 	local(7)	ID(68)
 	local(5)	ID(69)
 	local(6)	ID(70)
 
Incoming Locals(6): 
	local(3)	ID(91)
 	local(4)	ID(66)
 	local(5)	ID(93)
 	local(6)	ID(94)
 	local(7)	ID(102)
 	local(8)	ID(65)
 
Assigned Locals(1): 
	ASSIGN(87): local(8)	ID(86)	rhsID(85)
 
Successor Blocks(2): 
	ID(4) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(3 4 5 6 7 1)
	ID(5) LocalOrder(5) AssignOrder(1) RefsOK(1) Locals(3 4 5 6 7 8)

   <(ID: 64) MAP_PC (NONE)   60>

   <(ID: 67) BCOND (int) 
   target: (BlockID: 4 BlockPC: 86)
   condition: GE
   flags: 0
      <(ID: 65) IDENTITY (int)  (ref count: 4)
         <(ID: 76) LOCAL (int)   8>
      <(ID: 66) LOCAL (int)   4>


   <(ID: 75) IDENTITY (int)  (ref count: 2)
      <(ID: 83) FETCH (int) 
         <(ID: 74) INDEX (int) 
            <(ID: 69) IDENTITY (reference)  (ref count: 2)
               <(ID: 77) LOCAL (reference)   5>
            <(ID: 73) BOUNDS_CHECK (int) 
               <(ID: 71) ADD (int) 
                  <(ID: 70) LOCAL (int)   6>
                  <(ID: 65) IDENTITY (int)  (ref count: 4)
               <(ID: 72) ARRAY_LENGTH (int) 
                  <(ID: 69) IDENTITY (reference)  (ref count: 2)

   <(ID: 81) ASSIGN (char) 
      <(ID: 80) INDEX (int) 
         <(ID: 68) IDENTITY (reference)  (ref count: 2)
            <(ID: 82) LOCAL (reference)   7>
         <(ID: 79) BOUNDS_CHECK (int) 
            <(ID: 65) IDENTITY (int)  (ref count: 4)
            <(ID: 78) ARRAY_LENGTH (int) 
               <(ID: 68) IDENTITY (reference)  (ref count: 2)
      <(ID: 75) IDENTITY (int)  (ref count: 2)

   <(ID: 87) ASSIGN (int)  (assignIdx: 0)
      <(ID: 86) LOCAL (int)   8>
      <(ID: 85) ADD (int) 
         <(ID: 65) IDENTITY (int)  (ref count: 4)
         <(ID: 84) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 88) GOTO (NONE) 
   target: (BlockID: 5 BlockPC: 60)


*************************************************
*
* (block ID:4 block PC:86 )
* IR root list contains 16 root nodes: in block 
* flags: 0x321
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3f
* Source: java.lang.String.replace(CC)Ljava/lang/String;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<86>  (0x6cd52a):    iload 4
<88>  (0x6cd52c):    iload_3 
<89>  (0x6cd52d):    if_icmpge <125>
<92>  (0x6cd530):    aload 5
<94>  (0x6cd532):    iload 6
<96>  (0x6cd534):    iload 4
<98>  (0x6cd536):    iadd 
<99>  (0x6cd537):    caload 
<100>  (0x6cd538):    istore 8
<102>  (0x6cd53a):    aload 7
<104>  (0x6cd53c):    iload 4
<106>  (0x6cd53e):    iload 8
<108>  (0x6cd540):    iload_1 
<109>  (0x6cd541):    if_icmpne <116>
<112>  (0x6cd544):    iload_2 
<113>  (0x6cd545):    goto <118>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 5 7 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(6): 
	local(4)	ID(90)
 	local(3)	ID(91)
 	local(5)	ID(93)
 	local(6)	ID(94)
 	local(7)	ID(102)
 	local(1)	ID(103)
 
Incoming Locals(6): 
	local(3)	ID(91)
 	local(4)	ID(90)
 	local(5)	ID(93)
 	local(6)	ID(94)
 	local(7)	ID(102)
 	local(1)	ID(103)
 
Assigned Locals(1): 
	ASSIGN(106): local(8)	ID(105)	rhsID(99)
 
Successor Blocks(3): 
	ID(6) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(3)
	ID(7) LocalOrder(6) AssignOrder(1) RefsOK(1) Locals()
	ID(8) LocalOrder(6) AssignOrder(1) RefsOK(1) Locals()

   <(ID: 89) MAP_PC (NONE)   86>

   <(ID: 92) BCOND (int) 
   target: (BlockID: 6 BlockPC: 125)
   condition: GE
   flags: 0
      <(ID: 90) IDENTITY (int)  (ref count: 4)
         <(ID: 100) LOCAL (int)   4>
      <(ID: 91) LOCAL (int)   3>


   <(ID: 99) IDENTITY (int)  (ref count: 3)
      <(ID: 107) FETCH (int) 
         <(ID: 98) INDEX (int) 
            <(ID: 93) IDENTITY (reference)  (ref count: 2)
               <(ID: 101) LOCAL (reference)   5>
            <(ID: 97) BOUNDS_CHECK (int) 
               <(ID: 95) ADD (int) 
                  <(ID: 94) LOCAL (int)   6>
                  <(ID: 90) IDENTITY (int)  (ref count: 4)
               <(ID: 96) ARRAY_LENGTH (int) 
                  <(ID: 93) IDENTITY (reference)  (ref count: 2)

   <(ID: 106) ASSIGN (int)  (assignIdx: 0)
      <(ID: 105) LOCAL (int)   8>
      <(ID: 99) IDENTITY (int)  (ref count: 3)

   <(ID: 109) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 102) IDENTITY (reference)  (ref count: 2)
         <(ID: 118) LOCAL (reference)   7>


   <(ID: 111) DEFINE (int) 
   spillLocation: 1
   registerSpillOk: 1
   operand:       <(ID: 90) IDENTITY (int)  (ref count: 4)


   <(ID: 103) IDENTITY (int)  (ref count: 2)
      <(ID: 113) LOCAL (int)   1>

   <(ID: 112) LOAD_PHIS (NONE) 

   <(ID: 104) BCOND (int) 
   target: (BlockID: 7 BlockPC: 116)
   condition: NE
   flags: 0
      <(ID: 99) IDENTITY (int)  (ref count: 3)
      <(ID: 103) IDENTITY (int)  (ref count: 2)


   <(ID: 114) RELEASE_PHIS (NONE) 

   <(ID: 117) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 102) IDENTITY (reference)  (ref count: 2)


   <(ID: 120) DEFINE (int) 
   spillLocation: 1
   registerSpillOk: 1
   operand:       <(ID: 90) IDENTITY (int)  (ref count: 4)


   <(ID: 122) DEFINE (int) 
   spillLocation: 2
   registerSpillOk: 1
   operand:       <(ID: 115) LOCAL (int)   2>


   <(ID: 123) LOAD_PHIS (NONE) 

   <(ID: 124) RELEASE_PHIS (NONE) 

   <(ID: 125) GOTO (NONE) 
   target: (BlockID: 8 BlockPC: 118)


*************************************************
*
* (block ID:7 block PC:116 )
* IR root list contains 6 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.lang.String.replace(CC)Ljava/lang/String;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<116>  (0x6cd548):    iload 8
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 5 7 
*************************************************

Number and size of USED nodes in phi array: 2 2

Successor Blocks(1): 
	ID(8) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 141) MAP_PC (NONE)   116>

   <(ID: 143) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 108) USED (reference) 
      spillLocation: 0
      registerSpillOk: 1



   <(ID: 144) DEFINE (int) 
   spillLocation: 1
   registerSpillOk: 1
   operand:       <(ID: 110) USED (int) 
      spillLocation: 1
      registerSpillOk: 1



   <(ID: 145) DEFINE (int) 
   spillLocation: 2
   registerSpillOk: 1
   operand:       <(ID: 142) LOCAL (int)   8>


   <(ID: 146) LOAD_PHIS (NONE) 

   <(ID: 147) RELEASE_PHIS (NONE) 


*************************************************
*
* (block ID:8 block PC:118 )
* IR root list contains 5 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.lang.String.replace(CC)Ljava/lang/String;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<118>  (0x6cd54a):    castore 
<119>  (0x6cd54b):    iinc 4 1
<122>  (0x6cd54e):    goto <86>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 5 7 
*************************************************

Number and size of USED nodes in phi array: 3 3

Assigned Locals(1): 
	ASSIGN(158): local(4)	ID(157)	rhsID(156)
 
Successor Blocks(1): 
	ID(4) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(3 4 5 6 7 1)

   <(ID: 148) MAP_PC (NONE)   118>

   <(ID: 152) ASSIGN (char) 
      <(ID: 151) INDEX (int) 
         <(ID: 116) IDENTITY (reference)  (ref count: 2)
            <(ID: 153) USED (reference) 
            spillLocation: 0
            registerSpillOk: 1

         <(ID: 150) BOUNDS_CHECK (int) 
            <(ID: 119) USED (int) 
            spillLocation: 1
            registerSpillOk: 1

            <(ID: 149) ARRAY_LENGTH (int) 
               <(ID: 116) IDENTITY (reference)  (ref count: 2)
      <(ID: 121) USED (int) 
      spillLocation: 2
      registerSpillOk: 1


   <(ID: 154) IDENTITY (int)  (ref count: 2)
      <(ID: 159) LOCAL (int)   4>

   <(ID: 158) ASSIGN (int)  (assignIdx: 0)
      <(ID: 157) LOCAL (int)   4>
      <(ID: 156) ADD (int) 
         <(ID: 154) IDENTITY (int)  (ref count: 2)
         <(ID: 155) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 160) GOTO (NONE) 
   target: (BlockID: 4 BlockPC: 86)


*************************************************
*
* (block ID:6 block PC:125 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1
* Source: java.lang.String.replace(CC)Ljava/lang/String;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<125>  (0x6cd551):    new_checkinit_quick #4904 <java.lang.String>
<128>  (0x6cd554):    dup 
<129>  (0x6cd555):    iconst_0 
<130>  (0x6cd556):    iload_3 
<131>  (0x6cd557):    aload 7
<133>  (0x6cd559):    invokenonvirtual_quick #9057 <java.lang.String.<init>(II[C)V>
<136>  (0x6cd55c):    areturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 5 7 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(3)	ID(130)
 
Incoming Locals(1): 
	local(3)	ID(130)
 
   <(ID: 126) MAP_PC (NONE)   125>

   <(ID: 128) IDENTITY (reference)  (ref count: 3)
      <(ID: 139) NEW_OBJECT (reference) 
         <(ID: 127) CONST_CB (address field)  (java.lang.String)

   <(ID: 138) INVOKE (v) 
      <(ID: 137) PARAMETER (reference) 
         <(ID: 128) IDENTITY (reference)  (ref count: 3)
         <(ID: 136) PARAMETER (int) 
            <(ID: 129) CONST_JAVA_NUMERIC32 (int)  (0)
            <(ID: 135) PARAMETER (int) 
               <(ID: 130) LOCAL (int)   3>
               <(ID: 134) PARAMETER (reference) 
                  <(ID: 131) LOCAL (reference)   7>
                  <(ID: 133) NULL_PARAMETER (NONE) 
      <(ID: 132) CONST_MB (address field)  (java.lang.String.<init>(II[C)V)

   <(ID: 140) RETURN_VALUE (reference) 
      <(ID: 128) IDENTITY (reference)  (ref count: 3)


*************************************************
*
* (block ID:1 block PC:137 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: java.lang.String.replace(CC)Ljava/lang/String;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<137>  (0x6cd55d):    aload_0 
<138>  (0x6cd55e):    areturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(29)
 
Incoming Locals(2): 
	local(0)	ID(29)
 	<null>

   <(ID: 28) MAP_PC (NONE)   137>

   <(ID: 30) RETURN_VALUE (reference) 
      <(ID: 29) LOCAL (reference)   0>


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 40
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 842
ESTIMATED BUFFER SIZE = 1068
CODE BUFFER ADDRESS = 0x2bcb970c
PC MAP TABLE ADDRESS = 0x2bcb9714
GC CHECK PCS ADDRESS = 0x2bcb973c
CODE ENTRY ADDRESS = 0x2bcb9788
          		@ Method prologue
0x2bcb9788	0:	addiu	a1, JSP, 88	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcb978c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcb9790	8:	sltu	t7, a1, CHUNKEND
0x2bcb9794	12:	bne	t7, zero, PC=0x2bcb9788	@ goto .skip
0x2bcb9798	16:	nop
0x2bcb979c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcb97a0	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcb9794) >>>>>>>>
0x2bcb9794	12:	bne	t7, zero, PC=0x2bcb97a4	@ goto .skip
0x2bcb9798	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcb97a4) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcb97a4	28:	sw	JFP, 24(JSP)	@ Store curr JFP into new frame
0x2bcb97a8	32:	addiu	JFP, JSP, 24	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcb97ac	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcb97b0	40:	addiu	a3, zero, 0
0x2bcb97b4	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcb97b8	48:	addiu	a3, zero, -1
0x2bcb97bc	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcb97c0	56:	move	a0, EE
0x2bcb97c4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcb97c8	64:	lui	t9, hi16(0x65)
0x2bcb97cc	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcb97d0	72:	jalr	t9
0x2bcb97d4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcb97d8	80:	addiu	JSP, JFP, 40	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcb97dc	84:	nop
0x2bcb97e0	88:	nop
0x2bcb97e4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcb97e8	96:	lw	s4, -36(JFP)	@ Java local cell # 0
			@ Preloading incoming local(2) reg(21)
0x2bcb97ec	100:	lw	s5, -28(JFP)	@ Java local cell # 2
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
0x2bcb97f0	104:	lw	ra, -32(JFP)	@ Java local cell # 1
			@ Outgoing local(0) reg(20): in correct register
          		@ deferred comparison: 
0x2bcb97f4	108:	beq	ra, s5, PC=0x2bcb97f4	@ branch to block L1
0x2bcb97f8	112:	nop
          		@ Do getfield:
0x2bcb97fc	116:	lw	s7, 16(s4)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcb9800	120:	lw	s6, 8(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcb9804	124:	sw	s7, 40(JFP)	@ value{I|F} spill Java temp cell # 3
0x2bcb9808	128:	lw	s7, 12(s4)	@ = getfield(obj, fieldIdx);
0x2bcb980c	132:	lw	t9, 40(JFP)	@ Java temp cell # 3
0x2bcb9810	136:	sw	t9, -24(JFP)	@ Java local cell # 3
0x2bcb9814	140:	addiu	s5, zero, -1	@ const -1
0x2bcb9818	144:	sw	s5, -20(JFP)	@ Java local cell # 4
0x2bcb981c	148:	sw	s6, -16(JFP)	@ Java local cell # 5
0x2bcb9820	152:	sw	s7, -12(JFP)	@ Java local cell # 6
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(4) reg(21): in correct register
			@ Outgoing local(5) reg(22): in correct register
			@ Outgoing local(6) reg(23): in correct register
0x2bcb9824	156:	b	PC=0x2bcb9824	@ fallthrough to block L3, which is backward branch target
0x2bcb9828	160:	nop
			@ Initial Temp REF set is 
	L3:	164:	@ Patchable GC Check point
0x2bcb982c	164:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcb982c	164:	nop
0x2bcb9830	168:	nop
          		@ Captured a stackmap here.
	L3:	172:	@ entry point when locals need to be loaded
			@ Preloading incoming local(0) reg(20)
0x2bcb9834	172:	lw	s4, -36(JFP)	@ Java local cell # 0
			@ Preloading incoming local(4) reg(21)
0x2bcb9838	176:	lw	s5, -20(JFP)	@ Java local cell # 4
			@ Preloading incoming local(5) reg(22)
0x2bcb983c	180:	lw	s6, -16(JFP)	@ Java local cell # 5
			@ Preloading incoming local(6) reg(23)
0x2bcb9840	184:	lw	s7, -12(JFP)	@ Java local cell # 6
	L3:	188:	@ entry point for branches
--->Fixed instruction at 156(0x2bcb9824) to reference 188
          		@ MAP_PC idepth=0 javaPc=25 compiledPc=172
0x2bcb9844	188:	addiu	s5, s5, 1
0x2bcb9848	192:	sw	s5, -20(JFP)	@ Java local cell # 4
0x2bcb984c	196:	lw	ra, -24(JFP)	@ Java local cell # 3
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(4) reg(21): in correct register
			@ Outgoing local(6) reg(23): in correct register
          		@ deferred comparison: 
0x2bcb9850	200:	slt	t7, s5, ra
0x2bcb9854	204:	beq	t7, zero, PC=0x2bcb9850	@ branch to block L2
0x2bcb9858	208:	nop
0x2bcb985c	212:	addu	t9, s7, s5
0x2bcb9860	216:	lw	t8, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcb9864	220:	sltu	t7, t9, t8
0x2bcb9868	224:	bne	t7, zero, PC=0x2bcb9864	@ br .skip
0x2bcb986c	228:	nop
0x2bcb9870	232:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb9874	236:	nop
		.skip
--->Fixed instruction at 224(0x2bcb9868) to reference 240
          		@ Do load(arrayObj, index) (elem type=5,C):
0x2bcb9878	240:	sll	t6, t9, 1
0x2bcb987c	244:	addu	t6, s6, t6
0x2bcb9880	248:	lhu	t8, 12(t6)
0x2bcb9884	252:	lw	t9, -32(JFP)	@ Java local cell # 1
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(4) reg(21): in correct register
			@ Outgoing local(5) reg(22): in correct register
			@ Outgoing local(6) reg(23): in correct register
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcb9888	256:	bne	t8, t9, PC=0x2bcb982c	@ branch to block L3
0x2bcb988c	260:	nop
0x2bcb9888	256:	bne	t8, t9, PC=0x2bcb9844	@ branch to block L3, skip GC
0x2bcb988c	260:	nop
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(4) reg(21): in correct register
			@ Outgoing local(6) reg(23): in correct register
			@ Initial Temp REF set is 
	L2:	264:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(4) to reg(21)
			@ Binding Incoming Local(6) to reg(23)
--->Fixed instruction at 204(0x2bcb9854) to reference 264
          		@ MAP_PC idepth=0 javaPc=46 compiledPc=264
0x2bcb9890	264:	lw	ra, -24(JFP)	@ Java local cell # 3
			@ Outgoing local(0) reg(20): in correct register
          		@ deferred comparison: 
0x2bcb9894	268:	slt	t7, s5, ra
0x2bcb9898	272:	beq	t7, zero, PC=0x2bcb9894	@ branch to block L1
0x2bcb989c	276:	nop
          		@ Do newarray:
0x2bcb98a0	280:	move	a1, ra
0x2bcb98a4	284:	lw	a2, 0(CP)	@ [C
0x2bcb98a8	288:	addiu	a0, zero, 2	@ array element size
0x2bcb98ac	292:	jal	PC=(0x2bcb88f8)	@ call CVMCCMruntimeNewArrayGlue
0x2bcb98b0	296:	nop
          		@ Captured a stackmap here.
0x2bcb98b4	300:	sw	v0, -8(JFP)	@ Java local cell # 7
0x2bcb98b8	304:	sw	zero, -4(JFP)	@ Java local cell # 8
			@ Outgoing local(3) reg(20): not in register
0x2bcb98bc	308:	lw	s4, -24(JFP)	@ Java local cell # 3
			@ Outgoing local(4) reg(21): in correct register
			@ Outgoing local(5) reg(22): not in register
0x2bcb98c0	312:	lw	s6, -16(JFP)	@ Java local cell # 5
			@ Outgoing local(6) reg(23): in correct register
0x2bcb98c4	316:	b	PC=0x2bcb98c4	@ fallthrough to block L5, which is backward branch target
0x2bcb98c8	320:	nop
			@ Initial Temp REF set is 
	L5:	324:	@ Patchable GC Check point
0x2bcb98cc	324:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcb98cc	324:	nop
0x2bcb98d0	328:	nop
          		@ Captured a stackmap here.
	L5:	332:	@ entry point when locals need to be loaded
			@ Preloading incoming local(3) reg(20)
0x2bcb98d4	332:	lw	s4, -24(JFP)	@ Java local cell # 3
			@ Preloading incoming local(4) reg(21)
0x2bcb98d8	336:	lw	s5, -20(JFP)	@ Java local cell # 4
			@ Preloading incoming local(5) reg(22)
0x2bcb98dc	340:	lw	s6, -16(JFP)	@ Java local cell # 5
			@ Preloading incoming local(6) reg(23)
0x2bcb98e0	344:	lw	s7, -12(JFP)	@ Java local cell # 6
	L5:	348:	@ entry point for branches
--->Fixed instruction at 316(0x2bcb98c4) to reference 348
          		@ MAP_PC idepth=0 javaPc=60 compiledPc=332
0x2bcb98e4	348:	lw	ra, -4(JFP)	@ Java local cell # 8
			@ Outgoing local(3) reg(20): in correct register
			@ Outgoing local(4) reg(21): in correct register
			@ Outgoing local(5) reg(22): in correct register
			@ Outgoing local(6) reg(23): in correct register
          		@ deferred comparison: 
0x2bcb98e8	352:	slt	t7, ra, s5
0x2bcb98ec	356:	beq	t7, zero, PC=0x2bcb98e8	@ branch to block L4
0x2bcb98f0	360:	nop
0x2bcb98f4	364:	addu	t9, s7, ra
0x2bcb98f8	368:	lw	t8, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcb98fc	372:	sltu	t7, t9, t8
0x2bcb9900	376:	bne	t7, zero, PC=0x2bcb98fc	@ br .skip
0x2bcb9904	380:	nop
0x2bcb9908	384:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb990c	388:	nop
		.skip
--->Fixed instruction at 376(0x2bcb9900) to reference 392
          		@ Do load(arrayObj, index) (elem type=5,C):
0x2bcb9910	392:	sll	t6, t9, 1
0x2bcb9914	396:	addu	t6, s6, t6
0x2bcb9918	400:	lhu	t8, 12(t6)
0x2bcb991c	404:	lw	t9, -8(JFP)	@ Java local cell # 7
0x2bcb9920	408:	lw	t6, 8(t9)	@ arraylength
          		@ deferred comparison: 
0x2bcb9924	412:	sltu	t7, ra, t6
0x2bcb9928	416:	bne	t7, zero, PC=0x2bcb9924	@ br .skip
0x2bcb992c	420:	nop
0x2bcb9930	424:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb9934	428:	nop
		.skip
--->Fixed instruction at 416(0x2bcb9928) to reference 432
          		@ Do store(arrayObj, index) (elem type=C):
0x2bcb9938	432:	sll	t6, ra, 1
0x2bcb993c	436:	addu	t6, t9, t6
0x2bcb9940	440:	sh	t8, 12(t6)
0x2bcb9944	444:	addiu	t8, ra, 1
0x2bcb9948	448:	sw	t8, -4(JFP)	@ Java local cell # 8
			@ Outgoing local(3) reg(20): in correct register
			@ Outgoing local(4) reg(21): in correct register
			@ Outgoing local(5) reg(22): in correct register
			@ Outgoing local(6) reg(23): in correct register
          		@ Patchable backwards branch:
0x2bcb994c	452:	b	PC=0x2bcb98cc	@ branch to block L5
0x2bcb9950	456:	nop
0x2bcb994c	452:	b	PC=0x2bcb98e4	@ branch to block L5, skip GC
0x2bcb9950	456:	nop
			@ Initial Temp REF set is 
	L4:	460:	@ Patchable GC Check point
0x2bcb9954	460:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcb9954	460:	nop
0x2bcb9958	464:	nop
          		@ Captured a stackmap here.
	L4:	468:	@ entry point when locals need to be loaded
			@ Preloading incoming local(3) reg(20)
0x2bcb995c	468:	lw	s4, -24(JFP)	@ Java local cell # 3
			@ Preloading incoming local(4) reg(21)
0x2bcb9960	472:	lw	s5, -20(JFP)	@ Java local cell # 4
			@ Preloading incoming local(5) reg(22)
0x2bcb9964	476:	lw	s6, -16(JFP)	@ Java local cell # 5
			@ Preloading incoming local(6) reg(23)
0x2bcb9968	480:	lw	s7, -12(JFP)	@ Java local cell # 6
	L4:	484:	@ entry point for branches
--->Fixed instruction at 356(0x2bcb98ec) to reference 484
          		@ MAP_PC idepth=0 javaPc=86 compiledPc=468
			@ Outgoing local(3) reg(20): in correct register
          		@ deferred comparison: 
0x2bcb996c	484:	slt	t7, s5, s4
0x2bcb9970	488:	beq	t7, zero, PC=0x2bcb996c	@ branch to block L6
0x2bcb9974	492:	nop
0x2bcb9978	496:	addu	ra, s7, s5
0x2bcb997c	500:	lw	t9, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcb9980	504:	sltu	t7, ra, t9
0x2bcb9984	508:	bne	t7, zero, PC=0x2bcb9980	@ br .skip
0x2bcb9988	512:	nop
0x2bcb998c	516:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb9990	520:	nop
		.skip
--->Fixed instruction at 508(0x2bcb9984) to reference 524
          		@ Do load(arrayObj, index) (elem type=5,C):
0x2bcb9994	524:	sll	t8, ra, 1
0x2bcb9998	528:	addu	t8, s6, t8
0x2bcb999c	532:	lhu	t9, 12(t8)
0x2bcb99a0	536:	sw	t9, -4(JFP)	@ Java local cell # 8
0x2bcb99a4	540:	lw	ra, -8(JFP)	@ Java local cell # 7
			@ Processing DEFINE(0) reg(20): in wrong register
			@ Processing DEFINE(1) reg(21): in correct register
0x2bcb99a8	544:	lw	t8, -32(JFP)	@ Java local cell # 1
			@ Loading DEFINE(0) register(20): in wrong register
0x2bcb99ac	548:	move	s4, ra
			@ Loading DEFINE(1) register(21): in correct register
          		@ deferred comparison: 
0x2bcb99b0	552:	bne	t9, t8, PC=0x2bcb99b0	@ branch to block L7
0x2bcb99b4	556:	nop
			@ Processing DEFINE(0) reg(20): in correct register
			@ Processing DEFINE(1) reg(21): in correct register
0x2bcb99b8	560:	lw	ra, -28(JFP)	@ Java local cell # 2
			@ Processing DEFINE(2) reg(22): in wrong register
			@ Loading DEFINE(0) register(20): in correct register
			@ Loading DEFINE(1) register(21): in correct register
			@ Loading DEFINE(2) register(22): in wrong register
0x2bcb99bc	564:	move	s6, ra
0x2bcb99c0	568:	b	PC=0x2bcb99c0	@ branch to block L8
0x2bcb99c4	572:	nop
			@ Initial Temp REF set is 
	L7:	576:	@ entry point for branches
--->Fixed instruction at 552(0x2bcb99b0) to reference 576
          		@ MAP_PC idepth=0 javaPc=116 compiledPc=576
			@ Processing DEFINE(0) reg(20): in correct register
			@ Processing DEFINE(1) reg(21): in correct register
0x2bcb99c8	576:	lw	ra, -4(JFP)	@ Java local cell # 8
			@ Processing DEFINE(2) reg(22): in wrong register
			@ Loading DEFINE(0) register(20): in correct register
			@ Loading DEFINE(1) register(21): in correct register
			@ Loading DEFINE(2) register(22): in wrong register
0x2bcb99cc	580:	move	s6, ra
			@ Initial Temp REF set is 
	L8:	584:	@ entry point for branches
--->Fixed instruction at 568(0x2bcb99c0) to reference 584
          		@ MAP_PC idepth=0 javaPc=118 compiledPc=584
0x2bcb99d0	584:	lw	s7, 8(s4)	@ arraylength
          		@ deferred comparison: 
0x2bcb99d4	588:	sltu	t7, s5, s7
0x2bcb99d8	592:	bne	t7, zero, PC=0x2bcb99d4	@ br .skip
0x2bcb99dc	596:	nop
0x2bcb99e0	600:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb99e4	604:	nop
		.skip
--->Fixed instruction at 592(0x2bcb99d8) to reference 608
          		@ Do store(arrayObj, index) (elem type=C):
0x2bcb99e8	608:	sll	s7, s5, 1
0x2bcb99ec	612:	addu	s7, s4, s7
0x2bcb99f0	616:	sh	s6, 12(s7)
0x2bcb99f4	620:	lw	ra, -20(JFP)	@ Java local cell # 4
0x2bcb99f8	624:	addiu	s5, ra, 1
0x2bcb99fc	628:	sw	s5, -20(JFP)	@ Java local cell # 4
			@ Outgoing local(3) reg(20): not in register
0x2bcb9a00	632:	lw	s4, -24(JFP)	@ Java local cell # 3
			@ Outgoing local(4) reg(21): in correct register
			@ Outgoing local(5) reg(22): not in register
0x2bcb9a04	636:	lw	s6, -16(JFP)	@ Java local cell # 5
			@ Outgoing local(6) reg(23): not in register
0x2bcb9a08	640:	lw	s7, -12(JFP)	@ Java local cell # 6
          		@ Patchable backwards branch:
0x2bcb9a0c	644:	b	PC=0x2bcb9954	@ branch to block L4
0x2bcb9a10	648:	nop
0x2bcb9a0c	644:	b	PC=0x2bcb996c	@ branch to block L4, skip GC
0x2bcb9a10	648:	nop
			@ Initial Temp REF set is 
	L6:	652:	@ entry point for branches
			@ Binding Incoming Local(3) to reg(20)
--->Fixed instruction at 488(0x2bcb9970) to reference 652
          		@ MAP_PC idepth=0 javaPc=125 compiledPc=652
0x2bcb9a14	652:	lw	a1, 0(CP)	@ cb java.lang.String
          		@ Do new:
          		@ cb: java.lang.String
0x2bcb9a18	656:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcb9a1c	660:	nop
          		@ Captured a stackmap here.
0x2bcb9a20	664:	sw	v0, 0(JSP)
0x2bcb9a24	668:	sw	zero, 4(JSP)
0x2bcb9a28	672:	sw	s4, 8(JSP)
0x2bcb9a2c	676:	lw	ra, -8(JFP)	@ Java local cell # 7
0x2bcb9a30	680:	sw	ra, 12(JSP)
0x2bcb9a34	684:	lw	a0, 0(CP)	@ mb java.lang.String.<init>(II[C)V
          		@ Invoke a method w/ a void return type
0x2bcb9a38	688:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcb9a3c	692:	sw	v0, 40(JFP)	@ REF spill Java temp cell # 3
0x2bcb9a40	696:	lw	s7, 0(a0)	@ call method through mb
0x2bcb9a44	700:	jalr	s7
0x2bcb9a48	704:	nop
          		@ Captured a stackmap here.
0x2bcb9a4c	708:	lw	s7, 40(JFP)	@ Java temp cell # 3
0x2bcb9a50	712:	sw	s7, -36(JFP)	@ Java local cell # 0
0x2bcb9a54	716:	addiu	JSP, JFP, -32
0x2bcb9a58	720:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcb9a5c	724:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcb9a60	728:	nop
			@ Initial Temp REF set is 
	L1:	732:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
--->Fixed instruction at 272(0x2bcb9898) to reference 732
--->Fixed instruction at 108(0x2bcb97f4) to reference 732
          		@ MAP_PC idepth=0 javaPc=137 compiledPc=732
0x2bcb9a64	732:	sw	s4, -36(JFP)	@ Java local cell # 0
0x2bcb9a68	736:	addiu	JSP, JFP, -32
0x2bcb9a6c	740:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcb9a70	744:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcb9a74	748:	nop
0x2bcb9a78	752:	.word	9065092	@ mb java.lang.String.<init>(II[C)V
--->Fixed instruction at 684(0x2bcb9a34) to reference 752
0x2bcb9a7c	756:	.word	8603840	@ cb java.lang.String
--->Fixed instruction at 652(0x2bcb9a14) to reference 756
0x2bcb9a80	760:	.word	8897532	@ cb [C
--->Fixed instruction at 284(0x2bcb98a4) to reference 760
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcb9788) >>>>>>>>
          		@ Capacity is 26 word(s)
0x2bcb9788	0:	addiu	a1, JSP, 92
<<<<<<<<<Pop Code Buffer to PC = 764 (0x2bcb9a84) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcb97d8) >>>>>>>>
          		@ spillSize is 4 word(s), add to JFP+28
0x2bcb97d8	80:	addiu	JSP, JFP, 44
          		@ setup cp base register
0x2bcb97dc	84:	lui	CP, hi16(0x2bcb)
0x2bcb97e0	88:	ori	CP, CP, lo16(0x2bcb9a78)
0x2bcb97e4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 764 (0x2bcb9a84) <<<<<<<<<
JS: COMPILED: size=940 startPC=0x2bcb9788 java.lang.String.replace(CC)Ljava/lang/String;
OSR: Intr2Comp: java.lang.String.replace(CC)Ljava/lang/String;
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I
JS: COMPILING com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I
orig bkID(33) Incoming Locals(1 0x0): 7- 
orig bkID(29) Incoming Locals(3 0x0): 5- 7- 4- 
o1   bkID(29) Incoming Locals(1 0x0): 5- 
s1   bkID(29) Incoming Locals(2 0x0): 5- 7- 
o1   bkID(29) Incoming Locals(3 0x0): 5- 7- 4- 
orig bkID(32) Incoming Locals(1 0x0): 7- 
o1   bkID(32) Incoming Locals(1 0x0): 7- 
s1   bkID(32) Incoming Locals(2 0x0): 7- 5- 
s1   bkID(32) Incoming Locals(3 0x0): 7- 5- 4- 
o1   bkID(32) Incoming Locals(3 0x0): 7- 5- 4- 
orig bkID(30) Incoming Locals(2 0x0): 6- 7- 
o1   bkID(30) Incoming Locals(1 0x0): 6- 
s1   bkID(30) Incoming Locals(2 0x0): 6- 7- 
s1   bkID(30) Incoming Locals(3 0x0): 6- 7- 5- 
s1   bkID(30) Incoming Locals(4 0x0): 6- 7- 5- 4- 
o1   bkID(30) Incoming Locals(4 0x0): 6- 7- 5- 4- 
s1   bkID(30) Incoming Locals(4 0x0): 6- 7- 5- 4- 
s1   bkID(30) Incoming Locals(4 0x0): 6- 7- 5- 4- 
o1   bkID(30) Incoming Locals(4 0x0): 6- 7- 5- 4- 
orig bkID(31) Incoming Locals(1 0x0): 7- 
o1   bkID(31) Incoming Locals(1 0x0): 7- 
s1   bkID(31) Incoming Locals(2 0x0): 7- 5- 
s1   bkID(31) Incoming Locals(3 0x0): 7- 5- 4- 
o1   bkID(31) Incoming Locals(3 0x0): 7- 5- 4- 
orig bkID(1) Incoming Locals(6 0x0): 8- 5- 0- 1- 2- 3- 
o1   bkID(1) Incoming Locals(1 0x0): 8- 
s1   bkID(1) Incoming Locals(2 0x0): 8- 1- 
s1   bkID(1) Incoming Locals(2 0x0): 8- 1- 
s1   bkID(1) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(1) Incoming Locals(4 0x0): 8- 1- 4- 5- 
s1   bkID(1) Incoming Locals(4 0x0): 8- 1- 4- 5- 
s1   bkID(1) Incoming Locals(5 0x0): 8- 1- 4- 5- 7- 
s1   bkID(1) Incoming Locals(5 0x0): 8- 1- 4- 5- 7- 
o1   bkID(1) Incoming Locals(6 0x0): 8- 1- 4- 5- 7- 0- 
orig bkID(28) Incoming Locals(3 0x0): 7- 0- 8- 
o1   bkID(28) Incoming Locals(3 0x0): 7- 0- 8- 
o1   bkID(28) Incoming Locals(3 0x0): 7- 0- 8- 
orig bkID(27) Incoming Locals(2 0x0): 7- 0- 
o1   bkID(27) Incoming Locals(2 0x0): 7- 0- 
s1   bkID(27) Incoming Locals(2 0x0): 7- 0- 
s1   bkID(27) Incoming Locals(3 0x0): 7- 0- 8- 
o1   bkID(27) Incoming Locals(3 0x0): 7- 0- 8- 
orig bkID(26) Incoming Locals(3 0x0): 7- 0- 8- 
o1   bkID(26) Incoming Locals(3 0x0): 7- 0- 8- 
o1   bkID(26) Incoming Locals(3 0x0): 7- 0- 8- 
orig bkID(25) Incoming Locals(2 0x0): 7- 0- 
o1   bkID(25) Incoming Locals(2 0x0): 7- 0- 
s1   bkID(25) Incoming Locals(2 0x0): 7- 0- 
s1   bkID(25) Incoming Locals(3 0x0): 7- 0- 8- 
o1   bkID(25) Incoming Locals(3 0x0): 7- 0- 8- 
orig bkID(7) Incoming Locals(2 0x0): 1- 8- 
o1   bkID(7) Incoming Locals(2 0x0): 1- 8- 
o1   bkID(7) Incoming Locals(2 0x0): 1- 8- 
orig bkID(10) Incoming Locals(1 0x0): 4- 
o1   bkID(10) Incoming Locals(1 0x0): 4- 
s1   bkID(10) Incoming Locals(2 0x0): 4- 1- 
s1   bkID(10) Incoming Locals(3 0x0): 4- 1- 8- 
o1   bkID(10) Incoming Locals(3 0x0): 4- 1- 8- 
orig bkID(9) Incoming Locals(2 0x0): 8- 1- 
o1   bkID(9) Incoming Locals(1 0x0): 8- 
s1   bkID(9) Incoming Locals(2 0x0): 8- 1- 
s1   bkID(9) Incoming Locals(2 0x0): 8- 1- 
o1   bkID(9) Incoming Locals(2 0x0): 8- 1- 
s1   bkID(9) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(9) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(9) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(9) Incoming Locals(3 0x0): 8- 1- 4- 
orig bkID(8) Incoming Locals(2 0x0): 8- 1- 
o1   bkID(8) Incoming Locals(1 0x0): 8- 
s1   bkID(8) Incoming Locals(1 0x0): 8- 
s1   bkID(8) Incoming Locals(2 0x0): 8- 1- 
s1   bkID(8) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(8) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(8) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(8) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(8) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(8) Incoming Locals(3 0x0): 8- 1- 4- 
orig bkID(3) Incoming Locals(3 0x0): 1- 8- 4- 
o1   bkID(3) Incoming Locals(2 0x0): 1- 8- 
s1   bkID(3) Incoming Locals(2 0x0): 1- 8- 
s1   bkID(3) Incoming Locals(2 0x0): 1- 8- 
o1   bkID(3) Incoming Locals(2 0x0): 1- 8- 
s1   bkID(3) Incoming Locals(2 0x0): 1- 8- 
s1   bkID(3) Incoming Locals(2 0x0): 1- 8- 
s1   bkID(3) Incoming Locals(3 0x0): 1- 8- 4- 
o1   bkID(3) Incoming Locals(3 0x0): 1- 8- 4- 
orig bkID(6) Incoming Locals(1 0x0): 4- 
o1   bkID(6) Incoming Locals(1 0x0): 4- 
s1   bkID(6) Incoming Locals(2 0x0): 4- 1- 
s1   bkID(6) Incoming Locals(3 0x0): 4- 1- 8- 
o1   bkID(6) Incoming Locals(3 0x0): 4- 1- 8- 
orig bkID(5) Incoming Locals(2 0x0): 8- 1- 
o1   bkID(5) Incoming Locals(1 0x0): 8- 
s1   bkID(5) Incoming Locals(2 0x0): 8- 1- 
s1   bkID(5) Incoming Locals(2 0x0): 8- 1- 
s1   bkID(5) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(5) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(5) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(5) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(5) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(5) Incoming Locals(3 0x0): 8- 1- 4- 
orig bkID(4) Incoming Locals(2 0x0): 8- 1- 
o1   bkID(4) Incoming Locals(1 0x0): 8- 
s1   bkID(4) Incoming Locals(1 0x0): 8- 
s1   bkID(4) Incoming Locals(2 0x0): 8- 1- 
s1   bkID(4) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(4) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(4) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(4) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(4) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(4) Incoming Locals(3 0x0): 8- 1- 4- 
orig bkID(2) Incoming Locals(3 0x0): 1- 8- 4- 
o1   bkID(2) Incoming Locals(2 0x0): 1- 8- 
s1   bkID(2) Incoming Locals(2 0x0): 1- 8- 
s1   bkID(2) Incoming Locals(2 0x0): 1- 8- 
s1   bkID(2) Incoming Locals(3 0x0): 1- 8- 4- 
o1   bkID(2) Incoming Locals(3 0x0): 1- 8- 4- 
s1   bkID(2) Incoming Locals(3 0x0): 1- 8- 4- 
s1   bkID(2) Incoming Locals(3 0x0): 1- 8- 4- 
s1   bkID(2) Incoming Locals(3 0x0): 1- 8- 4- 
o1   bkID(2) Incoming Locals(3 0x0): 1- 8- 4- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(33) Incoming Locals(1 0x0): 7- 
orig bkID(29) Incoming Locals(3 0x0): 5- 7- 4- 
o1   bkID(29) Incoming Locals(1 0x0): 5- 
s1   bkID(29) Incoming Locals(2 0x0): 5- 7- 
o1   bkID(29) Incoming Locals(3 0x0): 5- 7- 4- 
orig bkID(32) Incoming Locals(3 0x0): 7- 5- 4- 
o1   bkID(32) Incoming Locals(1 0x0): 7- 
s1   bkID(32) Incoming Locals(2 0x0): 7- 5- 
s1   bkID(32) Incoming Locals(3 0x0): 7- 5- 4- 
o1   bkID(32) Incoming Locals(3 0x0): 7- 5- 4- 
orig bkID(30) Incoming Locals(4 0x0): 6- 7- 5- 4- 
o1   bkID(30) Incoming Locals(1 0x0): 6- 
s1   bkID(30) Incoming Locals(2 0x0): 6- 7- 
s1   bkID(30) Incoming Locals(3 0x0): 6- 7- 5- 
s1   bkID(30) Incoming Locals(4 0x0): 6- 7- 5- 4- 
o1   bkID(30) Incoming Locals(4 0x0): 6- 7- 5- 4- 
s1   bkID(30) Incoming Locals(4 0x0): 6- 7- 5- 4- 
s1   bkID(30) Incoming Locals(4 0x0): 6- 7- 5- 4- 
o1   bkID(30) Incoming Locals(4 0x0): 6- 7- 5- 4- 
orig bkID(31) Incoming Locals(3 0x0): 7- 5- 4- 
o1   bkID(31) Incoming Locals(1 0x0): 7- 
s1   bkID(31) Incoming Locals(2 0x0): 7- 5- 
s1   bkID(31) Incoming Locals(3 0x0): 7- 5- 4- 
o1   bkID(31) Incoming Locals(3 0x0): 7- 5- 4- 
orig bkID(1) Incoming Locals(6 0x0): 8- 1- 4- 5- 7- 0- 
o1   bkID(1) Incoming Locals(1 0x0): 8- 
s1   bkID(1) Incoming Locals(2 0x0): 8- 1- 
s1   bkID(1) Incoming Locals(2 0x0): 8- 1- 
s1   bkID(1) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(1) Incoming Locals(4 0x0): 8- 1- 4- 5- 
s1   bkID(1) Incoming Locals(4 0x0): 8- 1- 4- 5- 
s1   bkID(1) Incoming Locals(5 0x0): 8- 1- 4- 5- 7- 
s1   bkID(1) Incoming Locals(5 0x0): 8- 1- 4- 5- 7- 
o1   bkID(1) Incoming Locals(6 0x0): 8- 1- 4- 5- 7- 0- 
orig bkID(28) Incoming Locals(3 0x0): 7- 0- 8- 
o1   bkID(28) Incoming Locals(3 0x0): 7- 0- 8- 
o1   bkID(28) Incoming Locals(3 0x0): 7- 0- 8- 
orig bkID(27) Incoming Locals(3 0x0): 7- 0- 8- 
o1   bkID(27) Incoming Locals(2 0x0): 7- 0- 
s1   bkID(27) Incoming Locals(2 0x0): 7- 0- 
s1   bkID(27) Incoming Locals(3 0x0): 7- 0- 8- 
o1   bkID(27) Incoming Locals(3 0x0): 7- 0- 8- 
orig bkID(26) Incoming Locals(3 0x0): 7- 0- 8- 
o1   bkID(26) Incoming Locals(3 0x0): 7- 0- 8- 
o1   bkID(26) Incoming Locals(3 0x0): 7- 0- 8- 
orig bkID(25) Incoming Locals(3 0x0): 7- 0- 8- 
o1   bkID(25) Incoming Locals(2 0x0): 7- 0- 
s1   bkID(25) Incoming Locals(2 0x0): 7- 0- 
s1   bkID(25) Incoming Locals(3 0x0): 7- 0- 8- 
o1   bkID(25) Incoming Locals(3 0x0): 7- 0- 8- 
orig bkID(7) Incoming Locals(2 0x0): 1- 8- 
o1   bkID(7) Incoming Locals(2 0x0): 1- 8- 
o1   bkID(7) Incoming Locals(2 0x0): 1- 8- 
orig bkID(10) Incoming Locals(3 0x0): 4- 1- 8- 
o1   bkID(10) Incoming Locals(1 0x0): 4- 
s1   bkID(10) Incoming Locals(2 0x0): 4- 1- 
s1   bkID(10) Incoming Locals(3 0x0): 4- 1- 8- 
o1   bkID(10) Incoming Locals(3 0x0): 4- 1- 8- 
orig bkID(9) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(9) Incoming Locals(1 0x0): 8- 
s1   bkID(9) Incoming Locals(2 0x0): 8- 1- 
s1   bkID(9) Incoming Locals(2 0x0): 8- 1- 
o1   bkID(9) Incoming Locals(2 0x0): 8- 1- 
s1   bkID(9) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(9) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(9) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(9) Incoming Locals(3 0x0): 8- 1- 4- 
orig bkID(8) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(8) Incoming Locals(1 0x0): 8- 
s1   bkID(8) Incoming Locals(1 0x0): 8- 
s1   bkID(8) Incoming Locals(2 0x0): 8- 1- 
s1   bkID(8) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(8) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(8) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(8) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(8) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(8) Incoming Locals(3 0x0): 8- 1- 4- 
orig bkID(3) Incoming Locals(3 0x0): 1- 8- 4- 
o1   bkID(3) Incoming Locals(2 0x0): 1- 8- 
s1   bkID(3) Incoming Locals(2 0x0): 1- 8- 
s1   bkID(3) Incoming Locals(2 0x0): 1- 8- 
o1   bkID(3) Incoming Locals(2 0x0): 1- 8- 
s1   bkID(3) Incoming Locals(2 0x0): 1- 8- 
s1   bkID(3) Incoming Locals(2 0x0): 1- 8- 
s1   bkID(3) Incoming Locals(3 0x0): 1- 8- 4- 
o1   bkID(3) Incoming Locals(3 0x0): 1- 8- 4- 
orig bkID(6) Incoming Locals(3 0x0): 4- 1- 8- 
o1   bkID(6) Incoming Locals(1 0x0): 4- 
s1   bkID(6) Incoming Locals(2 0x0): 4- 1- 
s1   bkID(6) Incoming Locals(3 0x0): 4- 1- 8- 
o1   bkID(6) Incoming Locals(3 0x0): 4- 1- 8- 
orig bkID(5) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(5) Incoming Locals(1 0x0): 8- 
s1   bkID(5) Incoming Locals(2 0x0): 8- 1- 
s1   bkID(5) Incoming Locals(2 0x0): 8- 1- 
s1   bkID(5) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(5) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(5) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(5) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(5) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(5) Incoming Locals(3 0x0): 8- 1- 4- 
orig bkID(4) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(4) Incoming Locals(1 0x0): 8- 
s1   bkID(4) Incoming Locals(1 0x0): 8- 
s1   bkID(4) Incoming Locals(2 0x0): 8- 1- 
s1   bkID(4) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(4) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(4) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(4) Incoming Locals(3 0x0): 8- 1- 4- 
s1   bkID(4) Incoming Locals(3 0x0): 8- 1- 4- 
o1   bkID(4) Incoming Locals(3 0x0): 8- 1- 4- 
orig bkID(2) Incoming Locals(3 0x0): 1- 8- 4- 
o1   bkID(2) Incoming Locals(2 0x0): 1- 8- 
s1   bkID(2) Incoming Locals(2 0x0): 1- 8- 
s1   bkID(2) Incoming Locals(2 0x0): 1- 8- 
s1   bkID(2) Incoming Locals(3 0x0): 1- 8- 4- 
o1   bkID(2) Incoming Locals(3 0x0): 1- 8- 4- 
s1   bkID(2) Incoming Locals(3 0x0): 1- 8- 4- 
s1   bkID(2) Incoming Locals(3 0x0): 1- 8- 4- 
s1   bkID(2) Incoming Locals(3 0x0): 1- 8- 4- 
o1   bkID(2) Incoming Locals(3 0x0): 1- 8- 4- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
bkID(29) local(0 #5)  not found in goalBk
bkID(29) local(1 #7)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(29) Incoming Locals(3 0x0): 5- 7- 4- 
+bk  bkID(29) Incoming Locals(3 0x1): 7+ 5- 4- 
-gbk bkID(33) Incoming Locals(1 0x0): 7- 
+gbk bkID(33) Incoming Locals(1 0x1): 7+ 
bkID(29) local(1 #5)  not found in goalBk
bkID(29) local(2 #4)  not found in goalBk
bkID(32) local(0 #7)  ordered in goalBk(29)
-bk  bkID(32) Incoming Locals(3 0x0): 7- 5- 4- 
dstBk(32) local(0 7) found in slot(0)
local(0 7) same slot
+bk  bkID(32) Incoming Locals(3 0x1): 7+ 5- 4- 
 ordered in bk
-gbk bkID(29) Incoming Locals(3 0x1): 7+ 5- 4- 
dstBk(29) local(0 7) found in slot(0)
local(0 7) same slot
+gbk bkID(29) Incoming Locals(3 0x1): 7+ 5- 4- 
bkID(32) local(1 #5)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(32) Incoming Locals(3 0x1): 7+ 5- 4- 
+bk  bkID(32) Incoming Locals(3 0x3): 7+ 5+ 4- 
-gbk bkID(29) Incoming Locals(3 0x1): 7+ 5- 4- 
+gbk bkID(29) Incoming Locals(3 0x3): 7+ 5+ 4- 
bkID(32) local(1 #5)  ordered in goalBk(29)
-bk  bkID(32) Incoming Locals(3 0x3): 7+ 5+ 4- 
dstBk(32) local(1 5) found in slot(1)
local(1 5) same slot
+bk  bkID(32) Incoming Locals(3 0x3): 7+ 5+ 4- 
 ordered in bk
-gbk bkID(29) Incoming Locals(3 0x3): 7+ 5+ 4- 
dstBk(29) local(1 5) found in slot(1)
local(1 5) same slot
+gbk bkID(29) Incoming Locals(3 0x3): 7+ 5+ 4- 
bkID(32) local(2 #4)  not ordered
bestLocal(2) bestLocalScore(8)
-bk  bkID(32) Incoming Locals(3 0x3): 7+ 5+ 4- 
+bk  bkID(32) Incoming Locals(3 0x7): 7+ 5+ 4+ 
-gbk bkID(29) Incoming Locals(3 0x3): 7+ 5+ 4- 
+gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
bkID(32) local(2 #4)  ordered in goalBk(29)
-bk  bkID(32) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(32) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(32) Incoming Locals(3 0x7): 7+ 5+ 4+ 
 ordered in bk
-gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(29) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
bkID(30) local(0 #6)  not found in goalBk
bkID(30) local(1 #7)  ordered in goalBk(32)
-bk  bkID(30) Incoming Locals(4 0x0): 6- 7- 5- 4- 
dstBk(30) local(0 7) found in slot(1)
local(#0) swapped with local(#1)
+bk  bkID(30) Incoming Locals(4 0x1): 7+ 6- 5- 4- 
bkID(30) local(2 #5)  ordered in goalBk(32)
-bk  bkID(30) Incoming Locals(4 0x1): 7+ 6- 5- 4- 
dstBk(30) local(1 5) found in slot(2)
local(#1) swapped with local(#2)
+bk  bkID(30) Incoming Locals(4 0x3): 7+ 5+ 6- 4- 
bkID(30) local(3 #4)  ordered in goalBk(32)
-bk  bkID(30) Incoming Locals(4 0x3): 7+ 5+ 6- 4- 
dstBk(30) local(2 4) found in slot(3)
local(#2) swapped with local(#3)
+bk  bkID(30) Incoming Locals(4 0x7): 7+ 5+ 4+ 6- 
bkID(30) local(0 #7)  ordered in goalBk(29)
-bk  bkID(30) Incoming Locals(4 0x7): 7+ 5+ 4+ 6- 
dstBk(30) local(0 7) found in slot(0)
local(0 7) same slot
+bk  bkID(30) Incoming Locals(4 0x7): 7+ 5+ 4+ 6- 
 ordered in bk
-gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(29) local(0 7) found in slot(0)
local(0 7) same slot
+gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
bkID(30) local(1 #5)  ordered in goalBk(29)
-bk  bkID(30) Incoming Locals(4 0x7): 7+ 5+ 4+ 6- 
dstBk(30) local(1 5) found in slot(1)
local(1 5) same slot
+bk  bkID(30) Incoming Locals(4 0x7): 7+ 5+ 4+ 6- 
 ordered in bk
-gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(29) local(1 5) found in slot(1)
local(1 5) same slot
+gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
bkID(30) local(2 #4)  ordered in goalBk(29)
-bk  bkID(30) Incoming Locals(4 0x7): 7+ 5+ 4+ 6- 
dstBk(30) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(30) Incoming Locals(4 0x7): 7+ 5+ 4+ 6- 
 ordered in bk
-gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(29) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
bkID(30) local(3 #6)  not found in goalBk
bkID(29) local(0 #7)  ordered in goalBk(32)
-bk  bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(29) local(0 7) found in slot(0)
local(0 7) same slot
+bk  bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
 ordered in bk
-gbk bkID(32) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(32) local(0 7) found in slot(0)
local(0 7) same slot
+gbk bkID(32) Incoming Locals(3 0x7): 7+ 5+ 4+ 
bkID(29) local(1 #5)  ordered in goalBk(32)
-bk  bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(29) local(1 5) found in slot(1)
local(1 5) same slot
+bk  bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
 ordered in bk
-gbk bkID(32) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(32) local(1 5) found in slot(1)
local(1 5) same slot
+gbk bkID(32) Incoming Locals(3 0x7): 7+ 5+ 4+ 
bkID(29) local(2 #4)  ordered in goalBk(32)
-bk  bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(29) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
 ordered in bk
-gbk bkID(32) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(32) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(32) Incoming Locals(3 0x7): 7+ 5+ 4+ 
bkID(31) local(0 #7)  ordered in goalBk(29)
-bk  bkID(31) Incoming Locals(3 0x0): 7- 5- 4- 
dstBk(31) local(0 7) found in slot(0)
local(0 7) same slot
+bk  bkID(31) Incoming Locals(3 0x1): 7+ 5- 4- 
 ordered in bk
-gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(29) local(0 7) found in slot(0)
local(0 7) same slot
+gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
bkID(31) local(1 #5)  ordered in goalBk(29)
-bk  bkID(31) Incoming Locals(3 0x1): 7+ 5- 4- 
dstBk(31) local(1 5) found in slot(1)
local(1 5) same slot
+bk  bkID(31) Incoming Locals(3 0x3): 7+ 5+ 4- 
 ordered in bk
-gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(29) local(1 5) found in slot(1)
local(1 5) same slot
+gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
bkID(31) local(2 #4)  ordered in goalBk(29)
-bk  bkID(31) Incoming Locals(3 0x3): 7+ 5+ 4- 
dstBk(31) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(31) Incoming Locals(3 0x7): 7+ 5+ 4+ 
 ordered in bk
-gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(29) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
bkID(1) local(0 #8)  not ordered
bestLocal(3) bestLocalScore(24)
-bk  bkID(1) Incoming Locals(6 0x0): 8- 1- 4- 5- 7- 0- 
+bk  bkID(1) Incoming Locals(6 0x8): 5- 1- 4- 8+ 7- 0- 
-gbk bkID(2) Incoming Locals(3 0x0): 1- 8- 4- 
+gbk bkID(2) Incoming Locals(4 0x8): 1- <null> 4- 8+ 
bkID(1) local(0 #5)  not found in goalBk
bkID(1) local(1 #1)  not ordered
bestLocal(4) bestLocalScore(24)
-bk  bkID(1) Incoming Locals(6 0x8): 5- 1- 4- 8+ 7- 0- 
+bk  bkID(1) Incoming Locals(6 0x18): 5- 7- 4- 8+ 1+ 0- 
-gbk bkID(2) Incoming Locals(4 0x8): 1- <null> 4- 8+ 
+gbk bkID(2) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
bkID(1) local(1 #7)  not found in goalBk
bkID(1) local(2 #4)  not ordered
bestLocal(2) bestLocalScore(24)
-bk  bkID(1) Incoming Locals(6 0x18): 5- 7- 4- 8+ 1+ 0- 
+bk  bkID(1) Incoming Locals(6 0x1c): 5- 7- 4+ 8+ 1+ 0- 
-gbk bkID(2) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(1) local(2 #4)  ordered in goalBk(2)
-bk  bkID(1) Incoming Locals(6 0x1c): 5- 7- 4+ 8+ 1+ 0- 
dstBk(1) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(1) Incoming Locals(6 0x1c): 5- 7- 4+ 8+ 1+ 0- 
 ordered in bk
-gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(29) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(1) local(3 #8)  ordered in goalBk(2)
-bk  bkID(1) Incoming Locals(6 0x1c): 5- 7- 4+ 8+ 1+ 0- 
dstBk(1) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(1) Incoming Locals(6 0x1c): 5- 7- 4+ 8+ 1+ 0- 
 ordered in bk
-gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
+gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(1) local(4 #1)  ordered in goalBk(2)
-bk  bkID(1) Incoming Locals(6 0x1c): 5- 7- 4+ 8+ 1+ 0- 
dstBk(1) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(1) Incoming Locals(6 0x1c): 5- 7- 4+ 8+ 1+ 0- 
 ordered in bk
-gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
+gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(1) local(5 #0)  not found in goalBk
bkID(1) local(0 #5)  ordered in goalBk(29)
-bk  bkID(1) Incoming Locals(6 0x1c): 5- 7- 4+ 8+ 1+ 0- 
dstBk(1) local(1 5) found in slot(0)
local(#1) swapped with local(#0)
+bk  bkID(1) Incoming Locals(6 0x1e): 7- 5+ 4+ 8+ 1+ 0- 
bkID(1) local(1 #5)  ordered in goalBk(29)
-bk  bkID(1) Incoming Locals(6 0x1e): 7- 5+ 4+ 8+ 1+ 0- 
dstBk(1) local(1 5) found in slot(1)
local(1 5) same slot
+bk  bkID(1) Incoming Locals(6 0x1e): 7- 5+ 4+ 8+ 1+ 0- 
 ordered in bk
-gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(29) local(1 5) found in slot(1)
local(1 5) same slot
+gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
bkID(1) local(2 #4)  ordered in goalBk(29)
-bk  bkID(1) Incoming Locals(6 0x1e): 7- 5+ 4+ 8+ 1+ 0- 
dstBk(1) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(1) Incoming Locals(6 0x1e): 7- 5+ 4+ 8+ 1+ 0- 
 ordered in bk
-gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(29) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
bkID(1) local(3 #8)  not found in goalBk
bkID(1) local(4 #1)  not found in goalBk
bkID(1) local(5 #0)  not found in goalBk
bkID(29) local(0 #7)  not found in goalBk
bkID(29) local(1 #5)  not found in goalBk
bkID(29) local(2 #4)  ordered in goalBk(2)
-bk  bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
dstBk(29) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(29) Incoming Locals(3 0x7): 7+ 5+ 4+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
Pushing blockID(2)
bkID(28) local(0 #7)  not found in goalBk
bkID(28) local(1 #0)  not found in goalBk
bkID(28) local(2 #8)  not found in goalBk
bkID(28) local(0 #7)  not found in goalBk
bkID(28) local(1 #0)  not found in goalBk
bkID(28) local(2 #8)  ordered in goalBk(2)
-bk  bkID(28) Incoming Locals(3 0x0): 7- 0- 8- 
dstBk(28) local(3 8) found in slot(2)
local(#3) swapped with local(#2)
+bk  bkID(28) Incoming Locals(4 0x8): 7- 0- <null> 8+ 
bkID(28) local(3 #8)  ordered in goalBk(2)
-bk  bkID(28) Incoming Locals(4 0x8): 7- 0- <null> 8+ 
dstBk(28) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(28) Incoming Locals(4 0x8): 7- 0- <null> 8+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  not found in goalBk
bkID(2) local(3 #8)  not found in goalBk
bkID(2) local(4 #1)  not found in goalBk
bkID(27) local(0 #7)  not ordered
bestLocal(0) bestLocalScore(24)
-bk  bkID(27) Incoming Locals(3 0x0): 7- 0- 8- 
+bk  bkID(27) Incoming Locals(3 0x1): 7+ 0- 8- 
-gbk bkID(28) Incoming Locals(4 0x8): 7- 0- <null> 8+ 
+gbk bkID(28) Incoming Locals(4 0x9): 7+ 0- <null> 8+ 
bkID(27) local(0 #7)  ordered in goalBk(28)
-bk  bkID(27) Incoming Locals(3 0x1): 7+ 0- 8- 
dstBk(27) local(0 7) found in slot(0)
local(0 7) same slot
+bk  bkID(27) Incoming Locals(3 0x1): 7+ 0- 8- 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(28) Incoming Locals(4 0x9): 7+ 0- <null> 8+ 
dstBk(28) local(0 7) found in slot(0)
local(0 7) same slot
+gbk bkID(28) Incoming Locals(4 0x9): 7+ 0- <null> 8+ 
bkID(27) local(1 #0)  not ordered
bestLocal(1) bestLocalScore(24)
-bk  bkID(27) Incoming Locals(3 0x1): 7+ 0- 8- 
+bk  bkID(27) Incoming Locals(3 0x3): 7+ 0+ 8- 
-gbk bkID(28) Incoming Locals(4 0x9): 7+ 0- <null> 8+ 
+gbk bkID(28) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
bkID(27) local(1 #0)  ordered in goalBk(28)
-bk  bkID(27) Incoming Locals(3 0x3): 7+ 0+ 8- 
dstBk(27) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(27) Incoming Locals(3 0x3): 7+ 0+ 8- 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(28) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
dstBk(28) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(28) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
bkID(27) local(2 #8)  ordered in goalBk(28)
-bk  bkID(27) Incoming Locals(3 0x3): 7+ 0+ 8- 
dstBk(27) local(3 8) found in slot(2)
local(#3) swapped with local(#2)
+bk  bkID(27) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
bkID(27) local(3 #8)  ordered in goalBk(28)
-bk  bkID(27) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
dstBk(27) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(27) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(28) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
dstBk(28) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(28) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
bkID(27) local(0 #7)  not found in goalBk
bkID(27) local(1 #0)  not found in goalBk
bkID(27) local(3 #8)  ordered in goalBk(2)
-bk  bkID(27) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
dstBk(27) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(27) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  not found in goalBk
bkID(2) local(3 #8)  ordered in goalBk(28)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(28) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
dstBk(28) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(28) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
bkID(2) local(4 #1)  not found in goalBk
bkID(26) local(0 #7)  not found in goalBk
bkID(26) local(1 #0)  not found in goalBk
bkID(26) local(2 #8)  not found in goalBk
bkID(26) local(0 #7)  not found in goalBk
bkID(26) local(1 #0)  not found in goalBk
bkID(26) local(2 #8)  ordered in goalBk(2)
-bk  bkID(26) Incoming Locals(3 0x0): 7- 0- 8- 
dstBk(26) local(3 8) found in slot(2)
local(#3) swapped with local(#2)
+bk  bkID(26) Incoming Locals(4 0x8): 7- 0- <null> 8+ 
bkID(26) local(3 #8)  ordered in goalBk(2)
-bk  bkID(26) Incoming Locals(4 0x8): 7- 0- <null> 8+ 
dstBk(26) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(26) Incoming Locals(4 0x8): 7- 0- <null> 8+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  not found in goalBk
bkID(2) local(3 #8)  not found in goalBk
bkID(2) local(4 #1)  not found in goalBk
bkID(25) local(0 #7)  not ordered
bestLocal(0) bestLocalScore(24)
-bk  bkID(25) Incoming Locals(3 0x0): 7- 0- 8- 
+bk  bkID(25) Incoming Locals(3 0x1): 7+ 0- 8- 
-gbk bkID(26) Incoming Locals(4 0x8): 7- 0- <null> 8+ 
+gbk bkID(26) Incoming Locals(4 0x9): 7+ 0- <null> 8+ 
bkID(25) local(0 #7)  ordered in goalBk(26)
-bk  bkID(25) Incoming Locals(3 0x1): 7+ 0- 8- 
dstBk(25) local(0 7) found in slot(0)
local(0 7) same slot
+bk  bkID(25) Incoming Locals(3 0x1): 7+ 0- 8- 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(26) Incoming Locals(4 0x9): 7+ 0- <null> 8+ 
dstBk(26) local(0 7) found in slot(0)
local(0 7) same slot
+gbk bkID(26) Incoming Locals(4 0x9): 7+ 0- <null> 8+ 
bkID(25) local(1 #0)  not ordered
bestLocal(1) bestLocalScore(24)
-bk  bkID(25) Incoming Locals(3 0x1): 7+ 0- 8- 
+bk  bkID(25) Incoming Locals(3 0x3): 7+ 0+ 8- 
-gbk bkID(26) Incoming Locals(4 0x9): 7+ 0- <null> 8+ 
+gbk bkID(26) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
bkID(25) local(1 #0)  ordered in goalBk(26)
-bk  bkID(25) Incoming Locals(3 0x3): 7+ 0+ 8- 
dstBk(25) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(25) Incoming Locals(3 0x3): 7+ 0+ 8- 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(26) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
dstBk(26) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(26) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
bkID(25) local(2 #8)  ordered in goalBk(26)
-bk  bkID(25) Incoming Locals(3 0x3): 7+ 0+ 8- 
dstBk(25) local(3 8) found in slot(2)
local(#3) swapped with local(#2)
+bk  bkID(25) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
bkID(25) local(3 #8)  ordered in goalBk(26)
-bk  bkID(25) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
dstBk(25) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(25) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(26) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
dstBk(26) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(26) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
bkID(25) local(0 #7)  not found in goalBk
bkID(25) local(1 #0)  not found in goalBk
bkID(25) local(3 #8)  ordered in goalBk(2)
-bk  bkID(25) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
dstBk(25) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(25) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  not found in goalBk
bkID(2) local(3 #8)  ordered in goalBk(26)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(26) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
dstBk(26) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(26) Incoming Locals(4 0xb): 7+ 0+ <null> 8+ 
bkID(2) local(4 #1)  not found in goalBk
bkID(2) local(2 #4)  not found in goalBk
bkID(2) local(3 #8)  not found in goalBk
bkID(2) local(4 #1)  not found in goalBk
bkID(7) local(0 #1)  not found in goalBk
bkID(7) local(1 #8)  not found in goalBk
bkID(7) local(0 #1)  ordered in goalBk(2)
-bk  bkID(7) Incoming Locals(2 0x0): 1- 8- 
dstBk(7) local(4 1) found in slot(0)
local(#4) swapped with local(#0)
+bk  bkID(7) Incoming Locals(5 0x10): <null> 8- <null> <null> 1+ 
bkID(7) local(1 #8)  ordered in goalBk(2)
-bk  bkID(7) Incoming Locals(5 0x10): <null> 8- <null> <null> 1+ 
dstBk(7) local(3 8) found in slot(1)
local(#3) swapped with local(#1)
+bk  bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(7) local(3 #8)  ordered in goalBk(2)
-bk  bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(7) local(4 #1)  ordered in goalBk(2)
-bk  bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  not found in goalBk
bkID(2) local(3 #8)  not found in goalBk
bkID(2) local(4 #1)  not found in goalBk
bkID(10) local(0 #4)  not found in goalBk
bkID(10) local(1 #1)  ordered in goalBk(7)
-bk  bkID(10) Incoming Locals(3 0x0): 4- 1- 8- 
dstBk(10) local(4 1) found in slot(1)
local(#4) swapped with local(#1)
+bk  bkID(10) Incoming Locals(5 0x10): 4- <null> 8- <null> 1+ 
bkID(10) local(2 #8)  ordered in goalBk(7)
-bk  bkID(10) Incoming Locals(5 0x10): 4- <null> 8- <null> 1+ 
dstBk(10) local(3 8) found in slot(2)
local(#3) swapped with local(#2)
+bk  bkID(10) Incoming Locals(5 0x18): 4- <null> <null> 8+ 1+ 
bkID(10) local(3 #8)  ordered in goalBk(7)
-bk  bkID(10) Incoming Locals(5 0x18): 4- <null> <null> 8+ 1+ 
dstBk(10) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(10) Incoming Locals(5 0x18): 4- <null> <null> 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(10) local(4 #1)  ordered in goalBk(7)
-bk  bkID(10) Incoming Locals(5 0x18): 4- <null> <null> 8+ 1+ 
dstBk(10) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(10) Incoming Locals(5 0x18): 4- <null> <null> 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(10) local(0 #4)  ordered in goalBk(2)
-bk  bkID(10) Incoming Locals(5 0x18): 4- <null> <null> 8+ 1+ 
dstBk(10) local(2 4) found in slot(0)
local(#2) swapped with local(#0)
+bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(10) local(2 #4)  ordered in goalBk(2)
-bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(10) local(3 #8)  ordered in goalBk(2)
-bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(10) local(4 #1)  ordered in goalBk(2)
-bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  not found in goalBk
bkID(2) local(3 #8)  ordered in goalBk(7)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(7)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(9) local(0 #8)  ordered in goalBk(7)
-bk  bkID(9) Incoming Locals(3 0x0): 8- 1- 4- 
dstBk(9) local(3 8) found in slot(0)
local(#3) swapped with local(#0)
+bk  bkID(9) Incoming Locals(4 0x8): <null> 1- 4- 8+ 
bkID(9) local(1 #1)  ordered in goalBk(7)
-bk  bkID(9) Incoming Locals(4 0x8): <null> 1- 4- 8+ 
dstBk(9) local(4 1) found in slot(1)
local(#4) swapped with local(#1)
+bk  bkID(9) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
bkID(9) local(2 #4)  not found in goalBk
bkID(9) local(3 #8)  ordered in goalBk(7)
-bk  bkID(9) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
dstBk(9) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(9) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(9) local(4 #1)  ordered in goalBk(7)
-bk  bkID(9) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
dstBk(9) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(9) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(9) local(2 #4)  ordered in goalBk(10)
-bk  bkID(9) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
dstBk(9) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(9) local(3 #8)  ordered in goalBk(10)
-bk  bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(9) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(9) local(4 #1)  ordered in goalBk(10)
-bk  bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(9) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(9) local(2 #4)  ordered in goalBk(2)
-bk  bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(9) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(9) local(3 #8)  ordered in goalBk(2)
-bk  bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(9) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(9) local(4 #1)  ordered in goalBk(2)
-bk  bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(9) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  not found in goalBk
bkID(2) local(3 #8)  ordered in goalBk(7)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(7)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(2) local(2 #4)  ordered in goalBk(10)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(3 #8)  ordered in goalBk(10)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(10)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(10) local(2 #4)  not found in goalBk
bkID(10) local(3 #8)  ordered in goalBk(7)
-bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(10) local(4 #1)  ordered in goalBk(7)
-bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(8) local(0 #8)  ordered in goalBk(9)
-bk  bkID(8) Incoming Locals(3 0x0): 8- 1- 4- 
dstBk(8) local(3 8) found in slot(0)
local(#3) swapped with local(#0)
+bk  bkID(8) Incoming Locals(4 0x8): <null> 1- 4- 8+ 
bkID(8) local(1 #1)  ordered in goalBk(9)
-bk  bkID(8) Incoming Locals(4 0x8): <null> 1- 4- 8+ 
dstBk(8) local(4 1) found in slot(1)
local(#4) swapped with local(#1)
+bk  bkID(8) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
bkID(8) local(2 #4)  ordered in goalBk(9)
-bk  bkID(8) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
dstBk(8) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(9) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(8) local(3 #8)  ordered in goalBk(9)
-bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(9) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(8) local(4 #1)  ordered in goalBk(9)
-bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(9) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(8) local(2 #4)  ordered in goalBk(10)
-bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(8) local(3 #8)  ordered in goalBk(10)
-bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(8) local(4 #1)  ordered in goalBk(10)
-bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(8) local(2 #4)  ordered in goalBk(2)
-bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(8) local(3 #8)  ordered in goalBk(2)
-bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(8) local(4 #1)  ordered in goalBk(2)
-bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  ordered in goalBk(9)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(9) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(3 #8)  ordered in goalBk(9)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(9) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(9)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(9) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  ordered in goalBk(10)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(3 #8)  ordered in goalBk(10)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(10)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(10) local(2 #4)  ordered in goalBk(9)
-bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(9) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(10) local(3 #8)  ordered in goalBk(9)
-bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(9) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(10) local(4 #1)  ordered in goalBk(9)
-bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(10) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(10) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(9) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(9) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(3) local(0 #1)  ordered in goalBk(7)
-bk  bkID(3) Incoming Locals(3 0x0): 1- 8- 4- 
dstBk(3) local(4 1) found in slot(0)
local(#4) swapped with local(#0)
+bk  bkID(3) Incoming Locals(5 0x10): <null> 8- 4- <null> 1+ 
bkID(3) local(1 #8)  ordered in goalBk(7)
-bk  bkID(3) Incoming Locals(5 0x10): <null> 8- 4- <null> 1+ 
dstBk(3) local(3 8) found in slot(1)
local(#3) swapped with local(#1)
+bk  bkID(3) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
bkID(3) local(2 #4)  not found in goalBk
bkID(3) local(3 #8)  ordered in goalBk(7)
-bk  bkID(3) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
dstBk(3) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(3) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(3) local(4 #1)  ordered in goalBk(7)
-bk  bkID(3) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
dstBk(3) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(3) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(3) local(2 #4)  ordered in goalBk(8)
-bk  bkID(3) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
dstBk(3) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(3) local(3 #8)  ordered in goalBk(8)
-bk  bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(3) local(4 #1)  ordered in goalBk(8)
-bk  bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(3) local(2 #4)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(3) local(3 #8)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(3) local(4 #1)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  not found in goalBk
bkID(2) local(3 #8)  ordered in goalBk(7)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(7)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(2) local(2 #4)  ordered in goalBk(8)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(3 #8)  ordered in goalBk(8)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(8)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(8) local(2 #4)  not found in goalBk
bkID(8) local(3 #8)  ordered in goalBk(7)
-bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(8) local(4 #1)  ordered in goalBk(7)
-bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(8) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(8) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
dstBk(7) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(7) Incoming Locals(5 0x18): <null> <null> <null> 8+ 1+ 
bkID(6) local(0 #4)  ordered in goalBk(3)
-bk  bkID(6) Incoming Locals(3 0x0): 4- 1- 8- 
dstBk(6) local(2 4) found in slot(0)
local(#2) swapped with local(#0)
+bk  bkID(6) Incoming Locals(3 0x4): 8- 1- 4+ 
bkID(6) local(1 #1)  ordered in goalBk(3)
-bk  bkID(6) Incoming Locals(3 0x4): 8- 1- 4+ 
dstBk(6) local(4 1) found in slot(1)
local(#4) swapped with local(#1)
+bk  bkID(6) Incoming Locals(5 0x14): 8- <null> 4+ <null> 1+ 
bkID(6) local(2 #4)  ordered in goalBk(3)
-bk  bkID(6) Incoming Locals(5 0x14): 8- <null> 4+ <null> 1+ 
dstBk(6) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(6) Incoming Locals(5 0x14): 8- <null> 4+ <null> 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(6) local(4 #1)  ordered in goalBk(3)
-bk  bkID(6) Incoming Locals(5 0x14): 8- <null> 4+ <null> 1+ 
dstBk(6) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(6) Incoming Locals(5 0x14): 8- <null> 4+ <null> 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(6) local(0 #8)  ordered in goalBk(2)
-bk  bkID(6) Incoming Locals(5 0x14): 8- <null> 4+ <null> 1+ 
dstBk(6) local(3 8) found in slot(0)
local(#3) swapped with local(#0)
+bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(6) local(2 #4)  ordered in goalBk(2)
-bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(6) local(3 #8)  ordered in goalBk(2)
-bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(6) local(4 #1)  ordered in goalBk(2)
-bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(3 #8)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(5) local(0 #8)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(3 0x0): 8- 1- 4- 
dstBk(5) local(3 8) found in slot(0)
local(#3) swapped with local(#0)
+bk  bkID(5) Incoming Locals(4 0x8): <null> 1- 4- 8+ 
bkID(5) local(1 #1)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(4 0x8): <null> 1- 4- 8+ 
dstBk(5) local(4 1) found in slot(1)
local(#4) swapped with local(#1)
+bk  bkID(5) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
bkID(5) local(2 #4)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
dstBk(5) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(5) local(3 #8)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(5) local(4 #1)  ordered in goalBk(3)
-bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(5) local(2 #4)  ordered in goalBk(6)
-bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(5) local(3 #8)  ordered in goalBk(6)
-bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(5) local(4 #1)  ordered in goalBk(6)
-bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(5) local(2 #4)  ordered in goalBk(2)
-bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(5) local(3 #8)  ordered in goalBk(2)
-bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(5) local(4 #1)  ordered in goalBk(2)
-bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(3 #8)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  ordered in goalBk(6)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(3 #8)  ordered in goalBk(6)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(6)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(6) local(2 #4)  ordered in goalBk(3)
-bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(6) local(3 #8)  ordered in goalBk(3)
-bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(6) local(4 #1)  ordered in goalBk(3)
-bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(4) local(0 #8)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(3 0x0): 8- 1- 4- 
dstBk(4) local(3 8) found in slot(0)
local(#3) swapped with local(#0)
+bk  bkID(4) Incoming Locals(4 0x8): <null> 1- 4- 8+ 
bkID(4) local(1 #1)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(4 0x8): <null> 1- 4- 8+ 
dstBk(4) local(4 1) found in slot(1)
local(#4) swapped with local(#1)
+bk  bkID(4) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
bkID(4) local(2 #4)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(5 0x18): <null> <null> 4- 8+ 1+ 
dstBk(4) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(4) local(3 #8)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(4) local(4 #1)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(4) local(2 #4)  ordered in goalBk(6)
-bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(4) local(3 #8)  ordered in goalBk(6)
-bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(4) local(4 #1)  ordered in goalBk(6)
-bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(4) local(2 #4)  ordered in goalBk(2)
-bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(4) local(3 #8)  ordered in goalBk(2)
-bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(4) local(4 #1)  ordered in goalBk(2)
-bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  ordered in goalBk(5)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(3 #8)  ordered in goalBk(5)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(5)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  ordered in goalBk(6)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(3 #8)  ordered in goalBk(6)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(6)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(6) local(2 #4)  ordered in goalBk(5)
-bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(6) local(3 #8)  ordered in goalBk(5)
-bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(6) local(4 #1)  ordered in goalBk(5)
-bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(6) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(6) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(5) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(5) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(3 #8)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  ordered in goalBk(4)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(3 #8)  ordered in goalBk(4)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(4)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(3 #8)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(3 #8)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(2 #4)  ordered in goalBk(4)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(3 #8)  ordered in goalBk(4)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(4)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(4) local(2 #4)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(2 4) found in slot(2)
local(2 4) same slot
+bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(2 4) found in slot(2)
local(2 4) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(4) local(3 #8)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(3 8) found in slot(3)
local(3 8) same slot
+bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(3 8) found in slot(3)
local(3 8) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
bkID(4) local(4 #1)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(4) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(4) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
dstBk(3) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(3) Incoming Locals(5 0x1c): <null> <null> 4+ 8+ 1+ 
Popping blockID(2)
bkID(0) local(0 #0)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(2 0x0): 0- 1- 
+bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
-gbk bkID(1) Incoming Locals(6 0x1e): 7- 5+ 4+ 8+ 1+ 0- 
+gbk bkID(1) Incoming Locals(6 0x1f): 0+ 5+ 4+ 8+ 1+ 7- 
bkID(0) local(0 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
dstBk(0) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
 ordered in bk
-gbk bkID(1) Incoming Locals(6 0x1f): 0+ 5+ 4+ 8+ 1+ 7- 
dstBk(1) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(1) Incoming Locals(6 0x1f): 0+ 5+ 4+ 8+ 1+ 7- 
bkID(0) local(1 #1)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
dstBk(0) local(4 1) found in slot(1)
local(#4) swapped with local(#1)
+bk  bkID(0) Incoming Locals(5 0x11): 0+ <null> <null> <null> 1+ 
bkID(0) local(4 #1)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(5 0x11): 0+ <null> <null> <null> 1+ 
dstBk(0) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(0) Incoming Locals(5 0x11): 0+ <null> <null> <null> 1+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(6 0x1f): 0+ 5+ 4+ 8+ 1+ 7- 
dstBk(1) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(1) Incoming Locals(6 0x1f): 0+ 5+ 4+ 8+ 1+ 7- 
pre  bkID(1) Incoming Locals(6 0x1f): 0+ 5+ 4+ 8+ 1+ 7- 
local(#5) swapped with local(#5)
post bkID(1) Incoming Locals(6 0x3f): 0+ 5+ 4+ 8+ 1+ 7+ 
pre  bkID(30) Incoming Locals(6 0x27): 7+ 5+ 4+ 6- <null> <null> 
local(#3) swapped with local(#3)
post bkID(30) Incoming Locals(6 0x2f): 7+ 5+ 4+ 6+ <null> <null> 

#################################################

The maximum node counts per root node are 8
IR block list contains 34 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 10 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x11
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:139)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<0>  (0x94c150):    iconst_0 
<1>  (0x94c151):    istore_2 
<2>  (0x94c152):    iconst_0 
<3>  (0x94c153):    istore_3 
<4>  (0x94c154):    iconst_0 
<5>  (0x94c155):    istore 4
<7>  (0x94c157):    aload_0 
<8>  (0x94c158):    agetfield_quick #2
<11>  (0x94c15b):    getfield_quick #48
<14>  (0x94c15e):    istore 5
<16>  (0x94c160):    iconst_0 
<17>  (0x94c161):    istore 7
<19>  (0x94c163):    iconst_0 
<20>  (0x94c164):    istore 8
<22>  (0x94c166):    goto <691>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(5)
 
Incoming Locals(5): 
	local(0)	ID(5)
 	<null>
	<null>
	<null>
	local(1)	ID(76)
 
Assigned Locals(6): 
	ASSIGN(16): local(2)	ID(15)	rhsID(2)
 	ASSIGN(18): local(3)	ID(17)	rhsID(3)
 	ASSIGN(20): local(4)	ID(19)	rhsID(4)
 	ASSIGN(22): local(5)	ID(21)	rhsID(11)
 	ASSIGN(25): local(7)	ID(24)	rhsID(13)
 	ASSIGN(27): local(8)	ID(26)	rhsID(14)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(6) RefsOK(1) Locals(0 5 4 8 1 7)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 8) IDENTITY (reference)  (ref count: 2)
      <(ID: 12) FETCH (reference) 
         <(ID: 7) FIELD_REF (reference) 
            <(ID: 5) LOCAL (reference)   0>
            <(ID: 6) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 11) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 23) FETCH (32-bit field) 
         <(ID: 10) FIELD_REF (32-bit field) 
            <(ID: 8) IDENTITY (reference)  (ref count: 2)
            <(ID: 9) CONST_FIELD_OFFSET (NONE)  (48)

   <(ID: 16) ASSIGN (int)  (assignIdx: 0)
      <(ID: 15) LOCAL (int)   2>
      <(ID: 2) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 18) ASSIGN (int)  (assignIdx: 1)
      <(ID: 17) LOCAL (int)   3>
      <(ID: 3) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 20) ASSIGN (int)  (assignIdx: 2)
      <(ID: 19) LOCAL (int)   4>
      <(ID: 4) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 22) ASSIGN (32-bit field)  (assignIdx: 3)
      <(ID: 21) LOCAL (32-bit field)   5>
      <(ID: 11) IDENTITY (32-bit field)  (ref count: 2)

   <(ID: 25) ASSIGN (int)  (assignIdx: 4)
      <(ID: 24) LOCAL (int)   7>
      <(ID: 13) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 27) ASSIGN (int)  (assignIdx: 5)
      <(ID: 26) LOCAL (int)   8>
      <(ID: 14) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 28) GOTO (NONE) 
   target: (BlockID: 1 BlockPC: 691)


*************************************************
*
* (block ID:2 block PC:25 )
* IR root list contains 8 root nodes: in block 
* flags: 0x361
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3c
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:151)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<25>  (0x94c169):    aload_1 
<26>  (0x94c16a):    agetfield_quick #3
<29>  (0x94c16d):    iload 8
<31>  (0x94c16f):    baload 
<32>  (0x94c170):    ifne <98>
<35>  (0x94c173):    aload_1 
<36>  (0x94c174):    agetfield_quick #3
<39>  (0x94c177):    iload 8
<41>  (0x94c179):    bipush 8
<43>  (0x94c17b):    iadd 
<44>  (0x94c17c):    baload 
<45>  (0x94c17d):    ifne <51>
<48>  (0x94c180):    iinc 4 255
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(1)	ID(76)
 	local(8)	ID(80)
 	local(4)	ID(99)
 
Incoming Locals(6): 
	<null>
	<null>
	local(4)	ID(623)
 	local(8)	ID(80)
 	local(1)	ID(76)
 	<null>

Assigned Locals(1): 
	ASSIGN(103): local(4)	ID(102)	rhsID(101)
 
Successor Blocks(2): 
	ID(3) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(<null> <null> 4 8 1)
	ID(4) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(<null> <null> 4 8 1)

   <(ID: 75) MAP_PC (NONE)   25>

   <(ID: 79) IDENTITY (reference)  (ref count: 4)
      <(ID: 87) FETCH (reference) 
         <(ID: 78) FIELD_REF (reference) 
            <(ID: 76) LOCAL (reference)   1>
            <(ID: 77) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 84) IDENTITY (int)  (ref count: 2)
      <(ID: 88) FETCH (int) 
         <(ID: 83) INDEX (int) 
            <(ID: 79) IDENTITY (reference)  (ref count: 4)
            <(ID: 82) BOUNDS_CHECK (int) 
               <(ID: 80) IDENTITY (int)  (ref count: 2)
                  <(ID: 96) LOCAL (int)   8>
               <(ID: 81) IDENTITY (int)  (ref count: 2)
                  <(ID: 97) ARRAY_LENGTH (int) 
                     <(ID: 79) IDENTITY (reference)  (ref count: 4)

   <(ID: 86) BCOND (int) 
   target: (BlockID: 3 BlockPC: 98)
   condition: NE
   flags: 0
      <(ID: 84) IDENTITY (int)  (ref count: 2)
      <(ID: 85) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 93) IDENTITY (int)  (ref count: 2)
      <(ID: 98) FETCH (int) 
         <(ID: 92) INDEX (int) 
            <(ID: 79) IDENTITY (reference)  (ref count: 4)
            <(ID: 91) BOUNDS_CHECK (int) 
               <(ID: 90) ADD (int) 
                  <(ID: 80) IDENTITY (int)  (ref count: 2)
                  <(ID: 89) CONST_JAVA_NUMERIC32 (int)  (8)
               <(ID: 81) IDENTITY (int)  (ref count: 2)

   <(ID: 95) BCOND (int) 
   target: (BlockID: 4 BlockPC: 51)
   condition: NE
   flags: 0
      <(ID: 93) IDENTITY (int)  (ref count: 2)
      <(ID: 94) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 99) IDENTITY (int)  (ref count: 2)
      <(ID: 104) LOCAL (int)   4>

   <(ID: 103) ASSIGN (int)  (assignIdx: 0)
      <(ID: 102) LOCAL (int)   4>
      <(ID: 101) SUB (int) 
         <(ID: 99) IDENTITY (int)  (ref count: 2)
         <(ID: 100) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:4 block PC:51 )
* IR root list contains 6 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1c
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:158)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<51>  (0x94c183):    iload 8
<53>  (0x94c185):    bipush 8
<55>  (0x94c187):    irem 
<56>  (0x94c188):    ifeq <72>
<59>  (0x94c18b):    aload_1 
<60>  (0x94c18c):    agetfield_quick #3
<63>  (0x94c18f):    iload 8
<65>  (0x94c191):    bipush 7
<67>  (0x94c193):    iadd 
<68>  (0x94c194):    baload 
<69>  (0x94c195):    ifeq <95>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(8)	ID(174)
 	local(1)	ID(180)
 
Incoming Locals(5): 
	<null>
	<null>
	local(4)	ID(623)
 	local(8)	ID(174)
 	local(1)	ID(144)
 
Successor Blocks(2): 
	ID(5) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(<null> <null> 4 8 1)
	ID(6) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(<null> <null> 4 8 1)

   <(ID: 173) MAP_PC (NONE)   51>

   <(ID: 176) IDENTITY (int)  (ref count: 2)
      <(ID: 179) REM (int) 
         <(ID: 174) IDENTITY (int)  (ref count: 2)
            <(ID: 193) LOCAL (int)   8>
         <(ID: 175) CONST_JAVA_NUMERIC32 (int)  (8)

   <(ID: 178) BCOND (int) 
   target: (BlockID: 5 BlockPC: 72)
   condition: EQ
   flags: 0
      <(ID: 176) IDENTITY (int)  (ref count: 2)
      <(ID: 177) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 183) IDENTITY (reference)  (ref count: 3)
      <(ID: 192) FETCH (reference) 
         <(ID: 182) FIELD_REF (reference) 
            <(ID: 180) LOCAL (reference)   1>
            <(ID: 181) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 189) IDENTITY (int)  (ref count: 2)
      <(ID: 194) FETCH (int) 
         <(ID: 188) INDEX (int) 
            <(ID: 183) IDENTITY (reference)  (ref count: 3)
            <(ID: 187) BOUNDS_CHECK (int) 
               <(ID: 185) ADD (int) 
                  <(ID: 174) IDENTITY (int)  (ref count: 2)
                  <(ID: 184) CONST_JAVA_NUMERIC32 (int)  (7)
               <(ID: 186) ARRAY_LENGTH (int) 
                  <(ID: 183) IDENTITY (reference)  (ref count: 3)

   <(ID: 191) BCOND (int) 
   target: (BlockID: 6 BlockPC: 95)
   condition: EQ
   flags: 0
      <(ID: 189) IDENTITY (int)  (ref count: 2)
      <(ID: 190) CONST_JAVA_NUMERIC32 (int)  (0)



*************************************************
*
* (block ID:5 block PC:72 )
* IR root list contains 6 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1c
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:158)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<72>  (0x94c198):    iload 8
<74>  (0x94c19a):    bipush 8
<76>  (0x94c19c):    irem 
<77>  (0x94c19d):    bipush 7
<79>  (0x94c19f):    if_icmpeq <98>
<82>  (0x94c1a2):    aload_1 
<83>  (0x94c1a3):    agetfield_quick #3
<86>  (0x94c1a6):    iload 8
<88>  (0x94c1a8):    bipush 9
<90>  (0x94c1aa):    iadd 
<91>  (0x94c1ab):    baload 
<92>  (0x94c1ac):    ifne <98>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(8)	ID(243)
 	local(1)	ID(249)
 
Incoming Locals(5): 
	<null>
	<null>
	local(4)	ID(623)
 	local(8)	ID(243)
 	local(1)	ID(144)
 
Successor Blocks(2): 
	ID(3) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(<null> <null> 4 8 1)
	ID(6) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(<null> <null> 4 8 1)

   <(ID: 242) MAP_PC (NONE)   72>

   <(ID: 245) IDENTITY (int)  (ref count: 2)
      <(ID: 248) REM (int) 
         <(ID: 243) IDENTITY (int)  (ref count: 2)
            <(ID: 262) LOCAL (int)   8>
         <(ID: 244) CONST_JAVA_NUMERIC32 (int)  (8)

   <(ID: 247) BCOND (int) 
   target: (BlockID: 3 BlockPC: 98)
   condition: EQ
   flags: 0
      <(ID: 245) IDENTITY (int)  (ref count: 2)
      <(ID: 246) CONST_JAVA_NUMERIC32 (int)  (7)


   <(ID: 252) IDENTITY (reference)  (ref count: 3)
      <(ID: 261) FETCH (reference) 
         <(ID: 251) FIELD_REF (reference) 
            <(ID: 249) LOCAL (reference)   1>
            <(ID: 250) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 258) IDENTITY (int)  (ref count: 2)
      <(ID: 263) FETCH (int) 
         <(ID: 257) INDEX (int) 
            <(ID: 252) IDENTITY (reference)  (ref count: 3)
            <(ID: 256) BOUNDS_CHECK (int) 
               <(ID: 254) ADD (int) 
                  <(ID: 243) IDENTITY (int)  (ref count: 2)
                  <(ID: 253) CONST_JAVA_NUMERIC32 (int)  (9)
               <(ID: 255) ARRAY_LENGTH (int) 
                  <(ID: 252) IDENTITY (reference)  (ref count: 3)

   <(ID: 260) BCOND (int) 
   target: (BlockID: 3 BlockPC: 98)
   condition: NE
   flags: 0
      <(ID: 258) IDENTITY (int)  (ref count: 2)
      <(ID: 259) CONST_JAVA_NUMERIC32 (int)  (0)



*************************************************
*
* (block ID:6 block PC:95 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1c
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:160)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<95>  (0x94c1af):    iinc 4 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(4)	ID(265)
 
Incoming Locals(5): 
	<null>
	<null>
	local(4)	ID(265)
 	local(8)	ID(148)
 	local(1)	ID(144)
 
Assigned Locals(1): 
	ASSIGN(269): local(4)	ID(268)	rhsID(267)
 
Successor Blocks(1): 
	ID(3) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(<null> <null> 4 8 1)

   <(ID: 264) MAP_PC (NONE)   95>

   <(ID: 265) IDENTITY (int)  (ref count: 2)
      <(ID: 270) LOCAL (int)   4>

   <(ID: 269) ASSIGN (int)  (assignIdx: 0)
      <(ID: 268) LOCAL (int)   4>
      <(ID: 267) ADD (int) 
         <(ID: 265) IDENTITY (int)  (ref count: 2)
         <(ID: 266) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:3 block PC:98 )
* IR root list contains 8 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1c
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:163)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<98>  (0x94c1b2):    aload_1 
<99>  (0x94c1b3):    agetfield_quick #3
<102>  (0x94c1b6):    iload 8
<104>  (0x94c1b8):    baload 
<105>  (0x94c1b9):    bipush 6
<107>  (0x94c1bb):    if_icmpne <179>
<110>  (0x94c1be):    aload_1 
<111>  (0x94c1bf):    agetfield_quick #3
<114>  (0x94c1c2):    iload 8
<116>  (0x94c1c4):    bipush 8
<118>  (0x94c1c6):    isub 
<119>  (0x94c1c7):    baload 
<120>  (0x94c1c8):    bipush 6
<122>  (0x94c1ca):    if_icmpne <128>
<125>  (0x94c1cd):    iinc 4 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(1)	ID(144)
 	local(8)	ID(148)
 	local(4)	ID(167)
 
Incoming Locals(5): 
	<null>
	<null>
	local(4)	ID(623)
 	local(8)	ID(148)
 	local(1)	ID(144)
 
Assigned Locals(1): 
	ASSIGN(171): local(4)	ID(170)	rhsID(169)
 
Successor Blocks(2): 
	ID(7) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(<null> <null> <null> 8 1)
	ID(8) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(<null> <null> 4 8 1)

   <(ID: 143) MAP_PC (NONE)   98>

   <(ID: 147) IDENTITY (reference)  (ref count: 4)
      <(ID: 155) FETCH (reference) 
         <(ID: 146) FIELD_REF (reference) 
            <(ID: 144) LOCAL (reference)   1>
            <(ID: 145) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 152) IDENTITY (int)  (ref count: 2)
      <(ID: 156) FETCH (int) 
         <(ID: 151) INDEX (int) 
            <(ID: 147) IDENTITY (reference)  (ref count: 4)
            <(ID: 150) BOUNDS_CHECK (int) 
               <(ID: 148) IDENTITY (int)  (ref count: 2)
                  <(ID: 164) LOCAL (int)   8>
               <(ID: 149) IDENTITY (int)  (ref count: 2)
                  <(ID: 165) ARRAY_LENGTH (int) 
                     <(ID: 147) IDENTITY (reference)  (ref count: 4)

   <(ID: 154) BCOND (int) 
   target: (BlockID: 7 BlockPC: 179)
   condition: NE
   flags: 0
      <(ID: 152) IDENTITY (int)  (ref count: 2)
      <(ID: 153) CONST_JAVA_NUMERIC32 (int)  (6)


   <(ID: 161) IDENTITY (int)  (ref count: 2)
      <(ID: 166) FETCH (int) 
         <(ID: 160) INDEX (int) 
            <(ID: 147) IDENTITY (reference)  (ref count: 4)
            <(ID: 159) BOUNDS_CHECK (int) 
               <(ID: 158) SUB (int) 
                  <(ID: 148) IDENTITY (int)  (ref count: 2)
                  <(ID: 157) CONST_JAVA_NUMERIC32 (int)  (8)
               <(ID: 149) IDENTITY (int)  (ref count: 2)

   <(ID: 163) BCOND (int) 
   target: (BlockID: 8 BlockPC: 128)
   condition: NE
   flags: 0
      <(ID: 161) IDENTITY (int)  (ref count: 2)
      <(ID: 162) CONST_JAVA_NUMERIC32 (int)  (6)


   <(ID: 167) IDENTITY (int)  (ref count: 2)
      <(ID: 172) LOCAL (int)   4>

   <(ID: 171) ASSIGN (int)  (assignIdx: 0)
      <(ID: 170) LOCAL (int)   4>
      <(ID: 169) ADD (int) 
         <(ID: 167) IDENTITY (int)  (ref count: 2)
         <(ID: 168) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:8 block PC:128 )
* IR root list contains 6 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1c
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:170)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<128>  (0x94c1d0):    iload 8
<130>  (0x94c1d2):    bipush 8
<132>  (0x94c1d4):    irem 
<133>  (0x94c1d5):    bipush 7
<135>  (0x94c1d7):    if_icmpeq <153>
<138>  (0x94c1da):    aload_1 
<139>  (0x94c1db):    agetfield_quick #3
<142>  (0x94c1de):    iload 8
<144>  (0x94c1e0):    bipush 7
<146>  (0x94c1e2):    isub 
<147>  (0x94c1e3):    baload 
<148>  (0x94c1e4):    bipush 6
<150>  (0x94c1e6):    if_icmpeq <176>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(8)	ID(221)
 	local(1)	ID(227)
 
Incoming Locals(5): 
	<null>
	<null>
	local(4)	ID(623)
 	local(8)	ID(221)
 	local(1)	ID(206)
 
Successor Blocks(2): 
	ID(9) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(<null> <null> 4 8 1)
	ID(10) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(<null> <null> 4 8 1)

   <(ID: 220) MAP_PC (NONE)   128>

   <(ID: 223) IDENTITY (int)  (ref count: 2)
      <(ID: 226) REM (int) 
         <(ID: 221) IDENTITY (int)  (ref count: 2)
            <(ID: 240) LOCAL (int)   8>
         <(ID: 222) CONST_JAVA_NUMERIC32 (int)  (8)

   <(ID: 225) BCOND (int) 
   target: (BlockID: 9 BlockPC: 153)
   condition: EQ
   flags: 0
      <(ID: 223) IDENTITY (int)  (ref count: 2)
      <(ID: 224) CONST_JAVA_NUMERIC32 (int)  (7)


   <(ID: 230) IDENTITY (reference)  (ref count: 3)
      <(ID: 239) FETCH (reference) 
         <(ID: 229) FIELD_REF (reference) 
            <(ID: 227) LOCAL (reference)   1>
            <(ID: 228) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 236) IDENTITY (int)  (ref count: 2)
      <(ID: 241) FETCH (int) 
         <(ID: 235) INDEX (int) 
            <(ID: 230) IDENTITY (reference)  (ref count: 3)
            <(ID: 234) BOUNDS_CHECK (int) 
               <(ID: 232) SUB (int) 
                  <(ID: 221) IDENTITY (int)  (ref count: 2)
                  <(ID: 231) CONST_JAVA_NUMERIC32 (int)  (7)
               <(ID: 233) ARRAY_LENGTH (int) 
                  <(ID: 230) IDENTITY (reference)  (ref count: 3)

   <(ID: 238) BCOND (int) 
   target: (BlockID: 10 BlockPC: 176)
   condition: EQ
   flags: 0
      <(ID: 236) IDENTITY (int)  (ref count: 2)
      <(ID: 237) CONST_JAVA_NUMERIC32 (int)  (6)



*************************************************
*
* (block ID:9 block PC:153 )
* IR root list contains 6 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1c
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:170)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<153>  (0x94c1e9):    iload 8
<155>  (0x94c1eb):    bipush 8
<157>  (0x94c1ed):    irem 
<158>  (0x94c1ee):    ifeq <179>
<161>  (0x94c1f1):    aload_1 
<162>  (0x94c1f2):    agetfield_quick #3
<165>  (0x94c1f5):    iload 8
<167>  (0x94c1f7):    bipush 9
<169>  (0x94c1f9):    isub 
<170>  (0x94c1fa):    baload 
<171>  (0x94c1fb):    bipush 6
<173>  (0x94c1fd):    if_icmpne <179>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(8)	ID(601)
 	local(1)	ID(607)
 
Incoming Locals(5): 
	<null>
	<null>
	local(4)	ID(623)
 	local(8)	ID(601)
 	local(1)	ID(206)
 
Successor Blocks(2): 
	ID(7) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(<null> <null> <null> 8 1)
	ID(10) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(<null> <null> 4 8 1)

   <(ID: 600) MAP_PC (NONE)   153>

   <(ID: 603) IDENTITY (int)  (ref count: 2)
      <(ID: 606) REM (int) 
         <(ID: 601) IDENTITY (int)  (ref count: 2)
            <(ID: 620) LOCAL (int)   8>
         <(ID: 602) CONST_JAVA_NUMERIC32 (int)  (8)

   <(ID: 605) BCOND (int) 
   target: (BlockID: 7 BlockPC: 179)
   condition: EQ
   flags: 0
      <(ID: 603) IDENTITY (int)  (ref count: 2)
      <(ID: 604) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 610) IDENTITY (reference)  (ref count: 3)
      <(ID: 619) FETCH (reference) 
         <(ID: 609) FIELD_REF (reference) 
            <(ID: 607) LOCAL (reference)   1>
            <(ID: 608) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 616) IDENTITY (int)  (ref count: 2)
      <(ID: 621) FETCH (int) 
         <(ID: 615) INDEX (int) 
            <(ID: 610) IDENTITY (reference)  (ref count: 3)
            <(ID: 614) BOUNDS_CHECK (int) 
               <(ID: 612) SUB (int) 
                  <(ID: 601) IDENTITY (int)  (ref count: 2)
                  <(ID: 611) CONST_JAVA_NUMERIC32 (int)  (9)
               <(ID: 613) ARRAY_LENGTH (int) 
                  <(ID: 610) IDENTITY (reference)  (ref count: 3)

   <(ID: 618) BCOND (int) 
   target: (BlockID: 7 BlockPC: 179)
   condition: NE
   flags: 0
      <(ID: 616) IDENTITY (int)  (ref count: 2)
      <(ID: 617) CONST_JAVA_NUMERIC32 (int)  (6)



*************************************************
*
* (block ID:10 block PC:176 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1c
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:172)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<176>  (0x94c200):    iinc 4 255
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(4)	ID(623)
 
Incoming Locals(5): 
	<null>
	<null>
	local(4)	ID(623)
 	local(8)	ID(210)
 	local(1)	ID(206)
 
Assigned Locals(1): 
	ASSIGN(627): local(4)	ID(626)	rhsID(625)
 
Successor Blocks(1): 
	ID(7) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(<null> <null> <null> 8 1)

   <(ID: 622) MAP_PC (NONE)   176>

   <(ID: 623) IDENTITY (int)  (ref count: 2)
      <(ID: 628) LOCAL (int)   4>

   <(ID: 627) ASSIGN (int)  (assignIdx: 0)
      <(ID: 626) LOCAL (int)   4>
      <(ID: 625) SUB (int) 
         <(ID: 623) IDENTITY (int)  (ref count: 2)
         <(ID: 624) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:7 block PC:179 )
* IR root list contains 5 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x18
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:176)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<179>  (0x94c203):    aload_1 
<180>  (0x94c204):    agetfield_quick #3
<183>  (0x94c207):    iload 8
<185>  (0x94c209):    baload 
<186>  (0x94c20a):    lookupswitch 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(1)	ID(206)
 	local(8)	ID(210)
 
Incoming Locals(5): 
	<null>
	<null>
	<null>
	local(8)	ID(210)
 	local(1)	ID(206)
 
Successor Blocks(1): 
	ID(24) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 205) MAP_PC (NONE)   179>

   <(ID: 209) IDENTITY (reference)  (ref count: 3)
      <(ID: 217) FETCH (reference) 
         <(ID: 208) FIELD_REF (reference) 
            <(ID: 206) LOCAL (reference)   1>
            <(ID: 207) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 214) IDENTITY (int)  (ref count: 3)
      <(ID: 218) FETCH (int) 
         <(ID: 213) INDEX (int) 
            <(ID: 209) IDENTITY (reference)  (ref count: 3)
            <(ID: 212) BOUNDS_CHECK (int) 
               <(ID: 210) LOCAL (int)   8>
               <(ID: 211) ARRAY_LENGTH (int) 
                  <(ID: 209) IDENTITY (reference)  (ref count: 3)

   <(ID: 216) BCOND (int) 
   target: (BlockID: 24 BlockPC: 300)
   condition: EQ
   flags: 0
      <(ID: 214) IDENTITY (int)  (ref count: 3)
      <(ID: 215) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 219) TABLESWITCH (NONE) 
   Key:
      <(ID: 214) IDENTITY (int)  (ref count: 3)
   default target: (BlockID: 11 BlockPC: 688)
   	low: 0
   	high: 11
   	nElements: 12
   	tableList blocks:
      jump offset 0: (BlockID: 12 BlockPC: 303)
      jump offset 1: (BlockID: 13 BlockPC: 330)
      jump offset 2: (BlockID: 14 BlockPC: 357)
      jump offset 3: (BlockID: 15 BlockPC: 384)
      jump offset 4: (BlockID: 16 BlockPC: 411)
      jump offset 5: (BlockID: 17 BlockPC: 438)
      jump offset 6: (BlockID: 18 BlockPC: 497)
      jump offset 7: (BlockID: 19 BlockPC: 524)
      jump offset 8: (BlockID: 20 BlockPC: 551)
      jump offset 9: (BlockID: 21 BlockPC: 578)
      jump offset 10: (BlockID: 22 BlockPC: 605)
      jump offset 11: (BlockID: 23 BlockPC: 632)


*************************************************
*
* (block ID:24 block PC:300 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:178)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<300>  (0x94c27c):    goto <688>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(11) LocalOrder(0) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 271) MAP_PC (NONE)   300>

   <(ID: 272) GOTO (NONE) 
   target: (BlockID: 11 BlockPC: 688)


*************************************************
*
* (block ID:12 block PC:303 )
* IR root list contains 7 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:180)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<303>  (0x94c27f):    iload 7
<305>  (0x94c281):    aload_0 
<306>  (0x94c282):    agetfield_quick #2
<309>  (0x94c285):    getfield_quick #42
<312>  (0x94c288):    iadd 
<313>  (0x94c289):    istore 7
<315>  (0x94c28b):    iload 7
<317>  (0x94c28d):    aload_0 
<318>  (0x94c28e):    agetfield_quick #13
<321>  (0x94c291):    iload 8
<323>  (0x94c293):    iaload 
<324>  (0x94c294):    iadd 
<325>  (0x94c295):    istore 7
<327>  (0x94c297):    goto <688>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(304): local(7)	ID(303)	rhsID(300)
 
Successor Blocks(1): 
	ID(11) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals()

   <(ID: 280) MAP_PC (NONE)   303>

   <(ID: 285) IDENTITY (reference)  (ref count: 2)
      <(ID: 289) FETCH (reference) 
         <(ID: 284) FIELD_REF (reference) 
            <(ID: 282) IDENTITY (reference)  (ref count: 2)
               <(ID: 294) LOCAL (reference)   0>
            <(ID: 283) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 288) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 301) FETCH (32-bit field) 
         <(ID: 287) FIELD_REF (32-bit field) 
            <(ID: 285) IDENTITY (reference)  (ref count: 2)
            <(ID: 286) CONST_FIELD_OFFSET (NONE)  (42)

   <(ID: 293) IDENTITY (reference)  (ref count: 3)
      <(ID: 302) FETCH (reference) 
         <(ID: 292) FIELD_REF (reference) 
            <(ID: 282) IDENTITY (reference)  (ref count: 2)
            <(ID: 291) CONST_FIELD_OFFSET (NONE)  (13)

   <(ID: 300) IDENTITY (int)  (ref count: 2)
      <(ID: 305) ADD (int) 
         <(ID: 290) ADD (int) 
            <(ID: 281) LOCAL (int)   7>
            <(ID: 288) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 299) FETCH (int) 
            <(ID: 298) INDEX (int) 
               <(ID: 293) IDENTITY (reference)  (ref count: 3)
               <(ID: 297) BOUNDS_CHECK (int) 
                  <(ID: 295) LOCAL (int)   8>
                  <(ID: 296) ARRAY_LENGTH (int) 
                     <(ID: 293) IDENTITY (reference)  (ref count: 3)

   <(ID: 304) ASSIGN (int)  (assignIdx: 0)
      <(ID: 303) LOCAL (int)   7>
      <(ID: 300) IDENTITY (int)  (ref count: 2)

   <(ID: 306) GOTO (NONE) 
   target: (BlockID: 11 BlockPC: 688)


*************************************************
*
* (block ID:13 block PC:330 )
* IR root list contains 7 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:184)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<330>  (0x94c29a):    iload 7
<332>  (0x94c29c):    aload_0 
<333>  (0x94c29d):    agetfield_quick #2
<336>  (0x94c2a0):    getfield_quick #44
<339>  (0x94c2a3):    iadd 
<340>  (0x94c2a4):    istore 7
<342>  (0x94c2a6):    iload 7
<344>  (0x94c2a8):    aload_0 
<345>  (0x94c2a9):    agetfield_quick #3
<348>  (0x94c2ac):    iload 8
<350>  (0x94c2ae):    iaload 
<351>  (0x94c2af):    iadd 
<352>  (0x94c2b0):    istore 7
<354>  (0x94c2b2):    goto <688>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(331): local(7)	ID(330)	rhsID(327)
 
Successor Blocks(1): 
	ID(11) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals()

   <(ID: 307) MAP_PC (NONE)   330>

   <(ID: 312) IDENTITY (reference)  (ref count: 2)
      <(ID: 316) FETCH (reference) 
         <(ID: 311) FIELD_REF (reference) 
            <(ID: 309) IDENTITY (reference)  (ref count: 2)
               <(ID: 321) LOCAL (reference)   0>
            <(ID: 310) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 315) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 328) FETCH (32-bit field) 
         <(ID: 314) FIELD_REF (32-bit field) 
            <(ID: 312) IDENTITY (reference)  (ref count: 2)
            <(ID: 313) CONST_FIELD_OFFSET (NONE)  (44)

   <(ID: 320) IDENTITY (reference)  (ref count: 3)
      <(ID: 329) FETCH (reference) 
         <(ID: 319) FIELD_REF (reference) 
            <(ID: 309) IDENTITY (reference)  (ref count: 2)
            <(ID: 318) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 327) IDENTITY (int)  (ref count: 2)
      <(ID: 332) ADD (int) 
         <(ID: 317) ADD (int) 
            <(ID: 308) LOCAL (int)   7>
            <(ID: 315) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 326) FETCH (int) 
            <(ID: 325) INDEX (int) 
               <(ID: 320) IDENTITY (reference)  (ref count: 3)
               <(ID: 324) BOUNDS_CHECK (int) 
                  <(ID: 322) LOCAL (int)   8>
                  <(ID: 323) ARRAY_LENGTH (int) 
                     <(ID: 320) IDENTITY (reference)  (ref count: 3)

   <(ID: 331) ASSIGN (int)  (assignIdx: 0)
      <(ID: 330) LOCAL (int)   7>
      <(ID: 327) IDENTITY (int)  (ref count: 2)

   <(ID: 333) GOTO (NONE) 
   target: (BlockID: 11 BlockPC: 688)


*************************************************
*
* (block ID:14 block PC:357 )
* IR root list contains 7 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:188)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<357>  (0x94c2b5):    iload 7
<359>  (0x94c2b7):    aload_0 
<360>  (0x94c2b8):    agetfield_quick #2
<363>  (0x94c2bb):    getfield_quick #43
<366>  (0x94c2be):    iadd 
<367>  (0x94c2bf):    istore 7
<369>  (0x94c2c1):    iload 7
<371>  (0x94c2c3):    aload_0 
<372>  (0x94c2c4):    agetfield_quick #5
<375>  (0x94c2c7):    iload 8
<377>  (0x94c2c9):    iaload 
<378>  (0x94c2ca):    iadd 
<379>  (0x94c2cb):    istore 7
<381>  (0x94c2cd):    goto <688>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(358): local(7)	ID(357)	rhsID(354)
 
Successor Blocks(1): 
	ID(11) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals()

   <(ID: 334) MAP_PC (NONE)   357>

   <(ID: 339) IDENTITY (reference)  (ref count: 2)
      <(ID: 343) FETCH (reference) 
         <(ID: 338) FIELD_REF (reference) 
            <(ID: 336) IDENTITY (reference)  (ref count: 2)
               <(ID: 348) LOCAL (reference)   0>
            <(ID: 337) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 342) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 355) FETCH (32-bit field) 
         <(ID: 341) FIELD_REF (32-bit field) 
            <(ID: 339) IDENTITY (reference)  (ref count: 2)
            <(ID: 340) CONST_FIELD_OFFSET (NONE)  (43)

   <(ID: 347) IDENTITY (reference)  (ref count: 3)
      <(ID: 356) FETCH (reference) 
         <(ID: 346) FIELD_REF (reference) 
            <(ID: 336) IDENTITY (reference)  (ref count: 2)
            <(ID: 345) CONST_FIELD_OFFSET (NONE)  (5)

   <(ID: 354) IDENTITY (int)  (ref count: 2)
      <(ID: 359) ADD (int) 
         <(ID: 344) ADD (int) 
            <(ID: 335) LOCAL (int)   7>
            <(ID: 342) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 353) FETCH (int) 
            <(ID: 352) INDEX (int) 
               <(ID: 347) IDENTITY (reference)  (ref count: 3)
               <(ID: 351) BOUNDS_CHECK (int) 
                  <(ID: 349) LOCAL (int)   8>
                  <(ID: 350) ARRAY_LENGTH (int) 
                     <(ID: 347) IDENTITY (reference)  (ref count: 3)

   <(ID: 358) ASSIGN (int)  (assignIdx: 0)
      <(ID: 357) LOCAL (int)   7>
      <(ID: 354) IDENTITY (int)  (ref count: 2)

   <(ID: 360) GOTO (NONE) 
   target: (BlockID: 11 BlockPC: 688)


*************************************************
*
* (block ID:15 block PC:384 )
* IR root list contains 7 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:192)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<384>  (0x94c2d0):    iload 7
<386>  (0x94c2d2):    aload_0 
<387>  (0x94c2d3):    agetfield_quick #2
<390>  (0x94c2d6):    getfield_quick #45
<393>  (0x94c2d9):    iadd 
<394>  (0x94c2da):    istore 7
<396>  (0x94c2dc):    iload 7
<398>  (0x94c2de):    aload_0 
<399>  (0x94c2df):    agetfield_quick #7
<402>  (0x94c2e2):    iload 8
<404>  (0x94c2e4):    iaload 
<405>  (0x94c2e5):    iadd 
<406>  (0x94c2e6):    istore 7
<408>  (0x94c2e8):    goto <688>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(385): local(7)	ID(384)	rhsID(381)
 
Successor Blocks(1): 
	ID(11) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals()

   <(ID: 361) MAP_PC (NONE)   384>

   <(ID: 366) IDENTITY (reference)  (ref count: 2)
      <(ID: 370) FETCH (reference) 
         <(ID: 365) FIELD_REF (reference) 
            <(ID: 363) IDENTITY (reference)  (ref count: 2)
               <(ID: 375) LOCAL (reference)   0>
            <(ID: 364) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 369) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 382) FETCH (32-bit field) 
         <(ID: 368) FIELD_REF (32-bit field) 
            <(ID: 366) IDENTITY (reference)  (ref count: 2)
            <(ID: 367) CONST_FIELD_OFFSET (NONE)  (45)

   <(ID: 374) IDENTITY (reference)  (ref count: 3)
      <(ID: 383) FETCH (reference) 
         <(ID: 373) FIELD_REF (reference) 
            <(ID: 363) IDENTITY (reference)  (ref count: 2)
            <(ID: 372) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 381) IDENTITY (int)  (ref count: 2)
      <(ID: 386) ADD (int) 
         <(ID: 371) ADD (int) 
            <(ID: 362) LOCAL (int)   7>
            <(ID: 369) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 380) FETCH (int) 
            <(ID: 379) INDEX (int) 
               <(ID: 374) IDENTITY (reference)  (ref count: 3)
               <(ID: 378) BOUNDS_CHECK (int) 
                  <(ID: 376) LOCAL (int)   8>
                  <(ID: 377) ARRAY_LENGTH (int) 
                     <(ID: 374) IDENTITY (reference)  (ref count: 3)

   <(ID: 385) ASSIGN (int)  (assignIdx: 0)
      <(ID: 384) LOCAL (int)   7>
      <(ID: 381) IDENTITY (int)  (ref count: 2)

   <(ID: 387) GOTO (NONE) 
   target: (BlockID: 11 BlockPC: 688)


*************************************************
*
* (block ID:16 block PC:411 )
* IR root list contains 7 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:196)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<411>  (0x94c2eb):    iload 7
<413>  (0x94c2ed):    aload_0 
<414>  (0x94c2ee):    agetfield_quick #2
<417>  (0x94c2f1):    getfield_quick #46
<420>  (0x94c2f4):    iadd 
<421>  (0x94c2f5):    istore 7
<423>  (0x94c2f7):    iload 7
<425>  (0x94c2f9):    aload_0 
<426>  (0x94c2fa):    agetfield_quick #9
<429>  (0x94c2fd):    iload 8
<431>  (0x94c2ff):    iaload 
<432>  (0x94c300):    iadd 
<433>  (0x94c301):    istore 7
<435>  (0x94c303):    goto <688>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(412): local(7)	ID(411)	rhsID(408)
 
Successor Blocks(1): 
	ID(11) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals()

   <(ID: 388) MAP_PC (NONE)   411>

   <(ID: 393) IDENTITY (reference)  (ref count: 2)
      <(ID: 397) FETCH (reference) 
         <(ID: 392) FIELD_REF (reference) 
            <(ID: 390) IDENTITY (reference)  (ref count: 2)
               <(ID: 402) LOCAL (reference)   0>
            <(ID: 391) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 396) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 409) FETCH (32-bit field) 
         <(ID: 395) FIELD_REF (32-bit field) 
            <(ID: 393) IDENTITY (reference)  (ref count: 2)
            <(ID: 394) CONST_FIELD_OFFSET (NONE)  (46)

   <(ID: 401) IDENTITY (reference)  (ref count: 3)
      <(ID: 410) FETCH (reference) 
         <(ID: 400) FIELD_REF (reference) 
            <(ID: 390) IDENTITY (reference)  (ref count: 2)
            <(ID: 399) CONST_FIELD_OFFSET (NONE)  (9)

   <(ID: 408) IDENTITY (int)  (ref count: 2)
      <(ID: 413) ADD (int) 
         <(ID: 398) ADD (int) 
            <(ID: 389) LOCAL (int)   7>
            <(ID: 396) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 407) FETCH (int) 
            <(ID: 406) INDEX (int) 
               <(ID: 401) IDENTITY (reference)  (ref count: 3)
               <(ID: 405) BOUNDS_CHECK (int) 
                  <(ID: 403) LOCAL (int)   8>
                  <(ID: 404) ARRAY_LENGTH (int) 
                     <(ID: 401) IDENTITY (reference)  (ref count: 3)

   <(ID: 412) ASSIGN (int)  (assignIdx: 0)
      <(ID: 411) LOCAL (int)   7>
      <(ID: 408) IDENTITY (int)  (ref count: 2)

   <(ID: 414) GOTO (NONE) 
   target: (BlockID: 11 BlockPC: 688)


*************************************************
*
* (block ID:17 block PC:438 )
* IR root list contains 9 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:200)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<438>  (0x94c306):    iload 8
<440>  (0x94c308):    istore_3 
<441>  (0x94c309):    aload_0 
<442>  (0x94c30a):    agetfield_quick #2
<445>  (0x94c30d):    getfield_quick #14
<448>  (0x94c310):    bipush 98
<450>  (0x94c312):    if_icmpne <468>
<453>  (0x94c315):    iload 7
<455>  (0x94c317):    aload_0 
<456>  (0x94c318):    agetfield_quick #2
<459>  (0x94c31b):    getfield_quick #47
<462>  (0x94c31e):    iadd 
<463>  (0x94c31f):    istore 7
<465>  (0x94c321):    goto <482>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(2): 
	ASSIGN(428): local(3)	ID(427)	rhsID(416)
 	ASSIGN(436): local(7)	ID(435)	rhsID(434)
 
Successor Blocks(2): 
	ID(25) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(7 0 <null> 8)
	ID(26) LocalOrder(0) AssignOrder(2) RefsOK(0) Locals(7 0 <null> 8)

   <(ID: 415) MAP_PC (NONE)   438>

   <(ID: 420) IDENTITY (reference)  (ref count: 3)
      <(ID: 424) FETCH (reference) 
         <(ID: 419) FIELD_REF (reference) 
            <(ID: 417) LOCAL (reference)   0>
            <(ID: 418) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 423) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 429) FETCH (32-bit field) 
         <(ID: 422) FIELD_REF (32-bit field) 
            <(ID: 420) IDENTITY (reference)  (ref count: 3)
            <(ID: 421) CONST_FIELD_OFFSET (NONE)  (14)

   <(ID: 428) ASSIGN (int)  (assignIdx: 0)
      <(ID: 427) LOCAL (int)   3>
      <(ID: 416) LOCAL (int)   8>

   <(ID: 426) BCOND (int) 
   target: (BlockID: 25 BlockPC: 468)
   condition: NE
   flags: 0
      <(ID: 423) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 425) CONST_JAVA_NUMERIC32 (int)  (98)


   <(ID: 433) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 438) FETCH (32-bit field) 
         <(ID: 432) FIELD_REF (32-bit field) 
            <(ID: 420) IDENTITY (reference)  (ref count: 3)
            <(ID: 431) CONST_FIELD_OFFSET (NONE)  (47)

   <(ID: 430) IDENTITY (int)  (ref count: 2)
      <(ID: 437) LOCAL (int)   7>

   <(ID: 436) ASSIGN (int)  (assignIdx: 1)
      <(ID: 435) LOCAL (int)   7>
      <(ID: 434) ADD (int) 
         <(ID: 430) IDENTITY (int)  (ref count: 2)
         <(ID: 433) IDENTITY (32-bit field)  (ref count: 2)

   <(ID: 439) GOTO (NONE) 
   target: (BlockID: 26 BlockPC: 482)


*************************************************
*
* (block ID:25 block PC:468 )
* IR root list contains 5 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0xb
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:204)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<468>  (0x94c324):    iload 7
<470>  (0x94c326):    aload_0 
<471>  (0x94c327):    getfield #14 <com.sun.mep.bench.Chess.Evaluator.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<474>  (0x94c32a):    getfield #23 <com.sun.mep.bench.Chess.ChessGame.kingValue:I>
<477>  (0x94c32d):    iconst_2 
<478>  (0x94c32e):    idiv 
<479>  (0x94c32f):    iadd 
<480>  (0x94c330):    istore 7
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(7)	ID(630)
 	local(0)	ID(631)
 
Incoming Locals(4): 
	local(7)	ID(630)
 	local(0)	ID(631)
 	<null>
	local(8)	ID(652)
 
Assigned Locals(1): 
	ASSIGN(644): local(7)	ID(643)	rhsID(641)
 
Successor Blocks(1): 
	ID(26) LocalOrder(2) AssignOrder(1) RefsOK(1) Locals(7 0 <null> 8)

   <(ID: 629) MAP_PC (NONE)   468>

   <(ID: 634) IDENTITY (reference)  (ref count: 2)
      <(ID: 638) FETCH (reference) 
         <(ID: 633) FIELD_REF (reference) 
            <(ID: 631) LOCAL (reference)   0>
            <(ID: 632) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 637) IDENTITY (int)  (ref count: 2)
      <(ID: 642) FETCH (int) 
         <(ID: 636) FIELD_REF (int) 
            <(ID: 634) IDENTITY (reference)  (ref count: 2)
            <(ID: 635) CONST_FIELD_OFFSET (NONE)  (47)

   <(ID: 641) IDENTITY (int)  (ref count: 2)
      <(ID: 645) ADD (int) 
         <(ID: 630) LOCAL (int)   7>
         <(ID: 640) DIV (int) 
            <(ID: 637) IDENTITY (int)  (ref count: 2)
            <(ID: 639) CONST_JAVA_NUMERIC32 (int)  (2)

   <(ID: 644) ASSIGN (int)  (assignIdx: 0)
      <(ID: 643) LOCAL (int)   7>
      <(ID: 641) IDENTITY (int)  (ref count: 2)


*************************************************
*
* (block ID:26 block PC:482 )
* IR root list contains 5 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0xb
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:205)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<482>  (0x94c332):    iload 7
<484>  (0x94c334):    aload_0 
<485>  (0x94c335):    agetfield_quick #11
<488>  (0x94c338):    iload 8
<490>  (0x94c33a):    iaload 
<491>  (0x94c33b):    iadd 
<492>  (0x94c33c):    istore 7
<494>  (0x94c33e):    goto <688>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(7)	ID(647)
 	local(0)	ID(648)
 	local(8)	ID(652)
 
Incoming Locals(4): 
	local(7)	ID(647)
 	local(0)	ID(648)
 	<null>
	local(8)	ID(652)
 
Assigned Locals(1): 
	ASSIGN(660): local(7)	ID(659)	rhsID(657)
 
Successor Blocks(1): 
	ID(11) LocalOrder(3) AssignOrder(1) RefsOK(1) Locals()

   <(ID: 646) MAP_PC (NONE)   482>

   <(ID: 651) IDENTITY (reference)  (ref count: 3)
      <(ID: 658) FETCH (reference) 
         <(ID: 650) FIELD_REF (reference) 
            <(ID: 648) LOCAL (reference)   0>
            <(ID: 649) CONST_FIELD_OFFSET (NONE)  (11)

   <(ID: 657) IDENTITY (int)  (ref count: 2)
      <(ID: 661) ADD (int) 
         <(ID: 647) LOCAL (int)   7>
         <(ID: 656) FETCH (int) 
            <(ID: 655) INDEX (int) 
               <(ID: 651) IDENTITY (reference)  (ref count: 3)
               <(ID: 654) BOUNDS_CHECK (int) 
                  <(ID: 652) LOCAL (int)   8>
                  <(ID: 653) ARRAY_LENGTH (int) 
                     <(ID: 651) IDENTITY (reference)  (ref count: 3)

   <(ID: 660) ASSIGN (int)  (assignIdx: 0)
      <(ID: 659) LOCAL (int)   7>
      <(ID: 657) IDENTITY (int)  (ref count: 2)

   <(ID: 662) GOTO (NONE) 
   target: (BlockID: 11 BlockPC: 688)


*************************************************
*
* (block ID:18 block PC:497 )
* IR root list contains 7 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:208)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<497>  (0x94c341):    iload 7
<499>  (0x94c343):    aload_0 
<500>  (0x94c344):    agetfield_quick #2
<503>  (0x94c347):    getfield_quick #42
<506>  (0x94c34a):    isub 
<507>  (0x94c34b):    istore 7
<509>  (0x94c34d):    iload 7
<511>  (0x94c34f):    aload_0 
<512>  (0x94c350):    agetfield_quick #14
<515>  (0x94c353):    iload 8
<517>  (0x94c355):    iaload 
<518>  (0x94c356):    isub 
<519>  (0x94c357):    istore 7
<521>  (0x94c359):    goto <688>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(464): local(7)	ID(463)	rhsID(460)
 
Successor Blocks(1): 
	ID(11) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals()

   <(ID: 440) MAP_PC (NONE)   497>

   <(ID: 445) IDENTITY (reference)  (ref count: 2)
      <(ID: 449) FETCH (reference) 
         <(ID: 444) FIELD_REF (reference) 
            <(ID: 442) IDENTITY (reference)  (ref count: 2)
               <(ID: 454) LOCAL (reference)   0>
            <(ID: 443) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 448) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 461) FETCH (32-bit field) 
         <(ID: 447) FIELD_REF (32-bit field) 
            <(ID: 445) IDENTITY (reference)  (ref count: 2)
            <(ID: 446) CONST_FIELD_OFFSET (NONE)  (42)

   <(ID: 453) IDENTITY (reference)  (ref count: 3)
      <(ID: 462) FETCH (reference) 
         <(ID: 452) FIELD_REF (reference) 
            <(ID: 442) IDENTITY (reference)  (ref count: 2)
            <(ID: 451) CONST_FIELD_OFFSET (NONE)  (14)

   <(ID: 460) IDENTITY (int)  (ref count: 2)
      <(ID: 465) SUB (int) 
         <(ID: 450) SUB (int) 
            <(ID: 441) LOCAL (int)   7>
            <(ID: 448) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 459) FETCH (int) 
            <(ID: 458) INDEX (int) 
               <(ID: 453) IDENTITY (reference)  (ref count: 3)
               <(ID: 457) BOUNDS_CHECK (int) 
                  <(ID: 455) LOCAL (int)   8>
                  <(ID: 456) ARRAY_LENGTH (int) 
                     <(ID: 453) IDENTITY (reference)  (ref count: 3)

   <(ID: 464) ASSIGN (int)  (assignIdx: 0)
      <(ID: 463) LOCAL (int)   7>
      <(ID: 460) IDENTITY (int)  (ref count: 2)

   <(ID: 466) GOTO (NONE) 
   target: (BlockID: 11 BlockPC: 688)


*************************************************
*
* (block ID:19 block PC:524 )
* IR root list contains 7 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:212)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<524>  (0x94c35c):    iload 7
<526>  (0x94c35e):    aload_0 
<527>  (0x94c35f):    agetfield_quick #2
<530>  (0x94c362):    getfield_quick #44
<533>  (0x94c365):    isub 
<534>  (0x94c366):    istore 7
<536>  (0x94c368):    iload 7
<538>  (0x94c36a):    aload_0 
<539>  (0x94c36b):    agetfield_quick #4
<542>  (0x94c36e):    iload 8
<544>  (0x94c370):    iaload 
<545>  (0x94c371):    isub 
<546>  (0x94c372):    istore 7
<548>  (0x94c374):    goto <688>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(491): local(7)	ID(490)	rhsID(487)
 
Successor Blocks(1): 
	ID(11) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals()

   <(ID: 467) MAP_PC (NONE)   524>

   <(ID: 472) IDENTITY (reference)  (ref count: 2)
      <(ID: 476) FETCH (reference) 
         <(ID: 471) FIELD_REF (reference) 
            <(ID: 469) IDENTITY (reference)  (ref count: 2)
               <(ID: 481) LOCAL (reference)   0>
            <(ID: 470) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 475) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 488) FETCH (32-bit field) 
         <(ID: 474) FIELD_REF (32-bit field) 
            <(ID: 472) IDENTITY (reference)  (ref count: 2)
            <(ID: 473) CONST_FIELD_OFFSET (NONE)  (44)

   <(ID: 480) IDENTITY (reference)  (ref count: 3)
      <(ID: 489) FETCH (reference) 
         <(ID: 479) FIELD_REF (reference) 
            <(ID: 469) IDENTITY (reference)  (ref count: 2)
            <(ID: 478) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 487) IDENTITY (int)  (ref count: 2)
      <(ID: 492) SUB (int) 
         <(ID: 477) SUB (int) 
            <(ID: 468) LOCAL (int)   7>
            <(ID: 475) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 486) FETCH (int) 
            <(ID: 485) INDEX (int) 
               <(ID: 480) IDENTITY (reference)  (ref count: 3)
               <(ID: 484) BOUNDS_CHECK (int) 
                  <(ID: 482) LOCAL (int)   8>
                  <(ID: 483) ARRAY_LENGTH (int) 
                     <(ID: 480) IDENTITY (reference)  (ref count: 3)

   <(ID: 491) ASSIGN (int)  (assignIdx: 0)
      <(ID: 490) LOCAL (int)   7>
      <(ID: 487) IDENTITY (int)  (ref count: 2)

   <(ID: 493) GOTO (NONE) 
   target: (BlockID: 11 BlockPC: 688)


*************************************************
*
* (block ID:20 block PC:551 )
* IR root list contains 7 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:216)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<551>  (0x94c377):    iload 7
<553>  (0x94c379):    aload_0 
<554>  (0x94c37a):    agetfield_quick #2
<557>  (0x94c37d):    getfield_quick #43
<560>  (0x94c380):    isub 
<561>  (0x94c381):    istore 7
<563>  (0x94c383):    iload 7
<565>  (0x94c385):    aload_0 
<566>  (0x94c386):    agetfield_quick #6
<569>  (0x94c389):    iload 8
<571>  (0x94c38b):    iaload 
<572>  (0x94c38c):    isub 
<573>  (0x94c38d):    istore 7
<575>  (0x94c38f):    goto <688>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(518): local(7)	ID(517)	rhsID(514)
 
Successor Blocks(1): 
	ID(11) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals()

   <(ID: 494) MAP_PC (NONE)   551>

   <(ID: 499) IDENTITY (reference)  (ref count: 2)
      <(ID: 503) FETCH (reference) 
         <(ID: 498) FIELD_REF (reference) 
            <(ID: 496) IDENTITY (reference)  (ref count: 2)
               <(ID: 508) LOCAL (reference)   0>
            <(ID: 497) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 502) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 515) FETCH (32-bit field) 
         <(ID: 501) FIELD_REF (32-bit field) 
            <(ID: 499) IDENTITY (reference)  (ref count: 2)
            <(ID: 500) CONST_FIELD_OFFSET (NONE)  (43)

   <(ID: 507) IDENTITY (reference)  (ref count: 3)
      <(ID: 516) FETCH (reference) 
         <(ID: 506) FIELD_REF (reference) 
            <(ID: 496) IDENTITY (reference)  (ref count: 2)
            <(ID: 505) CONST_FIELD_OFFSET (NONE)  (6)

   <(ID: 514) IDENTITY (int)  (ref count: 2)
      <(ID: 519) SUB (int) 
         <(ID: 504) SUB (int) 
            <(ID: 495) LOCAL (int)   7>
            <(ID: 502) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 513) FETCH (int) 
            <(ID: 512) INDEX (int) 
               <(ID: 507) IDENTITY (reference)  (ref count: 3)
               <(ID: 511) BOUNDS_CHECK (int) 
                  <(ID: 509) LOCAL (int)   8>
                  <(ID: 510) ARRAY_LENGTH (int) 
                     <(ID: 507) IDENTITY (reference)  (ref count: 3)

   <(ID: 518) ASSIGN (int)  (assignIdx: 0)
      <(ID: 517) LOCAL (int)   7>
      <(ID: 514) IDENTITY (int)  (ref count: 2)

   <(ID: 520) GOTO (NONE) 
   target: (BlockID: 11 BlockPC: 688)


*************************************************
*
* (block ID:21 block PC:578 )
* IR root list contains 7 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:220)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<578>  (0x94c392):    iload 7
<580>  (0x94c394):    aload_0 
<581>  (0x94c395):    agetfield_quick #2
<584>  (0x94c398):    getfield_quick #45
<587>  (0x94c39b):    isub 
<588>  (0x94c39c):    istore 7
<590>  (0x94c39e):    iload 7
<592>  (0x94c3a0):    aload_0 
<593>  (0x94c3a1):    agetfield_quick #8
<596>  (0x94c3a4):    iload 8
<598>  (0x94c3a6):    iaload 
<599>  (0x94c3a7):    isub 
<600>  (0x94c3a8):    istore 7
<602>  (0x94c3aa):    goto <688>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(545): local(7)	ID(544)	rhsID(541)
 
Successor Blocks(1): 
	ID(11) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals()

   <(ID: 521) MAP_PC (NONE)   578>

   <(ID: 526) IDENTITY (reference)  (ref count: 2)
      <(ID: 530) FETCH (reference) 
         <(ID: 525) FIELD_REF (reference) 
            <(ID: 523) IDENTITY (reference)  (ref count: 2)
               <(ID: 535) LOCAL (reference)   0>
            <(ID: 524) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 529) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 542) FETCH (32-bit field) 
         <(ID: 528) FIELD_REF (32-bit field) 
            <(ID: 526) IDENTITY (reference)  (ref count: 2)
            <(ID: 527) CONST_FIELD_OFFSET (NONE)  (45)

   <(ID: 534) IDENTITY (reference)  (ref count: 3)
      <(ID: 543) FETCH (reference) 
         <(ID: 533) FIELD_REF (reference) 
            <(ID: 523) IDENTITY (reference)  (ref count: 2)
            <(ID: 532) CONST_FIELD_OFFSET (NONE)  (8)

   <(ID: 541) IDENTITY (int)  (ref count: 2)
      <(ID: 546) SUB (int) 
         <(ID: 531) SUB (int) 
            <(ID: 522) LOCAL (int)   7>
            <(ID: 529) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 540) FETCH (int) 
            <(ID: 539) INDEX (int) 
               <(ID: 534) IDENTITY (reference)  (ref count: 3)
               <(ID: 538) BOUNDS_CHECK (int) 
                  <(ID: 536) LOCAL (int)   8>
                  <(ID: 537) ARRAY_LENGTH (int) 
                     <(ID: 534) IDENTITY (reference)  (ref count: 3)

   <(ID: 545) ASSIGN (int)  (assignIdx: 0)
      <(ID: 544) LOCAL (int)   7>
      <(ID: 541) IDENTITY (int)  (ref count: 2)

   <(ID: 547) GOTO (NONE) 
   target: (BlockID: 11 BlockPC: 688)


*************************************************
*
* (block ID:22 block PC:605 )
* IR root list contains 7 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:224)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<605>  (0x94c3ad):    iload 7
<607>  (0x94c3af):    aload_0 
<608>  (0x94c3b0):    agetfield_quick #2
<611>  (0x94c3b3):    getfield_quick #46
<614>  (0x94c3b6):    isub 
<615>  (0x94c3b7):    istore 7
<617>  (0x94c3b9):    iload 7
<619>  (0x94c3bb):    aload_0 
<620>  (0x94c3bc):    agetfield_quick #10
<623>  (0x94c3bf):    iload 8
<625>  (0x94c3c1):    iaload 
<626>  (0x94c3c2):    isub 
<627>  (0x94c3c3):    istore 7
<629>  (0x94c3c5):    goto <688>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(572): local(7)	ID(571)	rhsID(568)
 
Successor Blocks(1): 
	ID(11) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals()

   <(ID: 548) MAP_PC (NONE)   605>

   <(ID: 553) IDENTITY (reference)  (ref count: 2)
      <(ID: 557) FETCH (reference) 
         <(ID: 552) FIELD_REF (reference) 
            <(ID: 550) IDENTITY (reference)  (ref count: 2)
               <(ID: 562) LOCAL (reference)   0>
            <(ID: 551) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 556) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 569) FETCH (32-bit field) 
         <(ID: 555) FIELD_REF (32-bit field) 
            <(ID: 553) IDENTITY (reference)  (ref count: 2)
            <(ID: 554) CONST_FIELD_OFFSET (NONE)  (46)

   <(ID: 561) IDENTITY (reference)  (ref count: 3)
      <(ID: 570) FETCH (reference) 
         <(ID: 560) FIELD_REF (reference) 
            <(ID: 550) IDENTITY (reference)  (ref count: 2)
            <(ID: 559) CONST_FIELD_OFFSET (NONE)  (10)

   <(ID: 568) IDENTITY (int)  (ref count: 2)
      <(ID: 573) SUB (int) 
         <(ID: 558) SUB (int) 
            <(ID: 549) LOCAL (int)   7>
            <(ID: 556) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 567) FETCH (int) 
            <(ID: 566) INDEX (int) 
               <(ID: 561) IDENTITY (reference)  (ref count: 3)
               <(ID: 565) BOUNDS_CHECK (int) 
                  <(ID: 563) LOCAL (int)   8>
                  <(ID: 564) ARRAY_LENGTH (int) 
                     <(ID: 561) IDENTITY (reference)  (ref count: 3)

   <(ID: 572) ASSIGN (int)  (assignIdx: 0)
      <(ID: 571) LOCAL (int)   7>
      <(ID: 568) IDENTITY (int)  (ref count: 2)

   <(ID: 574) GOTO (NONE) 
   target: (BlockID: 11 BlockPC: 688)


*************************************************
*
* (block ID:23 block PC:632 )
* IR root list contains 9 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:228)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<632>  (0x94c3c8):    iload 8
<634>  (0x94c3ca):    istore_2 
<635>  (0x94c3cb):    aload_0 
<636>  (0x94c3cc):    agetfield_quick #2
<639>  (0x94c3cf):    getfield_quick #14
<642>  (0x94c3d2):    bipush 119
<644>  (0x94c3d4):    if_icmpne <662>
<647>  (0x94c3d7):    iload 7
<649>  (0x94c3d9):    aload_0 
<650>  (0x94c3da):    getfield #14 <com.sun.mep.bench.Chess.Evaluator.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<653>  (0x94c3dd):    getfield #23 <com.sun.mep.bench.Chess.ChessGame.kingValue:I>
<656>  (0x94c3e0):    isub 
<657>  (0x94c3e1):    istore 7
<659>  (0x94c3e3):    goto <676>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(2): 
	ASSIGN(588): local(2)	ID(587)	rhsID(576)
 	ASSIGN(596): local(7)	ID(595)	rhsID(594)
 
Successor Blocks(2): 
	ID(27) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(7 0 <null> 8)
	ID(28) LocalOrder(0) AssignOrder(2) RefsOK(0) Locals(7 0 <null> 8)

   <(ID: 575) MAP_PC (NONE)   632>

   <(ID: 580) IDENTITY (reference)  (ref count: 3)
      <(ID: 584) FETCH (reference) 
         <(ID: 579) FIELD_REF (reference) 
            <(ID: 577) LOCAL (reference)   0>
            <(ID: 578) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 583) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 589) FETCH (32-bit field) 
         <(ID: 582) FIELD_REF (32-bit field) 
            <(ID: 580) IDENTITY (reference)  (ref count: 3)
            <(ID: 581) CONST_FIELD_OFFSET (NONE)  (14)

   <(ID: 588) ASSIGN (int)  (assignIdx: 0)
      <(ID: 587) LOCAL (int)   2>
      <(ID: 576) LOCAL (int)   8>

   <(ID: 586) BCOND (int) 
   target: (BlockID: 27 BlockPC: 662)
   condition: NE
   flags: 0
      <(ID: 583) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 585) CONST_JAVA_NUMERIC32 (int)  (119)


   <(ID: 593) IDENTITY (int)  (ref count: 2)
      <(ID: 598) FETCH (int) 
         <(ID: 592) FIELD_REF (int) 
            <(ID: 580) IDENTITY (reference)  (ref count: 3)
            <(ID: 591) CONST_FIELD_OFFSET (NONE)  (47)

   <(ID: 590) IDENTITY (int)  (ref count: 2)
      <(ID: 597) LOCAL (int)   7>

   <(ID: 596) ASSIGN (int)  (assignIdx: 1)
      <(ID: 595) LOCAL (int)   7>
      <(ID: 594) SUB (int) 
         <(ID: 590) IDENTITY (int)  (ref count: 2)
         <(ID: 593) IDENTITY (int)  (ref count: 2)

   <(ID: 599) GOTO (NONE) 
   target: (BlockID: 28 BlockPC: 676)


*************************************************
*
* (block ID:27 block PC:662 )
* IR root list contains 5 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0xb
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:232)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<662>  (0x94c3e6):    iload 7
<664>  (0x94c3e8):    aload_0 
<665>  (0x94c3e9):    agetfield_quick #2
<668>  (0x94c3ec):    getfield_quick #47
<671>  (0x94c3ef):    iconst_2 
<672>  (0x94c3f0):    idiv 
<673>  (0x94c3f1):    isub 
<674>  (0x94c3f2):    istore 7
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(7)	ID(664)
 	local(0)	ID(665)
 
Incoming Locals(4): 
	local(7)	ID(664)
 	local(0)	ID(665)
 	<null>
	local(8)	ID(686)
 
Assigned Locals(1): 
	ASSIGN(678): local(7)	ID(677)	rhsID(675)
 
Successor Blocks(1): 
	ID(28) LocalOrder(2) AssignOrder(1) RefsOK(1) Locals(7 0 <null> 8)

   <(ID: 663) MAP_PC (NONE)   662>

   <(ID: 668) IDENTITY (reference)  (ref count: 2)
      <(ID: 672) FETCH (reference) 
         <(ID: 667) FIELD_REF (reference) 
            <(ID: 665) LOCAL (reference)   0>
            <(ID: 666) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 671) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 676) FETCH (32-bit field) 
         <(ID: 670) FIELD_REF (32-bit field) 
            <(ID: 668) IDENTITY (reference)  (ref count: 2)
            <(ID: 669) CONST_FIELD_OFFSET (NONE)  (47)

   <(ID: 675) IDENTITY (int)  (ref count: 2)
      <(ID: 679) SUB (int) 
         <(ID: 664) LOCAL (int)   7>
         <(ID: 674) DIV (int) 
            <(ID: 671) IDENTITY (32-bit field)  (ref count: 2)
            <(ID: 673) CONST_JAVA_NUMERIC32 (int)  (2)

   <(ID: 678) ASSIGN (int)  (assignIdx: 0)
      <(ID: 677) LOCAL (int)   7>
      <(ID: 675) IDENTITY (int)  (ref count: 2)


*************************************************
*
* (block ID:28 block PC:676 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0xb
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:233)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<676>  (0x94c3f4):    iload 7
<678>  (0x94c3f6):    aload_0 
<679>  (0x94c3f7):    agetfield_quick #12
<682>  (0x94c3fa):    iload 8
<684>  (0x94c3fc):    iaload 
<685>  (0x94c3fd):    isub 
<686>  (0x94c3fe):    istore 7
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(7)	ID(681)
 	local(0)	ID(682)
 	local(8)	ID(686)
 
Incoming Locals(4): 
	local(7)	ID(681)
 	local(0)	ID(682)
 	<null>
	local(8)	ID(686)
 
Assigned Locals(1): 
	ASSIGN(694): local(7)	ID(693)	rhsID(691)
 
Successor Blocks(1): 
	ID(11) LocalOrder(3) AssignOrder(1) RefsOK(1) Locals()

   <(ID: 680) MAP_PC (NONE)   676>

   <(ID: 685) IDENTITY (reference)  (ref count: 3)
      <(ID: 692) FETCH (reference) 
         <(ID: 684) FIELD_REF (reference) 
            <(ID: 682) LOCAL (reference)   0>
            <(ID: 683) CONST_FIELD_OFFSET (NONE)  (12)

   <(ID: 691) IDENTITY (int)  (ref count: 2)
      <(ID: 695) SUB (int) 
         <(ID: 681) LOCAL (int)   7>
         <(ID: 690) FETCH (int) 
            <(ID: 689) INDEX (int) 
               <(ID: 685) IDENTITY (reference)  (ref count: 3)
               <(ID: 688) BOUNDS_CHECK (int) 
                  <(ID: 686) LOCAL (int)   8>
                  <(ID: 687) ARRAY_LENGTH (int) 
                     <(ID: 685) IDENTITY (reference)  (ref count: 3)

   <(ID: 694) ASSIGN (int)  (assignIdx: 0)
      <(ID: 693) LOCAL (int)   7>
      <(ID: 691) IDENTITY (int)  (ref count: 2)


*************************************************
*
* (block ID:11 block PC:688 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:147)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<688>  (0x94c400):    iinc 8 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(278): local(8)	ID(277)	rhsID(276)
 
Successor Blocks(1): 
	ID(1) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(0 5 4 8 1 7)

   <(ID: 273) MAP_PC (NONE)   688>

   <(ID: 274) IDENTITY (int)  (ref count: 2)
      <(ID: 279) LOCAL (int)   8>

   <(ID: 278) ASSIGN (int)  (assignIdx: 0)
      <(ID: 277) LOCAL (int)   8>
      <(ID: 276) ADD (int) 
         <(ID: 274) IDENTITY (int)  (ref count: 2)
         <(ID: 275) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:1 block PC:691 )
* IR root list contains 12 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3f
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:147)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<691>  (0x94c403):    iload 8
<693>  (0x94c405):    bipush 64
<695>  (0x94c407):    if_icmplt <25>
<698>  (0x94c40a):    iload 5
<700>  (0x94c40c):    bipush 10
<702>  (0x94c40e):    if_icmple <784>
<705>  (0x94c411):    aload_0 
<706>  (0x94c412):    aload_1 
<707>  (0x94c413):    aload_0 
<708>  (0x94c414):    getfield #14 <com.sun.mep.bench.Chess.Evaluator.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<711>  (0x94c417):    iload_2 
<712>  (0x94c418):    iload_3 
<713>  (0x94c419):    invokevirtual #25 <com.sun.mep.bench.Chess.Evaluator.KingSafety(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;II)I>
<716>  (0x94c41c):    istore 6
<718>  (0x94c41e):    iload 6
<720>  (0x94c420):    ifge <755>
<723>  (0x94c423):    iinc 6 255
<726>  (0x94c426):    iload 6
<728>  (0x94c428):    iload 6
<730>  (0x94c42a):    imul 
<731>  (0x94c42b):    bipush 50
<733>  (0x94c42d):    if_icmpge <749>
<736>  (0x94c430):    iload 7
<738>  (0x94c432):    iload 6
<740>  (0x94c434):    iload 6
<742>  (0x94c436):    imul 
<743>  (0x94c437):    isub 
<744>  (0x94c438):    istore 7
<746>  (0x94c43a):    goto <784>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(6): 
	local(8)	ID(30)
 	local(5)	ID(33)
 	local(0)	ID(36)
 	local(1)	ID(37)
 	local(2)	ID(41)
 	local(3)	ID(42)
 
Incoming Locals(6): 
	local(0)	ID(36)
 	local(5)	ID(33)
 	local(4)	ID(623)
 	local(8)	ID(30)
 	local(1)	ID(76)
 	local(7)	ID(196)
 
Assigned Locals(3): 
	ASSIGN(58): local(6)	ID(57)	rhsID(52)
 	ASSIGN(66): local(6)	ID(65)	rhsID(61)
 	ASSIGN(72): local(7)	ID(71)	rhsID(70)
 
Successor Blocks(4): 
	ID(2) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(<null> <null> 4 8 1 <null>)
	ID(29) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(7 5 4 <null> <null> <null>)
	ID(30) LocalOrder(6) AssignOrder(1) RefsOK(0) Locals(7 5 4 6 <null> <null>)
	ID(31) LocalOrder(6) AssignOrder(2) RefsOK(0) Locals(7 5 4 <null> <null> <null>)

   <(ID: 29) MAP_PC (NONE)   691>

   <(ID: 32) BCOND (int) 
   target: (BlockID: 2 BlockPC: 25)
   condition: LT
   flags: 0
      <(ID: 30) LOCAL (int)   8>
      <(ID: 31) CONST_JAVA_NUMERIC32 (int)  (64)


   <(ID: 35) BCOND (int) 
   target: (BlockID: 29 BlockPC: 784)
   condition: LE
   flags: 0
      <(ID: 33) LOCAL (int)   5>
      <(ID: 34) CONST_JAVA_NUMERIC32 (int)  (10)


   <(ID: 40) IDENTITY (reference)  (ref count: 2)
      <(ID: 54) FETCH (reference) 
         <(ID: 39) FIELD_REF (reference) 
            <(ID: 36) IDENTITY (reference)  (ref count: 3)
               <(ID: 53) LOCAL (reference)   0>
            <(ID: 38) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 52) IDENTITY (int)  (ref count: 4)
      <(ID: 59) INVOKE (int) 
         <(ID: 49) PARAMETER (reference) 
            <(ID: 36) IDENTITY (reference)  (ref count: 3)
            <(ID: 48) PARAMETER (reference) 
               <(ID: 37) LOCAL (reference)   1>
               <(ID: 47) PARAMETER (reference) 
                  <(ID: 40) IDENTITY (reference)  (ref count: 2)
                  <(ID: 46) PARAMETER (int) 
                     <(ID: 41) LOCAL (int)   2>
                     <(ID: 45) PARAMETER (int) 
                        <(ID: 42) LOCAL (int)   3>
                        <(ID: 44) NULL_PARAMETER (NONE) 
         <(ID: 51) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 50) GET_VTBL (NONE) 
               <(ID: 36) IDENTITY (reference)  (ref count: 3)
            <(ID: 43) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 12)

   <(ID: 58) ASSIGN (int)  (assignIdx: 0)
      <(ID: 57) LOCAL (int)   6>
      <(ID: 52) IDENTITY (int)  (ref count: 4)

   <(ID: 56) BCOND (int) 
   target: (BlockID: 30 BlockPC: 755)
   condition: GE
   flags: 0
      <(ID: 52) IDENTITY (int)  (ref count: 4)
      <(ID: 55) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 66) ASSIGN (int)  (assignIdx: 1)
      <(ID: 65) LOCAL (int)   6>
      <(ID: 61) IDENTITY (int)  (ref count: 5)
         <(ID: 67) SUB (int) 
            <(ID: 52) IDENTITY (int)  (ref count: 4)
            <(ID: 60) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 64) BCOND (int) 
   target: (BlockID: 31 BlockPC: 749)
   condition: GE
   flags: 0
      <(ID: 62) MUL (int) 
         <(ID: 61) IDENTITY (int)  (ref count: 5)
         <(ID: 61) IDENTITY (int)  (ref count: 5)
      <(ID: 63) CONST_JAVA_NUMERIC32 (int)  (50)


   <(ID: 68) IDENTITY (int)  (ref count: 2)
      <(ID: 73) LOCAL (int)   7>

   <(ID: 72) ASSIGN (int)  (assignIdx: 2)
      <(ID: 71) LOCAL (int)   7>
      <(ID: 70) SUB (int) 
         <(ID: 68) IDENTITY (int)  (ref count: 2)
         <(ID: 69) MUL (int) 
            <(ID: 61) IDENTITY (int)  (ref count: 5)
            <(ID: 61) IDENTITY (int)  (ref count: 5)

   <(ID: 74) GOTO (NONE) 
   target: (BlockID: 29 BlockPC: 784)


*************************************************
*
* (block ID:31 block PC:749 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x27
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:248)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<749>  (0x94c43d):    iinc 7 206
<752>  (0x94c440):    goto <784>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(7)	ID(136)
 
Incoming Locals(6): 
	local(7)	ID(136)
 	local(5)	ID(106)
 	local(4)	ID(111)
 	<null>
	<null>
	<null>

Assigned Locals(1): 
	ASSIGN(140): local(7)	ID(139)	rhsID(138)
 
Successor Blocks(1): 
	ID(29) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(7 5 4 <null> <null> <null>)

   <(ID: 135) MAP_PC (NONE)   749>

   <(ID: 136) IDENTITY (int)  (ref count: 2)
      <(ID: 141) LOCAL (int)   7>

   <(ID: 140) ASSIGN (int)  (assignIdx: 0)
      <(ID: 139) LOCAL (int)   7>
      <(ID: 138) SUB (int) 
         <(ID: 136) IDENTITY (int)  (ref count: 2)
         <(ID: 137) CONST_JAVA_NUMERIC32 (int)  (50)

   <(ID: 142) GOTO (NONE) 
   target: (BlockID: 29 BlockPC: 784)


*************************************************
*
* (block ID:30 block PC:755 )
* IR root list contains 7 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x2f
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:251)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<755>  (0x94c443):    iinc 6 1
<758>  (0x94c446):    iload 6
<760>  (0x94c448):    iload 6
<762>  (0x94c44a):    imul 
<763>  (0x94c44b):    bipush 50
<765>  (0x94c44d):    if_icmpge <781>
<768>  (0x94c450):    iload 7
<770>  (0x94c452):    iload 6
<772>  (0x94c454):    iload 6
<774>  (0x94c456):    imul 
<775>  (0x94c457):    iadd 
<776>  (0x94c458):    istore 7
<778>  (0x94c45a):    goto <784>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(6)	ID(118)
 	local(7)	ID(128)
 
Incoming Locals(6): 
	local(7)	ID(199)
 	local(5)	ID(106)
 	local(4)	ID(111)
 	local(6)	ID(118)
 	<null>
	<null>

Assigned Locals(2): 
	ASSIGN(125): local(6)	ID(124)	rhsID(120)
 	ASSIGN(132): local(7)	ID(131)	rhsID(130)
 
Successor Blocks(2): 
	ID(32) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(7 5 4 <null>)
	ID(29) LocalOrder(2) AssignOrder(2) RefsOK(1) Locals(7 5 4 <null> <null> <null>)

   <(ID: 117) MAP_PC (NONE)   755>

   <(ID: 118) IDENTITY (int)  (ref count: 2)
      <(ID: 126) LOCAL (int)   6>

   <(ID: 125) ASSIGN (int)  (assignIdx: 0)
      <(ID: 124) LOCAL (int)   6>
      <(ID: 120) IDENTITY (int)  (ref count: 5)
         <(ID: 127) ADD (int) 
            <(ID: 118) IDENTITY (int)  (ref count: 2)
            <(ID: 119) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 123) BCOND (int) 
   target: (BlockID: 32 BlockPC: 781)
   condition: GE
   flags: 0
      <(ID: 121) MUL (int) 
         <(ID: 120) IDENTITY (int)  (ref count: 5)
         <(ID: 120) IDENTITY (int)  (ref count: 5)
      <(ID: 122) CONST_JAVA_NUMERIC32 (int)  (50)


   <(ID: 128) IDENTITY (int)  (ref count: 2)
      <(ID: 133) LOCAL (int)   7>

   <(ID: 132) ASSIGN (int)  (assignIdx: 1)
      <(ID: 131) LOCAL (int)   7>
      <(ID: 130) ADD (int) 
         <(ID: 128) IDENTITY (int)  (ref count: 2)
         <(ID: 129) MUL (int) 
            <(ID: 120) IDENTITY (int)  (ref count: 5)
            <(ID: 120) IDENTITY (int)  (ref count: 5)

   <(ID: 134) GOTO (NONE) 
   target: (BlockID: 29 BlockPC: 784)


*************************************************
*
* (block ID:32 block PC:781 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0xf
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:255)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<781>  (0x94c45d):    iinc 7 50
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(7)	ID(199)
 
Incoming Locals(4): 
	local(7)	ID(199)
 	local(5)	ID(106)
 	local(4)	ID(111)
 	<null>

Assigned Locals(1): 
	ASSIGN(203): local(7)	ID(202)	rhsID(201)
 
Successor Blocks(1): 
	ID(29) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(7 5 4 <null> <null> <null>)

   <(ID: 198) MAP_PC (NONE)   781>

   <(ID: 199) IDENTITY (int)  (ref count: 2)
      <(ID: 204) LOCAL (int)   7>

   <(ID: 203) ASSIGN (int)  (assignIdx: 0)
      <(ID: 202) LOCAL (int)   7>
      <(ID: 201) ADD (int) 
         <(ID: 199) IDENTITY (int)  (ref count: 2)
         <(ID: 200) CONST_JAVA_NUMERIC32 (int)  (50)


*************************************************
*
* (block ID:29 block PC:784 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x2f
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:261)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<784>  (0x94c460):    iload 5
<786>  (0x94c462):    iconst_2 
<787>  (0x94c463):    if_icmple <799>
<790>  (0x94c466):    iload 7
<792>  (0x94c468):    iconst_4 
<793>  (0x94c469):    iload 4
<795>  (0x94c46b):    imul 
<796>  (0x94c46c):    iadd 
<797>  (0x94c46d):    istore 7
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(5)	ID(106)
 	local(7)	ID(109)
 	local(4)	ID(111)
 
Incoming Locals(6): 
	local(7)	ID(196)
 	local(5)	ID(106)
 	local(4)	ID(111)
 	<null>
	<null>
	<null>

Assigned Locals(1): 
	ASSIGN(115): local(7)	ID(114)	rhsID(113)
 
Successor Blocks(1): 
	ID(33) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(7)

   <(ID: 105) MAP_PC (NONE)   784>

   <(ID: 108) BCOND (int) 
   target: (BlockID: 33 BlockPC: 799)
   condition: LE
   flags: 0
      <(ID: 106) LOCAL (int)   5>
      <(ID: 107) CONST_JAVA_NUMERIC32 (int)  (2)


   <(ID: 109) IDENTITY (int)  (ref count: 2)
      <(ID: 116) LOCAL (int)   7>

   <(ID: 115) ASSIGN (int)  (assignIdx: 0)
      <(ID: 114) LOCAL (int)   7>
      <(ID: 113) ADD (int) 
         <(ID: 109) IDENTITY (int)  (ref count: 2)
         <(ID: 112) MUL (int) 
            <(ID: 111) LOCAL (int)   4>
            <(ID: 110) CONST_JAVA_NUMERIC32 (int)  (4)


*************************************************
*
* (block ID:33 block PC:799 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1
* Source: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I(Evaluator.java:264)
* Compilation depth: 0 locals : 0 .. 8
* Byte-codes for block:
<799>  (0x94c46f):    iload 7
<801>  (0x94c471):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(7)	ID(196)
 
Incoming Locals(1): 
	local(7)	ID(196)
 
   <(ID: 195) MAP_PC (NONE)   799>

   <(ID: 197) RETURN_VALUE (int) 
      <(ID: 196) LOCAL (int)   7>


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 188
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 4820
ESTIMATED BUFFER SIZE = 5260
CODE BUFFER ADDRESS = 0x2bcb9ab8
PC MAP TABLE ADDRESS = 0x2bcb9ac0
GC CHECK PCS ADDRESS = 0x2bcb9b4c
CODE ENTRY ADDRESS = 0x2bcb9b78
          		@ Method prologue
0x2bcb9b78	0:	addiu	a1, JSP, 80	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcb9b7c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcb9b80	8:	sltu	t7, a1, CHUNKEND
0x2bcb9b84	12:	bne	t7, zero, PC=0x2bcb9b78	@ goto .skip
0x2bcb9b88	16:	nop
0x2bcb9b8c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcb9b90	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcb9b84) >>>>>>>>
0x2bcb9b84	12:	bne	t7, zero, PC=0x2bcb9b94	@ goto .skip
0x2bcb9b88	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcb9b94) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcb9b94	28:	sw	JFP, 28(JSP)	@ Store curr JFP into new frame
0x2bcb9b98	32:	addiu	JFP, JSP, 28	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcb9b9c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcb9ba0	40:	addiu	a3, zero, 0
0x2bcb9ba4	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcb9ba8	48:	addiu	a3, zero, -1
0x2bcb9bac	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcb9bb0	56:	move	a0, EE
0x2bcb9bb4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcb9bb8	64:	lui	t9, hi16(0x65)
0x2bcb9bbc	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcb9bc0	72:	jalr	t9
0x2bcb9bc4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcb9bc8	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcb9bcc	84:	nop
0x2bcb9bd0	88:	nop
0x2bcb9bd4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcb9bd8	96:	lw	s4, -36(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
          		@ Do getfield:
0x2bcb9bdc	100:	lw	s7, 8(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcb9be0	104:	lw	s5, 192(s7)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcb9be4	108:	sw	zero, -28(JFP)	@ Java local cell # 2
0x2bcb9be8	112:	sw	zero, -24(JFP)	@ Java local cell # 3
0x2bcb9bec	116:	sw	zero, -20(JFP)	@ Java local cell # 4
0x2bcb9bf0	120:	sw	s5, -16(JFP)	@ Java local cell # 5
0x2bcb9bf4	124:	sw	zero, -8(JFP)	@ Java local cell # 7
0x2bcb9bf8	128:	sw	zero, -4(JFP)	@ Java local cell # 8
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(5) reg(21): in correct register
			@ Outgoing local(4) reg(22): not in register
0x2bcb9bfc	132:	lw	s6, -20(JFP)	@ Java local cell # 4
			@ Outgoing local(8) reg(23): not in register
0x2bcb9c00	136:	lw	s7, -4(JFP)	@ Java local cell # 8
0x2bcb9c04	140:	b	PC=0x2bcb9c04	@ branch to block L1
0x2bcb9c08	144:	nop
			@ Initial Temp REF set is 
	L2:	148:	@ Patchable GC Check point
0x2bcb9c0c	148:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcb9c0c	148:	nop
0x2bcb9c10	152:	nop
          		@ Captured a stackmap here.
	L2:	156:	@ entry point when locals need to be loaded
			@ Preloading incoming local(4) reg(22)
0x2bcb9c14	156:	lw	s6, -20(JFP)	@ Java local cell # 4
			@ Preloading incoming local(8) reg(23)
0x2bcb9c18	160:	lw	s7, -4(JFP)	@ Java local cell # 8
	L2:	164:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=25 compiledPc=156
0x2bcb9c1c	164:	lw	ra, -32(JFP)	@ Java local cell # 1
          		@ Do getfield:
0x2bcb9c20	168:	lw	s5, 12(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcb9c24	172:	lw	s4, 8(s5)	@ arraylength
          		@ deferred comparison: 
0x2bcb9c28	176:	sltu	t7, s7, s4
0x2bcb9c2c	180:	bne	t7, zero, PC=0x2bcb9c28	@ br .skip
0x2bcb9c30	184:	nop
0x2bcb9c34	188:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb9c38	192:	nop
		.skip
--->Fixed instruction at 180(0x2bcb9c2c) to reference 196
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcb9c3c	196:	addu	t8, s5, s7
0x2bcb9c40	200:	lb	t9, 12(t8)
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
          		@ deferred comparison: 
0x2bcb9c44	204:	bne	t9, zero, PC=0x2bcb9c44	@ branch to block L3
0x2bcb9c48	208:	nop
0x2bcb9c4c	212:	addiu	t9, s7, 8
          		@ deferred comparison: 
0x2bcb9c50	216:	sltu	t7, t9, s4
0x2bcb9c54	220:	bne	t7, zero, PC=0x2bcb9c50	@ br .skip
0x2bcb9c58	224:	nop
0x2bcb9c5c	228:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb9c60	232:	nop
		.skip
--->Fixed instruction at 220(0x2bcb9c54) to reference 236
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcb9c64	236:	addu	t8, s5, t9
0x2bcb9c68	240:	lb	s4, 12(t8)
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
          		@ deferred comparison: 
0x2bcb9c6c	244:	bne	s4, zero, PC=0x2bcb9c6c	@ branch to block L4
0x2bcb9c70	248:	nop
0x2bcb9c74	252:	addiu	s6, s6, -1
0x2bcb9c78	256:	sw	s6, -20(JFP)	@ Java local cell # 4
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
			@ Initial Temp REF set is 
	L4:	260:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(22)
			@ Binding Incoming Local(8) to reg(23)
--->Fixed instruction at 244(0x2bcb9c6c) to reference 260
          		@ MAP_PC idepth=0 javaPc=51 compiledPc=260
          		@ do irem by 8:
0x2bcb9c7c	260:	sra	s5, s7, 31
0x2bcb9c80	264:	srl	t7, s5, 29
0x2bcb9c84	268:	addu	s5, s7, t7
0x2bcb9c88	272:	addiu	t7, zero, -8
0x2bcb9c8c	276:	and	s5, s5, t7
0x2bcb9c90	280:	subu	s5, s7, s5
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
          		@ deferred comparison: 
0x2bcb9c94	284:	beq	s5, zero, PC=0x2bcb9c94	@ branch to block L5
0x2bcb9c98	288:	nop
0x2bcb9c9c	292:	lw	ra, -32(JFP)	@ Java local cell # 1
          		@ Do getfield:
0x2bcb9ca0	296:	lw	s5, 12(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcb9ca4	300:	addiu	s4, s7, 7
0x2bcb9ca8	304:	lw	t9, 8(s5)	@ arraylength
          		@ deferred comparison: 
0x2bcb9cac	308:	sltu	t7, s4, t9
0x2bcb9cb0	312:	bne	t7, zero, PC=0x2bcb9cac	@ br .skip
0x2bcb9cb4	316:	nop
0x2bcb9cb8	320:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb9cbc	324:	nop
		.skip
--->Fixed instruction at 312(0x2bcb9cb0) to reference 328
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcb9cc0	328:	addu	t8, s5, s4
0x2bcb9cc4	332:	lb	t9, 12(t8)
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
          		@ deferred comparison: 
0x2bcb9cc8	336:	beq	t9, zero, PC=0x2bcb9cc8	@ branch to block L6
0x2bcb9ccc	340:	nop
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
			@ Initial Temp REF set is 
	L5:	344:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(22)
			@ Binding Incoming Local(8) to reg(23)
--->Fixed instruction at 284(0x2bcb9c94) to reference 344
          		@ MAP_PC idepth=0 javaPc=72 compiledPc=344
          		@ do irem by 8:
0x2bcb9cd0	344:	sra	s5, s7, 31
0x2bcb9cd4	348:	srl	t7, s5, 29
0x2bcb9cd8	352:	addu	s5, s7, t7
0x2bcb9cdc	356:	addiu	t7, zero, -8
0x2bcb9ce0	360:	and	s5, s5, t7
0x2bcb9ce4	364:	subu	s5, s7, s5
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
          		@ deferred comparison: 
0x2bcb9ce8	368:	addiu	t7, zero, 7
0x2bcb9cec	372:	beq	s5, t7, PC=0x2bcb9ce8	@ branch to block L3
0x2bcb9cf0	376:	nop
0x2bcb9cf4	380:	lw	ra, -32(JFP)	@ Java local cell # 1
          		@ Do getfield:
0x2bcb9cf8	384:	lw	s5, 12(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcb9cfc	388:	addiu	s4, s7, 9
0x2bcb9d00	392:	lw	t9, 8(s5)	@ arraylength
          		@ deferred comparison: 
0x2bcb9d04	396:	sltu	t7, s4, t9
0x2bcb9d08	400:	bne	t7, zero, PC=0x2bcb9d04	@ br .skip
0x2bcb9d0c	404:	nop
0x2bcb9d10	408:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb9d14	412:	nop
		.skip
--->Fixed instruction at 400(0x2bcb9d08) to reference 416
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcb9d18	416:	addu	t8, s5, s4
0x2bcb9d1c	420:	lb	t9, 12(t8)
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
          		@ deferred comparison: 
0x2bcb9d20	424:	bne	t9, zero, PC=0x2bcb9d20	@ branch to block L3
0x2bcb9d24	428:	nop
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
			@ Initial Temp REF set is 
	L6:	432:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(22)
			@ Binding Incoming Local(8) to reg(23)
--->Fixed instruction at 336(0x2bcb9cc8) to reference 432
          		@ MAP_PC idepth=0 javaPc=95 compiledPc=432
0x2bcb9d28	432:	addiu	s6, s6, 1
0x2bcb9d2c	436:	sw	s6, -20(JFP)	@ Java local cell # 4
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
			@ Initial Temp REF set is 
	L3:	440:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(22)
			@ Binding Incoming Local(8) to reg(23)
--->Fixed instruction at 424(0x2bcb9d20) to reference 440
--->Fixed instruction at 372(0x2bcb9cec) to reference 440
--->Fixed instruction at 204(0x2bcb9c44) to reference 440
          		@ MAP_PC idepth=0 javaPc=98 compiledPc=440
0x2bcb9d30	440:	lw	ra, -32(JFP)	@ Java local cell # 1
          		@ Do getfield:
0x2bcb9d34	444:	lw	s5, 12(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcb9d38	448:	lw	s4, 8(s5)	@ arraylength
          		@ deferred comparison: 
0x2bcb9d3c	452:	sltu	t7, s7, s4
0x2bcb9d40	456:	bne	t7, zero, PC=0x2bcb9d3c	@ br .skip
0x2bcb9d44	460:	nop
0x2bcb9d48	464:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb9d4c	468:	nop
		.skip
--->Fixed instruction at 456(0x2bcb9d40) to reference 472
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcb9d50	472:	addu	t8, s5, s7
0x2bcb9d54	476:	lb	t9, 12(t8)
			@ Outgoing local(8) reg(23): in correct register
          		@ deferred comparison: 
0x2bcb9d58	480:	addiu	t7, zero, 6
0x2bcb9d5c	484:	bne	t9, t7, PC=0x2bcb9d58	@ branch to block L7
0x2bcb9d60	488:	nop
0x2bcb9d64	492:	addiu	t9, s7, -8
          		@ deferred comparison: 
0x2bcb9d68	496:	sltu	t7, t9, s4
0x2bcb9d6c	500:	bne	t7, zero, PC=0x2bcb9d68	@ br .skip
0x2bcb9d70	504:	nop
0x2bcb9d74	508:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb9d78	512:	nop
		.skip
--->Fixed instruction at 500(0x2bcb9d6c) to reference 516
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcb9d7c	516:	addu	t8, s5, t9
0x2bcb9d80	520:	lb	s4, 12(t8)
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
          		@ deferred comparison: 
0x2bcb9d84	524:	addiu	t7, zero, 6
0x2bcb9d88	528:	bne	s4, t7, PC=0x2bcb9d84	@ branch to block L8
0x2bcb9d8c	532:	nop
0x2bcb9d90	536:	addiu	s6, s6, 1
0x2bcb9d94	540:	sw	s6, -20(JFP)	@ Java local cell # 4
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
			@ Initial Temp REF set is 
	L8:	544:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(22)
			@ Binding Incoming Local(8) to reg(23)
--->Fixed instruction at 528(0x2bcb9d88) to reference 544
          		@ MAP_PC idepth=0 javaPc=128 compiledPc=544
          		@ do irem by 8:
0x2bcb9d98	544:	sra	s5, s7, 31
0x2bcb9d9c	548:	srl	t7, s5, 29
0x2bcb9da0	552:	addu	s5, s7, t7
0x2bcb9da4	556:	addiu	t7, zero, -8
0x2bcb9da8	560:	and	s5, s5, t7
0x2bcb9dac	564:	subu	s5, s7, s5
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
          		@ deferred comparison: 
0x2bcb9db0	568:	addiu	t7, zero, 7
0x2bcb9db4	572:	beq	s5, t7, PC=0x2bcb9db0	@ branch to block L9
0x2bcb9db8	576:	nop
0x2bcb9dbc	580:	lw	ra, -32(JFP)	@ Java local cell # 1
          		@ Do getfield:
0x2bcb9dc0	584:	lw	s5, 12(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcb9dc4	588:	addiu	s4, s7, -7
0x2bcb9dc8	592:	lw	t9, 8(s5)	@ arraylength
          		@ deferred comparison: 
0x2bcb9dcc	596:	sltu	t7, s4, t9
0x2bcb9dd0	600:	bne	t7, zero, PC=0x2bcb9dcc	@ br .skip
0x2bcb9dd4	604:	nop
0x2bcb9dd8	608:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb9ddc	612:	nop
		.skip
--->Fixed instruction at 600(0x2bcb9dd0) to reference 616
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcb9de0	616:	addu	t8, s5, s4
0x2bcb9de4	620:	lb	t9, 12(t8)
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
          		@ deferred comparison: 
0x2bcb9de8	624:	addiu	t7, zero, 6
0x2bcb9dec	628:	beq	t9, t7, PC=0x2bcb9de8	@ branch to block L10
0x2bcb9df0	632:	nop
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
			@ Initial Temp REF set is 
	L9:	636:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(22)
			@ Binding Incoming Local(8) to reg(23)
--->Fixed instruction at 572(0x2bcb9db4) to reference 636
          		@ MAP_PC idepth=0 javaPc=153 compiledPc=636
          		@ do irem by 8:
0x2bcb9df4	636:	sra	s5, s7, 31
0x2bcb9df8	640:	srl	t7, s5, 29
0x2bcb9dfc	644:	addu	s5, s7, t7
0x2bcb9e00	648:	addiu	t7, zero, -8
0x2bcb9e04	652:	and	s5, s5, t7
0x2bcb9e08	656:	subu	s5, s7, s5
			@ Outgoing local(8) reg(23): in correct register
          		@ deferred comparison: 
0x2bcb9e0c	660:	beq	s5, zero, PC=0x2bcb9e0c	@ branch to block L7
0x2bcb9e10	664:	nop
0x2bcb9e14	668:	lw	ra, -32(JFP)	@ Java local cell # 1
          		@ Do getfield:
0x2bcb9e18	672:	lw	s5, 12(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcb9e1c	676:	addiu	s4, s7, -9
0x2bcb9e20	680:	lw	t9, 8(s5)	@ arraylength
          		@ deferred comparison: 
0x2bcb9e24	684:	sltu	t7, s4, t9
0x2bcb9e28	688:	bne	t7, zero, PC=0x2bcb9e24	@ br .skip
0x2bcb9e2c	692:	nop
0x2bcb9e30	696:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb9e34	700:	nop
		.skip
--->Fixed instruction at 688(0x2bcb9e28) to reference 704
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcb9e38	704:	addu	t8, s5, s4
0x2bcb9e3c	708:	lb	t9, 12(t8)
			@ Outgoing local(8) reg(23): in correct register
          		@ deferred comparison: 
0x2bcb9e40	712:	addiu	t7, zero, 6
0x2bcb9e44	716:	bne	t9, t7, PC=0x2bcb9e40	@ branch to block L7
0x2bcb9e48	720:	nop
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
			@ Initial Temp REF set is 
	L10:	724:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(22)
			@ Binding Incoming Local(8) to reg(23)
--->Fixed instruction at 628(0x2bcb9dec) to reference 724
          		@ MAP_PC idepth=0 javaPc=176 compiledPc=724
0x2bcb9e4c	724:	addiu	s5, s6, -1
0x2bcb9e50	728:	sw	s5, -20(JFP)	@ Java local cell # 4
			@ Outgoing local(8) reg(23): in correct register
			@ Initial Temp REF set is 
	L7:	732:	@ entry point for branches
			@ Binding Incoming Local(8) to reg(23)
--->Fixed instruction at 716(0x2bcb9e44) to reference 732
--->Fixed instruction at 660(0x2bcb9e0c) to reference 732
--->Fixed instruction at 484(0x2bcb9d5c) to reference 732
          		@ MAP_PC idepth=0 javaPc=179 compiledPc=732
0x2bcb9e54	732:	lw	ra, -32(JFP)	@ Java local cell # 1
          		@ Do getfield:
0x2bcb9e58	736:	lw	s6, 12(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcb9e5c	740:	lw	s5, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcb9e60	744:	sltu	t7, s7, s5
0x2bcb9e64	748:	bne	t7, zero, PC=0x2bcb9e60	@ br .skip
0x2bcb9e68	752:	nop
0x2bcb9e6c	756:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb9e70	760:	nop
		.skip
--->Fixed instruction at 748(0x2bcb9e64) to reference 764
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcb9e74	764:	addu	s4, s6, s7
0x2bcb9e78	768:	lb	s5, 12(s4)
          		@ deferred comparison: 
0x2bcb9e7c	772:	addiu	t7, zero, 99
0x2bcb9e80	776:	beq	s5, t7, PC=0x2bcb9e7c	@ branch to block L24
0x2bcb9e84	780:	nop
          		@ tableswitch
          		@ deferred comparison: 
0x2bcb9e88	784:	addiu	t7, zero, 11
0x2bcb9e8c	788:	sltu	t7, t7, s5
0x2bcb9e90	792:	bne	t7, zero, PC=0x2bcb9e88	@ branch to block L11
0x2bcb9e94	796:	nop
0x2bcb9e98	800:	lw	s6, 0(CP)
0x2bcb9e9c	804:	sll	t9, s5, 3
0x2bcb9ea0	808:	addu	t9, t9, s6
0x2bcb9ea4	812:	jr	t9
0x2bcb9ea8	816:	nop
0x2bcb9eac	820:	b	PC=0x2bcb9eac	@ branch to block L12
0x2bcb9eb0	824:	nop
0x2bcb9eb4	828:	b	PC=0x2bcb9eb4	@ branch to block L13
0x2bcb9eb8	832:	nop
0x2bcb9ebc	836:	b	PC=0x2bcb9ebc	@ branch to block L14
0x2bcb9ec0	840:	nop
0x2bcb9ec4	844:	b	PC=0x2bcb9ec4	@ branch to block L15
0x2bcb9ec8	848:	nop
0x2bcb9ecc	852:	b	PC=0x2bcb9ecc	@ branch to block L16
0x2bcb9ed0	856:	nop
0x2bcb9ed4	860:	b	PC=0x2bcb9ed4	@ branch to block L17
0x2bcb9ed8	864:	nop
0x2bcb9edc	868:	b	PC=0x2bcb9edc	@ branch to block L18
0x2bcb9ee0	872:	nop
0x2bcb9ee4	876:	b	PC=0x2bcb9ee4	@ branch to block L19
0x2bcb9ee8	880:	nop
0x2bcb9eec	884:	b	PC=0x2bcb9eec	@ branch to block L20
0x2bcb9ef0	888:	nop
0x2bcb9ef4	892:	b	PC=0x2bcb9ef4	@ branch to block L21
0x2bcb9ef8	896:	nop
0x2bcb9efc	900:	b	PC=0x2bcb9efc	@ branch to block L22
0x2bcb9f00	904:	nop
0x2bcb9f04	908:	b	PC=0x2bcb9f04	@ branch to block L23
0x2bcb9f08	912:	nop
			@ Initial Temp REF set is 
	L24:	916:	@ entry point for branches
--->Fixed instruction at 776(0x2bcb9e80) to reference 916
          		@ MAP_PC idepth=0 javaPc=300 compiledPc=916
0x2bcb9f0c	916:	b	PC=0x2bcb9f0c	@ branch to block L11
0x2bcb9f10	920:	nop
			@ Initial Temp REF set is 
	L12:	924:	@ entry point for branches
--->Fixed instruction at 820(0x2bcb9eac) to reference 924
          		@ MAP_PC idepth=0 javaPc=303 compiledPc=924
0x2bcb9f14	924:	lw	ra, -36(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcb9f18	928:	lw	s7, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcb9f1c	932:	lw	s6, 168(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcb9f20	936:	lw	s7, 52(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcb9f24	940:	lw	t9, -8(JFP)	@ Java local cell # 7
0x2bcb9f28	944:	addu	s5, t9, s6
0x2bcb9f2c	948:	lw	t8, -4(JFP)	@ Java local cell # 8
0x2bcb9f30	952:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcb9f34	956:	sltu	t7, t8, s6
0x2bcb9f38	960:	bne	t7, zero, PC=0x2bcb9f34	@ br .skip
0x2bcb9f3c	964:	nop
0x2bcb9f40	968:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb9f44	972:	nop
		.skip
--->Fixed instruction at 960(0x2bcb9f38) to reference 976
          		@ Do load(arrayObj, index) (elem type=3,I):
0x2bcb9f48	976:	sll	s4, t8, 2
0x2bcb9f4c	980:	addu	s4, s7, s4
0x2bcb9f50	984:	lw	s6, 12(s4)
0x2bcb9f54	988:	addu	s7, s5, s6
0x2bcb9f58	992:	sw	s7, -8(JFP)	@ Java local cell # 7
0x2bcb9f5c	996:	b	PC=0x2bcb9f5c	@ branch to block L11
0x2bcb9f60	1000:	nop
			@ Initial Temp REF set is 
	L13:	1004:	@ entry point for branches
--->Fixed instruction at 828(0x2bcb9eb4) to reference 1004
          		@ MAP_PC idepth=0 javaPc=330 compiledPc=1004
0x2bcb9f64	1004:	lw	ra, -36(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcb9f68	1008:	lw	s7, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcb9f6c	1012:	lw	s6, 176(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcb9f70	1016:	lw	s7, 12(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcb9f74	1020:	lw	t9, -8(JFP)	@ Java local cell # 7
0x2bcb9f78	1024:	addu	s5, t9, s6
0x2bcb9f7c	1028:	lw	t8, -4(JFP)	@ Java local cell # 8
0x2bcb9f80	1032:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcb9f84	1036:	sltu	t7, t8, s6
0x2bcb9f88	1040:	bne	t7, zero, PC=0x2bcb9f84	@ br .skip
0x2bcb9f8c	1044:	nop
0x2bcb9f90	1048:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb9f94	1052:	nop
		.skip
--->Fixed instruction at 1040(0x2bcb9f88) to reference 1056
          		@ Do load(arrayObj, index) (elem type=3,I):
0x2bcb9f98	1056:	sll	s4, t8, 2
0x2bcb9f9c	1060:	addu	s4, s7, s4
0x2bcb9fa0	1064:	lw	s6, 12(s4)
0x2bcb9fa4	1068:	addu	s7, s5, s6
0x2bcb9fa8	1072:	sw	s7, -8(JFP)	@ Java local cell # 7
0x2bcb9fac	1076:	b	PC=0x2bcb9fac	@ branch to block L11
0x2bcb9fb0	1080:	nop
			@ Initial Temp REF set is 
	L14:	1084:	@ entry point for branches
--->Fixed instruction at 836(0x2bcb9ebc) to reference 1084
          		@ MAP_PC idepth=0 javaPc=357 compiledPc=1084
0x2bcb9fb4	1084:	lw	ra, -36(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcb9fb8	1088:	lw	s7, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcb9fbc	1092:	lw	s6, 172(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcb9fc0	1096:	lw	s7, 20(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcb9fc4	1100:	lw	t9, -8(JFP)	@ Java local cell # 7
0x2bcb9fc8	1104:	addu	s5, t9, s6
0x2bcb9fcc	1108:	lw	t8, -4(JFP)	@ Java local cell # 8
0x2bcb9fd0	1112:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcb9fd4	1116:	sltu	t7, t8, s6
0x2bcb9fd8	1120:	bne	t7, zero, PC=0x2bcb9fd4	@ br .skip
0x2bcb9fdc	1124:	nop
0x2bcb9fe0	1128:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcb9fe4	1132:	nop
		.skip
--->Fixed instruction at 1120(0x2bcb9fd8) to reference 1136
          		@ Do load(arrayObj, index) (elem type=3,I):
0x2bcb9fe8	1136:	sll	s4, t8, 2
0x2bcb9fec	1140:	addu	s4, s7, s4
0x2bcb9ff0	1144:	lw	s6, 12(s4)
0x2bcb9ff4	1148:	addu	s7, s5, s6
0x2bcb9ff8	1152:	sw	s7, -8(JFP)	@ Java local cell # 7
0x2bcb9ffc	1156:	b	PC=0x2bcb9ffc	@ branch to block L11
0x2bcba000	1160:	nop
			@ Initial Temp REF set is 
	L15:	1164:	@ entry point for branches
--->Fixed instruction at 844(0x2bcb9ec4) to reference 1164
          		@ MAP_PC idepth=0 javaPc=384 compiledPc=1164
0x2bcba004	1164:	lw	ra, -36(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcba008	1168:	lw	s7, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba00c	1172:	lw	s6, 180(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba010	1176:	lw	s7, 28(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcba014	1180:	lw	t9, -8(JFP)	@ Java local cell # 7
0x2bcba018	1184:	addu	s5, t9, s6
0x2bcba01c	1188:	lw	t8, -4(JFP)	@ Java local cell # 8
0x2bcba020	1192:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcba024	1196:	sltu	t7, t8, s6
0x2bcba028	1200:	bne	t7, zero, PC=0x2bcba024	@ br .skip
0x2bcba02c	1204:	nop
0x2bcba030	1208:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcba034	1212:	nop
		.skip
--->Fixed instruction at 1200(0x2bcba028) to reference 1216
          		@ Do load(arrayObj, index) (elem type=3,I):
0x2bcba038	1216:	sll	s4, t8, 2
0x2bcba03c	1220:	addu	s4, s7, s4
0x2bcba040	1224:	lw	s6, 12(s4)
0x2bcba044	1228:	addu	s7, s5, s6
0x2bcba048	1232:	sw	s7, -8(JFP)	@ Java local cell # 7
0x2bcba04c	1236:	b	PC=0x2bcba04c	@ branch to block L11
0x2bcba050	1240:	nop
			@ Initial Temp REF set is 
	L16:	1244:	@ entry point for branches
--->Fixed instruction at 852(0x2bcb9ecc) to reference 1244
          		@ MAP_PC idepth=0 javaPc=411 compiledPc=1244
0x2bcba054	1244:	lw	ra, -36(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcba058	1248:	lw	s7, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba05c	1252:	lw	s6, 184(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba060	1256:	lw	s7, 36(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcba064	1260:	lw	t9, -8(JFP)	@ Java local cell # 7
0x2bcba068	1264:	addu	s5, t9, s6
0x2bcba06c	1268:	lw	t8, -4(JFP)	@ Java local cell # 8
0x2bcba070	1272:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcba074	1276:	sltu	t7, t8, s6
0x2bcba078	1280:	bne	t7, zero, PC=0x2bcba074	@ br .skip
0x2bcba07c	1284:	nop
0x2bcba080	1288:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcba084	1292:	nop
		.skip
--->Fixed instruction at 1280(0x2bcba078) to reference 1296
          		@ Do load(arrayObj, index) (elem type=3,I):
0x2bcba088	1296:	sll	s4, t8, 2
0x2bcba08c	1300:	addu	s4, s7, s4
0x2bcba090	1304:	lw	s6, 12(s4)
0x2bcba094	1308:	addu	s7, s5, s6
0x2bcba098	1312:	sw	s7, -8(JFP)	@ Java local cell # 7
0x2bcba09c	1316:	b	PC=0x2bcba09c	@ branch to block L11
0x2bcba0a0	1320:	nop
			@ Initial Temp REF set is 
	L17:	1324:	@ entry point for branches
--->Fixed instruction at 860(0x2bcb9ed4) to reference 1324
          		@ MAP_PC idepth=0 javaPc=438 compiledPc=1324
0x2bcba0a4	1324:	lw	s5, -36(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcba0a8	1328:	lw	s7, 8(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba0ac	1332:	lw	s6, 56(s7)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcba0b0	1336:	sw	s7, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcba0b4	1340:	lw	s7, -4(JFP)	@ Java local cell # 8
0x2bcba0b8	1344:	sw	s7, -24(JFP)	@ Java local cell # 3
			@ Outgoing local(7) reg(20): not in register
0x2bcba0bc	1348:	lw	s4, -8(JFP)	@ Java local cell # 7
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(8) reg(23): in correct register
          		@ deferred comparison: 
0x2bcba0c0	1352:	addiu	t7, zero, 98
0x2bcba0c4	1356:	bne	s6, t7, PC=0x2bcba0c0	@ branch to block L25
0x2bcba0c8	1360:	nop
          		@ Do getfield:
0x2bcba0cc	1364:	lw	ra, 28(JFP)	@ Java temp cell # 0
0x2bcba0d0	1368:	lw	s6, 188(ra)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcba0d4	1372:	addu	s4, s4, s6
0x2bcba0d8	1376:	sw	s4, -8(JFP)	@ Java local cell # 7
			@ Outgoing local(7) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(8) reg(23): in correct register
0x2bcba0dc	1380:	b	PC=0x2bcba0dc	@ branch to block L26
0x2bcba0e0	1384:	nop
			@ Initial Temp REF set is 
	L25:	1388:	@ entry point for branches
			@ Binding Incoming Local(7) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(8) to reg(23)
--->Fixed instruction at 1356(0x2bcba0c4) to reference 1388
          		@ MAP_PC idepth=0 javaPc=468 compiledPc=1388
          		@ Do getfield:
0x2bcba0e4	1388:	lw	s6, 8(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba0e8	1392:	lw	ra, 188(s6)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ do idiv by 2:
0x2bcba0ec	1396:	sra	s6, ra, 31
0x2bcba0f0	1400:	srl	t7, s6, 31
0x2bcba0f4	1404:	addu	s6, ra, t7
0x2bcba0f8	1408:	sra	s6, s6, 1
0x2bcba0fc	1412:	addu	s4, s4, s6
0x2bcba100	1416:	sw	s4, -8(JFP)	@ Java local cell # 7
			@ Outgoing local(7) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(8) reg(23): in correct register
			@ Initial Temp REF set is 
	L26:	1420:	@ entry point for branches
			@ Binding Incoming Local(7) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(8) to reg(23)
--->Fixed instruction at 1380(0x2bcba0dc) to reference 1420
          		@ MAP_PC idepth=0 javaPc=482 compiledPc=1420
          		@ Do getfield:
0x2bcba104	1420:	lw	s6, 44(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcba108	1424:	lw	ra, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcba10c	1428:	sltu	t7, s7, ra
0x2bcba110	1432:	bne	t7, zero, PC=0x2bcba10c	@ br .skip
0x2bcba114	1436:	nop
0x2bcba118	1440:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcba11c	1444:	nop
		.skip
--->Fixed instruction at 1432(0x2bcba110) to reference 1448
          		@ Do load(arrayObj, index) (elem type=3,I):
0x2bcba120	1448:	sll	t9, s7, 2
0x2bcba124	1452:	addu	t9, s6, t9
0x2bcba128	1456:	lw	ra, 12(t9)
0x2bcba12c	1460:	addu	s6, s4, ra
0x2bcba130	1464:	sw	s6, -8(JFP)	@ Java local cell # 7
0x2bcba134	1468:	b	PC=0x2bcba134	@ branch to block L11
0x2bcba138	1472:	nop
			@ Initial Temp REF set is 
	L18:	1476:	@ entry point for branches
--->Fixed instruction at 868(0x2bcb9edc) to reference 1476
          		@ MAP_PC idepth=0 javaPc=497 compiledPc=1476
0x2bcba13c	1476:	lw	ra, -36(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcba140	1480:	lw	s7, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba144	1484:	lw	s6, 168(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba148	1488:	lw	s7, 56(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcba14c	1492:	lw	t9, -8(JFP)	@ Java local cell # 7
0x2bcba150	1496:	subu	s5, t9, s6
0x2bcba154	1500:	lw	t8, -4(JFP)	@ Java local cell # 8
0x2bcba158	1504:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcba15c	1508:	sltu	t7, t8, s6
0x2bcba160	1512:	bne	t7, zero, PC=0x2bcba15c	@ br .skip
0x2bcba164	1516:	nop
0x2bcba168	1520:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcba16c	1524:	nop
		.skip
--->Fixed instruction at 1512(0x2bcba160) to reference 1528
          		@ Do load(arrayObj, index) (elem type=3,I):
0x2bcba170	1528:	sll	s4, t8, 2
0x2bcba174	1532:	addu	s4, s7, s4
0x2bcba178	1536:	lw	s6, 12(s4)
0x2bcba17c	1540:	subu	s7, s5, s6
0x2bcba180	1544:	sw	s7, -8(JFP)	@ Java local cell # 7
0x2bcba184	1548:	b	PC=0x2bcba184	@ branch to block L11
0x2bcba188	1552:	nop
			@ Initial Temp REF set is 
	L19:	1556:	@ entry point for branches
--->Fixed instruction at 876(0x2bcb9ee4) to reference 1556
          		@ MAP_PC idepth=0 javaPc=524 compiledPc=1556
0x2bcba18c	1556:	lw	ra, -36(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcba190	1560:	lw	s7, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba194	1564:	lw	s6, 176(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba198	1568:	lw	s7, 16(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcba19c	1572:	lw	t9, -8(JFP)	@ Java local cell # 7
0x2bcba1a0	1576:	subu	s5, t9, s6
0x2bcba1a4	1580:	lw	t8, -4(JFP)	@ Java local cell # 8
0x2bcba1a8	1584:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcba1ac	1588:	sltu	t7, t8, s6
0x2bcba1b0	1592:	bne	t7, zero, PC=0x2bcba1ac	@ br .skip
0x2bcba1b4	1596:	nop
0x2bcba1b8	1600:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcba1bc	1604:	nop
		.skip
--->Fixed instruction at 1592(0x2bcba1b0) to reference 1608
          		@ Do load(arrayObj, index) (elem type=3,I):
0x2bcba1c0	1608:	sll	s4, t8, 2
0x2bcba1c4	1612:	addu	s4, s7, s4
0x2bcba1c8	1616:	lw	s6, 12(s4)
0x2bcba1cc	1620:	subu	s7, s5, s6
0x2bcba1d0	1624:	sw	s7, -8(JFP)	@ Java local cell # 7
0x2bcba1d4	1628:	b	PC=0x2bcba1d4	@ branch to block L11
0x2bcba1d8	1632:	nop
			@ Initial Temp REF set is 
	L20:	1636:	@ entry point for branches
--->Fixed instruction at 884(0x2bcb9eec) to reference 1636
          		@ MAP_PC idepth=0 javaPc=551 compiledPc=1636
0x2bcba1dc	1636:	lw	ra, -36(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcba1e0	1640:	lw	s7, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba1e4	1644:	lw	s6, 172(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba1e8	1648:	lw	s7, 24(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcba1ec	1652:	lw	t9, -8(JFP)	@ Java local cell # 7
0x2bcba1f0	1656:	subu	s5, t9, s6
0x2bcba1f4	1660:	lw	t8, -4(JFP)	@ Java local cell # 8
0x2bcba1f8	1664:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcba1fc	1668:	sltu	t7, t8, s6
0x2bcba200	1672:	bne	t7, zero, PC=0x2bcba1fc	@ br .skip
0x2bcba204	1676:	nop
0x2bcba208	1680:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcba20c	1684:	nop
		.skip
--->Fixed instruction at 1672(0x2bcba200) to reference 1688
          		@ Do load(arrayObj, index) (elem type=3,I):
0x2bcba210	1688:	sll	s4, t8, 2
0x2bcba214	1692:	addu	s4, s7, s4
0x2bcba218	1696:	lw	s6, 12(s4)
0x2bcba21c	1700:	subu	s7, s5, s6
0x2bcba220	1704:	sw	s7, -8(JFP)	@ Java local cell # 7
0x2bcba224	1708:	b	PC=0x2bcba224	@ branch to block L11
0x2bcba228	1712:	nop
			@ Initial Temp REF set is 
	L21:	1716:	@ entry point for branches
--->Fixed instruction at 892(0x2bcb9ef4) to reference 1716
          		@ MAP_PC idepth=0 javaPc=578 compiledPc=1716
0x2bcba22c	1716:	lw	ra, -36(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcba230	1720:	lw	s7, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba234	1724:	lw	s6, 180(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba238	1728:	lw	s7, 32(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcba23c	1732:	lw	t9, -8(JFP)	@ Java local cell # 7
0x2bcba240	1736:	subu	s5, t9, s6
0x2bcba244	1740:	lw	t8, -4(JFP)	@ Java local cell # 8
0x2bcba248	1744:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcba24c	1748:	sltu	t7, t8, s6
0x2bcba250	1752:	bne	t7, zero, PC=0x2bcba24c	@ br .skip
0x2bcba254	1756:	nop
0x2bcba258	1760:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcba25c	1764:	nop
		.skip
--->Fixed instruction at 1752(0x2bcba250) to reference 1768
          		@ Do load(arrayObj, index) (elem type=3,I):
0x2bcba260	1768:	sll	s4, t8, 2
0x2bcba264	1772:	addu	s4, s7, s4
0x2bcba268	1776:	lw	s6, 12(s4)
0x2bcba26c	1780:	subu	s7, s5, s6
0x2bcba270	1784:	sw	s7, -8(JFP)	@ Java local cell # 7
0x2bcba274	1788:	b	PC=0x2bcba274	@ branch to block L11
0x2bcba278	1792:	nop
			@ Initial Temp REF set is 
	L22:	1796:	@ entry point for branches
--->Fixed instruction at 900(0x2bcb9efc) to reference 1796
          		@ MAP_PC idepth=0 javaPc=605 compiledPc=1796
0x2bcba27c	1796:	lw	ra, -36(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcba280	1800:	lw	s7, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba284	1804:	lw	s6, 184(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba288	1808:	lw	s7, 40(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcba28c	1812:	lw	t9, -8(JFP)	@ Java local cell # 7
0x2bcba290	1816:	subu	s5, t9, s6
0x2bcba294	1820:	lw	t8, -4(JFP)	@ Java local cell # 8
0x2bcba298	1824:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcba29c	1828:	sltu	t7, t8, s6
0x2bcba2a0	1832:	bne	t7, zero, PC=0x2bcba29c	@ br .skip
0x2bcba2a4	1836:	nop
0x2bcba2a8	1840:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcba2ac	1844:	nop
		.skip
--->Fixed instruction at 1832(0x2bcba2a0) to reference 1848
          		@ Do load(arrayObj, index) (elem type=3,I):
0x2bcba2b0	1848:	sll	s4, t8, 2
0x2bcba2b4	1852:	addu	s4, s7, s4
0x2bcba2b8	1856:	lw	s6, 12(s4)
0x2bcba2bc	1860:	subu	s7, s5, s6
0x2bcba2c0	1864:	sw	s7, -8(JFP)	@ Java local cell # 7
0x2bcba2c4	1868:	b	PC=0x2bcba2c4	@ branch to block L11
0x2bcba2c8	1872:	nop
			@ Initial Temp REF set is 
	L23:	1876:	@ entry point for branches
--->Fixed instruction at 908(0x2bcb9f04) to reference 1876
          		@ MAP_PC idepth=0 javaPc=632 compiledPc=1876
0x2bcba2cc	1876:	lw	s5, -36(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcba2d0	1880:	lw	s7, 8(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba2d4	1884:	lw	s6, 56(s7)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcba2d8	1888:	sw	s7, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcba2dc	1892:	lw	s7, -4(JFP)	@ Java local cell # 8
0x2bcba2e0	1896:	sw	s7, -28(JFP)	@ Java local cell # 2
			@ Outgoing local(7) reg(20): not in register
0x2bcba2e4	1900:	lw	s4, -8(JFP)	@ Java local cell # 7
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(8) reg(23): in correct register
          		@ deferred comparison: 
0x2bcba2e8	1904:	addiu	t7, zero, 119
0x2bcba2ec	1908:	bne	s6, t7, PC=0x2bcba2e8	@ branch to block L27
0x2bcba2f0	1912:	nop
          		@ Do getfield:
0x2bcba2f4	1916:	lw	ra, 28(JFP)	@ Java temp cell # 0
0x2bcba2f8	1920:	lw	s6, 188(ra)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcba2fc	1924:	subu	s4, s4, s6
0x2bcba300	1928:	sw	s4, -8(JFP)	@ Java local cell # 7
			@ Outgoing local(7) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(8) reg(23): in correct register
0x2bcba304	1932:	b	PC=0x2bcba304	@ branch to block L28
0x2bcba308	1936:	nop
			@ Initial Temp REF set is 
	L27:	1940:	@ entry point for branches
			@ Binding Incoming Local(7) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(8) to reg(23)
--->Fixed instruction at 1908(0x2bcba2ec) to reference 1940
          		@ MAP_PC idepth=0 javaPc=662 compiledPc=1940
          		@ Do getfield:
0x2bcba30c	1940:	lw	s6, 8(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba310	1944:	lw	ra, 188(s6)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ do idiv by 2:
0x2bcba314	1948:	sra	s6, ra, 31
0x2bcba318	1952:	srl	t7, s6, 31
0x2bcba31c	1956:	addu	s6, ra, t7
0x2bcba320	1960:	sra	s6, s6, 1
0x2bcba324	1964:	subu	s4, s4, s6
0x2bcba328	1968:	sw	s4, -8(JFP)	@ Java local cell # 7
			@ Outgoing local(7) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(8) reg(23): in correct register
			@ Initial Temp REF set is 
	L28:	1972:	@ entry point for branches
			@ Binding Incoming Local(7) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(8) to reg(23)
--->Fixed instruction at 1932(0x2bcba304) to reference 1972
          		@ MAP_PC idepth=0 javaPc=676 compiledPc=1972
          		@ Do getfield:
0x2bcba32c	1972:	lw	s6, 48(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcba330	1976:	lw	ra, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcba334	1980:	sltu	t7, s7, ra
0x2bcba338	1984:	bne	t7, zero, PC=0x2bcba334	@ br .skip
0x2bcba33c	1988:	nop
0x2bcba340	1992:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcba344	1996:	nop
		.skip
--->Fixed instruction at 1984(0x2bcba338) to reference 2000
          		@ Do load(arrayObj, index) (elem type=3,I):
0x2bcba348	2000:	sll	t9, s7, 2
0x2bcba34c	2004:	addu	t9, s6, t9
0x2bcba350	2008:	lw	ra, 12(t9)
0x2bcba354	2012:	subu	s6, s4, ra
0x2bcba358	2016:	sw	s6, -8(JFP)	@ Java local cell # 7
			@ Initial Temp REF set is 
	L11:	2020:	@ entry point for branches
--->Fixed instruction at 1868(0x2bcba2c4) to reference 2020
--->Fixed instruction at 1788(0x2bcba274) to reference 2020
--->Fixed instruction at 1708(0x2bcba224) to reference 2020
--->Fixed instruction at 1628(0x2bcba1d4) to reference 2020
--->Fixed instruction at 1548(0x2bcba184) to reference 2020
--->Fixed instruction at 1468(0x2bcba134) to reference 2020
--->Fixed instruction at 1316(0x2bcba09c) to reference 2020
--->Fixed instruction at 1236(0x2bcba04c) to reference 2020
--->Fixed instruction at 1156(0x2bcb9ffc) to reference 2020
--->Fixed instruction at 1076(0x2bcb9fac) to reference 2020
--->Fixed instruction at 996(0x2bcb9f5c) to reference 2020
--->Fixed instruction at 916(0x2bcb9f0c) to reference 2020
--->Fixed instruction at 792(0x2bcb9e90) to reference 2020
          		@ MAP_PC idepth=0 javaPc=688 compiledPc=2020
0x2bcba35c	2020:	lw	ra, -4(JFP)	@ Java local cell # 8
0x2bcba360	2024:	addiu	s7, ra, 1
0x2bcba364	2028:	sw	s7, -4(JFP)	@ Java local cell # 8
			@ Outgoing local(0) reg(20): not in register
0x2bcba368	2032:	lw	s4, -36(JFP)	@ Java local cell # 0
			@ Outgoing local(5) reg(21): not in register
0x2bcba36c	2036:	lw	s5, -16(JFP)	@ Java local cell # 5
			@ Outgoing local(4) reg(22): not in register
0x2bcba370	2040:	lw	s6, -20(JFP)	@ Java local cell # 4
			@ Outgoing local(8) reg(23): in correct register
			@ Initial Temp REF set is 
	L1:	2044:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(5) to reg(21)
			@ Binding Incoming Local(4) to reg(22)
			@ Binding Incoming Local(8) to reg(23)
--->Fixed instruction at 140(0x2bcb9c04) to reference 2044
          		@ MAP_PC idepth=0 javaPc=691 compiledPc=2044
			@ Outgoing local(4) reg(22): in correct register
			@ Outgoing local(8) reg(23): in correct register
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcba374	2044:	sltiu	t7, s7, 64
0x2bcba378	2048:	bne	t7, zero, PC=0x2bcb9c0c	@ branch to block L2
0x2bcba37c	2052:	nop
0x2bcba374	2044:	sltiu	t7, s7, 64
0x2bcba378	2048:	bne	t7, zero, PC=0x2bcb9c1c	@ branch to block L2, skip GC
0x2bcba37c	2052:	nop
			@ Outgoing local(7) reg(20): not in register
0x2bcba380	2056:	lw	s4, -8(JFP)	@ Java local cell # 7
			@ Outgoing local(5) reg(21): in correct register
			@ Outgoing local(4) reg(22): in correct register
          		@ deferred comparison: 
0x2bcba384	2060:	addiu	t7, zero, 10
0x2bcba388	2064:	slt	t7, t7, s5
0x2bcba38c	2068:	beq	t7, zero, PC=0x2bcba384	@ branch to block L29
0x2bcba390	2072:	nop
          		@ Do getfield:
0x2bcba394	2076:	lw	t9, -36(JFP)	@ Java local cell # 0
0x2bcba398	2080:	lw	ra, 8(t9)	@ valueObj = getfield(obj, fieldIdx);
0x2bcba39c	2084:	sw	t9, 0(JSP)
0x2bcba3a0	2088:	lw	t8, -32(JFP)	@ Java local cell # 1
0x2bcba3a4	2092:	sw	t8, 4(JSP)
0x2bcba3a8	2096:	sw	ra, 8(JSP)
0x2bcba3ac	2100:	lw	ra, -28(JFP)	@ Java local cell # 2
0x2bcba3b0	2104:	sw	ra, 12(JSP)
0x2bcba3b4	2108:	lw	t6, -24(JFP)	@ Java local cell # 3
0x2bcba3b8	2112:	sw	t6, 16(JSP)
          		@ Fetch mb from vtable:
0x2bcba3bc	2116:	lw	t5, 0(t9)	@ Get object.cb
0x2bcba3c0	2120:	addiu	t7, zero, -4
0x2bcba3c4	2124:	and	t5, t5, t7
0x2bcba3c8	2128:	lw	t5, 76(t5)	@ Get cb.vtbl
0x2bcba3cc	2132:	lw	a0, 48(t5)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcba3d0	2136:	addiu	JSP, JSP, 20	@ adjust JSP before method call
0x2bcba3d4	2140:	lw	s7, 0(a0)	@ call method through mb
0x2bcba3d8	2144:	jalr	s7
0x2bcba3dc	2148:	nop
          		@ Captured a stackmap here.
0x2bcba3e0	2152:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcba3e4	2156:	lw	s7, 0(JSP)
0x2bcba3e8	2160:	sw	s7, -12(JFP)	@ Java local cell # 6
			@ Outgoing local(7) reg(20): not in register
0x2bcba3ec	2164:	lw	s4, -8(JFP)	@ Java local cell # 7
			@ Outgoing local(5) reg(21): not in register
0x2bcba3f0	2168:	lw	s5, -16(JFP)	@ Java local cell # 5
			@ Outgoing local(4) reg(22): not in register
0x2bcba3f4	2172:	lw	s6, -20(JFP)	@ Java local cell # 4
			@ Outgoing local(6) reg(23): in correct register
          		@ deferred comparison: 
0x2bcba3f8	2176:	sltiu	t7, s7, 0
0x2bcba3fc	2180:	beq	t7, zero, PC=0x2bcba3f8	@ branch to block L30
0x2bcba400	2184:	nop
0x2bcba404	2188:	addiu	ra, s7, -1
0x2bcba408	2192:	sw	ra, -12(JFP)	@ Java local cell # 6
0x2bcba40c	2196:	mult	ra, ra
0x2bcba410	2200:	mflo	s7
0x2bcba414	2204:	nop
0x2bcba418	2208:	nop
			@ Outgoing local(7) reg(20): in correct register
			@ Outgoing local(5) reg(21): in correct register
			@ Outgoing local(4) reg(22): in correct register
          		@ deferred comparison: 
0x2bcba41c	2212:	sltiu	t7, s7, 50
0x2bcba420	2216:	beq	t7, zero, PC=0x2bcba41c	@ branch to block L31
0x2bcba424	2220:	nop
0x2bcba428	2224:	mult	ra, ra
0x2bcba42c	2228:	mflo	s7
0x2bcba430	2232:	nop
0x2bcba434	2236:	nop
0x2bcba438	2240:	subu	s4, s4, s7
0x2bcba43c	2244:	sw	s4, -8(JFP)	@ Java local cell # 7
			@ Outgoing local(7) reg(20): in correct register
			@ Outgoing local(5) reg(21): in correct register
			@ Outgoing local(4) reg(22): in correct register
0x2bcba440	2248:	b	PC=0x2bcba440	@ branch to block L29
0x2bcba444	2252:	nop
			@ Initial Temp REF set is 
	L31:	2256:	@ entry point for branches
			@ Binding Incoming Local(7) to reg(20)
			@ Binding Incoming Local(5) to reg(21)
			@ Binding Incoming Local(4) to reg(22)
--->Fixed instruction at 2216(0x2bcba420) to reference 2256
          		@ MAP_PC idepth=0 javaPc=749 compiledPc=2256
0x2bcba448	2256:	addiu	s4, s4, -50
0x2bcba44c	2260:	sw	s4, -8(JFP)	@ Java local cell # 7
			@ Outgoing local(7) reg(20): in correct register
			@ Outgoing local(5) reg(21): in correct register
			@ Outgoing local(4) reg(22): in correct register
0x2bcba450	2264:	b	PC=0x2bcba450	@ branch to block L29
0x2bcba454	2268:	nop
			@ Initial Temp REF set is 
	L30:	2272:	@ entry point for branches
			@ Binding Incoming Local(7) to reg(20)
			@ Binding Incoming Local(5) to reg(21)
			@ Binding Incoming Local(4) to reg(22)
			@ Binding Incoming Local(6) to reg(23)
--->Fixed instruction at 2180(0x2bcba3fc) to reference 2272
          		@ MAP_PC idepth=0 javaPc=755 compiledPc=2272
0x2bcba458	2272:	addiu	ra, s7, 1
0x2bcba45c	2276:	sw	ra, -12(JFP)	@ Java local cell # 6
0x2bcba460	2280:	mult	ra, ra
0x2bcba464	2284:	mflo	s7
0x2bcba468	2288:	nop
0x2bcba46c	2292:	nop
			@ Outgoing local(7) reg(20): in correct register
			@ Outgoing local(5) reg(21): in correct register
			@ Outgoing local(4) reg(22): in correct register
          		@ deferred comparison: 
0x2bcba470	2296:	sltiu	t7, s7, 50
0x2bcba474	2300:	beq	t7, zero, PC=0x2bcba470	@ branch to block L32
0x2bcba478	2304:	nop
0x2bcba47c	2308:	mult	ra, ra
0x2bcba480	2312:	mflo	s7
0x2bcba484	2316:	nop
0x2bcba488	2320:	nop
0x2bcba48c	2324:	addu	s4, s4, s7
0x2bcba490	2328:	sw	s4, -8(JFP)	@ Java local cell # 7
			@ Outgoing local(7) reg(20): in correct register
			@ Outgoing local(5) reg(21): in correct register
			@ Outgoing local(4) reg(22): in correct register
0x2bcba494	2332:	b	PC=0x2bcba494	@ branch to block L29
0x2bcba498	2336:	nop
			@ Initial Temp REF set is 
	L32:	2340:	@ entry point for branches
			@ Binding Incoming Local(7) to reg(20)
			@ Binding Incoming Local(5) to reg(21)
			@ Binding Incoming Local(4) to reg(22)
--->Fixed instruction at 2300(0x2bcba474) to reference 2340
          		@ MAP_PC idepth=0 javaPc=781 compiledPc=2340
0x2bcba49c	2340:	addiu	s4, s4, 50
0x2bcba4a0	2344:	sw	s4, -8(JFP)	@ Java local cell # 7
			@ Outgoing local(7) reg(20): in correct register
			@ Outgoing local(5) reg(21): in correct register
			@ Outgoing local(4) reg(22): in correct register
			@ Initial Temp REF set is 
	L29:	2348:	@ entry point for branches
			@ Binding Incoming Local(7) to reg(20)
			@ Binding Incoming Local(5) to reg(21)
			@ Binding Incoming Local(4) to reg(22)
--->Fixed instruction at 2332(0x2bcba494) to reference 2348
--->Fixed instruction at 2264(0x2bcba450) to reference 2348
--->Fixed instruction at 2248(0x2bcba440) to reference 2348
--->Fixed instruction at 2068(0x2bcba38c) to reference 2348
          		@ MAP_PC idepth=0 javaPc=784 compiledPc=2348
			@ Outgoing local(7) reg(20): in correct register
          		@ deferred comparison: 
0x2bcba4a4	2348:	addiu	t7, zero, 2
0x2bcba4a8	2352:	slt	t7, t7, s5
0x2bcba4ac	2356:	beq	t7, zero, PC=0x2bcba4a4	@ branch to block L33
0x2bcba4b0	2360:	nop
0x2bcba4b4	2364:	sll	s7, s6, 2	@ imul by 4
0x2bcba4b8	2368:	addu	s4, s4, s7
0x2bcba4bc	2372:	sw	s4, -8(JFP)	@ Java local cell # 7
			@ Outgoing local(7) reg(20): in correct register
			@ Initial Temp REF set is 
	L33:	2376:	@ entry point for branches
			@ Binding Incoming Local(7) to reg(20)
--->Fixed instruction at 2356(0x2bcba4ac) to reference 2376
          		@ MAP_PC idepth=0 javaPc=799 compiledPc=2376
0x2bcba4c0	2376:	sw	s4, -36(JFP)	@ Java local cell # 0
0x2bcba4c4	2380:	addiu	JSP, JFP, -32
0x2bcba4c8	2384:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcba4cc	2388:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcba4d0	2392:	nop
0x2bcba4d4	2396:	.word	734764716
--->Fixed instruction at 800(0x2bcb9e98) to reference 2396
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcb9b78) >>>>>>>>
          		@ Capacity is 23 word(s)
0x2bcb9b78	0:	addiu	a1, JSP, 84
<<<<<<<<<Pop Code Buffer to PC = 2400 (0x2bcba4d8) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcb9bc8) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcb9bc8	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcb9bcc	84:	lui	CP, hi16(0x2bcb)
0x2bcb9bd0	88:	ori	CP, CP, lo16(0x2bcba4d4)
0x2bcb9bd4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 2400 (0x2bcba4d8) <<<<<<<<<
JS: COMPILED: size=2612 startPC=0x2bcb9b78 com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I
OSR: Intr2Comp: com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I
JS: ATTEMPTING TO COMPILE java.util.Vector.elementAt(I)Ljava/lang/Object;
JS: COMPILING java.util.Vector.elementAt(I)Ljava/lang/Object;
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
s1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
s1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
s1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
s1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
bkID(0) local(0 #1)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(2 0x0): 1- 0- 
+bk  bkID(0) Incoming Locals(2 0x1): 1+ 0- 
-gbk bkID(1) Incoming Locals(2 0x0): 0- 1- 
+gbk bkID(1) Incoming Locals(2 0x1): 1+ 0- 
bkID(0) local(0 #1)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x1): 1+ 0- 
dstBk(0) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(0) Incoming Locals(2 0x1): 1+ 0- 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x1): 1+ 0- 
dstBk(1) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(1) Incoming Locals(2 0x1): 1+ 0- 
bkID(0) local(1 #0)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(2 0x1): 1+ 0- 
+bk  bkID(0) Incoming Locals(2 0x3): 1+ 0+ 
-gbk bkID(1) Incoming Locals(2 0x1): 1+ 0- 
+gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
bkID(0) local(1 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(0) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(0) Incoming Locals(2 0x3): 1+ 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 

#################################################

The maximum node counts per root node are 15
IR block list contains 2 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 10 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: java.util.Vector.elementAt(I)Ljava/lang/Object;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x6e68ac):    iload_1 
<1>  (0x6e68ad):    aload_0 
<2>  (0x6e68ae):    getfield_quick #4
<5>  (0x6e68b1):    if_icmplt <42>
<8>  (0x6e68b4):    new_quick #10784 <java.lang.ArrayIndexOutOfBoundsException>
<11>  (0x6e68b7):    dup 
<12>  (0x6e68b8):    new_checkinit_quick #10641 <java.lang.StringBuffer>
<15>  (0x6e68bb):    dup 
<16>  (0x6e68bc):    invokenonvirtual_quick #4389 <java.lang.StringBuffer.<init>()V>
<19>  (0x6e68bf):    iload_1 
<20>  (0x6e68c0):    invokenonvirtual_quick #6735 <java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;>
<23>  (0x6e68c3):    aldc_quick #86
<25>  (0x6e68c5):    invokenonvirtual_quick #9239 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<28>  (0x6e68c8):    aload_0 
<29>  (0x6e68c9):    getfield_quick #4
<32>  (0x6e68cc):    invokenonvirtual_quick #6735 <java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;>
<35>  (0x6e68cf):    invokenonvirtual_quick #6697 <java.lang.StringBuffer.toString()Ljava/lang/String;>
<38>  (0x6e68d2):    invokenonvirtual_quick #6101 <java.lang.ArrayIndexOutOfBoundsException.<init>(Ljava/lang/String;)V>
<41>  (0x6e68d5):    athrow 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(1)	ID(2)
 	local(0)	ID(3)
 
Incoming Locals(2): 
	local(1)	ID(2)
 	local(0)	ID(3)
 
Successor Blocks(1): 
	ID(1) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(1 0)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 6) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 8) FETCH (32-bit field) 
         <(ID: 5) FIELD_REF (32-bit field) 
            <(ID: 3) IDENTITY (reference)  (ref count: 2)
               <(ID: 36) LOCAL (reference)   0>
            <(ID: 4) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 7) BCOND (int) 
   target: (BlockID: 1 BlockPC: 42)
   condition: LT
   flags: 0
      <(ID: 2) IDENTITY (int)  (ref count: 2)
         <(ID: 34) LOCAL (int)   1>
      <(ID: 6) IDENTITY (32-bit field)  (ref count: 2)


   <(ID: 10) IDENTITY (reference)  (ref count: 3)
      <(ID: 55) NEW_OBJECT (reference) 
         <(ID: 9) CONST_CB (address field)  (java.lang.ArrayIndexOutOfBoundsException)

   <(ID: 12) IDENTITY (reference)  (ref count: 3)
      <(ID: 17) NEW_OBJECT (reference) 
         <(ID: 11) CONST_CB (address field)  (java.lang.StringBuffer)

   <(ID: 16) INVOKE (v) 
      <(ID: 15) PARAMETER (reference) 
         <(ID: 12) IDENTITY (reference)  (ref count: 3)
         <(ID: 14) NULL_PARAMETER (NONE) 
      <(ID: 13) CONST_MB (address field)  (java.lang.StringBuffer.<init>()V)

   <(ID: 30) IDENTITY (reference)  (ref count: 3)
      <(ID: 56) INVOKE (reference) 
         <(ID: 27) PARAMETER (reference) 
            <(ID: 22) IDENTITY (reference)  (ref count: 2)
               <(ID: 35) INVOKE (reference) 
                  <(ID: 21) PARAMETER (reference) 
                     <(ID: 12) IDENTITY (reference)  (ref count: 3)
                     <(ID: 20) PARAMETER (int) 
                        <(ID: 2) IDENTITY (int)  (ref count: 2)
                        <(ID: 19) NULL_PARAMETER (NONE) 
                  <(ID: 18) CONST_MB (address field)  (java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;)
            <(ID: 26) PARAMETER (reference) 
               <(ID: 23) CONST_STRING_OBJECT (reference)  (stringObject 0x891d14)

               <(ID: 25) NULL_PARAMETER (NONE) 
         <(ID: 29) SEQUENCE_R (address field) 
            <(ID: 28) NULL_CHECK (reference) 
               <(ID: 22) IDENTITY (reference)  (ref count: 2)
            <(ID: 24) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)

   <(ID: 33) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 57) FETCH (32-bit field) 
         <(ID: 32) FIELD_REF (32-bit field) 
            <(ID: 3) IDENTITY (reference)  (ref count: 2)
            <(ID: 31) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 54) INVOKE (v) 
      <(ID: 53) PARAMETER (reference) 
         <(ID: 10) IDENTITY (reference)  (ref count: 3)
         <(ID: 52) PARAMETER (reference) 
            <(ID: 49) INVOKE (reference) 
               <(ID: 46) PARAMETER (reference) 
                  <(ID: 43) IDENTITY (reference)  (ref count: 2)
                     <(ID: 58) INVOKE (reference) 
                        <(ID: 40) PARAMETER (reference) 
                           <(ID: 30) IDENTITY (reference)  (ref count: 3)
                           <(ID: 39) PARAMETER (32-bit field) 
                              <(ID: 33) IDENTITY (32-bit field)  (ref count: 2)
                              <(ID: 38) NULL_PARAMETER (NONE) 
                        <(ID: 42) SEQUENCE_R (address field) 
                           <(ID: 41) NULL_CHECK (reference) 
                              <(ID: 30) IDENTITY (reference)  (ref count: 3)
                           <(ID: 37) CONST_MB (address field)  (java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;)
                  <(ID: 45) NULL_PARAMETER (NONE) 
               <(ID: 48) SEQUENCE_R (address field) 
                  <(ID: 47) NULL_CHECK (reference) 
                     <(ID: 43) IDENTITY (reference)  (ref count: 2)
                  <(ID: 44) CONST_MB (address field)  (java.lang.StringBuffer.toString()Ljava/lang/String;)
            <(ID: 51) NULL_PARAMETER (NONE) 
      <(ID: 50) CONST_MB (address field)  (java.lang.ArrayIndexOutOfBoundsException.<init>(Ljava/lang/String;)V)

   <(ID: 59) THROW (NONE) 
      <(ID: 10) IDENTITY (reference)  (ref count: 3)


*************************************************
*
* (block ID:1 block PC:42 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: java.util.Vector.elementAt(I)Ljava/lang/Object;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<42>  (0x6e68d6):    aload_0 
<43>  (0x6e68d7):    agetfield_quick #3
<46>  (0x6e68da):    iload_1 
<47>  (0x6e68db):    aaload 
<48>  (0x6e68dc):    areturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(61)
 	local(1)	ID(65)
 
Incoming Locals(2): 
	local(1)	ID(65)
 	local(0)	ID(61)
 
   <(ID: 60) MAP_PC (NONE)   42>

   <(ID: 64) IDENTITY (reference)  (ref count: 3)
      <(ID: 71) FETCH (reference) 
         <(ID: 63) FIELD_REF (reference) 
            <(ID: 61) LOCAL (reference)   0>
            <(ID: 62) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 70) RETURN_VALUE (reference) 
      <(ID: 69) FETCH (reference) 
         <(ID: 68) INDEX (int) 
            <(ID: 64) IDENTITY (reference)  (ref count: 3)
            <(ID: 67) BOUNDS_CHECK (int) 
               <(ID: 65) LOCAL (int)   1>
               <(ID: 66) ARRAY_LENGTH (int) 
                  <(ID: 64) IDENTITY (reference)  (ref count: 3)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 8
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 302
ESTIMATED BUFFER SIZE = 420
CODE BUFFER ADDRESS = 0x2bcba4ec
PC MAP TABLE ADDRESS = 0x2bcba4f4
CODE ENTRY ADDRESS = 0x2bcba520
          		@ Method prologue
0x2bcba520	0:	addiu	a1, JSP, 48	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcba524	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcba528	8:	sltu	t7, a1, CHUNKEND
0x2bcba52c	12:	bne	t7, zero, PC=0x2bcba520	@ goto .skip
0x2bcba530	16:	nop
0x2bcba534	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcba538	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcba52c) >>>>>>>>
0x2bcba52c	12:	bne	t7, zero, PC=0x2bcba53c	@ goto .skip
0x2bcba530	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcba53c) <<<<<<<<<
		.skip
          		@ Set up frame for synchronized method
0x2bcba53c	28:	addiu	a1, JSP, -8	@ ARG2 = JSP - argsSize * 4
0x2bcba540	32:	addiu	a2, JSP, 0	@ NEW_JFP = JSP + (maxLocals - argsSize) * 4
0x2bcba544	36:	lui	t9, hi16(0x65)
0x2bcba548	40:	ori	t9, t9, lo16(0x65a430)	@ call CVMCCMinvokeNonstaticSyncMethodHelper CVMCCMinvokeNonstaticSyncMethodHelper
0x2bcba54c	44:	jalr	t9
0x2bcba550	48:	nop
          		@ Interpreted -> compiled entry point
0x2bcba554	52:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcba558	56:	nop
0x2bcba55c	60:	nop
0x2bcba560	64:	nop
			@ Initial Temp REF set is 
	L0:	68:	@ entry point for first block
			@ Preloading incoming local(1) reg(20)
0x2bcba564	68:	lw	s4, -4(JFP)	@ Java local cell # 1
			@ Preloading incoming local(0) reg(21)
0x2bcba568	72:	lw	s5, -8(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=76
          		@ Do getfield:
0x2bcba56c	76:	lw	s7, 16(s5)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
0x2bcba570	80:	slt	t7, s4, s7
0x2bcba574	84:	bne	t7, zero, PC=0x2bcba570	@ branch to block L1
0x2bcba578	88:	nop
0x2bcba57c	92:	lw	a1, 0(CP)	@ cb java.lang.ArrayIndexOutOfBoundsException
          		@ Do new:
          		@ cb: java.lang.ArrayIndexOutOfBoundsException
0x2bcba580	96:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcba584	100:	nop
          		@ Captured a stackmap here.
0x2bcba588	104:	lw	a1, 0(CP)	@ cb java.lang.StringBuffer
          		@ Do new:
0x2bcba58c	108:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
          		@ cb: java.lang.StringBuffer
0x2bcba590	112:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcba594	116:	nop
          		@ Captured a stackmap here.
0x2bcba598	120:	sw	v0, 0(JSP)
0x2bcba59c	124:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcba5a0	128:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcba5a4	132:	sw	v0, 32(JFP)	@ REF spill Java temp cell # 1
0x2bcba5a8	136:	lw	s7, 0(a0)	@ call method through mb
0x2bcba5ac	140:	jalr	s7
0x2bcba5b0	144:	nop
          		@ Captured a stackmap here.
0x2bcba5b4	148:	lw	s7, 32(JFP)	@ Java temp cell # 1
0x2bcba5b8	152:	sw	s7, 0(JSP)
0x2bcba5bc	156:	lw	s7, -4(JFP)	@ Java local cell # 1
0x2bcba5c0	160:	sw	s7, 4(JSP)
0x2bcba5c4	164:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcba5c8	168:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcba5cc	172:	lw	s7, 0(a0)	@ call method through mb
0x2bcba5d0	176:	jalr	s7
0x2bcba5d4	180:	nop
          		@ Captured a stackmap here.
0x2bcba5d8	184:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcba5dc	188:	lw	s7, 0(JSP)
0x2bcba5e0	192:	sw	s7, 0(JSP)
0x2bcba5e4	196:	lw	ra, 0(CP)	@ const 8985876
0x2bcba5e8	200:	sw	ra, 4(JSP)
0x2bcba5ec	204:	lw	s6, 0(s7)	@ NULL check
0x2bcba5f0	208:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcba5f4	212:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcba5f8	216:	lw	s7, 0(a0)	@ call method through mb
0x2bcba5fc	220:	jalr	s7
0x2bcba600	224:	nop
          		@ Captured a stackmap here.
0x2bcba604	228:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcba608	232:	lw	s7, 0(JSP)
          		@ Do getfield:
0x2bcba60c	236:	lw	s5, -8(JFP)	@ Java local cell # 0
0x2bcba610	240:	lw	s6, 16(s5)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcba614	244:	lw	s4, 28(JFP)	@ Java temp cell # 0
0x2bcba618	248:	sw	s4, 0(JSP)
0x2bcba61c	252:	sw	s7, 4(JSP)
0x2bcba620	256:	sw	s6, 8(JSP)
0x2bcba624	260:	lw	s6, 0(s7)	@ NULL check
0x2bcba628	264:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcba62c	268:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcba630	272:	lw	s7, 0(a0)	@ call method through mb
0x2bcba634	276:	jalr	s7
0x2bcba638	280:	nop
          		@ Captured a stackmap here.
0x2bcba63c	284:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcba640	288:	lw	s7, 0(JSP)
0x2bcba644	292:	sw	s7, 0(JSP)
0x2bcba648	296:	lw	s6, 0(s7)	@ NULL check
0x2bcba64c	300:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcba650	304:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcba654	308:	lw	s7, 0(a0)	@ call method through mb
0x2bcba658	312:	jalr	s7
0x2bcba65c	316:	nop
          		@ Captured a stackmap here.
0x2bcba660	320:	lw	a0, 0(CP)	@ mb java.lang.ArrayIndexOutOfBoundsException.<init>(Ljava/lang/String;)V
          		@ Invoke a method w/ a void return type
0x2bcba664	324:	lw	s7, 0(a0)	@ call method through mb
0x2bcba668	328:	jalr	s7
0x2bcba66c	332:	nop
          		@ Captured a stackmap here.
0x2bcba670	336:	lw	a2, 28(JFP)	@ Java temp cell # 0
0x2bcba674	340:	jal	PC=(0x2bcb8138)	@ goto CVMCCMruntimeThrowObjectGlue
0x2bcba678	344:	nop
			@ Initial Temp REF set is 
	L1:	348:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 84(0x2bcba574) to reference 348
          		@ MAP_PC idepth=0 javaPc=42 compiledPc=348
          		@ Do getfield:
0x2bcba67c	348:	lw	s7, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcba680	352:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcba684	356:	sltu	t7, s4, s6
0x2bcba688	360:	bne	t7, zero, PC=0x2bcba684	@ br .skip
0x2bcba68c	364:	nop
0x2bcba690	368:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcba694	372:	nop
		.skip
--->Fixed instruction at 360(0x2bcba688) to reference 376
          		@ Do load(arrayObj, index) (elem type=11,L):
0x2bcba698	376:	sll	ra, s4, 2
0x2bcba69c	380:	addu	ra, s7, ra
0x2bcba6a0	384:	lw	s6, 12(ra)
0x2bcba6a4	388:	sw	s6, -8(JFP)	@ Java local cell # 0
0x2bcba6a8	392:	addiu	JSP, JFP, -4
0x2bcba6ac	396:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcba6b0	400:	b	PC=0x2bcb91ac	@ goto CVMCCMreturnFromSyncMethod
0x2bcba6b4	404:	nop
0x2bcba6b8	408:	.word	9231160	@ mb java.lang.ArrayIndexOutOfBoundsException.<init>(Ljava/lang/String;)V
--->Fixed instruction at 320(0x2bcba660) to reference 408
0x2bcba6bc	412:	.word	9110340	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
--->Fixed instruction at 300(0x2bcba64c) to reference 412
0x2bcba6c0	416:	.word	9109444	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
--->Fixed instruction at 208(0x2bcba5f0) to reference 416
0x2bcba6c4	420:	.word	8985876
--->Fixed instruction at 196(0x2bcba5e4) to reference 420
0x2bcba6c8	424:	.word	9109640	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
--->Fixed instruction at 264(0x2bcba628) to reference 424
--->Fixed instruction at 164(0x2bcba5c4) to reference 424
0x2bcba6cc	428:	.word	9108968	@ mb java.lang.StringBuffer.<init>()V
--->Fixed instruction at 124(0x2bcba59c) to reference 428
0x2bcba6d0	432:	.word	8642484	@ cb java.lang.StringBuffer
--->Fixed instruction at 104(0x2bcba588) to reference 432
0x2bcba6d4	436:	.word	8776224	@ cb java.lang.ArrayIndexOutOfBoundsException
--->Fixed instruction at 92(0x2bcba57c) to reference 436
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcba520) >>>>>>>>
          		@ Capacity is 16 word(s)
0x2bcba520	0:	addiu	a1, JSP, 56
<<<<<<<<<Pop Code Buffer to PC = 440 (0x2bcba6d8) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 52 (0x2bcba554) >>>>>>>>
          		@ spillSize is 2 word(s), add to JFP+28
0x2bcba554	52:	addiu	JSP, JFP, 36
          		@ setup cp base register
0x2bcba558	56:	lui	CP, hi16(0x2bcb)
0x2bcba55c	60:	ori	CP, CP, lo16(0x2bcba6b8)
0x2bcba560	64:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 440 (0x2bcba6d8) <<<<<<<<<
JS: COMPILED: size=548 startPC=0x2bcba520 java.util.Vector.elementAt(I)Ljava/lang/Object;
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
JS: COMPILING com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
orig bkID(2) Incoming Locals(4 0x0): 6- 0- 1- 5- 
o1   bkID(2) Incoming Locals(1 0x0): 6- 
o1   bkID(2) Incoming Locals(4 0x0): 6- 0- 1- 5- 
orig bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
o1   bkID(0) Incoming Locals(3 0x0): 1- 2- 3- 
o1   bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
s1   bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
s1   bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
o1   bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
orig bkID(2) Incoming Locals(4 0x0): 6- 0- 1- 5- 
o1   bkID(2) Incoming Locals(1 0x0): 6- 
o1   bkID(2) Incoming Locals(4 0x0): 6- 0- 1- 5- 
orig bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
o1   bkID(0) Incoming Locals(3 0x0): 1- 2- 3- 
o1   bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
s1   bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
s1   bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
o1   bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
bkID(2) local(0 #6)  not found in goalBk
bkID(2) local(1 #0)  not found in goalBk
bkID(2) local(2 #1)  not found in goalBk
bkID(2) local(3 #5)  not found in goalBk
bkID(0) local(0 #1)  not found in goalBk
bkID(0) local(1 #2)  not found in goalBk
bkID(0) local(2 #3)  not found in goalBk
bkID(0) local(3 #0)  not found in goalBk
bkID(0) local(0 #1)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
+bk  bkID(0) Incoming Locals(4 0x1): 1+ 2- 3- 0- 
-gbk bkID(2) Incoming Locals(4 0x0): 6- 0- 1- 5- 
+gbk bkID(2) Incoming Locals(4 0x1): 1+ 0- 6- 5- 
bkID(0) local(0 #1)  ordered in goalBk(2)
-bk  bkID(0) Incoming Locals(4 0x1): 1+ 2- 3- 0- 
dstBk(0) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(0) Incoming Locals(4 0x1): 1+ 2- 3- 0- 
 ordered in bk
-gbk bkID(2) Incoming Locals(4 0x1): 1+ 0- 6- 5- 
dstBk(2) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(2) Incoming Locals(4 0x1): 1+ 0- 6- 5- 
bkID(0) local(1 #2)  not found in goalBk
bkID(0) local(2 #3)  not found in goalBk
bkID(0) local(3 #0)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(4 0x1): 1+ 2- 3- 0- 
+bk  bkID(0) Incoming Locals(4 0x3): 1+ 0+ 3- 2- 
-gbk bkID(2) Incoming Locals(4 0x1): 1+ 0- 6- 5- 
+gbk bkID(2) Incoming Locals(4 0x3): 1+ 0+ 6- 5- 
bkID(0) local(3 #2)  not found in goalBk
bkID(2) local(0 #1)  not found in goalBk
bkID(2) local(1 #0)  not found in goalBk
bkID(2) local(2 #6)  not found in goalBk
bkID(2) local(3 #5)  not found in goalBk
pre  bkID(0) Incoming Locals(4 0x3): 1+ 0+ 3- 2- 
local(#2) swapped with local(#2)
post bkID(0) Incoming Locals(4 0x7): 1+ 0+ 3+ 2- 
pre2  bkID(2) Incoming Locals(4 0x3): 1+ 0+ 6- 5- 
local(#4) swapped with local(#2)
post2 bkID(2) Incoming Locals(5 0x7): 1+ 0+ <null> 5- 6- 
pre  bkID(0) Incoming Locals(4 0x7): 1+ 0+ 3+ 2- 
local(#3) swapped with local(#3)
post bkID(0) Incoming Locals(4 0xf): 1+ 0+ 3+ 2+ 
pre2  bkID(2) Incoming Locals(5 0x7): 1+ 0+ <null> 5- 6- 
local(#5) swapped with local(#3)
post2 bkID(2) Incoming Locals(6 0xf): 1+ 0+ <null> <null> 6- 5- 
pre  bkID(2) Incoming Locals(6 0xf): 1+ 0+ <null> <null> 6- 5- 
local(#4) swapped with local(#4)
post bkID(2) Incoming Locals(6 0x1f): 1+ 0+ <null> <null> 6+ 5- 
pre  bkID(2) Incoming Locals(6 0x1f): 1+ 0+ <null> <null> 6+ 5- 
local(#5) swapped with local(#5)
post bkID(2) Incoming Locals(6 0x3f): 1+ 0+ <null> <null> 6+ 5+ 

#################################################

The maximum node counts per root node are 7
IR block list contains 3 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 11 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0xf
* Source: com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I(WPossMoves.java:67)
* Compilation depth: 0 locals : 0 .. 6
* Byte-codes for block:
<0>  (0x94dce0):    iload_1 
<1>  (0x94dce1):    bipush 7
<3>  (0x94dce3):    iand 
<4>  (0x94dce4):    iload_2 
<5>  (0x94dce5):    iadd 
<6>  (0x94dce6):    istore 4
<8>  (0x94dce8):    iload_1 
<9>  (0x94dce9):    iload_2 
<10>  (0x94dcea):    iadd 
<11>  (0x94dceb):    iload_3 
<12>  (0x94dcec):    iadd 
<13>  (0x94dced):    istore 5
<15>  (0x94dcef):    iload 4
<17>  (0x94dcf1):    bipush 248
<19>  (0x94dcf3):    iand 
<20>  (0x94dcf4):    iload 5
<22>  (0x94dcf6):    bipush 192
<24>  (0x94dcf8):    iand 
<25>  (0x94dcf9):    ior 
<26>  (0x94dcfa):    ifne <72>
<29>  (0x94dcfd):    aload_0 
<30>  (0x94dcfe):    agetfield_quick #4
<33>  (0x94dd01):    agetfield_quick #3
<36>  (0x94dd04):    iload 5
<38>  (0x94dd06):    baload 
<39>  (0x94dd07):    istore 6
<41>  (0x94dd09):    iload 6
<43>  (0x94dd0b):    bipush 99
<45>  (0x94dd0d):    if_icmpne <58>
<48>  (0x94dd10):    aload_0 
<49>  (0x94dd11):    iload_1 
<50>  (0x94dd12):    iload 5
<52>  (0x94dd14):    invokevirtual_quick_w #8 <com.sun.mep.bench.Chess.WPossMoves.Store_Move(II)V>
<55>  (0x94dd17):    iload 5
<57>  (0x94dd19):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(4): 
	local(1)	ID(2)
 	local(2)	ID(5)
 	local(3)	ID(8)
 	local(0)	ID(25)
 
Incoming Locals(4): 
	local(1)	ID(2)
 	local(0)	ID(25)
 	local(3)	ID(8)
 	local(2)	ID(5)
 
Assigned Locals(3): 
	ASSIGN(18): local(4)	ID(17)	rhsID(6)
 	ASSIGN(20): local(5)	ID(19)	rhsID(9)
 	ASSIGN(41): local(6)	ID(40)	rhsID(36)
 
Successor Blocks(2): 
	ID(1) LocalOrder(3) AssignOrder(2) RefsOK(1) Locals()
	ID(2) LocalOrder(4) AssignOrder(3) RefsOK(1) Locals(1 0 <null> <null> 6 5)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 18) ASSIGN (int)  (assignIdx: 0)
      <(ID: 17) LOCAL (int)   4>
      <(ID: 6) IDENTITY (int)  (ref count: 2)
         <(ID: 23) ADD (int) 
            <(ID: 4) AND (int) 
               <(ID: 2) IDENTITY (int)  (ref count: 3)
                  <(ID: 21) LOCAL (int)   1>
               <(ID: 3) CONST_JAVA_NUMERIC32 (int)  (7)
            <(ID: 5) IDENTITY (int)  (ref count: 2)
               <(ID: 22) LOCAL (int)   2>

   <(ID: 20) ASSIGN (int)  (assignIdx: 1)
      <(ID: 19) LOCAL (int)   5>
      <(ID: 9) IDENTITY (int)  (ref count: 5)
         <(ID: 24) ADD (int) 
            <(ID: 7) ADD (int) 
               <(ID: 2) IDENTITY (int)  (ref count: 3)
               <(ID: 5) IDENTITY (int)  (ref count: 2)
            <(ID: 8) LOCAL (int)   3>

   <(ID: 16) BCOND (int) 
   target: (BlockID: 1 BlockPC: 72)
   condition: NE
   flags: 0
      <(ID: 14) OR (int) 
         <(ID: 11) AND (int) 
            <(ID: 6) IDENTITY (int)  (ref count: 2)
            <(ID: 10) CONST_JAVA_NUMERIC32 (int)  (-8)
         <(ID: 13) AND (int) 
            <(ID: 9) IDENTITY (int)  (ref count: 5)
            <(ID: 12) CONST_JAVA_NUMERIC32 (int)  (-64)
      <(ID: 15) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 28) IDENTITY (reference)  (ref count: 2)
      <(ID: 32) FETCH (reference) 
         <(ID: 27) FIELD_REF (reference) 
            <(ID: 25) IDENTITY (reference)  (ref count: 3)
               <(ID: 51) LOCAL (reference)   0>
            <(ID: 26) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 31) IDENTITY (reference)  (ref count: 3)
      <(ID: 37) FETCH (reference) 
         <(ID: 30) FIELD_REF (reference) 
            <(ID: 28) IDENTITY (reference)  (ref count: 2)
            <(ID: 29) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 36) IDENTITY (int)  (ref count: 3)
      <(ID: 42) FETCH (int) 
         <(ID: 35) INDEX (int) 
            <(ID: 31) IDENTITY (reference)  (ref count: 3)
            <(ID: 34) BOUNDS_CHECK (int) 
               <(ID: 9) IDENTITY (int)  (ref count: 5)
               <(ID: 33) ARRAY_LENGTH (int) 
                  <(ID: 31) IDENTITY (reference)  (ref count: 3)

   <(ID: 41) ASSIGN (int)  (assignIdx: 2)
      <(ID: 40) LOCAL (int)   6>
      <(ID: 36) IDENTITY (int)  (ref count: 3)

   <(ID: 39) BCOND (int) 
   target: (BlockID: 2 BlockPC: 58)
   condition: NE
   flags: 0
      <(ID: 36) IDENTITY (int)  (ref count: 3)
      <(ID: 38) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 50) INVOKE (v) 
      <(ID: 47) PARAMETER (reference) 
         <(ID: 25) IDENTITY (reference)  (ref count: 3)
         <(ID: 46) PARAMETER (int) 
            <(ID: 2) IDENTITY (int)  (ref count: 3)
            <(ID: 45) PARAMETER (int) 
               <(ID: 9) IDENTITY (int)  (ref count: 5)
               <(ID: 44) NULL_PARAMETER (NONE) 
      <(ID: 49) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 48) GET_VTBL (NONE) 
            <(ID: 25) IDENTITY (reference)  (ref count: 3)
         <(ID: 43) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)

   <(ID: 52) RETURN_VALUE (int) 
      <(ID: 9) IDENTITY (int)  (ref count: 5)


*************************************************
*
* (block ID:2 block PC:58 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3f
* Source: com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I(WPossMoves.java:81)
* Compilation depth: 0 locals : 0 .. 6
* Byte-codes for block:
<58>  (0x94dd1a):    iload 6
<60>  (0x94dd1c):    bipush 6
<62>  (0x94dd1e):    if_icmplt <72>
<65>  (0x94dd21):    aload_0 
<66>  (0x94dd22):    iload_1 
<67>  (0x94dd23):    iload 5
<69>  (0x94dd25):    invokevirtual_quick_w #8 <com.sun.mep.bench.Chess.WPossMoves.Store_Move(II)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(4): 
	local(6)	ID(57)
 	local(0)	ID(60)
 	local(1)	ID(61)
 	local(5)	ID(62)
 
Incoming Locals(6): 
	local(1)	ID(61)
 	local(0)	ID(60)
 	<null>
	<null>
	local(6)	ID(57)
 	local(5)	ID(62)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 56) MAP_PC (NONE)   58>

   <(ID: 59) BCOND (int) 
   target: (BlockID: 1 BlockPC: 72)
   condition: LT
   flags: 0
      <(ID: 57) LOCAL (int)   6>
      <(ID: 58) CONST_JAVA_NUMERIC32 (int)  (6)


   <(ID: 70) INVOKE (v) 
      <(ID: 67) PARAMETER (reference) 
         <(ID: 60) IDENTITY (reference)  (ref count: 2)
            <(ID: 71) LOCAL (reference)   0>
         <(ID: 66) PARAMETER (int) 
            <(ID: 61) LOCAL (int)   1>
            <(ID: 65) PARAMETER (int) 
               <(ID: 62) LOCAL (int)   5>
               <(ID: 64) NULL_PARAMETER (NONE) 
      <(ID: 69) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 68) GET_VTBL (NONE) 
            <(ID: 60) IDENTITY (reference)  (ref count: 2)
         <(ID: 63) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)


*************************************************
*
* (block ID:1 block PC:72 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I(WPossMoves.java:86)
* Compilation depth: 0 locals : 0 .. 6
* Byte-codes for block:
<72>  (0x94dd28):    iconst_m1 
<73>  (0x94dd29):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

   <(ID: 53) MAP_PC (NONE)   72>

   <(ID: 55) RETURN_VALUE (int) 
      <(ID: 54) CONST_JAVA_NUMERIC32 (int)  (-1)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 48
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 452
ESTIMATED BUFFER SIZE = 612
CODE BUFFER ADDRESS = 0x2bcba710
PC MAP TABLE ADDRESS = 0x2bcba718
CODE ENTRY ADDRESS = 0x2bcba748
          		@ Method prologue
0x2bcba748	0:	addiu	a1, JSP, 56	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcba74c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcba750	8:	sltu	t7, a1, CHUNKEND
0x2bcba754	12:	bne	t7, zero, PC=0x2bcba748	@ goto .skip
0x2bcba758	16:	nop
0x2bcba75c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcba760	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcba754) >>>>>>>>
0x2bcba754	12:	bne	t7, zero, PC=0x2bcba764	@ goto .skip
0x2bcba758	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcba764) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcba764	28:	sw	JFP, 12(JSP)	@ Store curr JFP into new frame
0x2bcba768	32:	addiu	JFP, JSP, 12	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcba76c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcba770	40:	addiu	a3, zero, 0
0x2bcba774	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcba778	48:	addiu	a3, zero, -1
0x2bcba77c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcba780	56:	move	a0, EE
0x2bcba784	60:	move	a1, JFP	@ arg2 = JFP
0x2bcba788	64:	lui	t9, hi16(0x65)
0x2bcba78c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcba790	72:	jalr	t9
0x2bcba794	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcba798	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcba79c	84:	nop
0x2bcba7a0	88:	nop
0x2bcba7a4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(1) reg(20)
0x2bcba7a8	96:	lw	s4, -24(JFP)	@ Java local cell # 1
			@ Preloading incoming local(0) reg(21)
0x2bcba7ac	100:	lw	s5, -28(JFP)	@ Java local cell # 0
			@ Preloading incoming local(3) reg(22)
0x2bcba7b0	104:	lw	s6, -16(JFP)	@ Java local cell # 3
			@ Preloading incoming local(2) reg(23)
0x2bcba7b4	108:	lw	s7, -20(JFP)	@ Java local cell # 2
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=112
0x2bcba7b8	112:	andi	ra, s4, 7
0x2bcba7bc	116:	addu	t9, ra, s7
0x2bcba7c0	120:	sw	t9, -12(JFP)	@ Java local cell # 4
0x2bcba7c4	124:	addu	ra, s4, s7
0x2bcba7c8	128:	addu	t8, ra, s6
0x2bcba7cc	132:	sw	t8, -8(JFP)	@ Java local cell # 5
0x2bcba7d0	136:	addiu	ra, zero, -8	@ const -8
0x2bcba7d4	140:	and	t6, t9, ra
0x2bcba7d8	144:	addiu	t5, zero, -64	@ const -64
0x2bcba7dc	148:	and	t4, t8, t5
0x2bcba7e0	152:	or	t3, t6, t4
          		@ deferred comparison: 
0x2bcba7e4	156:	bne	t3, zero, PC=0x2bcba7e4	@ branch to block L1
0x2bcba7e8	160:	nop
          		@ Do getfield:
0x2bcba7ec	164:	lw	t6, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcba7f0	168:	lw	t4, 12(t6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcba7f4	172:	lw	t6, 8(t4)	@ arraylength
          		@ deferred comparison: 
0x2bcba7f8	176:	sltu	t7, t8, t6
0x2bcba7fc	180:	bne	t7, zero, PC=0x2bcba7f8	@ br .skip
0x2bcba800	184:	nop
0x2bcba804	188:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcba808	192:	nop
		.skip
--->Fixed instruction at 180(0x2bcba7fc) to reference 196
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcba80c	196:	addu	t3, t4, t8
0x2bcba810	200:	lb	t6, 12(t3)
0x2bcba814	204:	sw	t6, -4(JFP)	@ Java local cell # 6
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
0x2bcba818	208:	addiu	t7, zero, 99
0x2bcba81c	212:	bne	t6, t7, PC=0x2bcba818	@ branch to block L2
0x2bcba820	216:	nop
0x2bcba824	220:	sw	s5, 0(JSP)
0x2bcba828	224:	sw	s4, 4(JSP)
0x2bcba82c	228:	sw	t8, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcba830	232:	lw	t4, 0(s5)	@ Get object.cb
0x2bcba834	236:	addiu	t7, zero, -4
0x2bcba838	240:	and	t4, t4, t7
0x2bcba83c	244:	lw	t4, 76(t4)	@ Get cb.vtbl
0x2bcba840	248:	lw	a0, 68(t4)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcba844	252:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcba848	256:	lw	s7, 0(a0)	@ call method through mb
0x2bcba84c	260:	jalr	s7
0x2bcba850	264:	nop
          		@ Captured a stackmap here.
0x2bcba854	268:	lw	s7, -8(JFP)	@ Java local cell # 5
0x2bcba858	272:	sw	s7, -28(JFP)	@ Java local cell # 0
0x2bcba85c	276:	addiu	JSP, JFP, -24
0x2bcba860	280:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcba864	284:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcba868	288:	nop
			@ Initial Temp REF set is 
	L2:	292:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 212(0x2bcba81c) to reference 292
          		@ MAP_PC idepth=0 javaPc=58 compiledPc=292
0x2bcba86c	292:	lw	ra, -4(JFP)	@ Java local cell # 6
          		@ deferred comparison: 
0x2bcba870	296:	sltiu	t7, ra, 6
0x2bcba874	300:	bne	t7, zero, PC=0x2bcba870	@ branch to block L1
0x2bcba878	304:	nop
0x2bcba87c	308:	sw	s5, 0(JSP)
0x2bcba880	312:	sw	s4, 4(JSP)
0x2bcba884	316:	lw	t9, -8(JFP)	@ Java local cell # 5
0x2bcba888	320:	sw	t9, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcba88c	324:	lw	s7, 0(s5)	@ Get object.cb
0x2bcba890	328:	addiu	t7, zero, -4
0x2bcba894	332:	and	s7, s7, t7
0x2bcba898	336:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcba89c	340:	lw	a0, 68(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcba8a0	344:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcba8a4	348:	lw	s7, 0(a0)	@ call method through mb
0x2bcba8a8	352:	jalr	s7
0x2bcba8ac	356:	nop
          		@ Captured a stackmap here.
			@ Initial Temp REF set is 
	L1:	360:	@ entry point for branches
--->Fixed instruction at 300(0x2bcba874) to reference 360
--->Fixed instruction at 156(0x2bcba7e4) to reference 360
          		@ MAP_PC idepth=0 javaPc=72 compiledPc=360
0x2bcba8b0	360:	addiu	s7, zero, -1	@ const -1
0x2bcba8b4	364:	sw	s7, -28(JFP)	@ Java local cell # 0
0x2bcba8b8	368:	addiu	JSP, JFP, -24
0x2bcba8bc	372:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcba8c0	376:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcba8c4	380:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcba748) >>>>>>>>
          		@ Capacity is 18 word(s)
0x2bcba748	0:	addiu	a1, JSP, 56
<<<<<<<<<Pop Code Buffer to PC = 384 (0x2bcba8c8) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcba798) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcba798	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcba79c	84:	lui	CP, hi16(0x2bcb)
0x2bcba7a0	88:	ori	CP, CP, lo16(0x2bcba8c8)
0x2bcba7a4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 384 (0x2bcba8c8) <<<<<<<<<
JS: COMPILED: size=460 startPC=0x2bcba748 com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.ActorManager.getPiece(I)Lcom/sun/mep/bench/Chess/ChessPiece;
JS: COMPILING com.sun.mep.bench.Chess.ActorManager.getPiece(I)Lcom/sun/mep/bench/Chess/ChessPiece;
orig bkID(1) Incoming Locals(2 0x0): 2- 0- 
o1   bkID(1) Incoming Locals(2 0x0): 2- 0- 
orig bkID(3) Incoming Locals(1 0x0): 2- 
o1   bkID(3) Incoming Locals(1 0x0): 2- 
s1   bkID(3) Incoming Locals(2 0x0): 2- 0- 
o1   bkID(3) Incoming Locals(2 0x0): 2- 0- 
orig bkID(2) Incoming Locals(2 0x0): 0- 2- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 2- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(1) Incoming Locals(2 0x0): 2- 0- 
o1   bkID(1) Incoming Locals(2 0x0): 2- 0- 
orig bkID(3) Incoming Locals(2 0x0): 2- 0- 
o1   bkID(3) Incoming Locals(1 0x0): 2- 
s1   bkID(3) Incoming Locals(2 0x0): 2- 0- 
o1   bkID(3) Incoming Locals(2 0x0): 2- 0- 
orig bkID(2) Incoming Locals(2 0x0): 0- 2- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 2- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
Pushing blockID(2)
bkID(3) local(0 #2)  not ordered
bestLocal(0) bestLocalScore(24)
-bk  bkID(3) Incoming Locals(2 0x0): 2- 0- 
+bk  bkID(3) Incoming Locals(2 0x1): 2+ 0- 
-gbk bkID(2) Incoming Locals(2 0x0): 0- 2- 
+gbk bkID(2) Incoming Locals(2 0x1): 2+ 0- 
-gbk bkID(1) Incoming Locals(2 0x0): 2- 0- 
+gbk bkID(1) Incoming Locals(2 0x1): 2+ 0- 
bkID(3) local(0 #2)  ordered in goalBk(1)
-bk  bkID(3) Incoming Locals(2 0x1): 2+ 0- 
dstBk(3) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(3) Incoming Locals(2 0x1): 2+ 0- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x1): 2+ 0- 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(2) Incoming Locals(2 0x1): 2+ 0- 
-gbk bkID(1) Incoming Locals(2 0x1): 2+ 0- 
dstBk(1) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(1) Incoming Locals(2 0x1): 2+ 0- 
bkID(3) local(1 #0)  not ordered
bestLocal(1) bestLocalScore(24)
-bk  bkID(3) Incoming Locals(2 0x1): 2+ 0- 
+bk  bkID(3) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(2) Incoming Locals(2 0x1): 2+ 0- 
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(1) Incoming Locals(2 0x1): 2+ 0- 
+gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
bkID(3) local(1 #0)  ordered in goalBk(1)
-bk  bkID(3) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(3) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
bkID(3) local(0 #2)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(3) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(3) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
bkID(3) local(1 #0)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(3) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
bkID(2) local(0 #2)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(1) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
bkID(2) local(1 #0)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
bkID(2) local(0 #2)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
bkID(2) local(1 #0)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
Popping blockID(2)
bkID(0) local(0 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(1 0x0): 0- 
dstBk(0) local(1 0) found in slot(0)
local(#1) swapped with local(#0)
+bk  bkID(0) Incoming Locals(2 0x2): <null> 0+ 
bkID(0) local(1 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x2): <null> 0+ 
dstBk(0) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(0) Incoming Locals(2 0x2): <null> 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 

#################################################

The maximum node counts per root node are 8
IR block list contains 4 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 3 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x2
* Source: com.sun.mep.bench.Chess.ActorManager.getPiece(I)Lcom/sun/mep/bench/Chess/ChessPiece;(ActorManager.java:118)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<0>  (0x93a058):    iconst_0 
<1>  (0x93a059):    istore_2 
<2>  (0x93a05a):    goto <36>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Incoming Locals(2): 
	<null>
	local(0)	ID(8)
 
Assigned Locals(1): 
	ASSIGN(4): local(2)	ID(3)	rhsID(2)
 
Successor Blocks(1): 
	ID(1) LocalOrder(0) AssignOrder(1) RefsOK(1) Locals(2 0)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 4) ASSIGN (int)  (assignIdx: 0)
      <(ID: 3) LOCAL (int)   2>
      <(ID: 2) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 5) GOTO (NONE) 
   target: (BlockID: 1 BlockPC: 36)


*************************************************
*
* (block ID:2 block PC:5 )
* IR root list contains 7 root nodes: in block 
* flags: 0x321
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.ActorManager.getPiece(I)Lcom/sun/mep/bench/Chess/ChessPiece;(ActorManager.java:120)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<5>  (0x93a05d):    aload_0 
<6>  (0x93a05e):    agetfield_quick #3
<9>  (0x93a061):    iload_2 
<10>  (0x93a062):    invokevirtual_quick_w #12 <java.util.Vector.elementAt(I)Ljava/lang/Object;>
<13>  (0x93a065):    checkcast_quick #13 <com.sun.mep.bench.Chess.Actor>
<16>  (0x93a068):    astore_3 
<17>  (0x93a069):    aload_3 
<18>  (0x93a06a):    checkcast_quick #14 <com.sun.mep.bench.Chess.ChessPiece>
<21>  (0x93a06d):    getfield_quick #24
<24>  (0x93a070):    iload_1 
<25>  (0x93a071):    if_icmpne <33>
<28>  (0x93a074):    aload_3 
<29>  (0x93a075):    checkcast_quick #14 <com.sun.mep.bench.Chess.ChessPiece>
<32>  (0x93a078):    areturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(24)
 	local(2)	ID(28)
 
Incoming Locals(2): 
	local(2)	ID(28)
 	local(0)	ID(24)
 
Assigned Locals(1): 
	ASSIGN(48): local(3)	ID(47)	rhsID(37)
 
Successor Blocks(1): 
	ID(3) LocalOrder(2) AssignOrder(1) RefsOK(0) Locals(2 0)

   <(ID: 23) MAP_PC (NONE)   5>

   <(ID: 27) IDENTITY (reference)  (ref count: 3)
      <(ID: 38) FETCH (reference) 
         <(ID: 26) FIELD_REF (reference) 
            <(ID: 24) LOCAL (reference)   0>
            <(ID: 25) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 37) IDENTITY (reference)  (ref count: 4)
      <(ID: 44) CHECKCAST (reference) 
         <(ID: 35) INVOKE (reference) 
            <(ID: 32) PARAMETER (reference) 
               <(ID: 27) IDENTITY (reference)  (ref count: 3)
               <(ID: 31) PARAMETER (int) 
                  <(ID: 28) LOCAL (int)   2>
                  <(ID: 30) NULL_PARAMETER (NONE) 
            <(ID: 34) FETCH_MB_FROM_VTABLE (address field) 
               <(ID: 33) GET_VTBL (NONE) 
                  <(ID: 27) IDENTITY (reference)  (ref count: 3)
               <(ID: 29) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 43)
         <(ID: 36) CONST_CB (address field)  (com.sun.mep.bench.Chess.Actor)

   <(ID: 43) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 49) FETCH (32-bit field) 
         <(ID: 42) FIELD_REF (32-bit field) 
            <(ID: 40) CHECKCAST (reference) 
               <(ID: 37) IDENTITY (reference)  (ref count: 4)
               <(ID: 39) CONST_CB (address field)  (com.sun.mep.bench.Chess.ChessPiece)
            <(ID: 41) CONST_FIELD_OFFSET (NONE)  (24)

   <(ID: 48) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 47) LOCAL (reference)   3>
      <(ID: 37) IDENTITY (reference)  (ref count: 4)

   <(ID: 46) BCOND (int) 
   target: (BlockID: 3 BlockPC: 33)
   condition: NE
   flags: 0
      <(ID: 43) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 45) LOCAL (int)   1>


   <(ID: 52) RETURN_VALUE (reference) 
      <(ID: 51) CHECKCAST (reference) 
         <(ID: 37) IDENTITY (reference)  (ref count: 4)
         <(ID: 50) CONST_CB (address field)  (com.sun.mep.bench.Chess.ChessPiece)


*************************************************
*
* (block ID:3 block PC:33 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.ActorManager.getPiece(I)Lcom/sun/mep/bench/Chess/ChessPiece;(ActorManager.java:118)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<33>  (0x93a079):    iinc 2 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(2)	ID(54)
 
Incoming Locals(2): 
	local(2)	ID(54)
 	local(0)	ID(8)
 
Assigned Locals(1): 
	ASSIGN(58): local(2)	ID(57)	rhsID(56)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(2 0)

   <(ID: 53) MAP_PC (NONE)   33>

   <(ID: 54) IDENTITY (int)  (ref count: 2)
      <(ID: 59) LOCAL (int)   2>

   <(ID: 58) ASSIGN (int)  (assignIdx: 0)
      <(ID: 57) LOCAL (int)   2>
      <(ID: 56) ADD (int) 
         <(ID: 54) IDENTITY (int)  (ref count: 2)
         <(ID: 55) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:1 block PC:36 )
* IR root list contains 5 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.ActorManager.getPiece(I)Lcom/sun/mep/bench/Chess/ChessPiece;(ActorManager.java:118)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<36>  (0x93a07c):    iload_2 
<37>  (0x93a07d):    aload_0 
<38>  (0x93a07e):    agetfield_quick #3
<41>  (0x93a081):    invokevirtual_quick_w #16 <java.util.Vector.size()I>
<44>  (0x93a084):    if_icmplt <5>
<47>  (0x93a087):    aconst_null 
<48>  (0x93a088):    areturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(2)	ID(7)
 	local(0)	ID(8)
 
Incoming Locals(2): 
	local(2)	ID(7)
 	local(0)	ID(8)
 
Successor Blocks(1): 
	ID(2) LocalOrder(2) AssignOrder(0) RefsOK(0) Locals(2 0)

   <(ID: 6) MAP_PC (NONE)   36>

   <(ID: 11) IDENTITY (reference)  (ref count: 3)
      <(ID: 19) FETCH (reference) 
         <(ID: 10) FIELD_REF (reference) 
            <(ID: 8) LOCAL (reference)   0>
            <(ID: 9) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 17) IDENTITY (int)  (ref count: 2)
      <(ID: 20) INVOKE (int) 
         <(ID: 14) PARAMETER (reference) 
            <(ID: 11) IDENTITY (reference)  (ref count: 3)
            <(ID: 13) NULL_PARAMETER (NONE) 
         <(ID: 16) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 15) GET_VTBL (NONE) 
               <(ID: 11) IDENTITY (reference)  (ref count: 3)
            <(ID: 12) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 12)

   <(ID: 18) BCOND (int) 
   target: (BlockID: 2 BlockPC: 5)
   condition: LT
   flags: 0
      <(ID: 7) LOCAL (int)   2>
      <(ID: 17) IDENTITY (int)  (ref count: 2)


   <(ID: 22) RETURN_VALUE (reference) 
      <(ID: 21) CONST_STRING_OBJECT (reference)  (stringObject 0x0)



NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 220
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 302
ESTIMATED BUFFER SIZE = 656
CODE BUFFER ADDRESS = 0x2bcba8dc
PC MAP TABLE ADDRESS = 0x2bcba8e4
GC CHECK PCS ADDRESS = 0x2bcba8f8
CODE ENTRY ADDRESS = 0x2bcba928
          		@ Method prologue
0x2bcba928	0:	addiu	a1, JSP, 48	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcba92c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcba930	8:	sltu	t7, a1, CHUNKEND
0x2bcba934	12:	bne	t7, zero, PC=0x2bcba928	@ goto .skip
0x2bcba938	16:	nop
0x2bcba93c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcba940	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcba934) >>>>>>>>
0x2bcba934	12:	bne	t7, zero, PC=0x2bcba944	@ goto .skip
0x2bcba938	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcba944) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcba944	28:	sw	JFP, 8(JSP)	@ Store curr JFP into new frame
0x2bcba948	32:	addiu	JFP, JSP, 8	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcba94c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcba950	40:	addiu	a3, zero, 0
0x2bcba954	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcba958	48:	addiu	a3, zero, -1
0x2bcba95c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcba960	56:	move	a0, EE
0x2bcba964	60:	move	a1, JFP	@ arg2 = JFP
0x2bcba968	64:	lui	t9, hi16(0x65)
0x2bcba96c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcba970	72:	jalr	t9
0x2bcba974	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcba978	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcba97c	84:	nop
0x2bcba980	88:	nop
0x2bcba984	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(21)
0x2bcba988	96:	lw	s5, -16(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
0x2bcba98c	100:	sw	zero, -8(JFP)	@ Java local cell # 2
			@ Outgoing local(2) reg(20): in wrong register
0x2bcba990	104:	move	s4, zero
			@ Outgoing local(0) reg(21): in correct register
0x2bcba994	108:	b	PC=0x2bcba994	@ branch to block L1
0x2bcba998	112:	nop
			@ Initial Temp REF set is 
	L2:	116:	@ Patchable GC Check point
0x2bcba99c	116:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcba99c	116:	nop
0x2bcba9a0	120:	nop
          		@ Captured a stackmap here.
	L2:	124:	@ entry point when locals need to be loaded
			@ Preloading incoming local(2) reg(20)
0x2bcba9a4	124:	lw	s4, -8(JFP)	@ Java local cell # 2
			@ Preloading incoming local(0) reg(21)
0x2bcba9a8	128:	lw	s5, -16(JFP)	@ Java local cell # 0
	L2:	132:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=5 compiledPc=124
          		@ Do getfield:
0x2bcba9ac	132:	lw	s7, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcba9b0	136:	sw	s7, 0(JSP)
0x2bcba9b4	140:	sw	s4, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcba9b8	144:	lw	s6, 0(s7)	@ Get object.cb
0x2bcba9bc	148:	addiu	t7, zero, -4
0x2bcba9c0	152:	and	s6, s6, t7
0x2bcba9c4	156:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcba9c8	160:	lw	a0, 172(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcba9cc	164:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcba9d0	168:	lw	s7, 0(a0)	@ call method through mb
0x2bcba9d4	172:	jalr	s7
0x2bcba9d8	176:	nop
          		@ Captured a stackmap here.
0x2bcba9dc	180:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcba9e0	184:	lw	s7, 0(JSP)
0x2bcba9e4	188:	lw	a2, 0(CP)	@ cb com.sun.mep.bench.Chess.Actor
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcba9e8	192:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcba9ec	196:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcba9f0	200:	nop
0x2bcba9f4	204:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
0x2bcba9f8	208:	lw	a2, 0(CP)	@ cb com.sun.mep.bench.Chess.ChessPiece
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcba9fc	212:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcbaa00	216:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcbaa04	220:	nop
0x2bcbaa08	224:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcbaa0c	228:	lw	s6, 96(s7)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbaa10	232:	sw	s7, -4(JFP)	@ Java local cell # 3
0x2bcbaa14	236:	lw	ra, -12(JFP)	@ Java local cell # 1
			@ Outgoing local(2) reg(20): not in register
0x2bcbaa18	240:	lw	s4, -8(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(21): not in register
0x2bcbaa1c	244:	lw	s5, -16(JFP)	@ Java local cell # 0
          		@ deferred comparison: 
0x2bcbaa20	248:	bne	s6, ra, PC=0x2bcbaa20	@ branch to block L3
0x2bcbaa24	252:	nop
0x2bcbaa28	256:	lw	a2, 0(CP)	@ cb com.sun.mep.bench.Chess.ChessPiece
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcbaa2c	260:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcbaa30	264:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcbaa34	268:	nop
0x2bcbaa38	272:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
0x2bcbaa3c	276:	sw	s7, -16(JFP)	@ Java local cell # 0
0x2bcbaa40	280:	addiu	JSP, JFP, -12
0x2bcbaa44	284:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbaa48	288:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbaa4c	292:	nop
			@ Initial Temp REF set is 
	L3:	296:	@ entry point for branches
			@ Binding Incoming Local(2) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 248(0x2bcbaa20) to reference 296
          		@ MAP_PC idepth=0 javaPc=33 compiledPc=296
0x2bcbaa50	296:	addiu	s4, s4, 1
0x2bcbaa54	300:	sw	s4, -8(JFP)	@ Java local cell # 2
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Initial Temp REF set is 
	L1:	304:	@ entry point for branches
			@ Binding Incoming Local(2) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 108(0x2bcba994) to reference 304
          		@ MAP_PC idepth=0 javaPc=36 compiledPc=304
          		@ Do getfield:
0x2bcbaa58	304:	lw	s7, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbaa5c	308:	sw	s7, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcbaa60	312:	lw	s6, 0(s7)	@ Get object.cb
0x2bcbaa64	316:	addiu	t7, zero, -4
0x2bcbaa68	320:	and	s6, s6, t7
0x2bcbaa6c	324:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcbaa70	328:	lw	a0, 48(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbaa74	332:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbaa78	336:	lw	s7, 0(a0)	@ call method through mb
0x2bcbaa7c	340:	jalr	s7
0x2bcbaa80	344:	nop
          		@ Captured a stackmap here.
0x2bcbaa84	348:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbaa88	352:	lw	s7, 0(JSP)
			@ Outgoing local(2) reg(20): not in register
0x2bcbaa8c	356:	lw	s4, -8(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(21): not in register
0x2bcbaa90	360:	lw	s5, -16(JFP)	@ Java local cell # 0
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcbaa94	364:	slt	t7, s4, s7
0x2bcbaa98	368:	bne	t7, zero, PC=0x2bcba99c	@ branch to block L2
0x2bcbaa9c	372:	nop
0x2bcbaa94	364:	slt	t7, s4, s7
0x2bcbaa98	368:	bne	t7, zero, PC=0x2bcba9ac	@ branch to block L2, skip GC
0x2bcbaa9c	372:	nop
0x2bcbaaa0	376:	sw	zero, -16(JFP)	@ Java local cell # 0
0x2bcbaaa4	380:	addiu	JSP, JFP, -12
0x2bcbaaa8	384:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbaaac	388:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbaab0	392:	nop
0x2bcbaab4	396:	.word	9776432	@ cb com.sun.mep.bench.Chess.ChessPiece
--->Fixed instruction at 256(0x2bcbaa28) to reference 396
--->Fixed instruction at 208(0x2bcba9f8) to reference 396
0x2bcbaab8	400:	.word	9786824	@ cb com.sun.mep.bench.Chess.Actor
--->Fixed instruction at 188(0x2bcba9e4) to reference 400
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcba928) >>>>>>>>
          		@ Capacity is 14 word(s)
0x2bcba928	0:	addiu	a1, JSP, 48
<<<<<<<<<Pop Code Buffer to PC = 404 (0x2bcbaabc) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcba978) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcba978	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcba97c	84:	lui	CP, hi16(0x2bcb)
0x2bcba980	88:	ori	CP, CP, lo16(0x2bcbaab4)
0x2bcba984	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 404 (0x2bcbaabc) <<<<<<<<<
JS: COMPILED: size=524 startPC=0x2bcba928 com.sun.mep.bench.Chess.ActorManager.getPiece(I)Lcom/sun/mep/bench/Chess/ChessPiece;
OSR: Intr2Comp: com.sun.mep.bench.Chess.ActorManager.getPiece(I)Lcom/sun/mep/bench/Chess/ChessPiece;
JS: ATTEMPTING TO COMPILE java.util.Vector.size()I
JS: COMPILING java.util.Vector.size()I
orig bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(1 0x0): 0- 

#################################################

The maximum node counts per root node are 4
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 3 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: java.util.Vector.size()I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x6e6558):    aload_0 
<1>  (0x6e6559):    getfield_quick #4
<4>  (0x6e655c):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(1): 
	local(0)	ID(2)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 7) FETCH (32-bit field) 
         <(ID: 4) FIELD_REF (32-bit field) 
            <(ID: 2) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 6) RETURN_VALUE (int) 
      <(ID: 5) IDENTITY (32-bit field)  (ref count: 2)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 38
ESTIMATED BUFFER SIZE = 144
CODE BUFFER ADDRESS = 0x2bcbaae8
PC MAP TABLE ADDRESS = 0x2bcbaaf0
CODE ENTRY ADDRESS = 0x2bcbab18
          		@ Method prologue
0x2bcbab18	0:	addiu	a1, JSP, 40	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbab1c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbab20	8:	sltu	t7, a1, CHUNKEND
0x2bcbab24	12:	bne	t7, zero, PC=0x2bcbab18	@ goto .skip
0x2bcbab28	16:	nop
0x2bcbab2c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbab30	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbab24) >>>>>>>>
0x2bcbab24	12:	bne	t7, zero, PC=0x2bcbab34	@ goto .skip
0x2bcbab28	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbab34) <<<<<<<<<
		.skip
          		@ Set up frame for synchronized method
0x2bcbab34	28:	addiu	a1, JSP, -4	@ ARG2 = JSP - argsSize * 4
0x2bcbab38	32:	addiu	a2, JSP, 4	@ NEW_JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbab3c	36:	lui	t9, hi16(0x65)
0x2bcbab40	40:	ori	t9, t9, lo16(0x65a430)	@ call CVMCCMinvokeNonstaticSyncMethodHelper CVMCCMinvokeNonstaticSyncMethodHelper
0x2bcbab44	44:	jalr	t9
0x2bcbab48	48:	nop
          		@ Interpreted -> compiled entry point
0x2bcbab4c	52:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbab50	56:	nop
0x2bcbab54	60:	nop
0x2bcbab58	64:	nop
			@ Initial Temp REF set is 
	L0:	68:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbab5c	68:	lw	s4, -8(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=72
          		@ Do getfield:
0x2bcbab60	72:	lw	s7, 16(s4)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbab64	76:	sw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbab68	80:	addiu	JSP, JFP, -4
0x2bcbab6c	84:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbab70	88:	b	PC=0x2bcb91ac	@ goto CVMCCMreturnFromSyncMethod
0x2bcbab74	92:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbab18) >>>>>>>>
          		@ Capacity is 11 word(s)
0x2bcbab18	0:	addiu	a1, JSP, 40
<<<<<<<<<Pop Code Buffer to PC = 96 (0x2bcbab78) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 52 (0x2bcbab4c) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbab4c	52:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbab50	56:	lui	CP, hi16(0x2bcb)
0x2bcbab54	60:	ori	CP, CP, lo16(0x2bcbab78)
0x2bcbab58	64:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 96 (0x2bcbab78) <<<<<<<<<
JS: COMPILED: size=148 startPC=0x2bcbab18 java.util.Vector.size()I
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V
JS: COMPILING com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V
orig bkID(1) Incoming Locals(4 0x0): 0- 1- 4- 5- 
o1   bkID(1) Incoming Locals(4 0x0): 0- 1- 4- 5- 
orig bkID(2) Incoming Locals(4 0x0): 4- 2- 5- 3- 
o1   bkID(2) Incoming Locals(4 0x0): 4- 2- 5- 3- 
s1   bkID(2) Incoming Locals(5 0x0): 4- 2- 5- 3- 0- 
s1   bkID(2) Incoming Locals(6 0x0): 4- 2- 5- 3- 0- 1- 
o1   bkID(2) Incoming Locals(6 0x0): 4- 2- 5- 3- 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 2- 3- 
o1   bkID(0) Incoming Locals(2 0x0): 2- 3- 
s1   bkID(0) Incoming Locals(3 0x0): 2- 3- 0- 
s1   bkID(0) Incoming Locals(4 0x0): 2- 3- 0- 1- 
o1   bkID(0) Incoming Locals(4 0x0): 2- 3- 0- 1- 
orig bkID(1) Incoming Locals(4 0x0): 0- 1- 4- 5- 
o1   bkID(1) Incoming Locals(4 0x0): 0- 1- 4- 5- 
orig bkID(2) Incoming Locals(6 0x0): 4- 2- 5- 3- 0- 1- 
o1   bkID(2) Incoming Locals(4 0x0): 4- 2- 5- 3- 
s1   bkID(2) Incoming Locals(5 0x0): 4- 2- 5- 3- 0- 
s1   bkID(2) Incoming Locals(6 0x0): 4- 2- 5- 3- 0- 1- 
o1   bkID(2) Incoming Locals(6 0x0): 4- 2- 5- 3- 0- 1- 
orig bkID(0) Incoming Locals(4 0x0): 2- 3- 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 2- 3- 
s1   bkID(0) Incoming Locals(3 0x0): 2- 3- 0- 
s1   bkID(0) Incoming Locals(4 0x0): 2- 3- 0- 1- 
o1   bkID(0) Incoming Locals(4 0x0): 2- 3- 0- 1- 
Pushing blockID(2)
bkID(2) local(0 #4)  not ordered
bestLocal(0) bestLocalScore(24)
-bk  bkID(2) Incoming Locals(6 0x0): 4- 2- 5- 3- 0- 1- 
+bk  bkID(2) Incoming Locals(6 0x1): 4+ 2- 5- 3- 0- 1- 
-gbk bkID(1) Incoming Locals(4 0x0): 0- 1- 4- 5- 
+gbk bkID(1) Incoming Locals(4 0x1): 4+ 1- 0- 5- 
bkID(2) local(0 #4)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(6 0x1): 4+ 2- 5- 3- 0- 1- 
dstBk(2) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(2) Incoming Locals(6 0x1): 4+ 2- 5- 3- 0- 1- 
 ordered in bk
-gbk bkID(2) Incoming Locals(6 0x1): 4+ 2- 5- 3- 0- 1- 
dstBk(2) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(2) Incoming Locals(6 0x1): 4+ 2- 5- 3- 0- 1- 
-gbk bkID(1) Incoming Locals(4 0x1): 4+ 1- 0- 5- 
dstBk(1) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(1) Incoming Locals(4 0x1): 4+ 1- 0- 5- 
bkID(2) local(1 #2)  not found in goalBk
bkID(2) local(2 #5)  not ordered
bestLocal(1) bestLocalScore(24)
-bk  bkID(2) Incoming Locals(6 0x1): 4+ 2- 5- 3- 0- 1- 
+bk  bkID(2) Incoming Locals(6 0x3): 4+ 5+ 2- 3- 0- 1- 
-gbk bkID(1) Incoming Locals(4 0x1): 4+ 1- 0- 5- 
+gbk bkID(1) Incoming Locals(4 0x3): 4+ 5+ 0- 1- 
bkID(2) local(2 #2)  not found in goalBk
bkID(2) local(3 #3)  not found in goalBk
bkID(2) local(4 #0)  not ordered
bestLocal(2) bestLocalScore(24)
-bk  bkID(2) Incoming Locals(6 0x3): 4+ 5+ 2- 3- 0- 1- 
+bk  bkID(2) Incoming Locals(6 0x7): 4+ 5+ 0+ 3- 2- 1- 
-gbk bkID(1) Incoming Locals(4 0x3): 4+ 5+ 0- 1- 
+gbk bkID(1) Incoming Locals(4 0x7): 4+ 5+ 0+ 1- 
bkID(2) local(4 #2)  not found in goalBk
bkID(2) local(5 #1)  not ordered
bestLocal(3) bestLocalScore(24)
-bk  bkID(2) Incoming Locals(6 0x7): 4+ 5+ 0+ 3- 2- 1- 
+bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
-gbk bkID(1) Incoming Locals(4 0x7): 4+ 5+ 0+ 1- 
+gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
bkID(2) local(5 #3)  not found in goalBk
bkID(2) local(0 #4)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
dstBk(2) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
dstBk(2) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
bkID(2) local(1 #5)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
dstBk(2) local(1 5) found in slot(1)
local(1 5) same slot
+bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
dstBk(2) local(1 5) found in slot(1)
local(1 5) same slot
+gbk bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
bkID(2) local(2 #0)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
dstBk(2) local(2 0) found in slot(2)
local(2 0) same slot
+bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
dstBk(2) local(2 0) found in slot(2)
local(2 0) same slot
+gbk bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
bkID(2) local(3 #1)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
dstBk(2) local(3 1) found in slot(3)
local(3 1) same slot
+bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
dstBk(2) local(3 1) found in slot(3)
local(3 1) same slot
+gbk bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
bkID(2) local(4 #2)  not ordered
bestLocal(4) bestLocalScore(8)
-bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
+bk  bkID(2) Incoming Locals(6 0x1f): 4+ 5+ 0+ 1+ 2+ 3- 
bkID(2) local(4 #2)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(6 0x1f): 4+ 5+ 0+ 1+ 2+ 3- 
dstBk(2) local(4 2) found in slot(4)
local(4 2) same slot
+bk  bkID(2) Incoming Locals(6 0x1f): 4+ 5+ 0+ 1+ 2+ 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(6 0x1f): 4+ 5+ 0+ 1+ 2+ 3- 
dstBk(2) local(4 2) found in slot(4)
local(4 2) same slot
+gbk bkID(2) Incoming Locals(6 0x1f): 4+ 5+ 0+ 1+ 2+ 3- 
bkID(2) local(5 #3)  not ordered
bestLocal(5) bestLocalScore(8)
-bk  bkID(2) Incoming Locals(6 0x1f): 4+ 5+ 0+ 1+ 2+ 3- 
+bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
bkID(2) local(5 #3)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
dstBk(2) local(5 3) found in slot(5)
local(5 3) same slot
+bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
dstBk(2) local(5 3) found in slot(5)
local(5 3) same slot
+gbk bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
bkID(2) local(0 #4)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
dstBk(2) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
dstBk(1) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
bkID(2) local(1 #5)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
dstBk(2) local(1 5) found in slot(1)
local(1 5) same slot
+bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
dstBk(1) local(1 5) found in slot(1)
local(1 5) same slot
+gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
bkID(2) local(2 #0)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
dstBk(2) local(2 0) found in slot(2)
local(2 0) same slot
+bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
dstBk(1) local(2 0) found in slot(2)
local(2 0) same slot
+gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
bkID(2) local(3 #1)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
dstBk(2) local(3 1) found in slot(3)
local(3 1) same slot
+bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
dstBk(1) local(3 1) found in slot(3)
local(3 1) same slot
+gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
bkID(2) local(4 #2)  not found in goalBk
bkID(2) local(5 #3)  not found in goalBk
Popping blockID(2)
bkID(0) local(0 #2)  not found in goalBk
bkID(0) local(1 #3)  not found in goalBk
bkID(0) local(2 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(4 0x0): 2- 3- 0- 1- 
dstBk(0) local(2 0) found in slot(2)
local(2 0) same slot
+bk  bkID(0) Incoming Locals(4 0x4): 2- 3- 0+ 1- 
 ordered in bk
-gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
dstBk(1) local(2 0) found in slot(2)
local(2 0) same slot
+gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
bkID(0) local(3 #1)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(4 0x4): 2- 3- 0+ 1- 
dstBk(0) local(3 1) found in slot(3)
local(3 1) same slot
+bk  bkID(0) Incoming Locals(4 0xc): 2- 3- 0+ 1+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
dstBk(1) local(3 1) found in slot(3)
local(3 1) same slot
+gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
pre  bkID(0) Incoming Locals(4 0xc): 2- 3- 0+ 1+ 
local(#0) swapped with local(#4)
post bkID(0) Incoming Locals(5 0x1c): <null> 3- 0+ 1+ 2+ 
pre  bkID(0) Incoming Locals(5 0x1c): <null> 3- 0+ 1+ 2+ 
local(#1) swapped with local(#5)
post bkID(0) Incoming Locals(6 0x3c): <null> <null> 0+ 1+ 2+ 3+ 

#################################################

The maximum node counts per root node are 7
IR block list contains 3 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 4 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3c
* Source: com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V(WPossMoves.java:100)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<0>  (0x94dd64):    iload_2 
<1>  (0x94dd65):    istore 4
<3>  (0x94dd67):    iload_3 
<4>  (0x94dd68):    istore 5
<6>  (0x94dd6a):    goto <21>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(2)	ID(2)
 	local(3)	ID(3)
 
Incoming Locals(6): 
	<null>
	<null>
	local(0)	ID(10)
 	local(1)	ID(11)
 	local(2)	ID(2)
 	local(3)	ID(3)
 
Assigned Locals(2): 
	ASSIGN(5): local(4)	ID(4)	rhsID(2)
 	ASSIGN(7): local(5)	ID(6)	rhsID(3)
 
Successor Blocks(1): 
	ID(1) LocalOrder(2) AssignOrder(2) RefsOK(1) Locals(4 5 0 1 <null> <null>)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) ASSIGN (int)  (assignIdx: 0)
      <(ID: 4) LOCAL (int)   4>
      <(ID: 2) LOCAL (int)   2>

   <(ID: 7) ASSIGN (int)  (assignIdx: 1)
      <(ID: 6) LOCAL (int)   5>
      <(ID: 3) LOCAL (int)   3>

   <(ID: 8) GOTO (NONE) 
   target: (BlockID: 1 BlockPC: 21)


*************************************************
*
* (block ID:2 block PC:9 )
* IR root list contains 5 root nodes: in block 
* flags: 0x361
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3f
* Source: com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V(WPossMoves.java:105)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<9>  (0x94dd6d):    iload 4
<11>  (0x94dd6f):    iload_2 
<12>  (0x94dd70):    iadd 
<13>  (0x94dd71):    istore 4
<15>  (0x94dd73):    iload 5
<17>  (0x94dd75):    iload_3 
<18>  (0x94dd76):    iadd 
<19>  (0x94dd77):    istore 5
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(4): 
	local(4)	ID(26)
 	local(2)	ID(27)
 	local(5)	ID(29)
 	local(3)	ID(30)
 
Incoming Locals(6): 
	local(4)	ID(26)
 	local(5)	ID(29)
 	local(0)	ID(10)
 	local(1)	ID(11)
 	local(2)	ID(27)
 	local(3)	ID(30)
 
Assigned Locals(2): 
	ASSIGN(33): local(4)	ID(32)	rhsID(28)
 	ASSIGN(36): local(5)	ID(35)	rhsID(31)
 
Successor Blocks(1): 
	ID(1) LocalOrder(4) AssignOrder(2) RefsOK(1) Locals(4 5 0 1 <null> <null>)

   <(ID: 25) MAP_PC (NONE)   9>

   <(ID: 26) IDENTITY (int)  (ref count: 2)
      <(ID: 34) LOCAL (int)   4>

   <(ID: 33) ASSIGN (int)  (assignIdx: 0)
      <(ID: 32) LOCAL (int)   4>
      <(ID: 28) ADD (int) 
         <(ID: 26) IDENTITY (int)  (ref count: 2)
         <(ID: 27) LOCAL (int)   2>

   <(ID: 29) IDENTITY (int)  (ref count: 2)
      <(ID: 37) LOCAL (int)   5>

   <(ID: 36) ASSIGN (int)  (assignIdx: 1)
      <(ID: 35) LOCAL (int)   5>
      <(ID: 31) ADD (int) 
         <(ID: 29) IDENTITY (int)  (ref count: 2)
         <(ID: 30) LOCAL (int)   3>


*************************************************
*
* (block ID:1 block PC:21 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3f
* Source: com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V(WPossMoves.java:103)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<21>  (0x94dd79):    aload_0 
<22>  (0x94dd7a):    iload_1 
<23>  (0x94dd7b):    iload 4
<25>  (0x94dd7d):    iload 5
<27>  (0x94dd7f):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<30>  (0x94dd82):    iconst_m1 
<31>  (0x94dd83):    if_icmpne <9>
<34>  (0x94dd86):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(4): 
	local(0)	ID(10)
 	local(1)	ID(11)
 	local(4)	ID(12)
 	local(5)	ID(13)
 
Incoming Locals(6): 
	local(4)	ID(12)
 	local(5)	ID(13)
 	local(0)	ID(10)
 	local(1)	ID(11)
 	<null>
	<null>

Successor Blocks(1): 
	ID(2) LocalOrder(4) AssignOrder(0) RefsOK(0) Locals(4 5 0 1 2 3)

   <(ID: 9) MAP_PC (NONE)   21>

   <(ID: 20) IDENTITY (int)  (ref count: 2)
      <(ID: 23) INVOKE (int) 
         <(ID: 19) PARAMETER (reference) 
            <(ID: 10) LOCAL (reference)   0>
            <(ID: 18) PARAMETER (int) 
               <(ID: 11) LOCAL (int)   1>
               <(ID: 17) PARAMETER (int) 
                  <(ID: 12) LOCAL (int)   4>
                  <(ID: 16) PARAMETER (int) 
                     <(ID: 13) LOCAL (int)   5>
                     <(ID: 15) NULL_PARAMETER (NONE) 
         <(ID: 14) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 22) BCOND (int) 
   target: (BlockID: 2 BlockPC: 9)
   condition: NE
   flags: 0
      <(ID: 20) IDENTITY (int)  (ref count: 2)
      <(ID: 21) CONST_JAVA_NUMERIC32 (int)  (-1)


   <(ID: 24) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 218
ESTIMATED BUFFER SIZE = 348
CODE BUFFER ADDRESS = 0x2bcbab7c
PC MAP TABLE ADDRESS = 0x2bcbab84
GC CHECK PCS ADDRESS = 0x2bcbab94
CODE ENTRY ADDRESS = 0x2bcbabc0
          		@ Method prologue
0x2bcbabc0	0:	addiu	a1, JSP, 56	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbabc4	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbabc8	8:	sltu	t7, a1, CHUNKEND
0x2bcbabcc	12:	bne	t7, zero, PC=0x2bcbabc0	@ goto .skip
0x2bcbabd0	16:	nop
0x2bcbabd4	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbabd8	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbabcc) >>>>>>>>
0x2bcbabcc	12:	bne	t7, zero, PC=0x2bcbabdc	@ goto .skip
0x2bcbabd0	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbabdc) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbabdc	28:	sw	JFP, 8(JSP)	@ Store curr JFP into new frame
0x2bcbabe0	32:	addiu	JFP, JSP, 8	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbabe4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbabe8	40:	addiu	a3, zero, 0
0x2bcbabec	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbabf0	48:	addiu	a3, zero, -1
0x2bcbabf4	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbabf8	56:	move	a0, EE
0x2bcbabfc	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbac00	64:	lui	t9, hi16(0x65)
0x2bcbac04	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbac08	72:	jalr	t9
0x2bcbac0c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbac10	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbac14	84:	nop
0x2bcbac18	88:	nop
0x2bcbac1c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(22)
0x2bcbac20	96:	lw	s6, -24(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(23)
0x2bcbac24	100:	lw	s7, -20(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
0x2bcbac28	104:	lw	ra, -16(JFP)	@ Java local cell # 2
0x2bcbac2c	108:	sw	ra, -8(JFP)	@ Java local cell # 4
0x2bcbac30	112:	lw	t9, -12(JFP)	@ Java local cell # 3
0x2bcbac34	116:	sw	t9, -4(JFP)	@ Java local cell # 5
			@ Outgoing local(4) reg(20): not in register
0x2bcbac38	120:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(5) reg(21): not in register
0x2bcbac3c	124:	lw	s5, -4(JFP)	@ Java local cell # 5
			@ Outgoing local(0) reg(22): in correct register
			@ Outgoing local(1) reg(23): in correct register
0x2bcbac40	128:	b	PC=0x2bcbac40	@ branch to block L1
0x2bcbac44	132:	nop
			@ Initial Temp REF set is 
	L2:	136:	@ Patchable GC Check point
0x2bcbac48	136:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcbac48	136:	nop
0x2bcbac4c	140:	nop
          		@ Captured a stackmap here.
	L2:	144:	@ entry point when locals need to be loaded
			@ Preloading incoming local(4) reg(20)
0x2bcbac50	144:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Preloading incoming local(5) reg(21)
0x2bcbac54	148:	lw	s5, -4(JFP)	@ Java local cell # 5
			@ Preloading incoming local(0) reg(22)
0x2bcbac58	152:	lw	s6, -24(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(23)
0x2bcbac5c	156:	lw	s7, -20(JFP)	@ Java local cell # 1
	L2:	160:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=9 compiledPc=144
0x2bcbac60	160:	lw	ra, -16(JFP)	@ Java local cell # 2
0x2bcbac64	164:	addu	s4, s4, ra
0x2bcbac68	168:	sw	s4, -8(JFP)	@ Java local cell # 4
0x2bcbac6c	172:	lw	t9, -12(JFP)	@ Java local cell # 3
0x2bcbac70	176:	addu	s5, s5, t9
0x2bcbac74	180:	sw	s5, -4(JFP)	@ Java local cell # 5
			@ Outgoing local(4) reg(20): in correct register
			@ Outgoing local(5) reg(21): in correct register
			@ Outgoing local(0) reg(22): in correct register
			@ Outgoing local(1) reg(23): in correct register
			@ Initial Temp REF set is 
	L1:	184:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(20)
			@ Binding Incoming Local(5) to reg(21)
			@ Binding Incoming Local(0) to reg(22)
			@ Binding Incoming Local(1) to reg(23)
--->Fixed instruction at 128(0x2bcbac40) to reference 184
          		@ MAP_PC idepth=0 javaPc=21 compiledPc=184
0x2bcbac78	184:	sw	s6, 0(JSP)
0x2bcbac7c	188:	sw	s7, 4(JSP)
0x2bcbac80	192:	sw	s4, 8(JSP)
0x2bcbac84	196:	sw	s5, 12(JSP)
0x2bcbac88	200:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbac8c	204:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbac90	208:	lw	s7, 0(a0)	@ call method through mb
0x2bcbac94	212:	jalr	s7
0x2bcbac98	216:	nop
          		@ Captured a stackmap here.
0x2bcbac9c	220:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbaca0	224:	lw	s7, 0(JSP)
			@ Outgoing local(4) reg(20): not in register
0x2bcbaca4	228:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(5) reg(21): not in register
0x2bcbaca8	232:	lw	s5, -4(JFP)	@ Java local cell # 5
			@ Outgoing local(0) reg(22): not in register
0x2bcbacac	236:	lw	s6, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(23): not in register
0x2bcbacb0	240:	sw	s7, 28(JFP)	@ spill Java temp cell # 0
0x2bcbacb4	244:	lw	s7, -20(JFP)	@ Java local cell # 1
0x2bcbacb8	248:	lw	ra, 28(JFP)	@ Java temp cell # 0
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcbacbc	252:	addiu	t7, zero, -1
0x2bcbacc0	256:	bne	ra, t7, PC=0x2bcbac48	@ branch to block L2
0x2bcbacc4	260:	nop
0x2bcbacbc	252:	addiu	t7, zero, -1
0x2bcbacc0	256:	bne	ra, t7, PC=0x2bcbac60	@ branch to block L2, skip GC
0x2bcbacc4	260:	nop
0x2bcbacc8	264:	addiu	JSP, JFP, -24
0x2bcbaccc	268:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbacd0	272:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbacd4	276:	nop
0x2bcbacd8	280:	.word	9793524	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
--->Fixed instruction at 200(0x2bcbac88) to reference 280
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbabc0) >>>>>>>>
          		@ Capacity is 19 word(s)
0x2bcbabc0	0:	addiu	a1, JSP, 60
<<<<<<<<<Pop Code Buffer to PC = 284 (0x2bcbacdc) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbac10) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcbac10	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcbac14	84:	lui	CP, hi16(0x2bcb)
0x2bcbac18	88:	ori	CP, CP, lo16(0x2bcbacd8)
0x2bcbac1c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 284 (0x2bcbacdc) <<<<<<<<<
JS: COMPILED: size=372 startPC=0x2bcbabc0 com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;
JS: COMPILING com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;
orig bkID(22) Incoming Locals(1 0x0): 11- 
orig bkID(8) Incoming Locals(3 0x0): 6- 5- 12- 
o1   bkID(8) Incoming Locals(2 0x0): 6- 5- 
s1   bkID(8) Incoming Locals(3 0x0): 6- 5- 11- 
o1   bkID(8) Incoming Locals(4 0x0): 6- 5- 11- 12- 
s1   bkID(8) Incoming Locals(5 0x0): 6- 5- 11- 12- 0- 
o1   bkID(8) Incoming Locals(5 0x0): 6- 5- 11- 12- 0- 
orig bkID(19) Incoming Locals(1 0x0): 6- 
o1   bkID(19) Incoming Locals(1 0x0): 6- 
s1   bkID(19) Incoming Locals(2 0x0): 6- 5- 
s1   bkID(19) Incoming Locals(3 0x0): 6- 5- 11- 
s1   bkID(19) Incoming Locals(4 0x0): 6- 5- 11- 12- 
s1   bkID(19) Incoming Locals(5 0x0): 6- 5- 11- 12- 0- 
o1   bkID(19) Incoming Locals(5 0x0): 6- 5- 11- 12- 0- 
orig bkID(21) Incoming Locals(2 0x0): 14- 4- 
o1   bkID(21) Incoming Locals(1 0x0): 14- 
s1   bkID(21) Incoming Locals(2 0x0): 14- 6- 
s1   bkID(21) Incoming Locals(3 0x0): 14- 6- 5- 
s1   bkID(21) Incoming Locals(4 0x0): 14- 6- 5- 11- 
s1   bkID(21) Incoming Locals(5 0x0): 14- 6- 5- 11- 12- 
s1   bkID(21) Incoming Locals(6 0x0): 14- 6- 5- 11- 12- 0- 
o1   bkID(21) Incoming Locals(6 0x0): 14- 6- 5- 11- 12- 0- 
orig bkID(20) Incoming Locals(1 0x0): 0- 
o1   bkID(20) Incoming Locals(1 0x0): 0- 
s1   bkID(20) Incoming Locals(2 0x0): 0- 6- 
s1   bkID(20) Incoming Locals(3 0x0): 0- 6- 5- 
s1   bkID(20) Incoming Locals(4 0x0): 0- 6- 5- 11- 
s1   bkID(20) Incoming Locals(5 0x0): 0- 6- 5- 11- 12- 
s1   bkID(20) Incoming Locals(5 0x0): 0- 6- 5- 11- 12- 
o1   bkID(20) Incoming Locals(5 0x0): 0- 6- 5- 11- 12- 
s1   bkID(20) Incoming Locals(6 0x0): 0- 6- 5- 11- 12- 14- 
s1   bkID(20) Incoming Locals(6 0x0): 0- 6- 5- 11- 12- 14- 
s1   bkID(20) Incoming Locals(6 0x0): 0- 6- 5- 11- 12- 14- 
s1   bkID(20) Incoming Locals(6 0x0): 0- 6- 5- 11- 12- 14- 
s1   bkID(20) Incoming Locals(6 0x0): 0- 6- 5- 11- 12- 14- 
s1   bkID(20) Incoming Locals(6 0x0): 0- 6- 5- 11- 12- 14- 
o1   bkID(20) Incoming Locals(6 0x0): 0- 6- 5- 11- 12- 14- 
orig bkID(16) Incoming Locals(3 0x0): 14- 8- 0- 
o1   bkID(16) Incoming Locals(2 0x0): 14- 8- 
s1   bkID(16) Incoming Locals(3 0x0): 14- 8- 6- 
s1   bkID(16) Incoming Locals(4 0x0): 14- 8- 6- 5- 
s1   bkID(16) Incoming Locals(5 0x0): 14- 8- 6- 5- 11- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
o1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
o1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
o1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
orig bkID(18) Incoming Locals(2 0x0): 14- 3- 
o1   bkID(18) Incoming Locals(1 0x0): 14- 
s1   bkID(18) Incoming Locals(1 0x0): 14- 
s1   bkID(18) Incoming Locals(2 0x0): 14- 8- 
s1   bkID(18) Incoming Locals(3 0x0): 14- 8- 6- 
s1   bkID(18) Incoming Locals(4 0x0): 14- 8- 6- 5- 
s1   bkID(18) Incoming Locals(5 0x0): 14- 8- 6- 5- 11- 
s1   bkID(18) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
o1   bkID(18) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(18) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(18) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(18) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(18) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
o1   bkID(18) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
orig bkID(17) Incoming Locals(1 0x0): 0- 
o1   bkID(17) Incoming Locals(1 0x0): 0- 
s1   bkID(17) Incoming Locals(2 0x0): 0- 14- 
s1   bkID(17) Incoming Locals(3 0x0): 0- 14- 8- 
s1   bkID(17) Incoming Locals(4 0x0): 0- 14- 8- 6- 
s1   bkID(17) Incoming Locals(5 0x0): 0- 14- 8- 6- 5- 
s1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
s1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
o1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
s1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
s1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
s1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
s1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
s1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
s1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
o1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
orig bkID(15) Incoming Locals(3 0x0): 14- 7- 0- 
o1   bkID(15) Incoming Locals(2 0x0): 14- 7- 
s1   bkID(15) Incoming Locals(2 0x0): 14- 7- 
s1   bkID(15) Incoming Locals(3 0x0): 14- 7- 8- 
s1   bkID(15) Incoming Locals(4 0x0): 14- 7- 8- 6- 
s1   bkID(15) Incoming Locals(5 0x0): 14- 7- 8- 6- 5- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
o1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
o1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
o1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
orig bkID(14) Incoming Locals(5 0x0): 0- 13- 2- 3- 4- 
o1   bkID(14) Incoming Locals(5 0x0): 0- 13- 2- 3- 4- 
orig bkID(13) Incoming Locals(4 0x0): 2- 0- 14- 13- 
o1   bkID(13) Incoming Locals(2 0x0): 2- 0- 
s1   bkID(13) Incoming Locals(2 0x0): 2- 0- 
s1   bkID(13) Incoming Locals(3 0x0): 2- 0- 13- 
s1   bkID(13) Incoming Locals(3 0x0): 2- 0- 13- 
s1   bkID(13) Incoming Locals(4 0x0): 2- 0- 13- 3- 
s1   bkID(13) Incoming Locals(5 0x0): 2- 0- 13- 3- 4- 
o1   bkID(13) Incoming Locals(6 0x0): 2- 0- 13- 3- 4- 14- 
orig bkID(9) Incoming Locals(1 0x0): 0- 
o1   bkID(9) Incoming Locals(1 0x0): 0- 
o1   bkID(9) Incoming Locals(1 0x0): 0- 
orig bkID(2) Incoming Locals(1 0x0): 9- 
o1   bkID(2) Incoming Locals(1 0x0): 9- 
orig bkID(5) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(5) Incoming Locals(2 0x0): 0- 1- 
orig bkID(4) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(4) Incoming Locals(2 0x0): 0- 1- 
orig bkID(3) Incoming Locals(1 0x0): 0- 
o1   bkID(3) Incoming Locals(1 0x0): 0- 
s1   bkID(3) Incoming Locals(1 0x0): 0- 
s1   bkID(3) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(3) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(3) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(3) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(3) Incoming Locals(2 0x0): 0- 1- 
orig bkID(1) Incoming Locals(1 0x0): 0- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
s1   bkID(1) Incoming Locals(1 0x0): 0- 
s1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(22) Incoming Locals(1 0x0): 11- 
orig bkID(8) Incoming Locals(5 0x0): 6- 5- 11- 12- 0- 
o1   bkID(8) Incoming Locals(2 0x0): 6- 5- 
s1   bkID(8) Incoming Locals(3 0x0): 6- 5- 11- 
o1   bkID(8) Incoming Locals(4 0x0): 6- 5- 11- 12- 
s1   bkID(8) Incoming Locals(5 0x0): 6- 5- 11- 12- 0- 
o1   bkID(8) Incoming Locals(5 0x0): 6- 5- 11- 12- 0- 
orig bkID(19) Incoming Locals(5 0x0): 6- 5- 11- 12- 0- 
o1   bkID(19) Incoming Locals(1 0x0): 6- 
s1   bkID(19) Incoming Locals(2 0x0): 6- 5- 
s1   bkID(19) Incoming Locals(3 0x0): 6- 5- 11- 
s1   bkID(19) Incoming Locals(4 0x0): 6- 5- 11- 12- 
s1   bkID(19) Incoming Locals(5 0x0): 6- 5- 11- 12- 0- 
o1   bkID(19) Incoming Locals(5 0x0): 6- 5- 11- 12- 0- 
orig bkID(21) Incoming Locals(6 0x0): 14- 6- 5- 11- 12- 0- 
o1   bkID(21) Incoming Locals(1 0x0): 14- 
s1   bkID(21) Incoming Locals(2 0x0): 14- 6- 
s1   bkID(21) Incoming Locals(3 0x0): 14- 6- 5- 
s1   bkID(21) Incoming Locals(4 0x0): 14- 6- 5- 11- 
s1   bkID(21) Incoming Locals(5 0x0): 14- 6- 5- 11- 12- 
s1   bkID(21) Incoming Locals(6 0x0): 14- 6- 5- 11- 12- 0- 
o1   bkID(21) Incoming Locals(6 0x0): 14- 6- 5- 11- 12- 0- 
orig bkID(20) Incoming Locals(6 0x0): 0- 6- 5- 11- 12- 14- 
o1   bkID(20) Incoming Locals(1 0x0): 0- 
s1   bkID(20) Incoming Locals(2 0x0): 0- 6- 
s1   bkID(20) Incoming Locals(3 0x0): 0- 6- 5- 
s1   bkID(20) Incoming Locals(4 0x0): 0- 6- 5- 11- 
s1   bkID(20) Incoming Locals(5 0x0): 0- 6- 5- 11- 12- 
s1   bkID(20) Incoming Locals(5 0x0): 0- 6- 5- 11- 12- 
o1   bkID(20) Incoming Locals(5 0x0): 0- 6- 5- 11- 12- 
s1   bkID(20) Incoming Locals(6 0x0): 0- 6- 5- 11- 12- 14- 
s1   bkID(20) Incoming Locals(6 0x0): 0- 6- 5- 11- 12- 14- 
s1   bkID(20) Incoming Locals(6 0x0): 0- 6- 5- 11- 12- 14- 
s1   bkID(20) Incoming Locals(6 0x0): 0- 6- 5- 11- 12- 14- 
s1   bkID(20) Incoming Locals(6 0x0): 0- 6- 5- 11- 12- 14- 
s1   bkID(20) Incoming Locals(6 0x0): 0- 6- 5- 11- 12- 14- 
o1   bkID(20) Incoming Locals(6 0x0): 0- 6- 5- 11- 12- 14- 
orig bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
o1   bkID(16) Incoming Locals(2 0x0): 14- 8- 
s1   bkID(16) Incoming Locals(3 0x0): 14- 8- 6- 
s1   bkID(16) Incoming Locals(4 0x0): 14- 8- 6- 5- 
s1   bkID(16) Incoming Locals(5 0x0): 14- 8- 6- 5- 11- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
o1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
o1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
o1   bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
orig bkID(18) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
o1   bkID(18) Incoming Locals(1 0x0): 14- 
s1   bkID(18) Incoming Locals(1 0x0): 14- 
s1   bkID(18) Incoming Locals(2 0x0): 14- 8- 
s1   bkID(18) Incoming Locals(3 0x0): 14- 8- 6- 
s1   bkID(18) Incoming Locals(4 0x0): 14- 8- 6- 5- 
s1   bkID(18) Incoming Locals(5 0x0): 14- 8- 6- 5- 11- 
s1   bkID(18) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
o1   bkID(18) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(18) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(18) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(18) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
s1   bkID(18) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
o1   bkID(18) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
orig bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
o1   bkID(17) Incoming Locals(1 0x0): 0- 
s1   bkID(17) Incoming Locals(2 0x0): 0- 14- 
s1   bkID(17) Incoming Locals(3 0x0): 0- 14- 8- 
s1   bkID(17) Incoming Locals(4 0x0): 0- 14- 8- 6- 
s1   bkID(17) Incoming Locals(5 0x0): 0- 14- 8- 6- 5- 
s1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
s1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
o1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
s1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
s1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
s1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
s1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
s1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
s1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
o1   bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
orig bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
o1   bkID(15) Incoming Locals(2 0x0): 14- 7- 
s1   bkID(15) Incoming Locals(2 0x0): 14- 7- 
s1   bkID(15) Incoming Locals(3 0x0): 14- 7- 8- 
s1   bkID(15) Incoming Locals(4 0x0): 14- 7- 8- 6- 
s1   bkID(15) Incoming Locals(5 0x0): 14- 7- 8- 6- 5- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
o1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
o1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
s1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
o1   bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
orig bkID(14) Incoming Locals(5 0x0): 0- 13- 2- 3- 4- 
o1   bkID(14) Incoming Locals(5 0x0): 0- 13- 2- 3- 4- 
orig bkID(13) Incoming Locals(6 0x0): 2- 0- 13- 3- 4- 14- 
o1   bkID(13) Incoming Locals(2 0x0): 2- 0- 
s1   bkID(13) Incoming Locals(2 0x0): 2- 0- 
s1   bkID(13) Incoming Locals(3 0x0): 2- 0- 13- 
s1   bkID(13) Incoming Locals(3 0x0): 2- 0- 13- 
s1   bkID(13) Incoming Locals(4 0x0): 2- 0- 13- 3- 
s1   bkID(13) Incoming Locals(5 0x0): 2- 0- 13- 3- 4- 
o1   bkID(13) Incoming Locals(6 0x0): 2- 0- 13- 3- 4- 14- 
orig bkID(9) Incoming Locals(1 0x0): 0- 
o1   bkID(9) Incoming Locals(1 0x0): 0- 
o1   bkID(9) Incoming Locals(1 0x0): 0- 
orig bkID(2) Incoming Locals(1 0x0): 9- 
o1   bkID(2) Incoming Locals(1 0x0): 9- 
orig bkID(5) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(5) Incoming Locals(2 0x0): 0- 1- 
orig bkID(4) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(4) Incoming Locals(2 0x0): 0- 1- 
orig bkID(3) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(3) Incoming Locals(1 0x0): 0- 
s1   bkID(3) Incoming Locals(1 0x0): 0- 
s1   bkID(3) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(3) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(3) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(3) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(3) Incoming Locals(2 0x0): 0- 1- 
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
s1   bkID(1) Incoming Locals(1 0x0): 0- 
s1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
bkID(8) local(0 #6)  not found in goalBk
bkID(8) local(1 #5)  not found in goalBk
bkID(8) local(2 #11)  not ordered
bestLocal(0) bestLocalScore(24)
-bk  bkID(8) Incoming Locals(5 0x0): 6- 5- 11- 12- 0- 
+bk  bkID(8) Incoming Locals(5 0x1): 11+ 5- 6- 12- 0- 
-gbk bkID(22) Incoming Locals(1 0x0): 11- 
+gbk bkID(22) Incoming Locals(1 0x1): 11+ 
bkID(8) local(2 #6)  not found in goalBk
bkID(8) local(3 #12)  not found in goalBk
bkID(8) local(4 #0)  not found in goalBk
bkID(8) local(0 #11)  not found in goalBk
bkID(8) local(1 #5)  not found in goalBk
bkID(8) local(2 #6)  not found in goalBk
bkID(8) local(3 #12)  not found in goalBk
bkID(8) local(4 #0)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(8) Incoming Locals(5 0x1): 11+ 5- 6- 12- 0- 
+bk  bkID(8) Incoming Locals(5 0x3): 11+ 0+ 6- 12- 5- 
-gbk bkID(9) Incoming Locals(1 0x0): 0- 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
bkID(8) local(4 #5)  not found in goalBk
bkID(9) local(1 #0)  not found in goalBk
Pushing blockID(9)
bkID(19) local(0 #6)  not ordered
bestLocal(2) bestLocalScore(24)
-bk  bkID(19) Incoming Locals(5 0x0): 6- 5- 11- 12- 0- 
+bk  bkID(19) Incoming Locals(5 0x4): 11- 5- 6+ 12- 0- 
-gbk bkID(8) Incoming Locals(5 0x3): 11+ 0+ 6- 12- 5- 
+gbk bkID(8) Incoming Locals(5 0x7): 11+ 0+ 6+ 12- 5- 
bkID(19) local(0 #11)  ordered in goalBk(8)
-bk  bkID(19) Incoming Locals(5 0x4): 11- 5- 6+ 12- 0- 
dstBk(19) local(0 11) found in slot(0)
local(0 11) same slot
+bk  bkID(19) Incoming Locals(5 0x5): 11+ 5- 6+ 12- 0- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(8) Incoming Locals(5 0x7): 11+ 0+ 6+ 12- 5- 
dstBk(8) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(8) Incoming Locals(5 0x7): 11+ 0+ 6+ 12- 5- 
bkID(19) local(1 #5)  not ordered
bestLocal(3) bestLocalScore(24)
-bk  bkID(19) Incoming Locals(5 0x5): 11+ 5- 6+ 12- 0- 
+bk  bkID(19) Incoming Locals(5 0xd): 11+ 12- 6+ 5+ 0- 
-gbk bkID(8) Incoming Locals(5 0x7): 11+ 0+ 6+ 12- 5- 
+gbk bkID(8) Incoming Locals(5 0xf): 11+ 0+ 6+ 5+ 12- 
bkID(19) local(1 #12)  not ordered
bestLocal(4) bestLocalScore(24)
-bk  bkID(19) Incoming Locals(5 0xd): 11+ 12- 6+ 5+ 0- 
+bk  bkID(19) Incoming Locals(5 0x1d): 11+ 0- 6+ 5+ 12+ 
-gbk bkID(8) Incoming Locals(5 0xf): 11+ 0+ 6+ 5+ 12- 
+gbk bkID(8) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(19) local(1 #0)  ordered in goalBk(8)
-bk  bkID(19) Incoming Locals(5 0x1d): 11+ 0- 6+ 5+ 12+ 
dstBk(19) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(8) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(8) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(8) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(19) local(2 #6)  ordered in goalBk(8)
-bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(8) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(8) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(8) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(19) local(3 #5)  ordered in goalBk(8)
-bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(8) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(8) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(8) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(19) local(4 #12)  ordered in goalBk(8)
-bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(4 12) found in slot(4)
local(4 12) same slot
+bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(8) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(8) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(8) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(19) local(0 #11)  not found in goalBk
bkID(19) local(1 #0)  ordered in goalBk(9)
-bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
bkID(19) local(2 #6)  not found in goalBk
bkID(19) local(3 #5)  not found in goalBk
bkID(19) local(4 #12)  not found in goalBk
bkID(9) local(1 #0)  ordered in goalBk(8)
-bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
 ordered in bk
-gbk bkID(8) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(8) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(8) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(21) local(0 #14)  not found in goalBk
bkID(21) local(1 #6)  ordered in goalBk(19)
-bk  bkID(21) Incoming Locals(6 0x0): 14- 6- 5- 11- 12- 0- 
dstBk(21) local(2 6) found in slot(1)
local(#2) swapped with local(#1)
+bk  bkID(21) Incoming Locals(6 0x4): 14- 5- 6+ 11- 12- 0- 
bkID(21) local(2 #6)  ordered in goalBk(19)
-bk  bkID(21) Incoming Locals(6 0x4): 14- 5- 6+ 11- 12- 0- 
dstBk(21) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(21) Incoming Locals(6 0x4): 14- 5- 6+ 11- 12- 0- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(21) local(3 #11)  ordered in goalBk(19)
-bk  bkID(21) Incoming Locals(6 0x4): 14- 5- 6+ 11- 12- 0- 
dstBk(21) local(0 11) found in slot(3)
local(#0) swapped with local(#3)
+bk  bkID(21) Incoming Locals(6 0x5): 11+ 5- 6+ 14- 12- 0- 
bkID(21) local(4 #12)  ordered in goalBk(19)
-bk  bkID(21) Incoming Locals(6 0x5): 11+ 5- 6+ 14- 12- 0- 
dstBk(21) local(4 12) found in slot(4)
local(4 12) same slot
+bk  bkID(21) Incoming Locals(6 0x15): 11+ 5- 6+ 14- 12+ 0- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(21) local(5 #0)  ordered in goalBk(19)
-bk  bkID(21) Incoming Locals(6 0x15): 11+ 5- 6+ 14- 12+ 0- 
dstBk(21) local(1 0) found in slot(5)
local(#1) swapped with local(#5)
+bk  bkID(21) Incoming Locals(6 0x17): 11+ 0+ 6+ 14- 12+ 5- 
bkID(21) local(0 #11)  not found in goalBk
bkID(21) local(1 #0)  ordered in goalBk(9)
-bk  bkID(21) Incoming Locals(6 0x17): 11+ 0+ 6+ 14- 12+ 5- 
dstBk(21) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(21) Incoming Locals(6 0x17): 11+ 0+ 6+ 14- 12+ 5- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
bkID(21) local(2 #6)  not found in goalBk
bkID(21) local(3 #14)  not found in goalBk
bkID(21) local(4 #12)  not found in goalBk
bkID(21) local(5 #5)  not found in goalBk
bkID(9) local(1 #0)  ordered in goalBk(19)
-bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
 ordered in bk
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(20) local(0 #0)  ordered in goalBk(19)
-bk  bkID(20) Incoming Locals(6 0x0): 0- 6- 5- 11- 12- 14- 
dstBk(20) local(1 0) found in slot(0)
local(#1) swapped with local(#0)
+bk  bkID(20) Incoming Locals(6 0x2): 6- 0+ 5- 11- 12- 14- 
bkID(20) local(1 #0)  ordered in goalBk(19)
-bk  bkID(20) Incoming Locals(6 0x2): 6- 0+ 5- 11- 12- 14- 
dstBk(20) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(20) Incoming Locals(6 0x2): 6- 0+ 5- 11- 12- 14- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x17): 11+ 0+ 6+ 14- 12+ 5- 
dstBk(21) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(21) Incoming Locals(6 0x17): 11+ 0+ 6+ 14- 12+ 5- 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(20) local(2 #5)  ordered in goalBk(19)
-bk  bkID(20) Incoming Locals(6 0x2): 6- 0+ 5- 11- 12- 14- 
dstBk(20) local(3 5) found in slot(2)
local(#3) swapped with local(#2)
+bk  bkID(20) Incoming Locals(6 0xa): 6- 0+ 11- 5+ 12- 14- 
bkID(20) local(3 #5)  ordered in goalBk(19)
-bk  bkID(20) Incoming Locals(6 0xa): 6- 0+ 11- 5+ 12- 14- 
dstBk(20) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(20) Incoming Locals(6 0xa): 6- 0+ 11- 5+ 12- 14- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x17): 11+ 0+ 6+ 14- 12+ 5- 
dstBk(21) local(3 5) found in slot(5)
local(#3) swapped with local(#5)
+gbk bkID(21) Incoming Locals(6 0x1f): 11+ 0+ 6+ 5+ 12+ 14- 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(20) local(4 #12)  ordered in goalBk(19)
-bk  bkID(20) Incoming Locals(6 0xa): 6- 0+ 11- 5+ 12- 14- 
dstBk(20) local(4 12) found in slot(4)
local(4 12) same slot
+bk  bkID(20) Incoming Locals(6 0x1a): 6- 0+ 11- 5+ 12+ 14- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x1f): 11+ 0+ 6+ 5+ 12+ 14- 
dstBk(21) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(21) Incoming Locals(6 0x1f): 11+ 0+ 6+ 5+ 12+ 14- 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(20) local(5 #14)  not found in goalBk
bkID(20) local(0 #6)  ordered in goalBk(21)
-bk  bkID(20) Incoming Locals(6 0x1a): 6- 0+ 11- 5+ 12+ 14- 
dstBk(20) local(2 6) found in slot(0)
local(#2) swapped with local(#0)
+bk  bkID(20) Incoming Locals(6 0x1e): 11- 0+ 6+ 5+ 12+ 14- 
bkID(20) local(1 #0)  ordered in goalBk(21)
-bk  bkID(20) Incoming Locals(6 0x1e): 11- 0+ 6+ 5+ 12+ 14- 
dstBk(20) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(20) Incoming Locals(6 0x1e): 11- 0+ 6+ 5+ 12+ 14- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x1f): 11+ 0+ 6+ 5+ 12+ 14- 
dstBk(21) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(21) Incoming Locals(6 0x1f): 11+ 0+ 6+ 5+ 12+ 14- 
bkID(20) local(2 #6)  ordered in goalBk(21)
-bk  bkID(20) Incoming Locals(6 0x1e): 11- 0+ 6+ 5+ 12+ 14- 
dstBk(20) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(20) Incoming Locals(6 0x1e): 11- 0+ 6+ 5+ 12+ 14- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x1f): 11+ 0+ 6+ 5+ 12+ 14- 
dstBk(21) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(21) Incoming Locals(6 0x1f): 11+ 0+ 6+ 5+ 12+ 14- 
bkID(20) local(3 #5)  ordered in goalBk(21)
-bk  bkID(20) Incoming Locals(6 0x1e): 11- 0+ 6+ 5+ 12+ 14- 
dstBk(20) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(20) Incoming Locals(6 0x1e): 11- 0+ 6+ 5+ 12+ 14- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x1f): 11+ 0+ 6+ 5+ 12+ 14- 
dstBk(21) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(21) Incoming Locals(6 0x1f): 11+ 0+ 6+ 5+ 12+ 14- 
bkID(20) local(4 #12)  ordered in goalBk(21)
-bk  bkID(20) Incoming Locals(6 0x1e): 11- 0+ 6+ 5+ 12+ 14- 
dstBk(20) local(4 12) found in slot(4)
local(4 12) same slot
+bk  bkID(20) Incoming Locals(6 0x1e): 11- 0+ 6+ 5+ 12+ 14- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x1f): 11+ 0+ 6+ 5+ 12+ 14- 
dstBk(21) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(21) Incoming Locals(6 0x1f): 11+ 0+ 6+ 5+ 12+ 14- 
bkID(20) local(5 #14)  not ordered
bestLocal(5) bestLocalScore(24)
-bk  bkID(20) Incoming Locals(6 0x1e): 11- 0+ 6+ 5+ 12+ 14- 
+bk  bkID(20) Incoming Locals(6 0x3e): 11- 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(21) Incoming Locals(6 0x1f): 11+ 0+ 6+ 5+ 12+ 14- 
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(20) local(5 #14)  ordered in goalBk(21)
-bk  bkID(20) Incoming Locals(6 0x3e): 11- 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(5 14) found in slot(5)
local(5 14) same slot
+bk  bkID(20) Incoming Locals(6 0x3e): 11- 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(20) local(0 #11)  not found in goalBk
bkID(20) local(1 #0)  ordered in goalBk(9)
-bk  bkID(20) Incoming Locals(6 0x3e): 11- 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(20) Incoming Locals(6 0x3e): 11- 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
bkID(20) local(2 #6)  not found in goalBk
bkID(20) local(3 #5)  not found in goalBk
bkID(20) local(4 #12)  not found in goalBk
bkID(20) local(5 #14)  not found in goalBk
bkID(9) local(1 #0)  ordered in goalBk(19)
-bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
 ordered in bk
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(9) local(1 #0)  ordered in goalBk(21)
-bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
 ordered in bk
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(21) local(0 #11)  ordered in goalBk(19)
-bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(0 11) found in slot(0)
local(0 11) same slot
+bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(21) local(1 #0)  ordered in goalBk(19)
-bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(21) local(2 #6)  ordered in goalBk(19)
-bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(21) local(3 #5)  ordered in goalBk(19)
-bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(21) local(4 #12)  ordered in goalBk(19)
-bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(4 12) found in slot(4)
local(4 12) same slot
+bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(21) local(5 #14)  not found in goalBk
bkID(16) local(0 #14)  not found in goalBk
bkID(16) local(1 #8)  not found in goalBk
bkID(16) local(2 #6)  ordered in goalBk(19)
-bk  bkID(16) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
dstBk(16) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(16) Incoming Locals(6 0x4): 14- 8- 6+ 5- 11- 12- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(20) Incoming Locals(6 0x3e): 11- 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(20) Incoming Locals(6 0x3e): 11- 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(16) local(3 #5)  ordered in goalBk(19)
-bk  bkID(16) Incoming Locals(6 0x4): 14- 8- 6+ 5- 11- 12- 
dstBk(16) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(16) Incoming Locals(6 0xc): 14- 8- 6+ 5+ 11- 12- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(20) Incoming Locals(6 0x3e): 11- 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(20) Incoming Locals(6 0x3e): 11- 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(16) local(4 #11)  ordered in goalBk(19)
-bk  bkID(16) Incoming Locals(6 0xc): 14- 8- 6+ 5+ 11- 12- 
dstBk(16) local(0 11) found in slot(4)
local(#0) swapped with local(#4)
+bk  bkID(16) Incoming Locals(6 0xd): 11+ 8- 6+ 5+ 14- 12- 
bkID(16) local(5 #12)  ordered in goalBk(19)
-bk  bkID(16) Incoming Locals(6 0xd): 11+ 8- 6+ 5+ 14- 12- 
dstBk(16) local(4 12) found in slot(5)
local(#4) swapped with local(#5)
+bk  bkID(16) Incoming Locals(6 0x1d): 11+ 8- 6+ 5+ 12+ 14- 
bkID(16) local(0 #11)  ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(20) Incoming Locals(6 0x3e): 11- 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(16) local(1 #8)  not found in goalBk
bkID(16) local(2 #6)  ordered in goalBk(20)
-bk  bkID(16) Incoming Locals(6 0x1d): 11+ 8- 6+ 5+ 12+ 14- 
dstBk(16) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(16) Incoming Locals(6 0x1d): 11+ 8- 6+ 5+ 12+ 14- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(16) local(3 #5)  ordered in goalBk(20)
-bk  bkID(16) Incoming Locals(6 0x1d): 11+ 8- 6+ 5+ 12+ 14- 
dstBk(16) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(16) Incoming Locals(6 0x1d): 11+ 8- 6+ 5+ 12+ 14- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(16) local(4 #12)  ordered in goalBk(20)
-bk  bkID(16) Incoming Locals(6 0x1d): 11+ 8- 6+ 5+ 12+ 14- 
dstBk(16) local(4 12) found in slot(4)
local(4 12) same slot
+bk  bkID(16) Incoming Locals(6 0x1d): 11+ 8- 6+ 5+ 12+ 14- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(16) local(5 #14)  ordered in goalBk(20)
-bk  bkID(16) Incoming Locals(6 0x1d): 11+ 8- 6+ 5+ 12+ 14- 
dstBk(16) local(5 14) found in slot(5)
local(5 14) same slot
+bk  bkID(16) Incoming Locals(6 0x3d): 11+ 8- 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(16) local(0 #11)  ordered in goalBk(21)
-bk  bkID(16) Incoming Locals(6 0x3d): 11+ 8- 6+ 5+ 12+ 14+ 
dstBk(16) local(0 11) found in slot(0)
local(0 11) same slot
+bk  bkID(16) Incoming Locals(6 0x3d): 11+ 8- 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(16) local(1 #8)  not found in goalBk
bkID(16) local(2 #6)  ordered in goalBk(21)
-bk  bkID(16) Incoming Locals(6 0x3d): 11+ 8- 6+ 5+ 12+ 14+ 
dstBk(16) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(16) Incoming Locals(6 0x3d): 11+ 8- 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(16) local(3 #5)  ordered in goalBk(21)
-bk  bkID(16) Incoming Locals(6 0x3d): 11+ 8- 6+ 5+ 12+ 14+ 
dstBk(16) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(16) Incoming Locals(6 0x3d): 11+ 8- 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(16) local(4 #12)  ordered in goalBk(21)
-bk  bkID(16) Incoming Locals(6 0x3d): 11+ 8- 6+ 5+ 12+ 14+ 
dstBk(16) local(4 12) found in slot(4)
local(4 12) same slot
+bk  bkID(16) Incoming Locals(6 0x3d): 11+ 8- 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(16) local(5 #14)  ordered in goalBk(21)
-bk  bkID(16) Incoming Locals(6 0x3d): 11+ 8- 6+ 5+ 12+ 14+ 
dstBk(16) local(5 14) found in slot(5)
local(5 14) same slot
+bk  bkID(16) Incoming Locals(6 0x3d): 11+ 8- 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(16) local(0 #11)  not found in goalBk
bkID(16) local(1 #8)  not found in goalBk
bkID(16) local(2 #6)  not found in goalBk
bkID(16) local(3 #5)  not found in goalBk
bkID(16) local(4 #12)  not found in goalBk
bkID(16) local(5 #14)  not found in goalBk
bkID(9) local(1 #0)  ordered in goalBk(19)
-bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
 ordered in bk
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(9) local(1 #0)  ordered in goalBk(20)
-bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
 ordered in bk
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(9) local(1 #0)  ordered in goalBk(21)
-bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
 ordered in bk
-gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(21) local(0 #11)  ordered in goalBk(19)
-bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(0 11) found in slot(0)
local(0 11) same slot
+bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(21) local(1 #0)  ordered in goalBk(19)
-bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(21) local(2 #6)  ordered in goalBk(19)
-bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(21) local(3 #5)  ordered in goalBk(19)
-bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(21) local(4 #12)  ordered in goalBk(19)
-bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(4 12) found in slot(4)
local(4 12) same slot
+bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(21) local(5 #14)  not found in goalBk
bkID(21) local(0 #11)  ordered in goalBk(20)
-bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(0 11) found in slot(0)
local(0 11) same slot
+bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(21) local(1 #0)  ordered in goalBk(20)
-bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(21) local(2 #6)  ordered in goalBk(20)
-bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(21) local(3 #5)  ordered in goalBk(20)
-bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(21) local(4 #12)  ordered in goalBk(20)
-bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(4 12) found in slot(4)
local(4 12) same slot
+bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(21) local(5 #14)  ordered in goalBk(20)
-bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(21) local(5 14) found in slot(5)
local(5 14) same slot
+bk  bkID(21) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
bkID(20) local(0 #11)  ordered in goalBk(19)
-bk  bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(0 11) found in slot(0)
local(0 11) same slot
+bk  bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(20) local(1 #0)  ordered in goalBk(19)
-bk  bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(20) local(2 #6)  ordered in goalBk(19)
-bk  bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(20) local(3 #5)  ordered in goalBk(19)
-bk  bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(20) local(4 #12)  ordered in goalBk(19)
-bk  bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
dstBk(20) local(4 12) found in slot(4)
local(4 12) same slot
+bk  bkID(20) Incoming Locals(6 0x3f): 11+ 0+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(20) local(5 #14)  not found in goalBk
bkID(18) local(0 #14)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x0): 14- 8- 6- 5- 11- 12- 
dstBk(18) local(5 14) found in slot(0)
local(#5) swapped with local(#0)
+bk  bkID(18) Incoming Locals(6 0x20): 12- 8- 6- 5- 11- 14+ 
bkID(18) local(1 #8)  not ordered
bestLocal(1) bestLocalScore(24)
-bk  bkID(18) Incoming Locals(6 0x20): 12- 8- 6- 5- 11- 14+ 
+bk  bkID(18) Incoming Locals(6 0x22): 12- 8+ 6- 5- 11- 14+ 
-gbk bkID(16) Incoming Locals(6 0x3d): 11+ 8- 6+ 5+ 12+ 14+ 
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(18) local(1 #8)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x22): 12- 8+ 6- 5- 11- 14+ 
dstBk(18) local(1 8) found in slot(1)
local(1 8) same slot
+bk  bkID(18) Incoming Locals(6 0x22): 12- 8+ 6- 5- 11- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(1 8) found in slot(1)
local(1 8) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(18) local(2 #6)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x22): 12- 8+ 6- 5- 11- 14+ 
dstBk(18) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(18) Incoming Locals(6 0x26): 12- 8+ 6+ 5- 11- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(18) local(3 #5)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x26): 12- 8+ 6+ 5- 11- 14+ 
dstBk(18) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(18) Incoming Locals(6 0x2e): 12- 8+ 6+ 5+ 11- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(18) local(4 #11)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x2e): 12- 8+ 6+ 5+ 11- 14+ 
dstBk(18) local(0 11) found in slot(4)
local(#0) swapped with local(#4)
+bk  bkID(18) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 12- 14+ 
bkID(18) local(5 #14)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 12- 14+ 
dstBk(18) local(5 14) found in slot(5)
local(5 14) same slot
+bk  bkID(18) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 12- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(18) local(0 #11)  ordered in goalBk(19)
-bk  bkID(18) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 12- 14+ 
dstBk(18) local(0 11) found in slot(0)
local(0 11) same slot
+bk  bkID(18) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 12- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(18) local(1 #8)  not found in goalBk
bkID(18) local(2 #6)  ordered in goalBk(19)
-bk  bkID(18) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 12- 14+ 
dstBk(18) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(18) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 12- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(18) local(3 #5)  ordered in goalBk(19)
-bk  bkID(18) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 12- 14+ 
dstBk(18) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(18) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 12- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(18) local(4 #12)  ordered in goalBk(19)
-bk  bkID(18) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 12- 14+ 
dstBk(18) local(4 12) found in slot(4)
local(4 12) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(18) local(5 #14)  not found in goalBk
bkID(18) local(0 #11)  not found in goalBk
bkID(18) local(1 #8)  not found in goalBk
bkID(18) local(2 #6)  not found in goalBk
bkID(18) local(3 #5)  not found in goalBk
bkID(18) local(4 #12)  not found in goalBk
bkID(18) local(5 #14)  not found in goalBk
bkID(9) local(1 #0)  not found in goalBk
bkID(9) local(1 #0)  ordered in goalBk(19)
-bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
 ordered in bk
-gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
bkID(19) local(0 #11)  ordered in goalBk(16)
-bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(0 11) found in slot(0)
local(0 11) same slot
+bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
 ordered in bk
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(19) local(1 #0)  not found in goalBk
bkID(19) local(2 #6)  ordered in goalBk(16)
-bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
 ordered in bk
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(19) local(3 #5)  ordered in goalBk(16)
-bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
 ordered in bk
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(19) local(4 #12)  ordered in goalBk(16)
-bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
dstBk(19) local(4 12) found in slot(4)
local(4 12) same slot
+bk  bkID(19) Incoming Locals(5 0x1f): 11+ 0+ 6+ 5+ 12+ 
 ordered in bk
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(17) local(0 #0)  not found in goalBk
bkID(17) local(1 #14)  ordered in goalBk(16)
-bk  bkID(17) Incoming Locals(6 0x0): 0- 14- 8- 6- 5- 11- 
dstBk(17) local(5 14) found in slot(1)
local(#5) swapped with local(#1)
+bk  bkID(17) Incoming Locals(6 0x20): 0- 11- 8- 6- 5- 14+ 
bkID(17) local(2 #8)  ordered in goalBk(16)
-bk  bkID(17) Incoming Locals(6 0x20): 0- 11- 8- 6- 5- 14+ 
dstBk(17) local(1 8) found in slot(2)
local(#1) swapped with local(#2)
+bk  bkID(17) Incoming Locals(6 0x22): 0- 8+ 11- 6- 5- 14+ 
bkID(17) local(3 #6)  ordered in goalBk(16)
-bk  bkID(17) Incoming Locals(6 0x22): 0- 8+ 11- 6- 5- 14+ 
dstBk(17) local(2 6) found in slot(3)
local(#2) swapped with local(#3)
+bk  bkID(17) Incoming Locals(6 0x26): 0- 8+ 6+ 11- 5- 14+ 
bkID(17) local(4 #5)  ordered in goalBk(16)
-bk  bkID(17) Incoming Locals(6 0x26): 0- 8+ 6+ 11- 5- 14+ 
dstBk(17) local(3 5) found in slot(4)
local(#3) swapped with local(#4)
+bk  bkID(17) Incoming Locals(6 0x2e): 0- 8+ 6+ 5+ 11- 14+ 
bkID(17) local(5 #14)  ordered in goalBk(16)
-bk  bkID(17) Incoming Locals(6 0x2e): 0- 8+ 6+ 5+ 11- 14+ 
dstBk(17) local(5 14) found in slot(5)
local(5 14) same slot
+bk  bkID(17) Incoming Locals(6 0x2e): 0- 8+ 6+ 5+ 11- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(17) local(0 #0)  not found in goalBk
bkID(17) local(1 #8)  ordered in goalBk(18)
-bk  bkID(17) Incoming Locals(6 0x2e): 0- 8+ 6+ 5+ 11- 14+ 
dstBk(17) local(1 8) found in slot(1)
local(1 8) same slot
+bk  bkID(17) Incoming Locals(6 0x2e): 0- 8+ 6+ 5+ 11- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(1 8) found in slot(1)
local(1 8) same slot
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(17) local(2 #6)  ordered in goalBk(18)
-bk  bkID(17) Incoming Locals(6 0x2e): 0- 8+ 6+ 5+ 11- 14+ 
dstBk(17) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(17) Incoming Locals(6 0x2e): 0- 8+ 6+ 5+ 11- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(17) local(3 #5)  ordered in goalBk(18)
-bk  bkID(17) Incoming Locals(6 0x2e): 0- 8+ 6+ 5+ 11- 14+ 
dstBk(17) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(17) Incoming Locals(6 0x2e): 0- 8+ 6+ 5+ 11- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(17) local(4 #11)  ordered in goalBk(18)
-bk  bkID(17) Incoming Locals(6 0x2e): 0- 8+ 6+ 5+ 11- 14+ 
dstBk(17) local(0 11) found in slot(4)
local(#0) swapped with local(#4)
+bk  bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
bkID(17) local(5 #14)  ordered in goalBk(18)
-bk  bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(5 14) found in slot(5)
local(5 14) same slot
+bk  bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(17) local(0 #11)  not found in goalBk
bkID(17) local(1 #8)  not found in goalBk
bkID(17) local(2 #6)  not found in goalBk
bkID(17) local(3 #5)  not found in goalBk
bkID(17) local(4 #0)  ordered in goalBk(9)
-bk  bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(1 0) found in slot(4)
srcIdx local(1 0) already ordered in dst
+bk  bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
bkID(17) local(5 #14)  not found in goalBk
bkID(9) local(1 #0)  not found in goalBk
bkID(9) local(1 #0)  not found in goalBk
bkID(18) local(0 #11)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(0 11) found in slot(0)
local(0 11) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(18) local(1 #8)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(1 8) found in slot(1)
local(1 8) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(1 8) found in slot(1)
local(1 8) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(18) local(2 #6)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(18) local(3 #5)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(18) local(4 #12)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(4 12) found in slot(4)
local(4 12) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(18) local(5 #14)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(5 14) found in slot(5)
local(5 14) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(15) local(0 #14)  ordered in goalBk(16)
-bk  bkID(15) Incoming Locals(6 0x0): 14- 7- 8- 6- 5- 11- 
dstBk(15) local(5 14) found in slot(0)
local(#5) swapped with local(#0)
+bk  bkID(15) Incoming Locals(6 0x20): 11- 7- 8- 6- 5- 14+ 
bkID(15) local(1 #7)  not found in goalBk
bkID(15) local(2 #8)  ordered in goalBk(16)
-bk  bkID(15) Incoming Locals(6 0x20): 11- 7- 8- 6- 5- 14+ 
dstBk(15) local(1 8) found in slot(2)
local(#1) swapped with local(#2)
+bk  bkID(15) Incoming Locals(6 0x22): 11- 8+ 7- 6- 5- 14+ 
bkID(15) local(3 #6)  ordered in goalBk(16)
-bk  bkID(15) Incoming Locals(6 0x22): 11- 8+ 7- 6- 5- 14+ 
dstBk(15) local(2 6) found in slot(3)
local(#2) swapped with local(#3)
+bk  bkID(15) Incoming Locals(6 0x26): 11- 8+ 6+ 7- 5- 14+ 
bkID(15) local(4 #5)  ordered in goalBk(16)
-bk  bkID(15) Incoming Locals(6 0x26): 11- 8+ 6+ 7- 5- 14+ 
dstBk(15) local(3 5) found in slot(4)
local(#3) swapped with local(#4)
+bk  bkID(15) Incoming Locals(6 0x2e): 11- 8+ 6+ 5+ 7- 14+ 
bkID(15) local(5 #14)  ordered in goalBk(16)
-bk  bkID(15) Incoming Locals(6 0x2e): 11- 8+ 6+ 5+ 7- 14+ 
dstBk(15) local(5 14) found in slot(5)
local(5 14) same slot
+bk  bkID(15) Incoming Locals(6 0x2e): 11- 8+ 6+ 5+ 7- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(15) local(0 #11)  ordered in goalBk(17)
-bk  bkID(15) Incoming Locals(6 0x2e): 11- 8+ 6+ 5+ 7- 14+ 
dstBk(15) local(0 11) found in slot(0)
local(0 11) same slot
+bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
bkID(15) local(1 #8)  ordered in goalBk(17)
-bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
dstBk(15) local(1 8) found in slot(1)
local(1 8) same slot
+bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(1 8) found in slot(1)
local(1 8) same slot
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(1 8) found in slot(1)
local(1 8) same slot
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
bkID(15) local(2 #6)  ordered in goalBk(17)
-bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
dstBk(15) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
bkID(15) local(3 #5)  ordered in goalBk(17)
-bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
dstBk(15) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
bkID(15) local(4 #7)  not found in goalBk
bkID(15) local(5 #14)  ordered in goalBk(17)
-bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
dstBk(15) local(5 14) found in slot(5)
local(5 14) same slot
+bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
bkID(15) local(0 #11)  ordered in goalBk(18)
-bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
dstBk(15) local(0 11) found in slot(0)
local(0 11) same slot
+bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(15) local(1 #8)  ordered in goalBk(18)
-bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
dstBk(15) local(1 8) found in slot(1)
local(1 8) same slot
+bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(1 8) found in slot(1)
local(1 8) same slot
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(15) local(2 #6)  ordered in goalBk(18)
-bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
dstBk(15) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(15) local(3 #5)  ordered in goalBk(18)
-bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
dstBk(15) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(15) local(4 #7)  not found in goalBk
bkID(15) local(5 #14)  ordered in goalBk(18)
-bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
dstBk(15) local(5 14) found in slot(5)
local(5 14) same slot
+bk  bkID(15) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 7- 14+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(15) local(0 #11)  not found in goalBk
bkID(15) local(1 #8)  not found in goalBk
bkID(15) local(2 #6)  not found in goalBk
bkID(15) local(3 #5)  not found in goalBk
bkID(15) local(4 #7)  not found in goalBk
bkID(15) local(5 #14)  not found in goalBk
bkID(9) local(1 #0)  not found in goalBk
bkID(9) local(1 #0)  ordered in bk
-gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
+gbk bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(1 0) found in slot(4)
srcIdx local(1 0) already ordered in dst
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
bkID(9) local(1 #0)  not found in goalBk
bkID(18) local(0 #11)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(0 11) found in slot(0)
local(0 11) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(18) local(1 #8)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(1 8) found in slot(1)
local(1 8) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(1 8) found in slot(1)
local(1 8) same slot
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(1 8) found in slot(1)
local(1 8) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(18) local(2 #6)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(18) local(3 #5)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(18) local(4 #12)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(4 12) found in slot(4)
local(4 12) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(4 12) found in slot(4)
local(4 12) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(18) local(5 #14)  ordered in goalBk(16)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(5 14) found in slot(5)
local(5 14) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(18) local(0 #11)  ordered in goalBk(17)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(0 11) found in slot(0)
local(0 11) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
bkID(18) local(1 #8)  ordered in goalBk(17)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(1 8) found in slot(1)
local(1 8) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(1 8) found in slot(1)
local(1 8) same slot
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
bkID(18) local(2 #6)  ordered in goalBk(17)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
bkID(18) local(3 #5)  ordered in goalBk(17)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
bkID(18) local(4 #12)  not found in goalBk
bkID(18) local(5 #14)  ordered in goalBk(17)
-bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(18) local(5 14) found in slot(5)
local(5 14) same slot
+bk  bkID(18) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
 ordered in bk
-gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
bkID(17) local(0 #11)  ordered in goalBk(16)
-bk  bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(0 11) found in slot(0)
local(0 11) same slot
+bk  bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
 ordered in bk
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(0 11) found in slot(0)
local(0 11) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(17) local(1 #8)  ordered in goalBk(16)
-bk  bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(1 8) found in slot(1)
local(1 8) same slot
+bk  bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
 ordered in bk
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(1 8) found in slot(1)
local(1 8) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(17) local(2 #6)  ordered in goalBk(16)
-bk  bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(2 6) found in slot(2)
local(2 6) same slot
+bk  bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
 ordered in bk
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(2 6) found in slot(2)
local(2 6) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(17) local(3 #5)  ordered in goalBk(16)
-bk  bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(3 5) found in slot(3)
local(3 5) same slot
+bk  bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
 ordered in bk
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(3 5) found in slot(3)
local(3 5) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(17) local(4 #0)  not found in goalBk
bkID(17) local(5 #14)  ordered in goalBk(16)
-bk  bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
dstBk(17) local(5 14) found in slot(5)
local(5 14) same slot
+bk  bkID(17) Incoming Locals(6 0x2f): 11+ 8+ 6+ 5+ 0- 14+ 
 ordered in bk
-gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
dstBk(16) local(5 14) found in slot(5)
local(5 14) same slot
+gbk bkID(16) Incoming Locals(6 0x3f): 11+ 8+ 6+ 5+ 12+ 14+ 
bkID(14) local(0 #0)  ordered in goalBk(9)
-bk  bkID(14) Incoming Locals(5 0x0): 0- 13- 2- 3- 4- 
dstBk(14) local(1 0) found in slot(0)
local(#1) swapped with local(#0)
+bk  bkID(14) Incoming Locals(5 0x2): 13- 0+ 2- 3- 4- 
bkID(14) local(1 #0)  ordered in goalBk(9)
-bk  bkID(14) Incoming Locals(5 0x2): 13- 0+ 2- 3- 4- 
dstBk(14) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(14) Incoming Locals(5 0x2): 13- 0+ 2- 3- 4- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
bkID(14) local(2 #2)  not found in goalBk
bkID(14) local(3 #3)  not found in goalBk
bkID(14) local(4 #4)  not found in goalBk
bkID(13) local(0 #2)  not ordered
bestLocal(0) bestLocalScore(24)
-bk  bkID(13) Incoming Locals(6 0x0): 2- 0- 13- 3- 4- 14- 
+bk  bkID(13) Incoming Locals(6 0x1): 2+ 0- 13- 3- 4- 14- 
-gbk bkID(14) Incoming Locals(5 0x2): 13- 0+ 2- 3- 4- 
+gbk bkID(14) Incoming Locals(5 0x3): 2+ 0+ 13- 3- 4- 
bkID(13) local(0 #2)  ordered in goalBk(14)
-bk  bkID(13) Incoming Locals(6 0x1): 2+ 0- 13- 3- 4- 14- 
dstBk(13) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(13) Incoming Locals(6 0x1): 2+ 0- 13- 3- 4- 14- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(14) Incoming Locals(5 0x3): 2+ 0+ 13- 3- 4- 
dstBk(14) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(14) Incoming Locals(5 0x3): 2+ 0+ 13- 3- 4- 
bkID(13) local(1 #0)  ordered in goalBk(14)
-bk  bkID(13) Incoming Locals(6 0x1): 2+ 0- 13- 3- 4- 14- 
dstBk(13) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(13) Incoming Locals(6 0x3): 2+ 0+ 13- 3- 4- 14- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(14) Incoming Locals(5 0x3): 2+ 0+ 13- 3- 4- 
dstBk(14) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(14) Incoming Locals(5 0x3): 2+ 0+ 13- 3- 4- 
bkID(13) local(2 #13)  not ordered
bestLocal(2) bestLocalScore(24)
-bk  bkID(13) Incoming Locals(6 0x3): 2+ 0+ 13- 3- 4- 14- 
+bk  bkID(13) Incoming Locals(6 0x7): 2+ 0+ 13+ 3- 4- 14- 
-gbk bkID(14) Incoming Locals(5 0x3): 2+ 0+ 13- 3- 4- 
+gbk bkID(14) Incoming Locals(5 0x7): 2+ 0+ 13+ 3- 4- 
bkID(13) local(2 #13)  ordered in goalBk(14)
-bk  bkID(13) Incoming Locals(6 0x7): 2+ 0+ 13+ 3- 4- 14- 
dstBk(13) local(2 13) found in slot(2)
local(2 13) same slot
+bk  bkID(13) Incoming Locals(6 0x7): 2+ 0+ 13+ 3- 4- 14- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(14) Incoming Locals(5 0x7): 2+ 0+ 13+ 3- 4- 
dstBk(14) local(2 13) found in slot(2)
local(2 13) same slot
+gbk bkID(14) Incoming Locals(5 0x7): 2+ 0+ 13+ 3- 4- 
bkID(13) local(3 #3)  not ordered
bestLocal(3) bestLocalScore(24)
-bk  bkID(13) Incoming Locals(6 0x7): 2+ 0+ 13+ 3- 4- 14- 
+bk  bkID(13) Incoming Locals(6 0xf): 2+ 0+ 13+ 3+ 4- 14- 
-gbk bkID(14) Incoming Locals(5 0x7): 2+ 0+ 13+ 3- 4- 
+gbk bkID(14) Incoming Locals(5 0xf): 2+ 0+ 13+ 3+ 4- 
bkID(13) local(3 #3)  ordered in goalBk(14)
-bk  bkID(13) Incoming Locals(6 0xf): 2+ 0+ 13+ 3+ 4- 14- 
dstBk(13) local(3 3) found in slot(3)
local(3 3) same slot
+bk  bkID(13) Incoming Locals(6 0xf): 2+ 0+ 13+ 3+ 4- 14- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(14) Incoming Locals(5 0xf): 2+ 0+ 13+ 3+ 4- 
dstBk(14) local(3 3) found in slot(3)
local(3 3) same slot
+gbk bkID(14) Incoming Locals(5 0xf): 2+ 0+ 13+ 3+ 4- 
bkID(13) local(4 #4)  not ordered
bestLocal(4) bestLocalScore(24)
-bk  bkID(13) Incoming Locals(6 0xf): 2+ 0+ 13+ 3+ 4- 14- 
+bk  bkID(13) Incoming Locals(6 0x1f): 2+ 0+ 13+ 3+ 4+ 14- 
-gbk bkID(14) Incoming Locals(5 0xf): 2+ 0+ 13+ 3+ 4- 
+gbk bkID(14) Incoming Locals(5 0x1f): 2+ 0+ 13+ 3+ 4+ 
bkID(13) local(4 #4)  ordered in goalBk(14)
-bk  bkID(13) Incoming Locals(6 0x1f): 2+ 0+ 13+ 3+ 4+ 14- 
dstBk(13) local(4 4) found in slot(4)
local(4 4) same slot
+bk  bkID(13) Incoming Locals(6 0x1f): 2+ 0+ 13+ 3+ 4+ 14- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
-gbk bkID(14) Incoming Locals(5 0x1f): 2+ 0+ 13+ 3+ 4+ 
dstBk(14) local(4 4) found in slot(4)
local(4 4) same slot
+gbk bkID(14) Incoming Locals(5 0x1f): 2+ 0+ 13+ 3+ 4+ 
bkID(13) local(5 #14)  not found in goalBk
bkID(13) local(0 #2)  not found in goalBk
bkID(13) local(1 #0)  ordered in goalBk(9)
-bk  bkID(13) Incoming Locals(6 0x1f): 2+ 0+ 13+ 3+ 4+ 14- 
dstBk(13) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(13) Incoming Locals(6 0x1f): 2+ 0+ 13+ 3+ 4+ 14- 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
bkID(13) local(2 #13)  not found in goalBk
bkID(13) local(3 #3)  not found in goalBk
bkID(13) local(4 #4)  not found in goalBk
bkID(13) local(5 #14)  not found in goalBk
bkID(9) local(1 #0)  ordered in goalBk(14)
-bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
 ordered in bk
-gbk bkID(14) Incoming Locals(5 0x1f): 2+ 0+ 13+ 3+ 4+ 
dstBk(14) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(14) Incoming Locals(5 0x1f): 2+ 0+ 13+ 3+ 4+ 
bkID(9) local(1 #0)  not found in goalBk
bkID(9) local(1 #0)  ordered in goalBk(9)
-bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(9) Incoming Locals(2 0x2): <null> 0+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
dstBk(9) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(9) Incoming Locals(2 0x2): <null> 0+ 
bkID(9) local(1 #0)  not found in goalBk
Popping blockID(9)
bkID(3) local(0 #0)  not ordered
bestLocal(0) bestLocalScore(24)
-bk  bkID(3) Incoming Locals(2 0x0): 0- 1- 
+bk  bkID(3) Incoming Locals(2 0x1): 0+ 1- 
-gbk bkID(4) Incoming Locals(2 0x0): 0- 1- 
+gbk bkID(4) Incoming Locals(2 0x1): 0+ 1- 
-gbk bkID(5) Incoming Locals(2 0x0): 0- 1- 
+gbk bkID(5) Incoming Locals(2 0x1): 0+ 1- 
bkID(3) local(0 #0)  ordered in goalBk(5)
-bk  bkID(3) Incoming Locals(2 0x1): 0+ 1- 
dstBk(3) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(3) Incoming Locals(2 0x1): 0+ 1- 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x1): 0+ 1- 
dstBk(4) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(4) Incoming Locals(2 0x1): 0+ 1- 
-gbk bkID(5) Incoming Locals(2 0x1): 0+ 1- 
dstBk(5) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(5) Incoming Locals(2 0x1): 0+ 1- 
bkID(3) local(1 #1)  not ordered
bestLocal(1) bestLocalScore(24)
-bk  bkID(3) Incoming Locals(2 0x1): 0+ 1- 
+bk  bkID(3) Incoming Locals(2 0x3): 0+ 1+ 
-gbk bkID(4) Incoming Locals(2 0x1): 0+ 1- 
+gbk bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
-gbk bkID(5) Incoming Locals(2 0x1): 0+ 1- 
+gbk bkID(5) Incoming Locals(2 0x3): 0+ 1+ 
bkID(3) local(1 #1)  ordered in goalBk(5)
-bk  bkID(3) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(3) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(3) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(4) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
-gbk bkID(5) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(5) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(5) Incoming Locals(2 0x3): 0+ 1+ 
bkID(3) local(0 #0)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(3) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(3) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(4) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
bkID(3) local(1 #1)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(3) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(3) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(4) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
bkID(4) local(0 #0)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(4) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(5) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(5) Incoming Locals(2 0x3): 0+ 1+ 
bkID(4) local(1 #1)  ordered in goalBk(5)
-bk  bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(4) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(5) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(5) Incoming Locals(2 0x3): 0+ 1+ 
bkID(1) local(0 #0)  ordered in goalBk(3)
-bk  bkID(1) Incoming Locals(2 0x0): 0- 1- 
dstBk(1) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(1) Incoming Locals(2 0x1): 0+ 1- 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(4) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
-gbk bkID(3) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(3) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(3) Incoming Locals(2 0x3): 0+ 1+ 
bkID(1) local(1 #1)  ordered in goalBk(3)
-bk  bkID(1) Incoming Locals(2 0x1): 0+ 1- 
dstBk(1) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(4) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
-gbk bkID(3) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(3) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(3) Incoming Locals(2 0x3): 0+ 1+ 
bkID(1) local(0 #0)  ordered in goalBk(4)
-bk  bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(1) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(4) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
bkID(1) local(1 #1)  ordered in goalBk(4)
-bk  bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(1) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(4) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
bkID(4) local(0 #0)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(4) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(3) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(3) Incoming Locals(2 0x3): 0+ 1+ 
bkID(4) local(1 #1)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(4) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(3) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(3) Incoming Locals(2 0x3): 0+ 1+ 
pre  bkID(0) Incoming Locals(1 0x0): 0- 
local(#0) swapped with local(#2)
post bkID(0) Incoming Locals(3 0x4): <null> <null> 0+ 
pre  bkID(2) Incoming Locals(3 0x4): 9- <null> <null> 
local(#0) swapped with local(#0)
post bkID(2) Incoming Locals(3 0x5): 9+ <null> <null> 
pre  bkID(13) Incoming Locals(6 0x1f): 2+ 0+ 13+ 3+ 4+ 14- 
local(#5) swapped with local(#5)
post bkID(13) Incoming Locals(6 0x3f): 2+ 0+ 13+ 3+ 4+ 14+ 

#################################################

The maximum node counts per root node are 16
IR block list contains 23 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 23 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x4
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:100)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<0>  (0x9541c8):    iconst_m1 
<1>  (0x9541c9):    istore 5
<3>  (0x9541cb):    aload_0 
<4>  (0x9541cc):    getfield_quick #3
<7>  (0x9541cf):    istore 7
<9>  (0x9541d1):    aload_0 
<10>  (0x9541d2):    getfield_quick #4
<13>  (0x9541d5):    istore 8
<15>  (0x9541d7):    new_quick #36 <com.sun.mep.bench.Chess.GameState>
<18>  (0x9541da):    dup 
<19>  (0x9541db):    aload_0 
<20>  (0x9541dc):    agetfield_quick #5
<23>  (0x9541df):    invokenonvirtual_quick #37 <com.sun.mep.bench.Chess.GameState.<init>(Lcom/sun/mep/bench/Chess/ChessGame;)V>
<26>  (0x9541e2):    astore 10
<28>  (0x9541e4):    new_quick #38 <com.sun.mep.bench.Chess.Move>
<31>  (0x9541e7):    dup 
<32>  (0x9541e8):    invokenonvirtual_quick #39 <com.sun.mep.bench.Chess.Move.<init>()V>
<35>  (0x9541eb):    astore 11
<37>  (0x9541ed):    iconst_0 
<38>  (0x9541ee):    istore 12
<40>  (0x9541f0):    iload_2 
<41>  (0x9541f1):    aload_0 
<42>  (0x9541f2):    agetfield_quick #5
<45>  (0x9541f5):    getfield_quick #7
<48>  (0x9541f8):    if_icmple <71>
<51>  (0x9541fb):    aload_0 
<52>  (0x9541fc):    getfield #4 <com.sun.mep.bench.Chess.AlphaBeta.compMover:Lcom/sun/mep/bench/Chess/CompMover;>
<55>  (0x9541ff):    getfield #41 <com.sun.mep.bench.Chess.CompMover.quiesence:Lcom/sun/mep/bench/Chess/Quiesence;>
<58>  (0x954202):    aload_1 
<59>  (0x954203):    aload_0 
<60>  (0x954204):    getfield #12 <com.sun.mep.bench.Chess.AlphaBeta.player:I>
<63>  (0x954207):    invokevirtual #42 <com.sun.mep.bench.Chess.Quiesence.UnstableSearch(Lcom/sun/mep/bench/Chess/GameState;I)Ljava/util/Vector;>
<66>  (0x95420a):    astore 9
<68>  (0x95420c):    goto <128>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(3)
 
Incoming Locals(3): 
	<null>
	<null>
	local(0)	ID(3)
 
Assigned Locals(7): 
	ASSIGN(41): local(5)	ID(40)	rhsID(2)
 	ASSIGN(43): local(7)	ID(42)	rhsID(6)
 	ASSIGN(46): local(8)	ID(45)	rhsID(9)
 	ASSIGN(49): local(10)	ID(48)	rhsID(12)
 	ASSIGN(51): local(11)	ID(50)	rhsID(24)
 	ASSIGN(53): local(12)	ID(52)	rhsID(30)
 	ASSIGN(77): local(9)	ID(76)	rhsID(73)
 
Successor Blocks(2): 
	ID(1) LocalOrder(1) AssignOrder(6) RefsOK(0) Locals(0 1 <null>)
	ID(2) LocalOrder(1) AssignOrder(7) RefsOK(0) Locals(9 <null> <null>)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 6) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 44) FETCH (32-bit field) 
         <(ID: 5) FIELD_REF (32-bit field) 
            <(ID: 3) IDENTITY (reference)  (ref count: 6)
               <(ID: 10) LOCAL (reference)   0>
            <(ID: 4) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 9) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 47) FETCH (32-bit field) 
         <(ID: 8) FIELD_REF (32-bit field) 
            <(ID: 3) IDENTITY (reference)  (ref count: 6)
            <(ID: 7) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 12) IDENTITY (reference)  (ref count: 3)
      <(ID: 21) NEW_OBJECT (reference) 
         <(ID: 11) CONST_CB (address field)  (com.sun.mep.bench.Chess.GameState)

   <(ID: 15) IDENTITY (reference)  (ref count: 2)
      <(ID: 22) FETCH (reference) 
         <(ID: 14) FIELD_REF (reference) 
            <(ID: 3) IDENTITY (reference)  (ref count: 6)
            <(ID: 13) CONST_FIELD_OFFSET (NONE)  (5)

   <(ID: 20) INVOKE (v) 
      <(ID: 19) PARAMETER (reference) 
         <(ID: 12) IDENTITY (reference)  (ref count: 3)
         <(ID: 18) PARAMETER (reference) 
            <(ID: 15) IDENTITY (reference)  (ref count: 2)
            <(ID: 17) NULL_PARAMETER (NONE) 
      <(ID: 16) CONST_MB (address field)  (com.sun.mep.bench.Chess.GameState.<init>(Lcom/sun/mep/bench/Chess/ChessGame;)V)

   <(ID: 24) IDENTITY (reference)  (ref count: 3)
      <(ID: 29) NEW_OBJECT (reference) 
         <(ID: 23) CONST_CB (address field)  (com.sun.mep.bench.Chess.Move)

   <(ID: 28) INVOKE (v) 
      <(ID: 27) PARAMETER (reference) 
         <(ID: 24) IDENTITY (reference)  (ref count: 3)
         <(ID: 26) NULL_PARAMETER (NONE) 
      <(ID: 25) CONST_MB (address field)  (com.sun.mep.bench.Chess.Move.<init>()V)

   <(ID: 34) IDENTITY (reference)  (ref count: 2)
      <(ID: 38) FETCH (reference) 
         <(ID: 33) FIELD_REF (reference) 
            <(ID: 3) IDENTITY (reference)  (ref count: 6)
            <(ID: 32) CONST_FIELD_OFFSET (NONE)  (5)

   <(ID: 37) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 54) FETCH (32-bit field) 
         <(ID: 36) FIELD_REF (32-bit field) 
            <(ID: 34) IDENTITY (reference)  (ref count: 2)
            <(ID: 35) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 41) ASSIGN (int)  (assignIdx: 0)
      <(ID: 40) LOCAL (int)   5>
      <(ID: 2) CONST_JAVA_NUMERIC32 (int)  (-1)

   <(ID: 43) ASSIGN (32-bit field)  (assignIdx: 1)
      <(ID: 42) LOCAL (32-bit field)   7>
      <(ID: 6) IDENTITY (32-bit field)  (ref count: 2)

   <(ID: 46) ASSIGN (32-bit field)  (assignIdx: 2)
      <(ID: 45) LOCAL (32-bit field)   8>
      <(ID: 9) IDENTITY (32-bit field)  (ref count: 2)

   <(ID: 49) ASSIGN (reference)  (assignIdx: 3)
      <(ID: 48) LOCAL (reference)   10>
      <(ID: 12) IDENTITY (reference)  (ref count: 3)

   <(ID: 51) ASSIGN (reference)  (assignIdx: 4)
      <(ID: 50) LOCAL (reference)   11>
      <(ID: 24) IDENTITY (reference)  (ref count: 3)

   <(ID: 53) ASSIGN (int)  (assignIdx: 5)
      <(ID: 52) LOCAL (int)   12>
      <(ID: 30) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 39) BCOND (int) 
   target: (BlockID: 1 BlockPC: 71)
   condition: LE
   flags: 0
      <(ID: 31) LOCAL (int)   2>
      <(ID: 37) IDENTITY (32-bit field)  (ref count: 2)


   <(ID: 57) IDENTITY (reference)  (ref count: 2)
      <(ID: 61) FETCH (reference) 
         <(ID: 56) FIELD_REF (reference) 
            <(ID: 3) IDENTITY (reference)  (ref count: 6)
            <(ID: 55) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 60) IDENTITY (reference)  (ref count: 3)
      <(ID: 74) FETCH (reference) 
         <(ID: 59) FIELD_REF (reference) 
            <(ID: 57) IDENTITY (reference)  (ref count: 2)
            <(ID: 58) CONST_FIELD_OFFSET (NONE)  (6)

   <(ID: 65) IDENTITY (int)  (ref count: 2)
      <(ID: 75) FETCH (int) 
         <(ID: 64) FIELD_REF (int) 
            <(ID: 3) IDENTITY (reference)  (ref count: 6)
            <(ID: 63) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 73) IDENTITY (reference)  (ref count: 2)
      <(ID: 78) INVOKE (reference) 
         <(ID: 70) PARAMETER (reference) 
            <(ID: 60) IDENTITY (reference)  (ref count: 3)
            <(ID: 69) PARAMETER (reference) 
               <(ID: 62) LOCAL (reference)   1>
               <(ID: 68) PARAMETER (int) 
                  <(ID: 65) IDENTITY (int)  (ref count: 2)
                  <(ID: 67) NULL_PARAMETER (NONE) 
         <(ID: 72) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 71) GET_VTBL (NONE) 
               <(ID: 60) IDENTITY (reference)  (ref count: 3)
            <(ID: 66) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 77) ASSIGN (reference)  (assignIdx: 6)
      <(ID: 76) LOCAL (reference)   9>
      <(ID: 73) IDENTITY (reference)  (ref count: 2)

   <(ID: 79) GOTO (NONE) 
   target: (BlockID: 2 BlockPC: 128)


*************************************************
*
* (block ID:1 block PC:71 )
* IR root list contains 5 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x7
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:113)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<71>  (0x95420f):    aload_0 
<72>  (0x954210):    getfield_quick #7
<75>  (0x954213):    iconst_1 
<76>  (0x954214):    if_icmpne <88>
<79>  (0x954217):    aload_0 
<80>  (0x954218):    getfield_quick #11
<83>  (0x95421b):    bipush 98
<85>  (0x95421d):    if_icmpeq <105>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(81)
 
Incoming Locals(3): 
	local(0)	ID(81)
 	local(1)	ID(200)
 	<null>

Successor Blocks(2): 
	ID(3) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(0 1)
	ID(4) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(0 1)

   <(ID: 80) MAP_PC (NONE)   71>

   <(ID: 84) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 87) FETCH (32-bit field) 
         <(ID: 83) FIELD_REF (32-bit field) 
            <(ID: 81) IDENTITY (reference)  (ref count: 2)
               <(ID: 91) LOCAL (reference)   0>
            <(ID: 82) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 86) BCOND (int) 
   target: (BlockID: 3 BlockPC: 88)
   condition: NE
   flags: 0
      <(ID: 84) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 85) CONST_JAVA_NUMERIC32 (int)  (1)


   <(ID: 90) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 94) FETCH (32-bit field) 
         <(ID: 89) FIELD_REF (32-bit field) 
            <(ID: 81) IDENTITY (reference)  (ref count: 2)
            <(ID: 88) CONST_FIELD_OFFSET (NONE)  (11)

   <(ID: 93) BCOND (int) 
   target: (BlockID: 4 BlockPC: 105)
   condition: EQ
   flags: 0
      <(ID: 90) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 92) CONST_JAVA_NUMERIC32 (int)  (98)



*************************************************
*
* (block ID:3 block PC:88 )
* IR root list contains 5 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:113)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<88>  (0x954220):    aload_0 
<89>  (0x954221):    getfield_quick #7
<92>  (0x954224):    iconst_m1 
<93>  (0x954225):    if_icmpne <118>
<96>  (0x954228):    aload_0 
<97>  (0x954229):    getfield_quick #11
<100>  (0x95422c):    bipush 119
<102>  (0x95422e):    if_icmpne <118>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(149)
 
Incoming Locals(2): 
	local(0)	ID(149)
 	local(1)	ID(200)
 
Successor Blocks(2): 
	ID(5) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(0 1)
	ID(4) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(0 1)

   <(ID: 148) MAP_PC (NONE)   88>

   <(ID: 152) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 155) FETCH (32-bit field) 
         <(ID: 151) FIELD_REF (32-bit field) 
            <(ID: 149) IDENTITY (reference)  (ref count: 2)
               <(ID: 159) LOCAL (reference)   0>
            <(ID: 150) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 154) BCOND (int) 
   target: (BlockID: 5 BlockPC: 118)
   condition: NE
   flags: 0
      <(ID: 152) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 153) CONST_JAVA_NUMERIC32 (int)  (-1)


   <(ID: 158) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 162) FETCH (32-bit field) 
         <(ID: 157) FIELD_REF (32-bit field) 
            <(ID: 149) IDENTITY (reference)  (ref count: 2)
            <(ID: 156) CONST_FIELD_OFFSET (NONE)  (11)

   <(ID: 161) BCOND (int) 
   target: (BlockID: 5 BlockPC: 118)
   condition: NE
   flags: 0
      <(ID: 158) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 160) CONST_JAVA_NUMERIC32 (int)  (119)



*************************************************
*
* (block ID:4 block PC:105 )
* IR root list contains 5 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:115)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<105>  (0x954231):    aload_0 
<106>  (0x954232):    agetfield_quick #2
<109>  (0x954235):    aload_1 
<110>  (0x954236):    invokevirtual_quick_w #43 <com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;>
<113>  (0x954239):    astore 9
<115>  (0x95423b):    goto <128>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(164)
 	local(1)	ID(168)
 
Incoming Locals(2): 
	local(0)	ID(164)
 	local(1)	ID(168)
 
Assigned Locals(1): 
	ASSIGN(178): local(9)	ID(177)	rhsID(175)
 
Successor Blocks(1): 
	ID(2) LocalOrder(2) AssignOrder(1) RefsOK(0) Locals(9 <null> <null>)

   <(ID: 163) MAP_PC (NONE)   105>

   <(ID: 167) IDENTITY (reference)  (ref count: 3)
      <(ID: 176) FETCH (reference) 
         <(ID: 166) FIELD_REF (reference) 
            <(ID: 164) LOCAL (reference)   0>
            <(ID: 165) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 175) IDENTITY (reference)  (ref count: 2)
      <(ID: 179) INVOKE (reference) 
         <(ID: 172) PARAMETER (reference) 
            <(ID: 167) IDENTITY (reference)  (ref count: 3)
            <(ID: 171) PARAMETER (reference) 
               <(ID: 168) LOCAL (reference)   1>
               <(ID: 170) NULL_PARAMETER (NONE) 
         <(ID: 174) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 173) GET_VTBL (NONE) 
               <(ID: 167) IDENTITY (reference)  (ref count: 3)
            <(ID: 169) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 13)

   <(ID: 178) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 177) LOCAL (reference)   9>
      <(ID: 175) IDENTITY (reference)  (ref count: 2)

   <(ID: 180) GOTO (NONE) 
   target: (BlockID: 2 BlockPC: 128)


*************************************************
*
* (block ID:5 block PC:118 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:119)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<118>  (0x95423e):    aload_0 
<119>  (0x95423f):    agetfield_quick #2
<122>  (0x954242):    aload_1 
<123>  (0x954243):    invokevirtual_quick_w #44 <com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;>
<126>  (0x954246):    astore 9
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(196)
 	local(1)	ID(200)
 
Incoming Locals(2): 
	local(0)	ID(196)
 	local(1)	ID(200)
 
Assigned Locals(1): 
	ASSIGN(210): local(9)	ID(209)	rhsID(207)
 
Successor Blocks(1): 
	ID(2) LocalOrder(2) AssignOrder(1) RefsOK(0) Locals(9 <null> <null>)

   <(ID: 195) MAP_PC (NONE)   118>

   <(ID: 199) IDENTITY (reference)  (ref count: 3)
      <(ID: 208) FETCH (reference) 
         <(ID: 198) FIELD_REF (reference) 
            <(ID: 196) LOCAL (reference)   0>
            <(ID: 197) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 207) IDENTITY (reference)  (ref count: 2)
      <(ID: 211) INVOKE (reference) 
         <(ID: 204) PARAMETER (reference) 
            <(ID: 199) IDENTITY (reference)  (ref count: 3)
            <(ID: 203) PARAMETER (reference) 
               <(ID: 200) LOCAL (reference)   1>
               <(ID: 202) NULL_PARAMETER (NONE) 
         <(ID: 206) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 205) GET_VTBL (NONE) 
               <(ID: 199) IDENTITY (reference)  (ref count: 3)
            <(ID: 201) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 14)

   <(ID: 210) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 209) LOCAL (reference)   9>
      <(ID: 207) IDENTITY (reference)  (ref count: 2)


*************************************************
*
* (block ID:2 block PC:128 )
* IR root list contains 22 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x5
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:122)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<128>  (0x954248):    aload 9
<130>  (0x95424a):    invokevirtual_quick_w #32 <java.util.Vector.size()I>
<133>  (0x95424d):    istore 5
<135>  (0x95424f):    aload_0 
<136>  (0x954250):    iload_2 
<137>  (0x954251):    iconst_1 
<138>  (0x954252):    iadd 
<139>  (0x954253):    aload_0 
<140>  (0x954254):    agetfield_quick #5
<143>  (0x954257):    getfield_quick #7
<146>  (0x95425a):    if_icmple <174>
<149>  (0x95425d):    iload_2 
<150>  (0x95425e):    iconst_1 
<151>  (0x95425f):    iadd 
<152>  (0x954260):    aload_0 
<153>  (0x954261):    agetfield_quick #5
<156>  (0x954264):    getfield_quick #7
<159>  (0x954267):    aload_0 
<160>  (0x954268):    agetfield_quick #5
<163>  (0x95426b):    getfield_quick #6
<166>  (0x95426e):    iadd 
<167>  (0x95426f):    if_icmpgt <174>
<170>  (0x954272):    iconst_1 
<171>  (0x954273):    goto <175>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(9)	ID(96)
 
Incoming Locals(3): 
	local(9)	ID(96)
 	<null>
	<null>

Assigned Locals(1): 
	ASSIGN(117): local(5)	ID(116)	rhsID(102)
 
Successor Blocks(2): 
	ID(6) LocalOrder(1) AssignOrder(1) RefsOK(0) Locals()
	ID(7) LocalOrder(1) AssignOrder(1) RefsOK(0) Locals()

   <(ID: 95) MAP_PC (NONE)   128>

   <(ID: 102) IDENTITY (int)  (ref count: 2)
      <(ID: 118) INVOKE (int) 
         <(ID: 99) PARAMETER (reference) 
            <(ID: 96) IDENTITY (reference)  (ref count: 2)
               <(ID: 103) LOCAL (reference)   9>
            <(ID: 98) NULL_PARAMETER (NONE) 
         <(ID: 101) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 100) GET_VTBL (NONE) 
               <(ID: 96) IDENTITY (reference)  (ref count: 2)
            <(ID: 97) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 12)

   <(ID: 110) IDENTITY (reference)  (ref count: 3)
      <(ID: 114) FETCH (reference) 
         <(ID: 109) FIELD_REF (reference) 
            <(ID: 104) IDENTITY (reference)  (ref count: 4)
               <(ID: 121) LOCAL (reference)   0>
            <(ID: 108) CONST_FIELD_OFFSET (NONE)  (5)

   <(ID: 113) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 124) FETCH (32-bit field) 
         <(ID: 112) FIELD_REF (32-bit field) 
            <(ID: 110) IDENTITY (reference)  (ref count: 3)
            <(ID: 111) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 117) ASSIGN (int)  (assignIdx: 0)
      <(ID: 116) LOCAL (int)   5>
      <(ID: 102) IDENTITY (int)  (ref count: 2)

   <(ID: 120) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 104) IDENTITY (reference)  (ref count: 4)


   <(ID: 107) IDENTITY (int)  (ref count: 2)
      <(ID: 123) ADD (int) 
         <(ID: 105) IDENTITY (int)  (ref count: 2)
            <(ID: 134) LOCAL (int)   2>
         <(ID: 106) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 122) LOAD_PHIS (NONE) 

   <(ID: 115) BCOND (int) 
   target: (BlockID: 6 BlockPC: 174)
   condition: LE
   flags: 0
      <(ID: 107) IDENTITY (int)  (ref count: 2)
      <(ID: 113) IDENTITY (32-bit field)  (ref count: 3)


   <(ID: 125) RELEASE_PHIS (NONE) 

   <(ID: 130) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 135) FETCH (32-bit field) 
         <(ID: 129) FIELD_REF (32-bit field) 
            <(ID: 110) IDENTITY (reference)  (ref count: 3)
            <(ID: 128) CONST_FIELD_OFFSET (NONE)  (6)

   <(ID: 133) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 104) IDENTITY (reference)  (ref count: 4)


   <(ID: 127) IDENTITY (int)  (ref count: 2)
      <(ID: 137) ADD (int) 
         <(ID: 105) IDENTITY (int)  (ref count: 2)
         <(ID: 126) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 131) IDENTITY (int)  (ref count: 2)
      <(ID: 138) ADD (int) 
         <(ID: 113) IDENTITY (32-bit field)  (ref count: 3)
         <(ID: 130) IDENTITY (32-bit field)  (ref count: 2)

   <(ID: 136) LOAD_PHIS (NONE) 

   <(ID: 132) BCOND (int) 
   target: (BlockID: 6 BlockPC: 174)
   condition: GT
   flags: 0
      <(ID: 127) IDENTITY (int)  (ref count: 2)
      <(ID: 131) IDENTITY (int)  (ref count: 2)


   <(ID: 139) RELEASE_PHIS (NONE) 

   <(ID: 142) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 104) IDENTITY (reference)  (ref count: 4)


   <(ID: 144) DEFINE (int) 
   spillLocation: 1
   registerSpillOk: 1
   operand:       <(ID: 140) CONST_JAVA_NUMERIC32 (int)  (1)


   <(ID: 145) LOAD_PHIS (NONE) 

   <(ID: 146) RELEASE_PHIS (NONE) 

   <(ID: 147) GOTO (NONE) 
   target: (BlockID: 7 BlockPC: 175)


*************************************************
*
* (block ID:6 block PC:174 )
* IR root list contains 5 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:124)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<174>  (0x954276):    iconst_0 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 
*************************************************

Number and size of USED nodes in phi array: 1 1

Successor Blocks(1): 
	ID(7) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 181) MAP_PC (NONE)   174>

   <(ID: 183) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 119) USED (reference) 
      spillLocation: 0
      registerSpillOk: 1



   <(ID: 184) DEFINE (int) 
   spillLocation: 1
   registerSpillOk: 1
   operand:       <(ID: 182) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 185) LOAD_PHIS (NONE) 

   <(ID: 186) RELEASE_PHIS (NONE) 


*************************************************
*
* (block ID:7 block PC:175 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:124)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<175>  (0x954277):    putfield_quick #9
<178>  (0x95427a):    iconst_0 
<179>  (0x95427b):    istore 6
<181>  (0x95427d):    goto <646>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 
*************************************************

Number and size of USED nodes in phi array: 2 2

Assigned Locals(1): 
	ASSIGN(193): local(6)	ID(192)	rhsID(191)
 
Successor Blocks(1): 
	ID(8) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(11 0 6 5 12)

   <(ID: 187) MAP_PC (NONE)   175>

   <(ID: 190) ASSIGN (32-bit field) 
      <(ID: 189) FIELD_REF (32-bit field) 
         <(ID: 141) USED (reference) 
         spillLocation: 0
         registerSpillOk: 1

         <(ID: 188) CONST_FIELD_OFFSET (NONE)  (9)
      <(ID: 143) USED (int) 
      spillLocation: 1
      registerSpillOk: 1


   <(ID: 193) ASSIGN (int)  (assignIdx: 0)
      <(ID: 192) LOCAL (int)   6>
      <(ID: 191) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 194) GOTO (NONE) 
   target: (BlockID: 8 BlockPC: 646)


*************************************************
*
* (block ID:9 block PC:184 )
* IR root list contains 13 root nodes: in block 
* flags: 0x361
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x2
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:130)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<184>  (0x954280):    aload_0 
<185>  (0x954281):    dup 
<186>  (0x954282):    getfield_quick #6
<189>  (0x954285):    iconst_1 
<190>  (0x954286):    iadd 
<191>  (0x954287):    putfield_quick #6
<194>  (0x95428a):    aload_0 
<195>  (0x95428b):    getfield_quick #6
<198>  (0x95428e):    sipush 1000
<201>  (0x954291):    irem 
<202>  (0x954292):    ifne <242>
<205>  (0x954295):    aload_0 
<206>  (0x954296):    getfield #7 <com.sun.mep.bench.Chess.AlphaBeta.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<209>  (0x954299):    getfield #48 <com.sun.mep.bench.Chess.Game.debugTextManager:Lcom/sun/mep/bench/Chess/DebugTextManager;>
<212>  (0x95429c):    new #19 <java.lang.StringBuffer>
<215>  (0x95429f):    dup 
<216>  (0x9542a0):    invokespecial #20 <java.lang.StringBuffer.<init>()V>
<219>  (0x9542a3):    ldc #49
<221>  (0x9542a5):    invokevirtual #22 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<224>  (0x9542a8):    aload_0 
<225>  (0x9542a9):    getfield #2 <com.sun.mep.bench.Chess.AlphaBeta.cnt:I>
<228>  (0x9542ac):    invokevirtual #29 <java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;>
<231>  (0x9542af):    ldc #50
<233>  (0x9542b1):    invokevirtual #22 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<236>  (0x9542b4):    invokevirtual #25 <java.lang.StringBuffer.toString()Ljava/lang/String;>
<239>  (0x9542b7):    invokevirtual #26 <com.sun.mep.bench.Chess.DebugTextManager.set(Ljava/lang/String;)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(224)
 
Incoming Locals(2): 
	<null>
	local(0)	ID(224)
 
Successor Blocks(1): 
	ID(10) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 223) MAP_PC (NONE)   184>

   <(ID: 227) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 234) FETCH (32-bit field) 
         <(ID: 226) FIELD_REF (32-bit field) 
            <(ID: 224) IDENTITY (reference)  (ref count: 5)
               <(ID: 233) LOCAL (reference)   0>
            <(ID: 225) CONST_FIELD_OFFSET (NONE)  (6)

   <(ID: 232) ASSIGN (32-bit field) 
      <(ID: 231) FIELD_REF (32-bit field) 
         <(ID: 224) IDENTITY (reference)  (ref count: 5)
         <(ID: 230) CONST_FIELD_OFFSET (NONE)  (6)
      <(ID: 229) ADD (int) 
         <(ID: 227) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 228) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 237) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 242) FETCH (32-bit field) 
         <(ID: 236) FIELD_REF (32-bit field) 
            <(ID: 224) IDENTITY (reference)  (ref count: 5)
            <(ID: 235) CONST_FIELD_OFFSET (NONE)  (6)

   <(ID: 239) IDENTITY (int)  (ref count: 2)
      <(ID: 243) REM (int) 
         <(ID: 237) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 238) CONST_JAVA_NUMERIC32 (int)  (1000)

   <(ID: 241) BCOND (int) 
   target: (BlockID: 10 BlockPC: 242)
   condition: NE
   flags: 0
      <(ID: 239) IDENTITY (int)  (ref count: 2)
      <(ID: 240) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 246) IDENTITY (reference)  (ref count: 2)
      <(ID: 250) FETCH (reference) 
         <(ID: 245) FIELD_REF (reference) 
            <(ID: 224) IDENTITY (reference)  (ref count: 5)
            <(ID: 244) CONST_FIELD_OFFSET (NONE)  (5)

   <(ID: 249) IDENTITY (reference)  (ref count: 3)
      <(ID: 295) FETCH (reference) 
         <(ID: 248) FIELD_REF (reference) 
            <(ID: 246) IDENTITY (reference)  (ref count: 2)
            <(ID: 247) CONST_FIELD_OFFSET (NONE)  (18)

   <(ID: 252) IDENTITY (reference)  (ref count: 3)
      <(ID: 257) NEW_OBJECT (reference) 
         <(ID: 251) CONST_CB (address field)  (java.lang.StringBuffer)

   <(ID: 256) INVOKE (v) 
      <(ID: 255) PARAMETER (reference) 
         <(ID: 252) IDENTITY (reference)  (ref count: 3)
         <(ID: 254) NULL_PARAMETER (NONE) 
      <(ID: 253) CONST_MB (address field)  (java.lang.StringBuffer.<init>()V)

   <(ID: 263) IDENTITY (reference)  (ref count: 3)
      <(ID: 296) INVOKE (reference) 
         <(ID: 262) PARAMETER (reference) 
            <(ID: 252) IDENTITY (reference)  (ref count: 3)
            <(ID: 261) PARAMETER (reference) 
               <(ID: 258) CONST_STRING_ICELL (reference)  (stringICell 0x90e384)

               <(ID: 260) NULL_PARAMETER (NONE) 
         <(ID: 259) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)

   <(ID: 266) IDENTITY (int)  (ref count: 2)
      <(ID: 297) FETCH (int) 
         <(ID: 265) FIELD_REF (int) 
            <(ID: 224) IDENTITY (reference)  (ref count: 5)
            <(ID: 264) CONST_FIELD_OFFSET (NONE)  (6)

   <(ID: 294) INVOKE (v) 
      <(ID: 291) PARAMETER (reference) 
         <(ID: 249) IDENTITY (reference)  (ref count: 3)
         <(ID: 290) PARAMETER (reference) 
            <(ID: 287) INVOKE (reference) 
               <(ID: 284) PARAMETER (reference) 
                  <(ID: 281) IDENTITY (reference)  (ref count: 2)
                     <(ID: 299) INVOKE (reference) 
                        <(ID: 278) PARAMETER (reference) 
                           <(ID: 273) IDENTITY (reference)  (ref count: 2)
                              <(ID: 298) INVOKE (reference) 
                                 <(ID: 270) PARAMETER (reference) 
                                    <(ID: 263) IDENTITY (reference)  (ref count: 3)
                                    <(ID: 269) PARAMETER (int) 
                                       <(ID: 266) IDENTITY (int)  (ref count: 2)
                                       <(ID: 268) NULL_PARAMETER (NONE) 
                                 <(ID: 272) SEQUENCE_R (address field) 
                                    <(ID: 271) NULL_CHECK (reference) 
                                       <(ID: 263) IDENTITY (reference)  (ref count: 3)
                                    <(ID: 267) CONST_MB (address field)  (java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;)
                           <(ID: 277) PARAMETER (reference) 
                              <(ID: 274) CONST_STRING_ICELL (reference)  (stringICell 0x90dca4)

                              <(ID: 276) NULL_PARAMETER (NONE) 
                        <(ID: 280) SEQUENCE_R (address field) 
                           <(ID: 279) NULL_CHECK (reference) 
                              <(ID: 273) IDENTITY (reference)  (ref count: 2)
                           <(ID: 275) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                  <(ID: 283) NULL_PARAMETER (NONE) 
               <(ID: 286) SEQUENCE_R (address field) 
                  <(ID: 285) NULL_CHECK (reference) 
                     <(ID: 281) IDENTITY (reference)  (ref count: 2)
                  <(ID: 282) CONST_MB (address field)  (java.lang.StringBuffer.toString()Ljava/lang/String;)
            <(ID: 289) NULL_PARAMETER (NONE) 
      <(ID: 293) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 292) GET_VTBL (NONE) 
            <(ID: 249) IDENTITY (reference)  (ref count: 3)
         <(ID: 288) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)


*************************************************
*
* (block ID:10 block PC:242 )
* IR root list contains 31 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:133)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<242>  (0x9542ba):    aconst_null 
<243>  (0x9542bb):    astore 13
<245>  (0x9542bd):    new_quick #38 <com.sun.mep.bench.Chess.Move>
<248>  (0x9542c0):    dup 
<249>  (0x9542c1):    invokenonvirtual_quick #39 <com.sun.mep.bench.Chess.Move.<init>()V>
<252>  (0x9542c4):    astore 14
<254>  (0x9542c6):    aload 10
<256>  (0x9542c8):    aload_1 
<257>  (0x9542c9):    invokevirtual_quick_w #51 <com.sun.mep.bench.Chess.GameState.myClone(Lcom/sun/mep/bench/Chess/GameState;)V>
<260>  (0x9542cc):    aload 9
<262>  (0x9542ce):    iload 6
<264>  (0x9542d0):    invokevirtual_quick_w #34 <java.util.Vector.elementAt(I)Ljava/lang/Object;>
<267>  (0x9542d3):    checkcast_quick #52 <com.sun.mep.bench.Chess.Point>
<270>  (0x9542d6):    astore 15
<272>  (0x9542d8):    aload 14
<274>  (0x9542da):    aload 15
<276>  (0x9542dc):    aputfield_quick #3
<279>  (0x9542df):    aload_0 
<280>  (0x9542e0):    agetfield_quick #2
<283>  (0x9542e3):    aload_1 
<284>  (0x9542e4):    aload 14
<286>  (0x9542e6):    aload_0 
<287>  (0x9542e7):    getfield_quick #7
<290>  (0x9542ea):    invokevirtual_quick_w #54 <com.sun.mep.bench.Chess.CompMover.applyMove(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/Move;I)Lcom/sun/mep/bench/Chess/GameState;>
<293>  (0x9542ed):    astore 13
<295>  (0x9542ef):    aload_0 
<296>  (0x9542f0):    iload_2 
<297>  (0x9542f1):    iconst_1 
<298>  (0x9542f2):    iadd 
<299>  (0x9542f3):    aload_0 
<300>  (0x9542f4):    agetfield_quick #5
<303>  (0x9542f7):    getfield_quick #7
<306>  (0x9542fa):    if_icmple <334>
<309>  (0x9542fd):    iload_2 
<310>  (0x9542fe):    iconst_1 
<311>  (0x9542ff):    iadd 
<312>  (0x954300):    aload_0 
<313>  (0x954301):    agetfield_quick #5
<316>  (0x954304):    getfield_quick #7
<319>  (0x954307):    aload_0 
<320>  (0x954308):    agetfield_quick #5
<323>  (0x95430b):    getfield_quick #6
<326>  (0x95430e):    iadd 
<327>  (0x95430f):    if_icmpgt <334>
<330>  (0x954312):    iconst_1 
<331>  (0x954313):    goto <335>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(3): 
	ASSIGN(367): local(13)	ID(366)	rhsID(351)
 	ASSIGN(370): local(14)	ID(369)	rhsID(303)
 	ASSIGN(372): local(15)	ID(371)	rhsID(329)
 
Successor Blocks(2): 
	ID(11) LocalOrder(0) AssignOrder(3) RefsOK(0) Locals()
	ID(12) LocalOrder(0) AssignOrder(3) RefsOK(0) Locals()

   <(ID: 300) MAP_PC (NONE)   242>

   <(ID: 303) IDENTITY (reference)  (ref count: 5)
      <(ID: 308) NEW_OBJECT (reference) 
         <(ID: 302) CONST_CB (address field)  (com.sun.mep.bench.Chess.Move)

   <(ID: 307) INVOKE (v) 
      <(ID: 306) PARAMETER (reference) 
         <(ID: 303) IDENTITY (reference)  (ref count: 5)
         <(ID: 305) NULL_PARAMETER (NONE) 
      <(ID: 304) CONST_MB (address field)  (com.sun.mep.bench.Chess.Move.<init>()V)

   <(ID: 317) INVOKE (v) 
      <(ID: 314) PARAMETER (reference) 
         <(ID: 309) IDENTITY (reference)  (ref count: 2)
            <(ID: 318) LOCAL (reference)   10>
         <(ID: 313) PARAMETER (reference) 
            <(ID: 310) IDENTITY (reference)  (ref count: 2)
               <(ID: 353) LOCAL (reference)   1>
            <(ID: 312) NULL_PARAMETER (NONE) 
      <(ID: 316) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 315) GET_VTBL (NONE) 
            <(ID: 309) IDENTITY (reference)  (ref count: 2)
         <(ID: 311) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 14)

   <(ID: 329) IDENTITY (reference)  (ref count: 3)
      <(ID: 334) CHECKCAST (reference) 
         <(ID: 327) INVOKE (reference) 
            <(ID: 324) PARAMETER (reference) 
               <(ID: 319) IDENTITY (reference)  (ref count: 2)
                  <(ID: 330) LOCAL (reference)   9>
               <(ID: 323) PARAMETER (int) 
                  <(ID: 320) LOCAL (int)   6>
                  <(ID: 322) NULL_PARAMETER (NONE) 
            <(ID: 326) FETCH_MB_FROM_VTABLE (address field) 
               <(ID: 325) GET_VTBL (NONE) 
                  <(ID: 319) IDENTITY (reference)  (ref count: 2)
               <(ID: 321) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 43)
         <(ID: 328) CONST_CB (address field)  (com.sun.mep.bench.Chess.Point)

   <(ID: 333) ASSIGN (reference) 
      <(ID: 332) FIELD_REF (reference) 
         <(ID: 303) IDENTITY (reference)  (ref count: 5)
         <(ID: 331) CONST_FIELD_OFFSET (NONE)  (3)
      <(ID: 329) IDENTITY (reference)  (ref count: 3)

   <(ID: 338) IDENTITY (reference)  (ref count: 3)
      <(ID: 352) FETCH (reference) 
         <(ID: 337) FIELD_REF (reference) 
            <(ID: 335) IDENTITY (reference)  (ref count: 6)
               <(ID: 342) LOCAL (reference)   0>
            <(ID: 336) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 341) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 354) FETCH (32-bit field) 
         <(ID: 340) FIELD_REF (32-bit field) 
            <(ID: 335) IDENTITY (reference)  (ref count: 6)
            <(ID: 339) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 351) IDENTITY (reference)  (ref count: 2)
      <(ID: 368) INVOKE (reference) 
         <(ID: 348) PARAMETER (reference) 
            <(ID: 338) IDENTITY (reference)  (ref count: 3)
            <(ID: 347) PARAMETER (reference) 
               <(ID: 310) IDENTITY (reference)  (ref count: 2)
               <(ID: 346) PARAMETER (reference) 
                  <(ID: 303) IDENTITY (reference)  (ref count: 5)
                  <(ID: 345) PARAMETER (32-bit field) 
                     <(ID: 341) IDENTITY (32-bit field)  (ref count: 2)
                     <(ID: 344) NULL_PARAMETER (NONE) 
         <(ID: 350) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 349) GET_VTBL (NONE) 
               <(ID: 338) IDENTITY (reference)  (ref count: 3)
            <(ID: 343) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 15)

   <(ID: 360) IDENTITY (reference)  (ref count: 3)
      <(ID: 364) FETCH (reference) 
         <(ID: 359) FIELD_REF (reference) 
            <(ID: 335) IDENTITY (reference)  (ref count: 6)
            <(ID: 358) CONST_FIELD_OFFSET (NONE)  (5)

   <(ID: 363) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 377) FETCH (32-bit field) 
         <(ID: 362) FIELD_REF (32-bit field) 
            <(ID: 360) IDENTITY (reference)  (ref count: 3)
            <(ID: 361) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 367) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 366) LOCAL (reference)   13>
      <(ID: 351) IDENTITY (reference)  (ref count: 2)

   <(ID: 370) ASSIGN (reference)  (assignIdx: 1)
      <(ID: 369) LOCAL (reference)   14>
      <(ID: 303) IDENTITY (reference)  (ref count: 5)

   <(ID: 372) ASSIGN (reference)  (assignIdx: 2)
      <(ID: 371) LOCAL (reference)   15>
      <(ID: 329) IDENTITY (reference)  (ref count: 3)

   <(ID: 374) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 335) IDENTITY (reference)  (ref count: 6)


   <(ID: 357) IDENTITY (int)  (ref count: 2)
      <(ID: 376) ADD (int) 
         <(ID: 355) IDENTITY (int)  (ref count: 2)
            <(ID: 387) LOCAL (int)   2>
         <(ID: 356) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 375) LOAD_PHIS (NONE) 

   <(ID: 365) BCOND (int) 
   target: (BlockID: 11 BlockPC: 334)
   condition: LE
   flags: 0
      <(ID: 357) IDENTITY (int)  (ref count: 2)
      <(ID: 363) IDENTITY (32-bit field)  (ref count: 3)


   <(ID: 378) RELEASE_PHIS (NONE) 

   <(ID: 383) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 388) FETCH (32-bit field) 
         <(ID: 382) FIELD_REF (32-bit field) 
            <(ID: 360) IDENTITY (reference)  (ref count: 3)
            <(ID: 381) CONST_FIELD_OFFSET (NONE)  (6)

   <(ID: 386) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 335) IDENTITY (reference)  (ref count: 6)


   <(ID: 380) IDENTITY (int)  (ref count: 2)
      <(ID: 390) ADD (int) 
         <(ID: 355) IDENTITY (int)  (ref count: 2)
         <(ID: 379) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 384) IDENTITY (int)  (ref count: 2)
      <(ID: 391) ADD (int) 
         <(ID: 363) IDENTITY (32-bit field)  (ref count: 3)
         <(ID: 383) IDENTITY (32-bit field)  (ref count: 2)

   <(ID: 389) LOAD_PHIS (NONE) 

   <(ID: 385) BCOND (int) 
   target: (BlockID: 11 BlockPC: 334)
   condition: GT
   flags: 0
      <(ID: 380) IDENTITY (int)  (ref count: 2)
      <(ID: 384) IDENTITY (int)  (ref count: 2)


   <(ID: 392) RELEASE_PHIS (NONE) 

   <(ID: 395) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 335) IDENTITY (reference)  (ref count: 6)


   <(ID: 397) DEFINE (int) 
   spillLocation: 1
   registerSpillOk: 1
   operand:       <(ID: 393) CONST_JAVA_NUMERIC32 (int)  (1)


   <(ID: 398) LOAD_PHIS (NONE) 

   <(ID: 399) RELEASE_PHIS (NONE) 

   <(ID: 400) GOTO (NONE) 
   target: (BlockID: 12 BlockPC: 335)


*************************************************
*
* (block ID:11 block PC:334 )
* IR root list contains 5 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:147)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<334>  (0x954316):    iconst_0 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 13 14 15 
*************************************************

Number and size of USED nodes in phi array: 1 1

Successor Blocks(1): 
	ID(12) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 401) MAP_PC (NONE)   334>

   <(ID: 403) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 373) USED (reference) 
      spillLocation: 0
      registerSpillOk: 1



   <(ID: 404) DEFINE (int) 
   spillLocation: 1
   registerSpillOk: 1
   operand:       <(ID: 402) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 405) LOAD_PHIS (NONE) 

   <(ID: 406) RELEASE_PHIS (NONE) 


*************************************************
*
* (block ID:12 block PC:335 )
* IR root list contains 13 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:147)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<335>  (0x954317):    putfield_quick #9
<338>  (0x95431a):    aload_0 
<339>  (0x95431b):    getfield_quick #9
<342>  (0x95431e):    ifeq <382>
<345>  (0x954321):    aload_0 
<346>  (0x954322):    aload_0 
<347>  (0x954323):    getfield #4 <com.sun.mep.bench.Chess.AlphaBeta.compMover:Lcom/sun/mep/bench/Chess/CompMover;>
<350>  (0x954326):    getfield #41 <com.sun.mep.bench.Chess.CompMover.quiesence:Lcom/sun/mep/bench/Chess/Quiesence;>
<353>  (0x954329):    aload 13
<355>  (0x95432b):    iconst_m1 
<356>  (0x95432c):    aload_0 
<357>  (0x95432d):    getfield #12 <com.sun.mep.bench.Chess.AlphaBeta.player:I>
<360>  (0x954330):    imul 
<361>  (0x954331):    invokevirtual #42 <com.sun.mep.bench.Chess.Quiesence.UnstableSearch(Lcom/sun/mep/bench/Chess/GameState;I)Ljava/util/Vector;>
<364>  (0x954334):    putfield #3 <com.sun.mep.bench.Chess.AlphaBeta.nextMoves:Ljava/util/Vector;>
<367>  (0x954337):    aload_0 
<368>  (0x954338):    getfield #3 <com.sun.mep.bench.Chess.AlphaBeta.nextMoves:Ljava/util/Vector;>
<371>  (0x95433b):    invokevirtual #32 <java.util.Vector.size()I>
<374>  (0x95433e):    ifne <382>
<377>  (0x954341):    aload_0 
<378>  (0x954342):    iconst_0 
<379>  (0x954343):    putfield #11 <com.sun.mep.bench.Chess.AlphaBeta.quiescent:Z>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 13 14 15 
*************************************************

Number and size of USED nodes in phi array: 2 2

Successor Blocks(1): 
	ID(13) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals(2 0 13 3 4 14)

   <(ID: 407) MAP_PC (NONE)   335>

   <(ID: 410) ASSIGN (32-bit field) 
      <(ID: 409) FIELD_REF (32-bit field) 
         <(ID: 394) USED (reference) 
         spillLocation: 0
         registerSpillOk: 1

         <(ID: 408) CONST_FIELD_OFFSET (NONE)  (9)
      <(ID: 396) USED (int) 
      spillLocation: 1
      registerSpillOk: 1


   <(ID: 414) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 417) FETCH (32-bit field) 
         <(ID: 413) FIELD_REF (32-bit field) 
            <(ID: 411) IDENTITY (reference)  (ref count: 6)
               <(ID: 421) LOCAL (reference)   0>
            <(ID: 412) CONST_FIELD_OFFSET (NONE)  (9)

   <(ID: 416) BCOND (int) 
   target: (BlockID: 13 BlockPC: 382)
   condition: EQ
   flags: 0
      <(ID: 414) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 415) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 420) IDENTITY (reference)  (ref count: 2)
      <(ID: 425) FETCH (reference) 
         <(ID: 419) FIELD_REF (reference) 
            <(ID: 411) IDENTITY (reference)  (ref count: 6)
            <(ID: 418) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 424) IDENTITY (reference)  (ref count: 3)
      <(ID: 440) FETCH (reference) 
         <(ID: 423) FIELD_REF (reference) 
            <(ID: 420) IDENTITY (reference)  (ref count: 2)
            <(ID: 422) CONST_FIELD_OFFSET (NONE)  (6)

   <(ID: 430) IDENTITY (int)  (ref count: 2)
      <(ID: 441) FETCH (int) 
         <(ID: 429) FIELD_REF (int) 
            <(ID: 411) IDENTITY (reference)  (ref count: 6)
            <(ID: 428) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 439) IDENTITY (reference)  (ref count: 2)
      <(ID: 445) INVOKE (reference) 
         <(ID: 436) PARAMETER (reference) 
            <(ID: 424) IDENTITY (reference)  (ref count: 3)
            <(ID: 435) PARAMETER (reference) 
               <(ID: 426) LOCAL (reference)   13>
               <(ID: 434) PARAMETER (int) 
                  <(ID: 431) MUL (int) 
                     <(ID: 430) IDENTITY (int)  (ref count: 2)
                     <(ID: 427) CONST_JAVA_NUMERIC32 (int)  (-1)
                  <(ID: 433) NULL_PARAMETER (NONE) 
         <(ID: 438) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 437) GET_VTBL (NONE) 
               <(ID: 424) IDENTITY (reference)  (ref count: 3)
            <(ID: 432) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 444) ASSIGN (reference) 
      <(ID: 443) FIELD_REF (reference) 
         <(ID: 411) IDENTITY (reference)  (ref count: 6)
         <(ID: 442) CONST_FIELD_OFFSET (NONE)  (20)
      <(ID: 439) IDENTITY (reference)  (ref count: 2)

   <(ID: 448) IDENTITY (reference)  (ref count: 3)
      <(ID: 457) FETCH (reference) 
         <(ID: 447) FIELD_REF (reference) 
            <(ID: 411) IDENTITY (reference)  (ref count: 6)
            <(ID: 446) CONST_FIELD_OFFSET (NONE)  (20)

   <(ID: 454) IDENTITY (int)  (ref count: 2)
      <(ID: 458) INVOKE (int) 
         <(ID: 451) PARAMETER (reference) 
            <(ID: 448) IDENTITY (reference)  (ref count: 3)
            <(ID: 450) NULL_PARAMETER (NONE) 
         <(ID: 453) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 452) GET_VTBL (NONE) 
               <(ID: 448) IDENTITY (reference)  (ref count: 3)
            <(ID: 449) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 12)

   <(ID: 456) BCOND (int) 
   target: (BlockID: 13 BlockPC: 382)
   condition: NE
   flags: 0
      <(ID: 454) IDENTITY (int)  (ref count: 2)
      <(ID: 455) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 462) ASSIGN (int) 
      <(ID: 461) FIELD_REF (int) 
         <(ID: 411) IDENTITY (reference)  (ref count: 6)
         <(ID: 460) CONST_FIELD_OFFSET (NONE)  (9)
      <(ID: 459) CONST_JAVA_NUMERIC32 (int)  (0)


*************************************************
*
* (block ID:13 block PC:382 )
* IR root list contains 12 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3f
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:157)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<382>  (0x954346):    iload_2 
<383>  (0x954347):    aload_0 
<384>  (0x954348):    agetfield_quick #5
<387>  (0x95434b):    getfield_quick #7
<390>  (0x95434e):    if_icmplt <427>
<393>  (0x954351):    aload_0 
<394>  (0x954352):    getfield_quick #9
<397>  (0x954355):    ifne <427>
<400>  (0x954358):    aload 14
<402>  (0x95435a):    aload_0 
<403>  (0x95435b):    agetfield_quick #2
<406>  (0x95435e):    agetfield_quick #4
<409>  (0x954361):    aload 13
<411>  (0x954363):    invokevirtual_quick_w #60 <com.sun.mep.bench.Chess.Evaluator.GetValue(Lcom/sun/mep/bench/Chess/GameState;)I>
<414>  (0x954366):    putfield_quick #2
<417>  (0x954369):    aload 13
<419>  (0x95436b):    aload 10
<421>  (0x95436d):    invokevirtual_quick_w #51 <com.sun.mep.bench.Chess.GameState.myClone(Lcom/sun/mep/bench/Chess/GameState;)V>
<424>  (0x954370):    goto <478>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 13 14 15 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(4): 
	local(2)	ID(464)
 	local(0)	ID(465)
 	local(14)	ID(482)
 	local(13)	ID(490)
 
Incoming Locals(6): 
	local(2)	ID(464)
 	local(0)	ID(465)
 	local(13)	ID(525)
 	local(3)	ID(529)
 	local(4)	ID(530)
 	local(14)	ID(482)
 
Successor Blocks(2): 
	ID(14) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(2 0 13 3 4 <null>)
	ID(15) LocalOrder(4) AssignOrder(0) RefsOK(0) Locals(11 8 6 5 7 14)

   <(ID: 463) MAP_PC (NONE)   382>

   <(ID: 468) IDENTITY (reference)  (ref count: 2)
      <(ID: 472) FETCH (reference) 
         <(ID: 467) FIELD_REF (reference) 
            <(ID: 465) IDENTITY (reference)  (ref count: 3)
               <(ID: 478) LOCAL (reference)   0>
            <(ID: 466) CONST_FIELD_OFFSET (NONE)  (5)

   <(ID: 471) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 474) FETCH (32-bit field) 
         <(ID: 470) FIELD_REF (32-bit field) 
            <(ID: 468) IDENTITY (reference)  (ref count: 2)
            <(ID: 469) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 473) BCOND (int) 
   target: (BlockID: 14 BlockPC: 427)
   condition: LT
   flags: 0
      <(ID: 464) LOCAL (int)   2>
      <(ID: 471) IDENTITY (32-bit field)  (ref count: 2)


   <(ID: 477) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 481) FETCH (32-bit field) 
         <(ID: 476) FIELD_REF (32-bit field) 
            <(ID: 465) IDENTITY (reference)  (ref count: 3)
            <(ID: 475) CONST_FIELD_OFFSET (NONE)  (9)

   <(ID: 480) BCOND (int) 
   target: (BlockID: 14 BlockPC: 427)
   condition: NE
   flags: 0
      <(ID: 477) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 479) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 485) IDENTITY (reference)  (ref count: 2)
      <(ID: 489) FETCH (reference) 
         <(ID: 484) FIELD_REF (reference) 
            <(ID: 465) IDENTITY (reference)  (ref count: 3)
            <(ID: 483) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 488) IDENTITY (reference)  (ref count: 3)
      <(ID: 498) FETCH (reference) 
         <(ID: 487) FIELD_REF (reference) 
            <(ID: 485) IDENTITY (reference)  (ref count: 2)
            <(ID: 486) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 497) IDENTITY (int)  (ref count: 2)
      <(ID: 502) INVOKE (int) 
         <(ID: 494) PARAMETER (reference) 
            <(ID: 488) IDENTITY (reference)  (ref count: 3)
            <(ID: 493) PARAMETER (reference) 
               <(ID: 490) IDENTITY (reference)  (ref count: 3)
                  <(ID: 511) LOCAL (reference)   13>
               <(ID: 492) NULL_PARAMETER (NONE) 
         <(ID: 496) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 495) GET_VTBL (NONE) 
               <(ID: 488) IDENTITY (reference)  (ref count: 3)
            <(ID: 491) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 501) ASSIGN (32-bit field) 
      <(ID: 500) FIELD_REF (32-bit field) 
         <(ID: 482) LOCAL (reference)   14>
         <(ID: 499) CONST_FIELD_OFFSET (NONE)  (2)
      <(ID: 497) IDENTITY (int)  (ref count: 2)

   <(ID: 510) INVOKE (v) 
      <(ID: 507) PARAMETER (reference) 
         <(ID: 490) IDENTITY (reference)  (ref count: 3)
         <(ID: 506) PARAMETER (reference) 
            <(ID: 503) LOCAL (reference)   10>
            <(ID: 505) NULL_PARAMETER (NONE) 
      <(ID: 509) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 508) GET_VTBL (NONE) 
            <(ID: 490) IDENTITY (reference)  (ref count: 3)
         <(ID: 504) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 14)

   <(ID: 512) GOTO (NONE) 
   target: (BlockID: 15 BlockPC: 478)


*************************************************
*
* (block ID:14 block PC:427 )
* IR root list contains 10 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3f
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:166)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<427>  (0x954373):    aload_0 
<428>  (0x954374):    dup 
<429>  (0x954375):    getfield_quick #7
<432>  (0x954378):    iconst_m1 
<433>  (0x954379):    imul 
<434>  (0x95437a):    putfield_quick #7
<437>  (0x95437d):    aload_0 
<438>  (0x95437e):    aload 13
<440>  (0x954380):    iload_2 
<441>  (0x954381):    iconst_1 
<442>  (0x954382):    iadd 
<443>  (0x954383):    iload_3 
<444>  (0x954384):    iload 4
<446>  (0x954386):    invokevirtual_quick_w #17 <com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;>
<449>  (0x954389):    astore 16
<451>  (0x95438b):    aload 14
<453>  (0x95438d):    aload 16
<455>  (0x95438f):    getfield_quick #2
<458>  (0x954392):    invokevirtual_quick_w #62 <com.sun.mep.bench.Chess.Move.setValue(I)V>
<461>  (0x954395):    aload_0 
<462>  (0x954396):    dup 
<463>  (0x954397):    getfield_quick #7
<466>  (0x95439a):    iconst_m1 
<467>  (0x95439b):    imul 
<468>  (0x95439c):    putfield_quick #7
<471>  (0x95439f):    aload 13
<473>  (0x9543a1):    aload 10
<475>  (0x9543a3):    invokevirtual_quick_w #51 <com.sun.mep.bench.Chess.GameState.myClone(Lcom/sun/mep/bench/Chess/GameState;)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 13 14 15 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(5): 
	local(0)	ID(514)
 	local(13)	ID(525)
 	local(2)	ID(526)
 	local(3)	ID(529)
 	local(4)	ID(530)
 
Incoming Locals(6): 
	local(2)	ID(526)
 	local(0)	ID(514)
 	local(13)	ID(525)
 	local(3)	ID(529)
 	local(4)	ID(530)
 	<null>

Assigned Locals(1): 
	ASSIGN(574): local(16)	ID(573)	rhsID(540)
 
Successor Blocks(1): 
	ID(15) LocalOrder(5) AssignOrder(1) RefsOK(0) Locals(11 8 6 5 7 14)

   <(ID: 513) MAP_PC (NONE)   427>

   <(ID: 517) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 524) FETCH (32-bit field) 
         <(ID: 516) FIELD_REF (32-bit field) 
            <(ID: 514) IDENTITY (reference)  (ref count: 6)
               <(ID: 523) LOCAL (reference)   0>
            <(ID: 515) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 522) ASSIGN (32-bit field) 
      <(ID: 521) FIELD_REF (32-bit field) 
         <(ID: 514) IDENTITY (reference)  (ref count: 6)
         <(ID: 520) CONST_FIELD_OFFSET (NONE)  (7)
      <(ID: 519) MUL (int) 
         <(ID: 517) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 518) CONST_JAVA_NUMERIC32 (int)  (-1)

   <(ID: 540) IDENTITY (reference)  (ref count: 3)
      <(ID: 545) INVOKE (reference) 
         <(ID: 537) PARAMETER (reference) 
            <(ID: 514) IDENTITY (reference)  (ref count: 6)
            <(ID: 536) PARAMETER (reference) 
               <(ID: 525) IDENTITY (reference)  (ref count: 3)
                  <(ID: 572) LOCAL (reference)   13>
               <(ID: 535) PARAMETER (int) 
                  <(ID: 528) ADD (int) 
                     <(ID: 526) LOCAL (int)   2>
                     <(ID: 527) CONST_JAVA_NUMERIC32 (int)  (1)
                  <(ID: 534) PARAMETER (int) 
                     <(ID: 529) LOCAL (int)   3>
                     <(ID: 533) PARAMETER (int) 
                        <(ID: 530) LOCAL (int)   4>
                        <(ID: 532) NULL_PARAMETER (NONE) 
         <(ID: 539) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 538) GET_VTBL (NONE) 
               <(ID: 514) IDENTITY (reference)  (ref count: 6)
            <(ID: 531) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 12)

   <(ID: 544) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 553) FETCH (32-bit field) 
         <(ID: 543) FIELD_REF (32-bit field) 
            <(ID: 540) IDENTITY (reference)  (ref count: 3)
            <(ID: 542) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 552) INVOKE (v) 
      <(ID: 549) PARAMETER (reference) 
         <(ID: 541) IDENTITY (reference)  (ref count: 2)
            <(ID: 554) LOCAL (reference)   14>
         <(ID: 548) PARAMETER (32-bit field) 
            <(ID: 544) IDENTITY (32-bit field)  (ref count: 2)
            <(ID: 547) NULL_PARAMETER (NONE) 
      <(ID: 551) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 550) GET_VTBL (NONE) 
            <(ID: 541) IDENTITY (reference)  (ref count: 2)
         <(ID: 546) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 557) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 563) FETCH (32-bit field) 
         <(ID: 556) FIELD_REF (32-bit field) 
            <(ID: 514) IDENTITY (reference)  (ref count: 6)
            <(ID: 555) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 562) ASSIGN (32-bit field) 
      <(ID: 561) FIELD_REF (32-bit field) 
         <(ID: 514) IDENTITY (reference)  (ref count: 6)
         <(ID: 560) CONST_FIELD_OFFSET (NONE)  (7)
      <(ID: 559) MUL (int) 
         <(ID: 557) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 558) CONST_JAVA_NUMERIC32 (int)  (-1)

   <(ID: 571) INVOKE (v) 
      <(ID: 568) PARAMETER (reference) 
         <(ID: 525) IDENTITY (reference)  (ref count: 3)
         <(ID: 567) PARAMETER (reference) 
            <(ID: 564) LOCAL (reference)   10>
            <(ID: 566) NULL_PARAMETER (NONE) 
      <(ID: 570) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 569) GET_VTBL (NONE) 
            <(ID: 525) IDENTITY (reference)  (ref count: 3)
         <(ID: 565) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 14)

   <(ID: 574) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 573) LOCAL (reference)   16>
      <(ID: 540) IDENTITY (reference)  (ref count: 3)


*************************************************
*
* (block ID:15 block PC:478 )
* IR root list contains 7 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x2f
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:173)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<478>  (0x9543a6):    aload 14
<480>  (0x9543a8):    getfield_quick #2
<483>  (0x9543ab):    iload 7
<485>  (0x9543ad):    if_icmple <562>
<488>  (0x9543b0):    aload_0 
<489>  (0x9543b1):    getfield_quick #7
<492>  (0x9543b4):    iconst_1 
<493>  (0x9543b5):    if_icmpne <505>
<496>  (0x9543b8):    aload_0 
<497>  (0x9543b9):    getfield_quick #11
<500>  (0x9543bc):    bipush 98
<502>  (0x9543be):    if_icmpeq <522>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 13 14 15 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(14)	ID(576)
 	local(7)	ID(580)
 	local(0)	ID(583)
 
Incoming Locals(6): 
	local(11)	ID(221)
 	local(8)	ID(602)
 	local(6)	ID(664)
 	local(5)	ID(214)
 	local(7)	ID(580)
 	local(14)	ID(576)
 
Successor Blocks(3): 
	ID(16) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(11 8 6 5 12 14)
	ID(17) LocalOrder(3) AssignOrder(0) RefsOK(1) Locals(11 8 6 5 0 14)
	ID(18) LocalOrder(3) AssignOrder(0) RefsOK(1) Locals(11 8 6 5 12 14)

   <(ID: 575) MAP_PC (NONE)   478>

   <(ID: 579) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 582) FETCH (32-bit field) 
         <(ID: 578) FIELD_REF (32-bit field) 
            <(ID: 576) LOCAL (reference)   14>
            <(ID: 577) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 581) BCOND (int) 
   target: (BlockID: 16 BlockPC: 562)
   condition: LE
   flags: 0
      <(ID: 579) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 580) LOCAL (int)   7>


   <(ID: 586) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 589) FETCH (32-bit field) 
         <(ID: 585) FIELD_REF (32-bit field) 
            <(ID: 583) IDENTITY (reference)  (ref count: 2)
               <(ID: 593) LOCAL (reference)   0>
            <(ID: 584) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 588) BCOND (int) 
   target: (BlockID: 17 BlockPC: 505)
   condition: NE
   flags: 0
      <(ID: 586) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 587) CONST_JAVA_NUMERIC32 (int)  (1)


   <(ID: 592) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 596) FETCH (32-bit field) 
         <(ID: 591) FIELD_REF (32-bit field) 
            <(ID: 583) IDENTITY (reference)  (ref count: 2)
            <(ID: 590) CONST_FIELD_OFFSET (NONE)  (11)

   <(ID: 595) BCOND (int) 
   target: (BlockID: 18 BlockPC: 522)
   condition: EQ
   flags: 0
      <(ID: 592) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 594) CONST_JAVA_NUMERIC32 (int)  (98)



*************************************************
*
* (block ID:17 block PC:505 )
* IR root list contains 5 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x2f
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:173)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<505>  (0x9543c1):    aload_0 
<506>  (0x9543c2):    getfield_quick #7
<509>  (0x9543c5):    iconst_m1 
<510>  (0x9543c6):    if_icmpne <562>
<513>  (0x9543c9):    aload_0 
<514>  (0x9543ca):    getfield_quick #11
<517>  (0x9543cd):    bipush 119
<519>  (0x9543cf):    if_icmpne <562>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 13 14 15 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(620)
 
Incoming Locals(6): 
	local(11)	ID(221)
 	local(8)	ID(602)
 	local(6)	ID(664)
 	local(5)	ID(214)
 	local(0)	ID(620)
 	local(14)	ID(598)
 
Successor Blocks(2): 
	ID(16) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(11 8 6 5 12 14)
	ID(18) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(11 8 6 5 12 14)

   <(ID: 619) MAP_PC (NONE)   505>

   <(ID: 623) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 626) FETCH (32-bit field) 
         <(ID: 622) FIELD_REF (32-bit field) 
            <(ID: 620) IDENTITY (reference)  (ref count: 2)
               <(ID: 630) LOCAL (reference)   0>
            <(ID: 621) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 625) BCOND (int) 
   target: (BlockID: 16 BlockPC: 562)
   condition: NE
   flags: 0
      <(ID: 623) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 624) CONST_JAVA_NUMERIC32 (int)  (-1)


   <(ID: 629) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 633) FETCH (32-bit field) 
         <(ID: 628) FIELD_REF (32-bit field) 
            <(ID: 620) IDENTITY (reference)  (ref count: 2)
            <(ID: 627) CONST_FIELD_OFFSET (NONE)  (11)

   <(ID: 632) BCOND (int) 
   target: (BlockID: 16 BlockPC: 562)
   condition: NE
   flags: 0
      <(ID: 629) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 631) CONST_JAVA_NUMERIC32 (int)  (119)



*************************************************
*
* (block ID:18 block PC:522 )
* IR root list contains 11 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3f
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:173)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<522>  (0x9543d2):    aload 14
<524>  (0x9543d4):    agetfield_quick #3
<527>  (0x9543d7):    getfield_quick #2
<530>  (0x9543da):    bipush 99
<532>  (0x9543dc):    if_icmpeq <562>
<535>  (0x9543df):    aload 14
<537>  (0x9543e1):    astore 11
<539>  (0x9543e3):    aload 14
<541>  (0x9543e5):    getfield_quick #2
<544>  (0x9543e8):    istore 7
<546>  (0x9543ea):    iload 7
<548>  (0x9543ec):    istore 4
<550>  (0x9543ee):    iload 7
<552>  (0x9543f0):    iload_3 
<553>  (0x9543f1):    if_icmple <643>
<556>  (0x9543f4):    iconst_1 
<557>  (0x9543f5):    istore 12
<559>  (0x9543f7):    goto <643>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 13 14 15 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(14)	ID(635)
 	local(3)	ID(650)
 
Incoming Locals(6): 
	local(11)	ID(221)
 	local(8)	ID(602)
 	local(6)	ID(664)
 	local(5)	ID(214)
 	local(12)	ID(216)
 	local(14)	ID(635)
 
Assigned Locals(4): 
	ASSIGN(653): local(4)	ID(652)	rhsID(648)
 	ASSIGN(656): local(7)	ID(655)	rhsID(648)
 	ASSIGN(658): local(11)	ID(657)	rhsID(635)
 	ASSIGN(661): local(12)	ID(660)	rhsID(659)
 
Successor Blocks(2): 
	ID(16) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(11 8 6 5 12 14)
	ID(19) LocalOrder(2) AssignOrder(3) RefsOK(1) Locals(11 0 6 5 12)

   <(ID: 634) MAP_PC (NONE)   522>

   <(ID: 638) IDENTITY (reference)  (ref count: 2)
      <(ID: 642) FETCH (reference) 
         <(ID: 637) FIELD_REF (reference) 
            <(ID: 635) IDENTITY (reference)  (ref count: 3)
               <(ID: 649) LOCAL (reference)   14>
            <(ID: 636) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 641) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 645) FETCH (32-bit field) 
         <(ID: 640) FIELD_REF (32-bit field) 
            <(ID: 638) IDENTITY (reference)  (ref count: 2)
            <(ID: 639) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 644) BCOND (int) 
   target: (BlockID: 16 BlockPC: 562)
   condition: EQ
   flags: 0
      <(ID: 641) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 643) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 648) IDENTITY (32-bit field)  (ref count: 4)
      <(ID: 654) FETCH (32-bit field) 
         <(ID: 647) FIELD_REF (32-bit field) 
            <(ID: 635) IDENTITY (reference)  (ref count: 3)
            <(ID: 646) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 653) ASSIGN (32-bit field)  (assignIdx: 0)
      <(ID: 652) LOCAL (32-bit field)   4>
      <(ID: 648) IDENTITY (32-bit field)  (ref count: 4)

   <(ID: 656) ASSIGN (32-bit field)  (assignIdx: 1)
      <(ID: 655) LOCAL (32-bit field)   7>
      <(ID: 648) IDENTITY (32-bit field)  (ref count: 4)

   <(ID: 658) ASSIGN (reference)  (assignIdx: 2)
      <(ID: 657) LOCAL (reference)   11>
      <(ID: 635) IDENTITY (reference)  (ref count: 3)

   <(ID: 651) BCOND (int) 
   target: (BlockID: 19 BlockPC: 643)
   condition: LE
   flags: 0
      <(ID: 648) IDENTITY (32-bit field)  (ref count: 4)
      <(ID: 650) LOCAL (int)   3>


   <(ID: 661) ASSIGN (int)  (assignIdx: 3)
      <(ID: 660) LOCAL (int)   12>
      <(ID: 659) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 662) GOTO (NONE) 
   target: (BlockID: 19 BlockPC: 643)


*************************************************
*
* (block ID:16 block PC:562 )
* IR root list contains 7 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3f
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:184)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<562>  (0x9543fa):    aload 14
<564>  (0x9543fc):    getfield_quick #2
<567>  (0x9543ff):    iload 8
<569>  (0x954401):    if_icmpge <643>
<572>  (0x954404):    aload_0 
<573>  (0x954405):    getfield_quick #7
<576>  (0x954408):    iconst_m1 
<577>  (0x954409):    if_icmpne <589>
<580>  (0x95440c):    aload_0 
<581>  (0x95440d):    getfield_quick #11
<584>  (0x954410):    bipush 98
<586>  (0x954412):    if_icmpeq <606>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 13 14 15 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(14)	ID(598)
 	local(8)	ID(602)
 	local(0)	ID(605)
 
Incoming Locals(6): 
	local(11)	ID(221)
 	local(8)	ID(602)
 	local(6)	ID(664)
 	local(5)	ID(214)
 	local(12)	ID(216)
 	local(14)	ID(598)
 
Successor Blocks(3): 
	ID(19) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(11 0 6 5 12)
	ID(20) LocalOrder(3) AssignOrder(0) RefsOK(1) Locals(11 0 6 5 12 14)
	ID(21) LocalOrder(3) AssignOrder(0) RefsOK(1) Locals(11 0 6 5 12 14)

   <(ID: 597) MAP_PC (NONE)   562>

   <(ID: 601) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 604) FETCH (32-bit field) 
         <(ID: 600) FIELD_REF (32-bit field) 
            <(ID: 598) LOCAL (reference)   14>
            <(ID: 599) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 603) BCOND (int) 
   target: (BlockID: 19 BlockPC: 643)
   condition: GE
   flags: 0
      <(ID: 601) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 602) LOCAL (int)   8>


   <(ID: 608) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 611) FETCH (32-bit field) 
         <(ID: 607) FIELD_REF (32-bit field) 
            <(ID: 605) IDENTITY (reference)  (ref count: 2)
               <(ID: 615) LOCAL (reference)   0>
            <(ID: 606) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 610) BCOND (int) 
   target: (BlockID: 20 BlockPC: 589)
   condition: NE
   flags: 0
      <(ID: 608) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 609) CONST_JAVA_NUMERIC32 (int)  (-1)


   <(ID: 614) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 618) FETCH (32-bit field) 
         <(ID: 613) FIELD_REF (32-bit field) 
            <(ID: 605) IDENTITY (reference)  (ref count: 2)
            <(ID: 612) CONST_FIELD_OFFSET (NONE)  (11)

   <(ID: 617) BCOND (int) 
   target: (BlockID: 21 BlockPC: 606)
   condition: EQ
   flags: 0
      <(ID: 614) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 616) CONST_JAVA_NUMERIC32 (int)  (98)



*************************************************
*
* (block ID:20 block PC:589 )
* IR root list contains 5 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3f
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:184)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<589>  (0x954415):    aload_0 
<590>  (0x954416):    getfield_quick #7
<593>  (0x954419):    iconst_1 
<594>  (0x95441a):    if_icmpne <643>
<597>  (0x95441d):    aload_0 
<598>  (0x95441e):    getfield_quick #11
<601>  (0x954421):    bipush 119
<603>  (0x954423):    if_icmpne <643>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 13 14 15 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(671)
 
Incoming Locals(6): 
	local(11)	ID(221)
 	local(0)	ID(671)
 	local(6)	ID(664)
 	local(5)	ID(214)
 	local(12)	ID(216)
 	local(14)	ID(686)
 
Successor Blocks(2): 
	ID(19) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(11 0 6 5 12)
	ID(21) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(11 0 6 5 12 14)

   <(ID: 670) MAP_PC (NONE)   589>

   <(ID: 674) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 677) FETCH (32-bit field) 
         <(ID: 673) FIELD_REF (32-bit field) 
            <(ID: 671) IDENTITY (reference)  (ref count: 2)
               <(ID: 681) LOCAL (reference)   0>
            <(ID: 672) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 676) BCOND (int) 
   target: (BlockID: 19 BlockPC: 643)
   condition: NE
   flags: 0
      <(ID: 674) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 675) CONST_JAVA_NUMERIC32 (int)  (1)


   <(ID: 680) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 684) FETCH (32-bit field) 
         <(ID: 679) FIELD_REF (32-bit field) 
            <(ID: 671) IDENTITY (reference)  (ref count: 2)
            <(ID: 678) CONST_FIELD_OFFSET (NONE)  (11)

   <(ID: 683) BCOND (int) 
   target: (BlockID: 19 BlockPC: 643)
   condition: NE
   flags: 0
      <(ID: 680) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 682) CONST_JAVA_NUMERIC32 (int)  (119)



*************************************************
*
* (block ID:21 block PC:606 )
* IR root list contains 10 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3f
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:184)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<606>  (0x954426):    aload 14
<608>  (0x954428):    agetfield_quick #3
<611>  (0x95442b):    getfield_quick #2
<614>  (0x95442e):    bipush 99
<616>  (0x954430):    if_icmpeq <643>
<619>  (0x954433):    aload 14
<621>  (0x954435):    astore 11
<623>  (0x954437):    aload 14
<625>  (0x954439):    getfield_quick #2
<628>  (0x95443c):    istore 8
<630>  (0x95443e):    iload 8
<632>  (0x954440):    istore_3 
<633>  (0x954441):    iload 8
<635>  (0x954443):    iload 4
<637>  (0x954445):    if_icmpge <643>
<640>  (0x954448):    iconst_1 
<641>  (0x954449):    istore 12
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 13 14 15 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(14)	ID(686)
 	local(4)	ID(701)
 
Incoming Locals(6): 
	local(11)	ID(221)
 	local(0)	ID(224)
 	local(6)	ID(664)
 	local(5)	ID(214)
 	local(12)	ID(216)
 	local(14)	ID(686)
 
Assigned Locals(4): 
	ASSIGN(704): local(3)	ID(703)	rhsID(699)
 	ASSIGN(707): local(8)	ID(706)	rhsID(699)
 	ASSIGN(709): local(11)	ID(708)	rhsID(686)
 	ASSIGN(712): local(12)	ID(711)	rhsID(710)
 
Successor Blocks(1): 
	ID(19) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(11 0 6 5 12)

   <(ID: 685) MAP_PC (NONE)   606>

   <(ID: 689) IDENTITY (reference)  (ref count: 2)
      <(ID: 693) FETCH (reference) 
         <(ID: 688) FIELD_REF (reference) 
            <(ID: 686) IDENTITY (reference)  (ref count: 3)
               <(ID: 700) LOCAL (reference)   14>
            <(ID: 687) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 692) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 696) FETCH (32-bit field) 
         <(ID: 691) FIELD_REF (32-bit field) 
            <(ID: 689) IDENTITY (reference)  (ref count: 2)
            <(ID: 690) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 695) BCOND (int) 
   target: (BlockID: 19 BlockPC: 643)
   condition: EQ
   flags: 0
      <(ID: 692) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 694) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 699) IDENTITY (32-bit field)  (ref count: 4)
      <(ID: 705) FETCH (32-bit field) 
         <(ID: 698) FIELD_REF (32-bit field) 
            <(ID: 686) IDENTITY (reference)  (ref count: 3)
            <(ID: 697) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 704) ASSIGN (32-bit field)  (assignIdx: 0)
      <(ID: 703) LOCAL (32-bit field)   3>
      <(ID: 699) IDENTITY (32-bit field)  (ref count: 4)

   <(ID: 707) ASSIGN (32-bit field)  (assignIdx: 1)
      <(ID: 706) LOCAL (32-bit field)   8>
      <(ID: 699) IDENTITY (32-bit field)  (ref count: 4)

   <(ID: 709) ASSIGN (reference)  (assignIdx: 2)
      <(ID: 708) LOCAL (reference)   11>
      <(ID: 686) IDENTITY (reference)  (ref count: 3)

   <(ID: 702) BCOND (int) 
   target: (BlockID: 19 BlockPC: 643)
   condition: GE
   flags: 0
      <(ID: 699) IDENTITY (32-bit field)  (ref count: 4)
      <(ID: 701) LOCAL (int)   4>


   <(ID: 712) ASSIGN (int)  (assignIdx: 3)
      <(ID: 711) LOCAL (int)   12>
      <(ID: 710) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:19 block PC:643 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1f
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:128)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<643>  (0x95444b):    iinc 6 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 13 14 15 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(6)	ID(664)
 
Incoming Locals(5): 
	local(11)	ID(221)
 	local(0)	ID(224)
 	local(6)	ID(664)
 	local(5)	ID(214)
 	local(12)	ID(216)
 
Assigned Locals(1): 
	ASSIGN(668): local(6)	ID(667)	rhsID(666)
 
Successor Blocks(1): 
	ID(8) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(11 0 6 5 12)

   <(ID: 663) MAP_PC (NONE)   643>

   <(ID: 664) IDENTITY (int)  (ref count: 2)
      <(ID: 669) LOCAL (int)   6>

   <(ID: 668) ASSIGN (int)  (assignIdx: 0)
      <(ID: 667) LOCAL (int)   6>
      <(ID: 666) ADD (int) 
         <(ID: 664) IDENTITY (int)  (ref count: 2)
         <(ID: 665) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:8 block PC:646 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1f
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:128)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<646>  (0x95444e):    iload 6
<648>  (0x954450):    iload 5
<650>  (0x954452):    if_icmpge <658>
<653>  (0x954455):    iload 12
<655>  (0x954457):    ifeq <184>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(6)	ID(213)
 	local(5)	ID(214)
 	local(12)	ID(216)
 
Incoming Locals(5): 
	local(11)	ID(221)
 	local(0)	ID(224)
 	local(6)	ID(213)
 	local(5)	ID(214)
 	local(12)	ID(216)
 
Successor Blocks(2): 
	ID(22) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(11)
	ID(9) LocalOrder(3) AssignOrder(0) RefsOK(1) Locals(<null> 0)

   <(ID: 212) MAP_PC (NONE)   646>

   <(ID: 215) BCOND (int) 
   target: (BlockID: 22 BlockPC: 658)
   condition: GE
   flags: 0
      <(ID: 213) LOCAL (int)   6>
      <(ID: 214) LOCAL (int)   5>


   <(ID: 218) BCOND (int) 
   target: (BlockID: 9 BlockPC: 184)
   condition: EQ
   flags: 0
      <(ID: 216) LOCAL (int)   12>
      <(ID: 217) CONST_JAVA_NUMERIC32 (int)  (0)



*************************************************
*
* (block ID:22 block PC:658 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1
* Source: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;(AlphaBeta.java:195)
* Compilation depth: 0 locals : 0 .. 16
* Byte-codes for block:
<658>  (0x95445a):    iconst_0 
<659>  (0x95445b):    istore 12
<661>  (0x95445d):    aload 11
<663>  (0x95445f):    areturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 9 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(11)	ID(221)
 
Incoming Locals(1): 
	local(11)	ID(221)
 
   <(ID: 219) MAP_PC (NONE)   658>

   <(ID: 222) RETURN_VALUE (reference) 
      <(ID: 221) LOCAL (reference)   11>


NUM BARRIER BYTES = 32
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 440
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 3992
ESTIMATED BUFFER SIZE = 4672
CODE BUFFER ADDRESS = 0x2bcbacf0
PC MAP TABLE ADDRESS = 0x2bcbacf8
GC CHECK PCS ADDRESS = 0x2bcbad58
CODE ENTRY ADDRESS = 0x2bcbad88
          		@ Method prologue
0x2bcbad88	0:	addiu	a1, JSP, 108	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbad8c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbad90	8:	sltu	t7, a1, CHUNKEND
0x2bcbad94	12:	bne	t7, zero, PC=0x2bcbad88	@ goto .skip
0x2bcbad98	16:	nop
0x2bcbad9c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbada0	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbad94) >>>>>>>>
0x2bcbad94	12:	bne	t7, zero, PC=0x2bcbada4	@ goto .skip
0x2bcbad98	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbada4) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbada4	28:	sw	JFP, 48(JSP)	@ Store curr JFP into new frame
0x2bcbada8	32:	addiu	JFP, JSP, 48	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbadac	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbadb0	40:	addiu	a3, zero, 0
0x2bcbadb4	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbadb8	48:	addiu	a3, zero, -1
0x2bcbadbc	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbadc0	56:	move	a0, EE
0x2bcbadc4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbadc8	64:	lui	t9, hi16(0x65)
0x2bcbadcc	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbadd0	72:	jalr	t9
0x2bcbadd4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbadd8	80:	addiu	JSP, JFP, 36	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbaddc	84:	nop
0x2bcbade0	88:	nop
0x2bcbade4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(22)
0x2bcbade8	96:	lw	s6, -68(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
          		@ Do getfield:
0x2bcbadec	100:	lw	s7, 12(s6)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbadf0	104:	lw	s5, 16(s6)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbadf4	108:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.GameState
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.GameState
0x2bcbadf8	112:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcbadfc	116:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcbae00	120:	lw	s4, -68(JFP)	@ Java local cell # 0
0x2bcbae04	124:	lw	s6, 20(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbae08	128:	sw	v0, 0(JSP)
0x2bcbae0c	132:	sw	s6, 4(JSP)
0x2bcbae10	136:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.GameState.<init>(Lcom/sun/mep/bench/Chess/ChessGame;)V
          		@ Invoke a method w/ a void return type
0x2bcbae14	140:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbae18	144:	sw	v0, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcbae1c	148:	sw	s5, 40(JFP)	@ spill Java temp cell # 3
0x2bcbae20	152:	sw	s7, 44(JFP)	@ spill Java temp cell # 4
0x2bcbae24	156:	lw	s7, 0(a0)	@ call method through mb
0x2bcbae28	160:	jalr	s7
0x2bcbae2c	164:	nop
          		@ Captured a stackmap here.
0x2bcbae30	168:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Move
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Move
0x2bcbae34	172:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcbae38	176:	nop
          		@ Captured a stackmap here.
0x2bcbae3c	180:	sw	v0, 0(JSP)
0x2bcbae40	184:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Move.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcbae44	188:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbae48	192:	sw	v0, 48(JFP)	@ REF spill Java temp cell # 5
0x2bcbae4c	196:	lw	s7, 0(a0)	@ call method through mb
0x2bcbae50	200:	jalr	s7
0x2bcbae54	204:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcbae58	208:	lw	s6, -68(JFP)	@ Java local cell # 0
0x2bcbae5c	212:	lw	s7, 20(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbae60	216:	lw	s5, 28(s7)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbae64	220:	addiu	s7, zero, -1	@ const -1
0x2bcbae68	224:	sw	s7, -48(JFP)	@ Java local cell # 5
0x2bcbae6c	228:	lw	s4, 44(JFP)	@ Java temp cell # 4
0x2bcbae70	232:	sw	s4, -40(JFP)	@ Java local cell # 7
0x2bcbae74	236:	lw	ra, 40(JFP)	@ Java temp cell # 3
0x2bcbae78	240:	sw	ra, -36(JFP)	@ Java local cell # 8
0x2bcbae7c	244:	lw	t9, 36(JFP)	@ Java temp cell # 2
0x2bcbae80	248:	sw	t9, -28(JFP)	@ Java local cell # 10
0x2bcbae84	252:	lw	t8, 48(JFP)	@ Java temp cell # 5
0x2bcbae88	256:	sw	t8, -24(JFP)	@ Java local cell # 11
0x2bcbae8c	260:	sw	zero, -20(JFP)	@ Java local cell # 12
0x2bcbae90	264:	lw	t6, -60(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(20): in wrong register
0x2bcbae94	268:	move	s4, s6
			@ Outgoing local(1) reg(21): not in register
0x2bcbae98	272:	sw	s5, 52(JFP)	@ spill Java temp cell # 6
0x2bcbae9c	276:	lw	s5, -64(JFP)	@ Java local cell # 1
0x2bcbaea0	280:	lw	s6, 52(JFP)	@ Java temp cell # 6
          		@ deferred comparison: 
0x2bcbaea4	284:	slt	t7, s6, t6
0x2bcbaea8	288:	beq	t7, zero, PC=0x2bcbaea4	@ branch to block L1
0x2bcbaeac	292:	nop
          		@ Do getfield:
0x2bcbaeb0	296:	lw	s6, 8(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbaeb4	300:	lw	t5, 24(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbaeb8	304:	lw	s6, 28(s4)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbaebc	308:	sw	t5, 0(JSP)
0x2bcbaec0	312:	sw	s5, 4(JSP)
0x2bcbaec4	316:	sw	s6, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcbaec8	320:	lw	s6, 0(t5)	@ Get object.cb
0x2bcbaecc	324:	addiu	t7, zero, -4
0x2bcbaed0	328:	and	s6, s6, t7
0x2bcbaed4	332:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcbaed8	336:	lw	a0, 44(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbaedc	340:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbaee0	344:	lw	s7, 0(a0)	@ call method through mb
0x2bcbaee4	348:	jalr	s7
0x2bcbaee8	352:	nop
          		@ Captured a stackmap here.
0x2bcbaeec	356:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbaef0	360:	lw	s4, 0(JSP)
0x2bcbaef4	364:	sw	s4, -32(JFP)	@ Java local cell # 9
			@ Outgoing local(9) reg(20): in correct register
0x2bcbaef8	368:	b	PC=0x2bcbaef8	@ branch to block L2
0x2bcbaefc	372:	nop
			@ Initial Temp REF set is 
	L1:	376:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
--->Fixed instruction at 288(0x2bcbaea8) to reference 376
          		@ MAP_PC idepth=0 javaPc=71 compiledPc=376
          		@ Do getfield:
0x2bcbaf00	376:	lw	s7, 28(s4)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbaf04	380:	addiu	t7, zero, 1
0x2bcbaf08	384:	bne	s7, t7, PC=0x2bcbaf04	@ branch to block L3
0x2bcbaf0c	388:	nop
          		@ Do getfield:
0x2bcbaf10	392:	lw	s7, 44(s4)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbaf14	396:	addiu	t7, zero, 98
0x2bcbaf18	400:	beq	s7, t7, PC=0x2bcbaf14	@ branch to block L4
0x2bcbaf1c	404:	nop
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
			@ Initial Temp REF set is 
	L3:	408:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
--->Fixed instruction at 384(0x2bcbaf08) to reference 408
          		@ MAP_PC idepth=0 javaPc=88 compiledPc=408
          		@ Do getfield:
0x2bcbaf20	408:	lw	s7, 28(s4)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbaf24	412:	addiu	t7, zero, -1
0x2bcbaf28	416:	bne	s7, t7, PC=0x2bcbaf24	@ branch to block L5
0x2bcbaf2c	420:	nop
          		@ Do getfield:
0x2bcbaf30	424:	lw	s7, 44(s4)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbaf34	428:	addiu	t7, zero, 119
0x2bcbaf38	432:	bne	s7, t7, PC=0x2bcbaf34	@ branch to block L5
0x2bcbaf3c	436:	nop
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
			@ Initial Temp REF set is 
	L4:	440:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
--->Fixed instruction at 400(0x2bcbaf18) to reference 440
          		@ MAP_PC idepth=0 javaPc=105 compiledPc=440
          		@ Do getfield:
0x2bcbaf40	440:	lw	s7, 8(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbaf44	444:	sw	s7, 0(JSP)
0x2bcbaf48	448:	sw	s5, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbaf4c	452:	lw	s6, 0(s7)	@ Get object.cb
0x2bcbaf50	456:	addiu	t7, zero, -4
0x2bcbaf54	460:	and	s6, s6, t7
0x2bcbaf58	464:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcbaf5c	468:	lw	a0, 52(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbaf60	472:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbaf64	476:	lw	s7, 0(a0)	@ call method through mb
0x2bcbaf68	480:	jalr	s7
0x2bcbaf6c	484:	nop
          		@ Captured a stackmap here.
0x2bcbaf70	488:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbaf74	492:	lw	s4, 0(JSP)
0x2bcbaf78	496:	sw	s4, -32(JFP)	@ Java local cell # 9
			@ Outgoing local(9) reg(20): in correct register
0x2bcbaf7c	500:	b	PC=0x2bcbaf7c	@ branch to block L2
0x2bcbaf80	504:	nop
			@ Initial Temp REF set is 
	L5:	508:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
--->Fixed instruction at 432(0x2bcbaf38) to reference 508
--->Fixed instruction at 416(0x2bcbaf28) to reference 508
          		@ MAP_PC idepth=0 javaPc=118 compiledPc=508
          		@ Do getfield:
0x2bcbaf84	508:	lw	s7, 8(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbaf88	512:	sw	s7, 0(JSP)
0x2bcbaf8c	516:	sw	s5, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbaf90	520:	lw	s6, 0(s7)	@ Get object.cb
0x2bcbaf94	524:	addiu	t7, zero, -4
0x2bcbaf98	528:	and	s6, s6, t7
0x2bcbaf9c	532:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcbafa0	536:	lw	a0, 56(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbafa4	540:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbafa8	544:	lw	s7, 0(a0)	@ call method through mb
0x2bcbafac	548:	jalr	s7
0x2bcbafb0	552:	nop
          		@ Captured a stackmap here.
0x2bcbafb4	556:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbafb8	560:	lw	s4, 0(JSP)
0x2bcbafbc	564:	sw	s4, -32(JFP)	@ Java local cell # 9
			@ Outgoing local(9) reg(20): in correct register
			@ Initial Temp REF set is 
	L2:	568:	@ entry point for branches
			@ Binding Incoming Local(9) to reg(20)
--->Fixed instruction at 500(0x2bcbaf7c) to reference 568
--->Fixed instruction at 368(0x2bcbaef8) to reference 568
          		@ MAP_PC idepth=0 javaPc=128 compiledPc=568
0x2bcbafc0	568:	sw	s4, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcbafc4	572:	lw	s7, 0(s4)	@ Get object.cb
0x2bcbafc8	576:	addiu	t7, zero, -4
0x2bcbafcc	580:	and	s7, s7, t7
0x2bcbafd0	584:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbafd4	588:	lw	a0, 48(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbafd8	592:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbafdc	596:	lw	s7, 0(a0)	@ call method through mb
0x2bcbafe0	600:	jalr	s7
0x2bcbafe4	604:	nop
          		@ Captured a stackmap here.
0x2bcbafe8	608:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbafec	612:	lw	s7, 0(JSP)
0x2bcbaff0	616:	lw	s4, -68(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcbaff4	620:	lw	s6, 20(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbaff8	624:	lw	s5, 28(s6)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbaffc	628:	sw	s7, -48(JFP)	@ Java local cell # 5
			@ Processing DEFINE(0) reg(20): in correct register
0x2bcbb000	632:	lw	ra, -60(JFP)	@ Java local cell # 2
0x2bcbb004	636:	addiu	t9, ra, 1
			@ Loading DEFINE(0) register(20): in correct register
          		@ deferred comparison: 
0x2bcbb008	640:	slt	t7, s5, t9
0x2bcbb00c	644:	beq	t7, zero, PC=0x2bcbb008	@ branch to block L6
0x2bcbb010	648:	nop
          		@ Do getfield:
0x2bcbb014	652:	lw	t9, 24(s6)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Processing DEFINE(0) reg(20): in correct register
0x2bcbb018	656:	addiu	s6, ra, 1
0x2bcbb01c	660:	addu	t8, s5, t9
			@ Loading DEFINE(0) register(20): in correct register
          		@ deferred comparison: 
0x2bcbb020	664:	slt	t7, t8, s6
0x2bcbb024	668:	bne	t7, zero, PC=0x2bcbb020	@ branch to block L6
0x2bcbb028	672:	nop
			@ Processing DEFINE(0) reg(20): in correct register
			@ Processing DEFINE(1) reg(21): not in register
			@ Loading DEFINE(0) register(20): in correct register
			@ Loading DEFINE(1) register(21): not in register
0x2bcbb02c	676:	addiu	s5, zero, 1	@ const 1
0x2bcbb030	680:	b	PC=0x2bcbb030	@ branch to block L7
0x2bcbb034	684:	nop
			@ Initial Temp REF set is 
	L6:	688:	@ entry point for branches
--->Fixed instruction at 668(0x2bcbb024) to reference 688
--->Fixed instruction at 644(0x2bcbb00c) to reference 688
          		@ MAP_PC idepth=0 javaPc=174 compiledPc=688
			@ Processing DEFINE(0) reg(20): in correct register
			@ Processing DEFINE(1) reg(21): in wrong register
			@ Loading DEFINE(0) register(20): in correct register
			@ Loading DEFINE(1) register(21): in wrong register
0x2bcbb038	688:	move	s5, zero
			@ Initial Temp REF set is 
	L7:	692:	@ entry point for branches
--->Fixed instruction at 680(0x2bcbb030) to reference 692
          		@ MAP_PC idepth=0 javaPc=175 compiledPc=692
          		@ Do putfield:
0x2bcbb03c	692:	sw	s5, 36(s4)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcbb040	696:	sw	zero, -44(JFP)	@ Java local cell # 6
			@ Outgoing local(11) reg(20): not in register
0x2bcbb044	700:	lw	s4, -24(JFP)	@ Java local cell # 11
			@ Outgoing local(0) reg(21): not in register
0x2bcbb048	704:	lw	s5, -68(JFP)	@ Java local cell # 0
			@ Outgoing local(6) reg(22): not in register
0x2bcbb04c	708:	lw	s6, -44(JFP)	@ Java local cell # 6
			@ Outgoing local(5) reg(23): not in register
0x2bcbb050	712:	lw	s7, -48(JFP)	@ Java local cell # 5
0x2bcbb054	716:	b	PC=0x2bcbb054	@ branch to block L8
0x2bcbb058	720:	nop
			@ Initial Temp REF set is 
	L9:	724:	@ Patchable GC Check point
0x2bcbb05c	724:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcbb05c	724:	nop
0x2bcbb060	728:	nop
          		@ Captured a stackmap here.
	L9:	732:	@ entry point when locals need to be loaded
			@ Preloading incoming local(0) reg(21)
0x2bcbb064	732:	lw	s5, -68(JFP)	@ Java local cell # 0
	L9:	736:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=184 compiledPc=732
          		@ Do getfield:
0x2bcbb068	736:	lw	s7, 24(s5)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbb06c	740:	addiu	s6, s7, 1
          		@ Do putfield:
0x2bcbb070	744:	sw	s6, 24(s5)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do getfield:
0x2bcbb074	748:	lw	s7, 24(s5)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ do irem by 1000:
0x2bcbb078	752:	lw	ra, 0(CP)	@ const 1099511628
0x2bcbb07c	756:	sra	s6, s7, 31
0x2bcbb080	760:	mult	s7, ra
0x2bcbb084	764:	mfhi	s4
0x2bcbb088	768:	nop
0x2bcbb08c	772:	nop
0x2bcbb090	776:	sra	s4, s4, 8
0x2bcbb094	780:	subu	s6, s4, s6
0x2bcbb098	784:	addiu	t9, zero, 1000	@ const 1000
0x2bcbb09c	788:	mult	s6, t9
0x2bcbb0a0	792:	mflo	s4
0x2bcbb0a4	796:	nop
0x2bcbb0a8	800:	nop
0x2bcbb0ac	804:	subu	s6, s7, s4
          		@ deferred comparison: 
0x2bcbb0b0	808:	bne	s6, zero, PC=0x2bcbb0b0	@ branch to block L10
0x2bcbb0b4	812:	nop
          		@ Do getfield:
0x2bcbb0b8	816:	lw	s7, 20(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbb0bc	820:	lw	s6, 72(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbb0c0	824:	lw	a1, 0(CP)	@ cb java.lang.StringBuffer
          		@ Do new:
0x2bcbb0c4	828:	sw	s6, 36(JFP)	@ REF spill Java temp cell # 2
          		@ cb: java.lang.StringBuffer
0x2bcbb0c8	832:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcbb0cc	836:	nop
          		@ Captured a stackmap here.
0x2bcbb0d0	840:	sw	v0, 0(JSP)
0x2bcbb0d4	844:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcbb0d8	848:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbb0dc	852:	sw	v0, 40(JFP)	@ REF spill Java temp cell # 3
0x2bcbb0e0	856:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb0e4	860:	jalr	s7
0x2bcbb0e8	864:	nop
          		@ Captured a stackmap here.
0x2bcbb0ec	868:	lw	s7, 40(JFP)	@ Java temp cell # 3
0x2bcbb0f0	872:	sw	s7, 0(JSP)
0x2bcbb0f4	876:	lw	s6, 0(CP)	@ StringICell
0x2bcbb0f8	880:	lw	s7, 0(s6)	@ StringObject from StringICell
0x2bcbb0fc	884:	sw	s7, 4(JSP)
0x2bcbb100	888:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcbb104	892:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbb108	896:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb10c	900:	jalr	s7
0x2bcbb110	904:	nop
          		@ Captured a stackmap here.
0x2bcbb114	908:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbb118	912:	lw	s7, 0(JSP)
          		@ Do getfield:
0x2bcbb11c	916:	lw	s5, -68(JFP)	@ Java local cell # 0
0x2bcbb120	920:	lw	s6, 24(s5)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbb124	924:	lw	s4, 36(JFP)	@ Java temp cell # 2
0x2bcbb128	928:	sw	s4, 0(JSP)
0x2bcbb12c	932:	sw	s7, 4(JSP)
0x2bcbb130	936:	sw	s6, 8(JSP)
0x2bcbb134	940:	lw	s6, 0(s7)	@ NULL check
0x2bcbb138	944:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcbb13c	948:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbb140	952:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb144	956:	jalr	s7
0x2bcbb148	960:	nop
          		@ Captured a stackmap here.
0x2bcbb14c	964:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbb150	968:	lw	s7, 0(JSP)
0x2bcbb154	972:	sw	s7, 0(JSP)
0x2bcbb158	976:	lw	s5, 0(CP)	@ StringICell
0x2bcbb15c	980:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcbb160	984:	sw	s6, 4(JSP)
0x2bcbb164	988:	lw	s6, 0(s7)	@ NULL check
0x2bcbb168	992:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcbb16c	996:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbb170	1000:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb174	1004:	jalr	s7
0x2bcbb178	1008:	nop
          		@ Captured a stackmap here.
0x2bcbb17c	1012:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbb180	1016:	lw	s7, 0(JSP)
0x2bcbb184	1020:	sw	s7, 0(JSP)
0x2bcbb188	1024:	lw	s6, 0(s7)	@ NULL check
0x2bcbb18c	1028:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcbb190	1032:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbb194	1036:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb198	1040:	jalr	s7
0x2bcbb19c	1044:	nop
          		@ Captured a stackmap here.
          		@ Fetch mb from vtable:
0x2bcbb1a0	1048:	lw	s6, 36(JFP)	@ Java temp cell # 2
0x2bcbb1a4	1052:	lw	s7, 0(s6)	@ Get object.cb
0x2bcbb1a8	1056:	addiu	t7, zero, -4
0x2bcbb1ac	1060:	and	s7, s7, t7
0x2bcbb1b0	1064:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbb1b4	1068:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbb1b8	1072:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb1bc	1076:	jalr	s7
0x2bcbb1c0	1080:	nop
          		@ Captured a stackmap here.
			@ Initial Temp REF set is 
	L10:	1084:	@ entry point for branches
--->Fixed instruction at 808(0x2bcbb0b0) to reference 1084
          		@ MAP_PC idepth=0 javaPc=242 compiledPc=1084
0x2bcbb1c4	1084:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Move
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Move
0x2bcbb1c8	1088:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcbb1cc	1092:	nop
          		@ Captured a stackmap here.
0x2bcbb1d0	1096:	sw	v0, 0(JSP)
0x2bcbb1d4	1100:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Move.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcbb1d8	1104:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbb1dc	1108:	sw	v0, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcbb1e0	1112:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb1e4	1116:	jalr	s7
0x2bcbb1e8	1120:	nop
          		@ Captured a stackmap here.
0x2bcbb1ec	1124:	lw	ra, -28(JFP)	@ Java local cell # 10
0x2bcbb1f0	1128:	sw	ra, 0(JSP)
0x2bcbb1f4	1132:	lw	t9, -64(JFP)	@ Java local cell # 1
0x2bcbb1f8	1136:	sw	t9, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbb1fc	1140:	lw	s7, 0(ra)	@ Get object.cb
0x2bcbb200	1144:	addiu	t7, zero, -4
0x2bcbb204	1148:	and	s7, s7, t7
0x2bcbb208	1152:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbb20c	1156:	lw	a0, 56(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbb210	1160:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbb214	1164:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb218	1168:	jalr	s7
0x2bcbb21c	1172:	nop
          		@ Captured a stackmap here.
0x2bcbb220	1176:	lw	ra, -32(JFP)	@ Java local cell # 9
0x2bcbb224	1180:	sw	ra, 0(JSP)
0x2bcbb228	1184:	lw	t9, -44(JFP)	@ Java local cell # 6
0x2bcbb22c	1188:	sw	t9, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbb230	1192:	lw	s7, 0(ra)	@ Get object.cb
0x2bcbb234	1196:	addiu	t7, zero, -4
0x2bcbb238	1200:	and	s7, s7, t7
0x2bcbb23c	1204:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbb240	1208:	lw	a0, 172(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbb244	1212:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbb248	1216:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb24c	1220:	jalr	s7
0x2bcbb250	1224:	nop
          		@ Captured a stackmap here.
0x2bcbb254	1228:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbb258	1232:	lw	s7, 0(JSP)
0x2bcbb25c	1236:	lw	a2, 0(CP)	@ cb com.sun.mep.bench.Chess.Point
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcbb260	1240:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcbb264	1244:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcbb268	1248:	nop
0x2bcbb26c	1252:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcbb270	1256:	lw	s6, 36(JFP)	@ Java temp cell # 2
0x2bcbb274	1260:	addiu	s5, s6, 12	@ fieldAddr = obj + fieldOffset;
0x2bcbb278	1264:	sw	s7, 0(s5)	@ putfield(fieldAddr, valueObj);
0x2bcbb27c	1268:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcbb280	1272:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcbb284	1276:	srl	t7, s5, 9	@ mark card table
0x2bcbb288	1280:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcbb28c	1284:	sb	ra, 0(t7)
          		@ Do getfield:
0x2bcbb290	1288:	lw	t9, -68(JFP)	@ Java local cell # 0
0x2bcbb294	1292:	lw	s5, 8(t9)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbb298	1296:	lw	t8, 28(t9)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbb29c	1300:	sw	s5, 0(JSP)
0x2bcbb2a0	1304:	lw	t6, -64(JFP)	@ Java local cell # 1
0x2bcbb2a4	1308:	sw	t6, 4(JSP)
0x2bcbb2a8	1312:	sw	s6, 8(JSP)
0x2bcbb2ac	1316:	sw	t8, 12(JSP)
          		@ Fetch mb from vtable:
0x2bcbb2b0	1320:	lw	t8, 0(s5)	@ Get object.cb
0x2bcbb2b4	1324:	addiu	t7, zero, -4
0x2bcbb2b8	1328:	and	t8, t8, t7
0x2bcbb2bc	1332:	lw	t8, 76(t8)	@ Get cb.vtbl
0x2bcbb2c0	1336:	lw	a0, 60(t8)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbb2c4	1340:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbb2c8	1344:	sw	s7, 40(JFP)	@ REF spill Java temp cell # 3
0x2bcbb2cc	1348:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb2d0	1352:	jalr	s7
0x2bcbb2d4	1356:	nop
          		@ Captured a stackmap here.
0x2bcbb2d8	1360:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbb2dc	1364:	lw	s7, 0(JSP)
          		@ Do getfield:
0x2bcbb2e0	1368:	lw	s5, -68(JFP)	@ Java local cell # 0
0x2bcbb2e4	1372:	lw	s6, 20(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbb2e8	1376:	lw	s4, 28(s6)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbb2ec	1380:	sw	s7, -16(JFP)	@ Java local cell # 13
0x2bcbb2f0	1384:	lw	ra, 36(JFP)	@ Java temp cell # 2
0x2bcbb2f4	1388:	sw	ra, -12(JFP)	@ Java local cell # 14
0x2bcbb2f8	1392:	lw	t9, 40(JFP)	@ Java temp cell # 3
0x2bcbb2fc	1396:	sw	t9, -8(JFP)	@ Java local cell # 15
			@ Processing DEFINE(0) reg(20): in wrong register
0x2bcbb300	1400:	lw	t8, -60(JFP)	@ Java local cell # 2
0x2bcbb304	1404:	addiu	t6, t8, 1
			@ Loading DEFINE(0) register(20): in wrong register
0x2bcbb308	1408:	sw	s4, 44(JFP)	@ spill Java temp cell # 4
0x2bcbb30c	1412:	move	s4, s5
0x2bcbb310	1416:	lw	s5, 44(JFP)	@ Java temp cell # 4
          		@ deferred comparison: 
0x2bcbb314	1420:	slt	t7, s5, t6
0x2bcbb318	1424:	beq	t7, zero, PC=0x2bcbb314	@ branch to block L11
0x2bcbb31c	1428:	nop
          		@ Do getfield:
0x2bcbb320	1432:	lw	t6, 24(s6)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Processing DEFINE(0) reg(20): in correct register
0x2bcbb324	1436:	addiu	s6, t8, 1
0x2bcbb328	1440:	addu	t5, s5, t6
			@ Loading DEFINE(0) register(20): in correct register
          		@ deferred comparison: 
0x2bcbb32c	1444:	slt	t7, t5, s6
0x2bcbb330	1448:	bne	t7, zero, PC=0x2bcbb32c	@ branch to block L11
0x2bcbb334	1452:	nop
			@ Processing DEFINE(0) reg(20): in correct register
			@ Processing DEFINE(1) reg(21): not in register
			@ Loading DEFINE(0) register(20): in correct register
			@ Loading DEFINE(1) register(21): not in register
0x2bcbb338	1456:	addiu	s5, zero, 1	@ CARD_DIRTY_BYTE
0x2bcbb33c	1460:	b	PC=0x2bcbb33c	@ branch to block L12
0x2bcbb340	1464:	nop
			@ Initial Temp REF set is 
	L11:	1468:	@ entry point for branches
--->Fixed instruction at 1448(0x2bcbb330) to reference 1468
--->Fixed instruction at 1424(0x2bcbb318) to reference 1468
          		@ MAP_PC idepth=0 javaPc=334 compiledPc=1468
			@ Processing DEFINE(0) reg(20): in correct register
			@ Processing DEFINE(1) reg(21): in wrong register
			@ Loading DEFINE(0) register(20): in correct register
			@ Loading DEFINE(1) register(21): in wrong register
0x2bcbb344	1468:	move	s5, zero
			@ Initial Temp REF set is 
	L12:	1472:	@ entry point for branches
--->Fixed instruction at 1460(0x2bcbb33c) to reference 1472
          		@ MAP_PC idepth=0 javaPc=335 compiledPc=1472
          		@ Do putfield:
0x2bcbb348	1472:	sw	s5, 36(s4)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcbb34c	1476:	lw	ra, -68(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcbb350	1480:	lw	s7, 36(ra)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(2) reg(20): not in register
0x2bcbb354	1484:	lw	s4, -60(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(21): in wrong register
0x2bcbb358	1488:	move	s5, ra
			@ Outgoing local(13) reg(22): not in register
0x2bcbb35c	1492:	lw	s6, -16(JFP)	@ Java local cell # 13
			@ Outgoing local(3) reg(23): not in register
0x2bcbb360	1496:	sw	s7, 36(JFP)	@ spill Java temp cell # 2
0x2bcbb364	1500:	lw	s7, -56(JFP)	@ Java local cell # 3
0x2bcbb368	1504:	lw	ra, 36(JFP)	@ Java temp cell # 2
          		@ deferred comparison: 
0x2bcbb36c	1508:	beq	ra, zero, PC=0x2bcbb36c	@ branch to block L13
0x2bcbb370	1512:	nop
          		@ Do getfield:
0x2bcbb374	1516:	lw	ra, 8(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbb378	1520:	lw	t9, 24(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbb37c	1524:	lw	ra, 28(s5)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbb380	1528:	sw	t9, 0(JSP)
0x2bcbb384	1532:	sw	s6, 4(JSP)
0x2bcbb388	1536:	subu	t8, zero, ra	@ imul by -1

0x2bcbb38c	1540:	sw	t8, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcbb390	1544:	lw	ra, 0(t9)	@ Get object.cb
0x2bcbb394	1548:	addiu	t7, zero, -4
0x2bcbb398	1552:	and	ra, ra, t7
0x2bcbb39c	1556:	lw	ra, 76(ra)	@ Get cb.vtbl
0x2bcbb3a0	1560:	lw	a0, 44(ra)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbb3a4	1564:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbb3a8	1568:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb3ac	1572:	jalr	s7
0x2bcbb3b0	1576:	nop
          		@ Captured a stackmap here.
0x2bcbb3b4	1580:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbb3b8	1584:	lw	s7, 0(JSP)
          		@ Do putfield:
0x2bcbb3bc	1588:	lw	s6, -68(JFP)	@ Java local cell # 0
0x2bcbb3c0	1592:	addiu	s5, s6, 80	@ fieldAddr = obj + fieldOffset;
0x2bcbb3c4	1596:	sw	s7, 0(s5)	@ putfield(fieldAddr, valueObj);
0x2bcbb3c8	1600:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcbb3cc	1604:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcbb3d0	1608:	srl	t7, s5, 9	@ mark card table
0x2bcbb3d4	1612:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcbb3d8	1616:	sb	ra, 0(t7)
          		@ Do getfield:
0x2bcbb3dc	1620:	lw	s7, 80(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbb3e0	1624:	sw	s7, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcbb3e4	1628:	lw	s5, 0(s7)	@ Get object.cb
0x2bcbb3e8	1632:	addiu	t7, zero, -4
0x2bcbb3ec	1636:	and	s5, s5, t7
0x2bcbb3f0	1640:	lw	s5, 76(s5)	@ Get cb.vtbl
0x2bcbb3f4	1644:	lw	a0, 48(s5)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbb3f8	1648:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbb3fc	1652:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb400	1656:	jalr	s7
0x2bcbb404	1660:	nop
          		@ Captured a stackmap here.
0x2bcbb408	1664:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbb40c	1668:	lw	s7, 0(JSP)
			@ Outgoing local(2) reg(20): not in register
0x2bcbb410	1672:	lw	s4, -60(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(21): not in register
0x2bcbb414	1676:	lw	s5, -68(JFP)	@ Java local cell # 0
			@ Outgoing local(13) reg(22): not in register
0x2bcbb418	1680:	lw	s6, -16(JFP)	@ Java local cell # 13
			@ Outgoing local(3) reg(23): not in register
0x2bcbb41c	1684:	sw	s7, 36(JFP)	@ spill Java temp cell # 2
0x2bcbb420	1688:	lw	s7, -56(JFP)	@ Java local cell # 3
0x2bcbb424	1692:	lw	ra, 36(JFP)	@ Java temp cell # 2
          		@ deferred comparison: 
0x2bcbb428	1696:	bne	ra, zero, PC=0x2bcbb428	@ branch to block L13
0x2bcbb42c	1700:	nop
          		@ Do putfield:
0x2bcbb430	1704:	sw	zero, 36(s5)	@ putfield(obj, fieldOffset, value{I|F});
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(13) reg(22): in correct register
			@ Outgoing local(3) reg(23): in correct register
			@ Initial Temp REF set is 
	L13:	1708:	@ entry point for branches
			@ Binding Incoming Local(2) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(13) to reg(22)
			@ Binding Incoming Local(3) to reg(23)
--->Fixed instruction at 1696(0x2bcbb428) to reference 1708
--->Fixed instruction at 1508(0x2bcbb36c) to reference 1708
          		@ MAP_PC idepth=0 javaPc=382 compiledPc=1708
          		@ Do getfield:
0x2bcbb434	1708:	lw	ra, 20(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbb438	1712:	lw	t9, 28(ra)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(13) reg(22): in correct register
			@ Outgoing local(3) reg(23): in correct register
          		@ deferred comparison: 
0x2bcbb43c	1716:	slt	t7, s4, t9
0x2bcbb440	1720:	bne	t7, zero, PC=0x2bcbb43c	@ branch to block L14
0x2bcbb444	1724:	nop
          		@ Do getfield:
0x2bcbb448	1728:	lw	ra, 36(s5)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(13) reg(22): in correct register
			@ Outgoing local(3) reg(23): in correct register
          		@ deferred comparison: 
0x2bcbb44c	1732:	bne	ra, zero, PC=0x2bcbb44c	@ branch to block L14
0x2bcbb450	1736:	nop
          		@ Do getfield:
0x2bcbb454	1740:	lw	ra, 8(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbb458	1744:	lw	t9, 16(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbb45c	1748:	sw	t9, 0(JSP)
0x2bcbb460	1752:	sw	s6, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbb464	1756:	lw	ra, 0(t9)	@ Get object.cb
0x2bcbb468	1760:	addiu	t7, zero, -4
0x2bcbb46c	1764:	and	ra, ra, t7
0x2bcbb470	1768:	lw	ra, 76(ra)	@ Get cb.vtbl
0x2bcbb474	1772:	lw	a0, 44(ra)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbb478	1776:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbb47c	1780:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb480	1784:	jalr	s7
0x2bcbb484	1788:	nop
          		@ Captured a stackmap here.
0x2bcbb488	1792:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbb48c	1796:	lw	s7, 0(JSP)
0x2bcbb490	1800:	lw	ra, -12(JFP)	@ Java local cell # 14
          		@ Do putfield:
0x2bcbb494	1804:	sw	s7, 8(ra)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcbb498	1808:	lw	s7, -16(JFP)	@ Java local cell # 13
0x2bcbb49c	1812:	sw	s7, 0(JSP)
0x2bcbb4a0	1816:	lw	t9, -28(JFP)	@ Java local cell # 10
0x2bcbb4a4	1820:	sw	t9, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbb4a8	1824:	lw	s6, 0(s7)	@ Get object.cb
0x2bcbb4ac	1828:	addiu	t7, zero, -4
0x2bcbb4b0	1832:	and	s6, s6, t7
0x2bcbb4b4	1836:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcbb4b8	1840:	lw	a0, 56(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbb4bc	1844:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbb4c0	1848:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb4c4	1852:	jalr	s7
0x2bcbb4c8	1856:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(11) reg(20): not in register
0x2bcbb4cc	1860:	lw	s4, -24(JFP)	@ Java local cell # 11
			@ Outgoing local(8) reg(21): not in register
0x2bcbb4d0	1864:	lw	s5, -36(JFP)	@ Java local cell # 8
			@ Outgoing local(6) reg(22): not in register
0x2bcbb4d4	1868:	lw	s6, -44(JFP)	@ Java local cell # 6
			@ Outgoing local(5) reg(23): not in register
0x2bcbb4d8	1872:	lw	s7, -48(JFP)	@ Java local cell # 5
0x2bcbb4dc	1876:	b	PC=0x2bcbb4dc	@ branch to block L15
0x2bcbb4e0	1880:	nop
			@ Initial Temp REF set is 
	L14:	1884:	@ entry point for branches
			@ Binding Incoming Local(2) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(13) to reg(22)
			@ Binding Incoming Local(3) to reg(23)
--->Fixed instruction at 1732(0x2bcbb44c) to reference 1884
--->Fixed instruction at 1720(0x2bcbb440) to reference 1884
          		@ MAP_PC idepth=0 javaPc=427 compiledPc=1884
          		@ Do getfield:
0x2bcbb4e4	1884:	lw	ra, 28(s5)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbb4e8	1888:	subu	t9, zero, ra	@ imul by -1

          		@ Do putfield:
0x2bcbb4ec	1892:	sw	t9, 28(s5)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcbb4f0	1896:	sw	s5, 0(JSP)
0x2bcbb4f4	1900:	sw	s6, 4(JSP)
0x2bcbb4f8	1904:	addiu	ra, s4, 1
0x2bcbb4fc	1908:	sw	ra, 8(JSP)
0x2bcbb500	1912:	sw	s7, 12(JSP)
0x2bcbb504	1916:	lw	ra, -52(JFP)	@ Java local cell # 4
0x2bcbb508	1920:	sw	ra, 16(JSP)
          		@ Fetch mb from vtable:
0x2bcbb50c	1924:	lw	t9, 0(s5)	@ Get object.cb
0x2bcbb510	1928:	addiu	t7, zero, -4
0x2bcbb514	1932:	and	t9, t9, t7
0x2bcbb518	1936:	lw	t9, 76(t9)	@ Get cb.vtbl
0x2bcbb51c	1940:	lw	a0, 48(t9)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbb520	1944:	addiu	JSP, JSP, 20	@ adjust JSP before method call
0x2bcbb524	1948:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb528	1952:	jalr	s7
0x2bcbb52c	1956:	nop
          		@ Captured a stackmap here.
0x2bcbb530	1960:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbb534	1964:	lw	s7, 0(JSP)
          		@ Do getfield:
0x2bcbb538	1968:	lw	s6, 8(s7)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbb53c	1972:	lw	s5, -12(JFP)	@ Java local cell # 14
0x2bcbb540	1976:	sw	s5, 0(JSP)
0x2bcbb544	1980:	sw	s6, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbb548	1984:	lw	s6, 0(s5)	@ Get object.cb
0x2bcbb54c	1988:	addiu	t7, zero, -4
0x2bcbb550	1992:	and	s6, s6, t7
0x2bcbb554	1996:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcbb558	2000:	lw	a0, 44(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbb55c	2004:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbb560	2008:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcbb564	2012:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb568	2016:	jalr	s7
0x2bcbb56c	2020:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcbb570	2024:	lw	s6, -68(JFP)	@ Java local cell # 0
0x2bcbb574	2028:	lw	s7, 28(s6)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbb578	2032:	subu	s5, zero, s7	@ imul by -1

          		@ Do putfield:
0x2bcbb57c	2036:	sw	s5, 28(s6)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcbb580	2040:	lw	s7, -16(JFP)	@ Java local cell # 13
0x2bcbb584	2044:	sw	s7, 0(JSP)
0x2bcbb588	2048:	lw	ra, -28(JFP)	@ Java local cell # 10
0x2bcbb58c	2052:	sw	ra, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbb590	2056:	lw	s5, 0(s7)	@ Get object.cb
0x2bcbb594	2060:	addiu	t7, zero, -4
0x2bcbb598	2064:	and	s5, s5, t7
0x2bcbb59c	2068:	lw	s5, 76(s5)	@ Get cb.vtbl
0x2bcbb5a0	2072:	lw	a0, 56(s5)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbb5a4	2076:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbb5a8	2080:	lw	s7, 0(a0)	@ call method through mb
0x2bcbb5ac	2084:	jalr	s7
0x2bcbb5b0	2088:	nop
          		@ Captured a stackmap here.
0x2bcbb5b4	2092:	lw	s7, 36(JFP)	@ Java temp cell # 2
0x2bcbb5b8	2096:	sw	s7, -4(JFP)	@ Java local cell # 16
			@ Outgoing local(11) reg(20): not in register
0x2bcbb5bc	2100:	lw	s4, -24(JFP)	@ Java local cell # 11
			@ Outgoing local(8) reg(21): not in register
0x2bcbb5c0	2104:	lw	s5, -36(JFP)	@ Java local cell # 8
			@ Outgoing local(6) reg(22): not in register
0x2bcbb5c4	2108:	lw	s6, -44(JFP)	@ Java local cell # 6
			@ Outgoing local(5) reg(23): not in register
0x2bcbb5c8	2112:	lw	s7, -48(JFP)	@ Java local cell # 5
			@ Initial Temp REF set is 
	L15:	2116:	@ entry point for branches
			@ Binding Incoming Local(11) to reg(20)
			@ Binding Incoming Local(8) to reg(21)
			@ Binding Incoming Local(6) to reg(22)
			@ Binding Incoming Local(5) to reg(23)
--->Fixed instruction at 1876(0x2bcbb4dc) to reference 2116
          		@ MAP_PC idepth=0 javaPc=478 compiledPc=2116
0x2bcbb5cc	2116:	lw	ra, -12(JFP)	@ Java local cell # 14
          		@ Do getfield:
0x2bcbb5d0	2120:	lw	t9, 8(ra)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbb5d4	2124:	lw	t8, -40(JFP)	@ Java local cell # 7
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(8) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
          		@ deferred comparison: 
0x2bcbb5d8	2128:	slt	t7, t8, t9
0x2bcbb5dc	2132:	beq	t7, zero, PC=0x2bcbb5d8	@ branch to block L16
0x2bcbb5e0	2136:	nop
0x2bcbb5e4	2140:	lw	t9, -68(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcbb5e8	2144:	lw	t6, 28(t9)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(8) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
          		@ deferred comparison: 
0x2bcbb5ec	2148:	addiu	t7, zero, 1
0x2bcbb5f0	2152:	bne	t6, t7, PC=0x2bcbb5ec	@ branch to block L17
0x2bcbb5f4	2156:	nop
          		@ Do getfield:
0x2bcbb5f8	2160:	lw	t6, 44(t9)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(8) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
          		@ deferred comparison: 
0x2bcbb5fc	2164:	addiu	t7, zero, 98
0x2bcbb600	2168:	beq	t6, t7, PC=0x2bcbb5fc	@ branch to block L18
0x2bcbb604	2172:	nop
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(8) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
			@ Initial Temp REF set is 
	L17:	2176:	@ entry point for branches
			@ Binding Incoming Local(11) to reg(20)
			@ Binding Incoming Local(8) to reg(21)
			@ Binding Incoming Local(6) to reg(22)
			@ Binding Incoming Local(5) to reg(23)
--->Fixed instruction at 2152(0x2bcbb5f0) to reference 2176
          		@ MAP_PC idepth=0 javaPc=505 compiledPc=2176
0x2bcbb608	2176:	lw	ra, -68(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcbb60c	2180:	lw	t9, 28(ra)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(8) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
          		@ deferred comparison: 
0x2bcbb610	2184:	addiu	t7, zero, -1
0x2bcbb614	2188:	bne	t9, t7, PC=0x2bcbb610	@ branch to block L16
0x2bcbb618	2192:	nop
          		@ Do getfield:
0x2bcbb61c	2196:	lw	t9, 44(ra)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(8) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
          		@ deferred comparison: 
0x2bcbb620	2200:	addiu	t7, zero, 119
0x2bcbb624	2204:	bne	t9, t7, PC=0x2bcbb620	@ branch to block L16
0x2bcbb628	2208:	nop
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(8) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
			@ Initial Temp REF set is 
	L18:	2212:	@ entry point for branches
			@ Binding Incoming Local(11) to reg(20)
			@ Binding Incoming Local(8) to reg(21)
			@ Binding Incoming Local(6) to reg(22)
			@ Binding Incoming Local(5) to reg(23)
--->Fixed instruction at 2168(0x2bcbb600) to reference 2212
          		@ MAP_PC idepth=0 javaPc=522 compiledPc=2212
0x2bcbb62c	2212:	lw	ra, -12(JFP)	@ Java local cell # 14
          		@ Do getfield:
0x2bcbb630	2216:	lw	t9, 12(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbb634	2220:	lw	t8, 8(t9)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(8) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
          		@ deferred comparison: 
0x2bcbb638	2224:	addiu	t7, zero, 99
0x2bcbb63c	2228:	beq	t8, t7, PC=0x2bcbb638	@ branch to block L16
0x2bcbb640	2232:	nop
          		@ Do getfield:
0x2bcbb644	2236:	lw	t9, 8(ra)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbb648	2240:	sw	t9, -52(JFP)	@ Java local cell # 4
0x2bcbb64c	2244:	sw	t9, -40(JFP)	@ Java local cell # 7
0x2bcbb650	2248:	sw	ra, -24(JFP)	@ Java local cell # 11
0x2bcbb654	2252:	lw	t8, -56(JFP)	@ Java local cell # 3
			@ Outgoing local(11) reg(20): not in register
0x2bcbb658	2256:	lw	s4, -24(JFP)	@ Java local cell # 11
			@ Outgoing local(0) reg(21): not in register
0x2bcbb65c	2260:	lw	s5, -68(JFP)	@ Java local cell # 0
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
          		@ deferred comparison: 
0x2bcbb660	2264:	slt	t7, t8, t9
0x2bcbb664	2268:	beq	t7, zero, PC=0x2bcbb660	@ branch to block L19
0x2bcbb668	2272:	nop
0x2bcbb66c	2276:	addiu	ra, zero, 1	@ const 1
0x2bcbb670	2280:	sw	ra, -20(JFP)	@ Java local cell # 12
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
0x2bcbb674	2284:	b	PC=0x2bcbb674	@ branch to block L19
0x2bcbb678	2288:	nop
			@ Initial Temp REF set is 
	L16:	2292:	@ entry point for branches
			@ Binding Incoming Local(11) to reg(20)
			@ Binding Incoming Local(8) to reg(21)
			@ Binding Incoming Local(6) to reg(22)
			@ Binding Incoming Local(5) to reg(23)
--->Fixed instruction at 2228(0x2bcbb63c) to reference 2292
--->Fixed instruction at 2204(0x2bcbb624) to reference 2292
--->Fixed instruction at 2188(0x2bcbb614) to reference 2292
--->Fixed instruction at 2132(0x2bcbb5dc) to reference 2292
          		@ MAP_PC idepth=0 javaPc=562 compiledPc=2292
0x2bcbb67c	2292:	lw	ra, -12(JFP)	@ Java local cell # 14
          		@ Do getfield:
0x2bcbb680	2296:	lw	t9, 8(ra)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(0) reg(21): not in register
0x2bcbb684	2300:	lw	s5, -68(JFP)	@ Java local cell # 0
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
0x2bcbb688	2304:	lw	t8, -36(JFP)	@ Java local cell # 8
          		@ deferred comparison: 
0x2bcbb68c	2308:	slt	t7, t9, t8
0x2bcbb690	2312:	beq	t7, zero, PC=0x2bcbb68c	@ branch to block L19
0x2bcbb694	2316:	nop
          		@ Do getfield:
0x2bcbb698	2320:	lw	t9, 28(s5)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
          		@ deferred comparison: 
0x2bcbb69c	2324:	addiu	t7, zero, -1
0x2bcbb6a0	2328:	bne	t9, t7, PC=0x2bcbb69c	@ branch to block L20
0x2bcbb6a4	2332:	nop
          		@ Do getfield:
0x2bcbb6a8	2336:	lw	t9, 44(s5)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
          		@ deferred comparison: 
0x2bcbb6ac	2340:	addiu	t7, zero, 98
0x2bcbb6b0	2344:	beq	t9, t7, PC=0x2bcbb6ac	@ branch to block L21
0x2bcbb6b4	2348:	nop
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
			@ Initial Temp REF set is 
	L20:	2352:	@ entry point for branches
			@ Binding Incoming Local(11) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(6) to reg(22)
			@ Binding Incoming Local(5) to reg(23)
--->Fixed instruction at 2328(0x2bcbb6a0) to reference 2352
          		@ MAP_PC idepth=0 javaPc=589 compiledPc=2352
          		@ Do getfield:
0x2bcbb6b8	2352:	lw	ra, 28(s5)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
          		@ deferred comparison: 
0x2bcbb6bc	2356:	addiu	t7, zero, 1
0x2bcbb6c0	2360:	bne	ra, t7, PC=0x2bcbb6bc	@ branch to block L19
0x2bcbb6c4	2364:	nop
          		@ Do getfield:
0x2bcbb6c8	2368:	lw	ra, 44(s5)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
          		@ deferred comparison: 
0x2bcbb6cc	2372:	addiu	t7, zero, 119
0x2bcbb6d0	2376:	bne	ra, t7, PC=0x2bcbb6cc	@ branch to block L19
0x2bcbb6d4	2380:	nop
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
			@ Initial Temp REF set is 
	L21:	2384:	@ entry point for branches
			@ Binding Incoming Local(11) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(6) to reg(22)
			@ Binding Incoming Local(5) to reg(23)
--->Fixed instruction at 2344(0x2bcbb6b0) to reference 2384
          		@ MAP_PC idepth=0 javaPc=606 compiledPc=2384
0x2bcbb6d8	2384:	lw	ra, -12(JFP)	@ Java local cell # 14
          		@ Do getfield:
0x2bcbb6dc	2388:	lw	t9, 12(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbb6e0	2392:	lw	t8, 8(t9)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
          		@ deferred comparison: 
0x2bcbb6e4	2396:	addiu	t7, zero, 99
0x2bcbb6e8	2400:	beq	t8, t7, PC=0x2bcbb6e4	@ branch to block L19
0x2bcbb6ec	2404:	nop
          		@ Do getfield:
0x2bcbb6f0	2408:	lw	t9, 8(ra)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbb6f4	2412:	sw	t9, -56(JFP)	@ Java local cell # 3
0x2bcbb6f8	2416:	sw	t9, -36(JFP)	@ Java local cell # 8
0x2bcbb6fc	2420:	sw	ra, -24(JFP)	@ Java local cell # 11
0x2bcbb700	2424:	lw	t8, -52(JFP)	@ Java local cell # 4
			@ Outgoing local(11) reg(20): not in register
0x2bcbb704	2428:	lw	s4, -24(JFP)	@ Java local cell # 11
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
          		@ deferred comparison: 
0x2bcbb708	2432:	slt	t7, t9, t8
0x2bcbb70c	2436:	beq	t7, zero, PC=0x2bcbb708	@ branch to block L19
0x2bcbb710	2440:	nop
0x2bcbb714	2444:	addiu	ra, zero, 1	@ const 1
0x2bcbb718	2448:	sw	ra, -20(JFP)	@ Java local cell # 12
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
			@ Initial Temp REF set is 
	L19:	2452:	@ entry point for branches
			@ Binding Incoming Local(11) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(6) to reg(22)
			@ Binding Incoming Local(5) to reg(23)
--->Fixed instruction at 2284(0x2bcbb674) to reference 2452
--->Fixed instruction at 2436(0x2bcbb70c) to reference 2452
--->Fixed instruction at 2400(0x2bcbb6e8) to reference 2452
--->Fixed instruction at 2376(0x2bcbb6d0) to reference 2452
--->Fixed instruction at 2360(0x2bcbb6c0) to reference 2452
--->Fixed instruction at 2312(0x2bcbb690) to reference 2452
--->Fixed instruction at 2268(0x2bcbb664) to reference 2452
          		@ MAP_PC idepth=0 javaPc=643 compiledPc=2452
0x2bcbb71c	2452:	addiu	s6, s6, 1
0x2bcbb720	2456:	sw	s6, -44(JFP)	@ Java local cell # 6
			@ Outgoing local(11) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(6) reg(22): in correct register
			@ Outgoing local(5) reg(23): in correct register
			@ Initial Temp REF set is 
	L8:	2460:	@ entry point for branches
			@ Binding Incoming Local(11) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(6) to reg(22)
			@ Binding Incoming Local(5) to reg(23)
--->Fixed instruction at 716(0x2bcbb054) to reference 2460
          		@ MAP_PC idepth=0 javaPc=646 compiledPc=2460
			@ Outgoing local(11) reg(20): in correct register
          		@ deferred comparison: 
0x2bcbb724	2460:	slt	t7, s6, s7
0x2bcbb728	2464:	beq	t7, zero, PC=0x2bcbb724	@ branch to block L22
0x2bcbb72c	2468:	nop
0x2bcbb730	2472:	lw	ra, -20(JFP)	@ Java local cell # 12
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcbb734	2476:	beq	ra, zero, PC=0x2bcbb05c	@ branch to block L9
0x2bcbb738	2480:	nop
0x2bcbb734	2476:	beq	ra, zero, PC=0x2bcbb068	@ branch to block L9, skip GC
0x2bcbb738	2480:	nop
			@ Outgoing local(11) reg(20): in correct register
			@ Initial Temp REF set is 
	L22:	2484:	@ entry point for branches
			@ Binding Incoming Local(11) to reg(20)
--->Fixed instruction at 2464(0x2bcbb728) to reference 2484
          		@ MAP_PC idepth=0 javaPc=658 compiledPc=2484
0x2bcbb73c	2484:	sw	s4, -68(JFP)	@ Java local cell # 0
0x2bcbb740	2488:	addiu	JSP, JFP, -64
0x2bcbb744	2492:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbb748	2496:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbb74c	2500:	nop
0x2bcbb750	2504:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 1600(0x2bcbb3c8) to reference 2504
--->Fixed instruction at 1268(0x2bcbb27c) to reference 2504
0x2bcbb754	2508:	.word	9791584	@ cb com.sun.mep.bench.Chess.Point
--->Fixed instruction at 1236(0x2bcbb25c) to reference 2508
0x2bcbb758	2512:	.word	9110340	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
--->Fixed instruction at 1028(0x2bcbb18c) to reference 2512
0x2bcbb75c	2516:	.word	9493668	@ StringICell
--->Fixed instruction at 976(0x2bcbb158) to reference 2516
0x2bcbb760	2520:	.word	9109640	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
--->Fixed instruction at 944(0x2bcbb138) to reference 2520
0x2bcbb764	2524:	.word	9109444	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
--->Fixed instruction at 992(0x2bcbb168) to reference 2524
--->Fixed instruction at 888(0x2bcbb100) to reference 2524
0x2bcbb768	2528:	.word	9495428	@ StringICell
--->Fixed instruction at 876(0x2bcbb0f4) to reference 2528
0x2bcbb76c	2532:	.word	9108968	@ mb java.lang.StringBuffer.<init>()V
--->Fixed instruction at 844(0x2bcbb0d4) to reference 2532
0x2bcbb770	2536:	.word	8642484	@ cb java.lang.StringBuffer
--->Fixed instruction at 824(0x2bcbb0c0) to reference 2536
0x2bcbb774	2540:	.word	1099511628
--->Fixed instruction at 752(0x2bcbb078) to reference 2540
0x2bcbb778	2544:	.word	9792944	@ mb com.sun.mep.bench.Chess.Move.<init>()V
--->Fixed instruction at 1100(0x2bcbb1d4) to reference 2544
--->Fixed instruction at 184(0x2bcbae40) to reference 2544
0x2bcbb77c	2548:	.word	9792720	@ cb com.sun.mep.bench.Chess.Move
--->Fixed instruction at 1084(0x2bcbb1c4) to reference 2548
--->Fixed instruction at 168(0x2bcbae30) to reference 2548
0x2bcbb780	2552:	.word	9751180	@ mb com.sun.mep.bench.Chess.GameState.<init>(Lcom/sun/mep/bench/Chess/ChessGame;)V
--->Fixed instruction at 136(0x2bcbae10) to reference 2552
0x2bcbb784	2556:	.word	9750888	@ cb com.sun.mep.bench.Chess.GameState
--->Fixed instruction at 108(0x2bcbadf4) to reference 2556
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbad88) >>>>>>>>
          		@ Capacity is 37 word(s)
0x2bcbad88	0:	addiu	a1, JSP, 128
<<<<<<<<<Pop Code Buffer to PC = 2560 (0x2bcbb788) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbadd8) >>>>>>>>
          		@ spillSize is 7 word(s), add to JFP+28
0x2bcbadd8	80:	addiu	JSP, JFP, 56
          		@ setup cp base register
0x2bcbaddc	84:	lui	CP, hi16(0x2bcb)
0x2bcbade0	88:	ori	CP, CP, lo16(0x2bcbb750)
0x2bcbade4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 2560 (0x2bcbb788) <<<<<<<<<
JS: COMPILED: size=3128 startPC=0x2bcbad88 com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;
OSR: Intr2Comp: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;
OSR: Intr2Comp: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.Point.<init>(II)V
JS: COMPILING com.sun.mep.bench.Chess.Point.<init>(II)V
orig bkID(0) Incoming Locals(3 0x0): 0- 1- 2- 
orig bkID(0) Incoming Locals(3 0x0): 0- 1- 2- 

#################################################

The maximum node counts per root node are 3
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 4 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Point.<init>(II)V(Point.java:39)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<0>  (0x9497e0):    aload_0 
<1>  (0x9497e1):    invokeignored_quick 
<4>  (0x9497e4):    aload_0 
<5>  (0x9497e5):    iload_1 
<6>  (0x9497e6):    putfield_quick #2
<9>  (0x9497e9):    aload_0 
<10>  (0x9497ea):    iload_2 
<11>  (0x9497eb):    putfield_quick #3
<14>  (0x9497ee):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(3): 
	local(0)	ID(2)
 	local(1)	ID(3)
 	local(2)	ID(7)
 
Incoming Locals(3): 
	local(0)	ID(2)
 	local(1)	ID(3)
 	local(2)	ID(7)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 6) ASSIGN (32-bit field) 
      <(ID: 5) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 2)
            <(ID: 11) LOCAL (reference)   0>
         <(ID: 4) CONST_FIELD_OFFSET (NONE)  (2)
      <(ID: 3) LOCAL (int)   1>

   <(ID: 10) ASSIGN (32-bit field) 
      <(ID: 9) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 2)
         <(ID: 8) CONST_FIELD_OFFSET (NONE)  (3)
      <(ID: 7) LOCAL (int)   2>

   <(ID: 12) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 98
ESTIMATED BUFFER SIZE = 204
CODE BUFFER ADDRESS = 0x2bcbb928
PC MAP TABLE ADDRESS = 0x2bcbb930
CODE ENTRY ADDRESS = 0x2bcbb958
          		@ Method prologue
0x2bcbb958	0:	addiu	a1, JSP, 40	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbb95c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbb960	8:	sltu	t7, a1, CHUNKEND
0x2bcbb964	12:	bne	t7, zero, PC=0x2bcbb958	@ goto .skip
0x2bcbb968	16:	nop
0x2bcbb96c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbb970	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbb964) >>>>>>>>
0x2bcbb964	12:	bne	t7, zero, PC=0x2bcbb974	@ goto .skip
0x2bcbb968	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbb974) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbb974	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbb978	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbb97c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbb980	40:	addiu	a3, zero, 0
0x2bcbb984	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbb988	48:	addiu	a3, zero, -1
0x2bcbb98c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbb990	56:	move	a0, EE
0x2bcbb994	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbb998	64:	lui	t9, hi16(0x65)
0x2bcbb99c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbb9a0	72:	jalr	t9
0x2bcbb9a4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbb9a8	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbb9ac	84:	nop
0x2bcbb9b0	88:	nop
0x2bcbb9b4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbb9b8	96:	lw	s4, -12(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbb9bc	100:	lw	s5, -8(JFP)	@ Java local cell # 1
			@ Preloading incoming local(2) reg(22)
0x2bcbb9c0	104:	lw	s6, -4(JFP)	@ Java local cell # 2
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=108
          		@ Do putfield:
0x2bcbb9c4	108:	sw	s5, 8(s4)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do putfield:
0x2bcbb9c8	112:	sw	s6, 12(s4)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcbb9cc	116:	addiu	JSP, JFP, -12
0x2bcbb9d0	120:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbb9d4	124:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbb9d8	128:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbb958) >>>>>>>>
          		@ Capacity is 13 word(s)
0x2bcbb958	0:	addiu	a1, JSP, 40
<<<<<<<<<Pop Code Buffer to PC = 132 (0x2bcbb9dc) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbb9a8) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbb9a8	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbb9ac	84:	lui	CP, hi16(0x2bcb)
0x2bcbb9b0	88:	ori	CP, CP, lo16(0x2bcbb9dc)
0x2bcbb9b4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 132 (0x2bcbb9dc) <<<<<<<<<
JS: COMPILED: size=184 startPC=0x2bcbb958 com.sun.mep.bench.Chess.Point.<init>(II)V
JS: ATTEMPTING TO COMPILE java.util.Vector.addElement(Ljava/lang/Object;)V
JS: COMPILING java.util.Vector.addElement(Ljava/lang/Object;)V
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
bkID(0) local(0 #0)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(2 0x0): 0- 1- 
+bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
-gbk bkID(1) Incoming Locals(2 0x0): 0- 1- 
+gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
bkID(0) local(0 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
dstBk(0) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
dstBk(1) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
bkID(0) local(1 #1)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
+bk  bkID(0) Incoming Locals(2 0x3): 0+ 1+ 
-gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
+gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
bkID(0) local(1 #1)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(0) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(0) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(1) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 

#################################################

The maximum node counts per root node are 7
IR block list contains 2 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 8 root nodes: in block 
* flags: 0x41
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: java.util.Vector.addElement(Ljava/lang/Object;)V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x6e6d18):    aload_0 
<1>  (0x6e6d19):    dup 
<2>  (0x6e6d1a):    getfield_quick #2
<5>  (0x6e6d1d):    iconst_1 
<6>  (0x6e6d1e):    iadd 
<7>  (0x6e6d1f):    putfield_quick #2
<10>  (0x6e6d22):    aload_0 
<11>  (0x6e6d23):    getfield_quick #4
<14>  (0x6e6d26):    aload_0 
<15>  (0x6e6d27):    agetfield_quick #3
<18>  (0x6e6d2a):    arraylength 
<19>  (0x6e6d2b):    if_icmplt <32>
<22>  (0x6e6d2e):    aload_0 
<23>  (0x6e6d2f):    aload_0 
<24>  (0x6e6d30):    getfield_quick #4
<27>  (0x6e6d33):    iconst_1 
<28>  (0x6e6d34):    iadd 
<29>  (0x6e6d35):    invokenonvirtual_quick #10015 <java.util.Vector.ensureCapacityHelper(I)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(46)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(0 1)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 12) FETCH (32-bit field) 
         <(ID: 4) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 5)
               <(ID: 11) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 10) ASSIGN (32-bit field) 
      <(ID: 9) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 5)
         <(ID: 8) CONST_FIELD_OFFSET (NONE)  (2)
      <(ID: 7) ADD (int) 
         <(ID: 5) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 6) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 15) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 22) FETCH (32-bit field) 
         <(ID: 14) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 5)
            <(ID: 13) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 18) IDENTITY (reference)  (ref count: 2)
      <(ID: 21) FETCH (reference) 
         <(ID: 17) FIELD_REF (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 5)
            <(ID: 16) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 19) IDENTITY (int)  (ref count: 2)
      <(ID: 23) ARRAY_LENGTH (int) 
         <(ID: 18) IDENTITY (reference)  (ref count: 2)

   <(ID: 20) BCOND (int) 
   target: (BlockID: 1 BlockPC: 32)
   condition: LT
   flags: 0
      <(ID: 15) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 19) IDENTITY (int)  (ref count: 2)


   <(ID: 30) INVOKE (v) 
      <(ID: 29) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 5)
         <(ID: 28) PARAMETER (int) 
            <(ID: 25) ADD (int) 
               <(ID: 15) IDENTITY (32-bit field)  (ref count: 3)
               <(ID: 24) CONST_JAVA_NUMERIC32 (int)  (1)
            <(ID: 27) NULL_PARAMETER (NONE) 
      <(ID: 26) CONST_MB (address field)  (java.util.Vector.ensureCapacityHelper(I)V)


*************************************************
*
* (block ID:1 block PC:32 )
* IR root list contains 6 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: java.util.Vector.addElement(Ljava/lang/Object;)V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<32>  (0x6e6d38):    aload_0 
<33>  (0x6e6d39):    agetfield_quick #3
<36>  (0x6e6d3c):    aload_0 
<37>  (0x6e6d3d):    dup 
<38>  (0x6e6d3e):    getfield_quick #4
<41>  (0x6e6d41):    dup_x1 
<42>  (0x6e6d42):    iconst_1 
<43>  (0x6e6d43):    iadd 
<44>  (0x6e6d44):    putfield_quick #4
<47>  (0x6e6d47):    aload_1 
<48>  (0x6e6d48):    aastore 
<49>  (0x6e6d49):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(32)
 	local(1)	ID(46)
 
Incoming Locals(2): 
	local(0)	ID(32)
 	local(1)	ID(46)
 
   <(ID: 31) MAP_PC (NONE)   32>

   <(ID: 35) IDENTITY (reference)  (ref count: 3)
      <(ID: 51) FETCH (reference) 
         <(ID: 34) FIELD_REF (reference) 
            <(ID: 32) IDENTITY (reference)  (ref count: 3)
               <(ID: 39) LOCAL (reference)   0>
            <(ID: 33) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 38) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 45) FETCH (32-bit field) 
         <(ID: 37) FIELD_REF (32-bit field) 
            <(ID: 32) IDENTITY (reference)  (ref count: 3)
            <(ID: 36) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 44) ASSIGN (32-bit field) 
      <(ID: 43) FIELD_REF (32-bit field) 
         <(ID: 32) IDENTITY (reference)  (ref count: 3)
         <(ID: 42) CONST_FIELD_OFFSET (NONE)  (4)
      <(ID: 41) ADD (int) 
         <(ID: 38) IDENTITY (32-bit field)  (ref count: 3)
         <(ID: 40) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 50) ASSIGN (reference) 
      <(ID: 49) INDEX (int) 
         <(ID: 35) IDENTITY (reference)  (ref count: 3)
         <(ID: 48) BOUNDS_CHECK (int) 
            <(ID: 38) IDENTITY (32-bit field)  (ref count: 3)
            <(ID: 47) ARRAY_LENGTH (int) 
               <(ID: 35) IDENTITY (reference)  (ref count: 3)
      <(ID: 46) LOCAL (reference)   1>

   <(ID: 52) RETURN (v) 


NUM BARRIER BYTES = 16
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 8
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 308
ESTIMATED BUFFER SIZE = 440
CODE BUFFER ADDRESS = 0x2bcbb9e0
PC MAP TABLE ADDRESS = 0x2bcbb9e8
CODE ENTRY ADDRESS = 0x2bcbba10
          		@ Method prologue
0x2bcbba10	0:	addiu	a1, JSP, 52	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbba14	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbba18	8:	sltu	t7, a1, CHUNKEND
0x2bcbba1c	12:	bne	t7, zero, PC=0x2bcbba10	@ goto .skip
0x2bcbba20	16:	nop
0x2bcbba24	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbba28	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbba1c) >>>>>>>>
0x2bcbba1c	12:	bne	t7, zero, PC=0x2bcbba2c	@ goto .skip
0x2bcbba20	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbba2c) <<<<<<<<<
		.skip
          		@ Set up frame for synchronized method
0x2bcbba2c	28:	addiu	a1, JSP, -8	@ ARG2 = JSP - argsSize * 4
0x2bcbba30	32:	addiu	a2, JSP, 0	@ NEW_JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbba34	36:	lui	t9, hi16(0x65)
0x2bcbba38	40:	ori	t9, t9, lo16(0x65a430)	@ call CVMCCMinvokeNonstaticSyncMethodHelper CVMCCMinvokeNonstaticSyncMethodHelper
0x2bcbba3c	44:	jalr	t9
0x2bcbba40	48:	nop
          		@ Interpreted -> compiled entry point
0x2bcbba44	52:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbba48	56:	nop
0x2bcbba4c	60:	nop
0x2bcbba50	64:	nop
			@ Initial Temp REF set is 
	L0:	68:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbba54	68:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbba58	72:	lw	s5, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=76
          		@ Do getfield:
0x2bcbba5c	76:	lw	s7, 8(s4)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbba60	80:	addiu	s6, s7, 1
          		@ Do putfield:
0x2bcbba64	84:	sw	s6, 8(s4)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do getfield:
0x2bcbba68	88:	lw	s7, 16(s4)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbba6c	92:	lw	s6, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbba70	96:	lw	ra, 8(s6)	@ arraylength
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbba74	100:	slt	t7, s7, ra
0x2bcbba78	104:	bne	t7, zero, PC=0x2bcbba74	@ branch to block L1
0x2bcbba7c	108:	nop
0x2bcbba80	112:	sw	s4, 0(JSP)
0x2bcbba84	116:	addiu	s6, s7, 1
0x2bcbba88	120:	sw	s6, 4(JSP)
0x2bcbba8c	124:	lw	a0, 0(CP)	@ mb java.util.Vector.ensureCapacityHelper(I)V
          		@ Invoke a method w/ a void return type
0x2bcbba90	128:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbba94	132:	lw	s7, 0(a0)	@ call method through mb
0x2bcbba98	136:	jalr	s7
0x2bcbba9c	140:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(0) reg(20): not in register
0x2bcbbaa0	144:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(21): not in register
0x2bcbbaa4	148:	lw	s5, -4(JFP)	@ Java local cell # 1
			@ Initial Temp REF set is 
	L1:	152:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
--->Fixed instruction at 104(0x2bcbba78) to reference 152
          		@ MAP_PC idepth=0 javaPc=32 compiledPc=152
          		@ Do getfield:
0x2bcbbaa8	152:	lw	s7, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbbaac	156:	lw	s6, 16(s4)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbbab0	160:	addiu	ra, s6, 1
          		@ Do putfield:
0x2bcbbab4	164:	sw	ra, 16(s4)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcbbab8	168:	lw	ra, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcbbabc	172:	sltu	t7, s6, ra
0x2bcbbac0	176:	bne	t7, zero, PC=0x2bcbbabc	@ br .skip
0x2bcbbac4	180:	nop
0x2bcbbac8	184:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbbacc	188:	nop
		.skip
--->Fixed instruction at 176(0x2bcbbac0) to reference 192
          		@ Do store(arrayObj, index) (elem type=L):
          		@ deferred comparison: aastore assignability check
0x2bcbbad0	192:	beq	s5, zero, PC=0x2bcbbad0	@ br .skip
0x2bcbbad4	196:	nop
0x2bcbbad8	200:	lw	a2, 0(s7)	@ Get the array class
0x2bcbbadc	204:	lw	a3, 0(s5)	@ Get the rhs class
0x2bcbbae0	208:	jal	PC=(0x2bcb8260)	@ call CVMCCMruntimeCheckArrayAssignableGlue
0x2bcbbae4	212:	nop
          		@ Captured a stackmap here.
.skip--->Fixed instruction at 192(0x2bcbbad0) to reference 216
          		@ aastore assignment check done
0x2bcbbae8	216:	sll	ra, s6, 2
0x2bcbbaec	220:	addu	ra, s7, ra
0x2bcbbaf0	224:	addiu	ra, ra, 12
0x2bcbbaf4	228:	sw	s5, 0(ra)
0x2bcbbaf8	232:	lw	t9, 0(CP)	@ cardTableVirtualBase
0x2bcbbafc	236:	addiu	t8, zero, 1	@ CARD_DIRTY_BYTE
0x2bcbbb00	240:	srl	t7, ra, 9	@ mark card table
0x2bcbbb04	244:	addu	t7, t9, t7	@ add indexReg and baseReg
0x2bcbbb08	248:	sb	t8, 0(t7)
0x2bcbbb0c	252:	addiu	JSP, JFP, -8
0x2bcbbb10	256:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbbb14	260:	b	PC=0x2bcb91ac	@ goto CVMCCMreturnFromSyncMethod
0x2bcbbb18	264:	nop
0x2bcbbb1c	268:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 232(0x2bcbbaf8) to reference 268
0x2bcbbb20	272:	.word	9094424	@ mb java.util.Vector.ensureCapacityHelper(I)V
--->Fixed instruction at 124(0x2bcbba8c) to reference 272
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbba10) >>>>>>>>
          		@ Capacity is 15 word(s)
0x2bcbba10	0:	addiu	a1, JSP, 52
<<<<<<<<<Pop Code Buffer to PC = 276 (0x2bcbbb24) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 52 (0x2bcbba44) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbba44	52:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbba48	56:	lui	CP, hi16(0x2bcb)
0x2bcbba4c	60:	ori	CP, CP, lo16(0x2bcbbb1c)
0x2bcbba50	64:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 276 (0x2bcbbb24) <<<<<<<<<
JS: COMPILED: size=344 startPC=0x2bcbba10 java.util.Vector.addElement(Ljava/lang/Object;)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.WPossMoves.Store_Move(II)V
JS: COMPILING com.sun.mep.bench.Chess.WPossMoves.Store_Move(II)V
orig bkID(0) Incoming Locals(3 0x0): 0- 1- 2- 
orig bkID(0) Incoming Locals(3 0x0): 0- 1- 2- 

#################################################

The maximum node counts per root node are 6
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 6 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.WPossMoves.Store_Move(II)V(WPossMoves.java:239)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<0>  (0x94e17c):    aload_0 
<1>  (0x94e17d):    agetfield_quick #2
<4>  (0x94e180):    new_quick #22 <com.sun.mep.bench.Chess.Point>
<7>  (0x94e183):    dup 
<8>  (0x94e184):    iload_1 
<9>  (0x94e185):    iload_2 
<10>  (0x94e186):    invokenonvirtual_quick #23 <com.sun.mep.bench.Chess.Point.<init>(II)V>
<13>  (0x94e189):    invokevirtual_quick_w #24 <java.util.Vector.addElement(Ljava/lang/Object;)V>
<16>  (0x94e18c):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(3): 
	local(0)	ID(2)
 	local(1)	ID(8)
 	local(2)	ID(9)
 
Incoming Locals(3): 
	local(0)	ID(2)
 	local(1)	ID(8)
 	local(2)	ID(9)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (reference)  (ref count: 3)
      <(ID: 24) FETCH (reference) 
         <(ID: 4) FIELD_REF (reference) 
            <(ID: 2) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 7) IDENTITY (reference)  (ref count: 3)
      <(ID: 16) NEW_OBJECT (reference) 
         <(ID: 6) CONST_CB (address field)  (com.sun.mep.bench.Chess.Point)

   <(ID: 15) INVOKE (v) 
      <(ID: 14) PARAMETER (reference) 
         <(ID: 7) IDENTITY (reference)  (ref count: 3)
         <(ID: 13) PARAMETER (int) 
            <(ID: 8) LOCAL (int)   1>
            <(ID: 12) PARAMETER (int) 
               <(ID: 9) LOCAL (int)   2>
               <(ID: 11) NULL_PARAMETER (NONE) 
      <(ID: 10) CONST_MB (address field)  (com.sun.mep.bench.Chess.Point.<init>(II)V)

   <(ID: 23) INVOKE (v) 
      <(ID: 20) PARAMETER (reference) 
         <(ID: 5) IDENTITY (reference)  (ref count: 3)
         <(ID: 19) PARAMETER (reference) 
            <(ID: 7) IDENTITY (reference)  (ref count: 3)
            <(ID: 18) NULL_PARAMETER (NONE) 
      <(ID: 22) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 21) GET_VTBL (NONE) 
            <(ID: 5) IDENTITY (reference)  (ref count: 3)
         <(ID: 17) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 49)

   <(ID: 25) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 20
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 110
ESTIMATED BUFFER SIZE = 236
CODE BUFFER ADDRESS = 0x2bcbbb38
PC MAP TABLE ADDRESS = 0x2bcbbb40
CODE ENTRY ADDRESS = 0x2bcbbb68
          		@ Method prologue
0x2bcbbb68	0:	addiu	a1, JSP, 52	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbbb6c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbbb70	8:	sltu	t7, a1, CHUNKEND
0x2bcbbb74	12:	bne	t7, zero, PC=0x2bcbbb68	@ goto .skip
0x2bcbbb78	16:	nop
0x2bcbbb7c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbbb80	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbbb74) >>>>>>>>
0x2bcbbb74	12:	bne	t7, zero, PC=0x2bcbbb84	@ goto .skip
0x2bcbbb78	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbbb84) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbbb84	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbbb88	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbbb8c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbbb90	40:	addiu	a3, zero, 0
0x2bcbbb94	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbbb98	48:	addiu	a3, zero, -1
0x2bcbbb9c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbbba0	56:	move	a0, EE
0x2bcbbba4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbbba8	64:	lui	t9, hi16(0x65)
0x2bcbbbac	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbbbb0	72:	jalr	t9
0x2bcbbbb4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbbbb8	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbbbbc	84:	nop
0x2bcbbbc0	88:	nop
0x2bcbbbc4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbbbc8	96:	lw	s4, -12(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbbbcc	100:	lw	s5, -8(JFP)	@ Java local cell # 1
			@ Preloading incoming local(2) reg(22)
0x2bcbbbd0	104:	lw	s6, -4(JFP)	@ Java local cell # 2
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=108
          		@ Do getfield:
0x2bcbbbd4	108:	lw	s7, 8(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbbbd8	112:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Point
          		@ Do new:
0x2bcbbbdc	116:	sw	s7, 28(JFP)	@ REF spill Java temp cell # 0
          		@ cb: com.sun.mep.bench.Chess.Point
0x2bcbbbe0	120:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcbbbe4	124:	nop
          		@ Captured a stackmap here.
0x2bcbbbe8	128:	sw	v0, 0(JSP)
0x2bcbbbec	132:	sw	s5, 4(JSP)
0x2bcbbbf0	136:	sw	s6, 8(JSP)
0x2bcbbbf4	140:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Point.<init>(II)V
          		@ Invoke a method w/ a void return type
0x2bcbbbf8	144:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbbbfc	148:	sw	v0, 32(JFP)	@ REF spill Java temp cell # 1
0x2bcbbc00	152:	lw	s7, 0(a0)	@ call method through mb
0x2bcbbc04	156:	jalr	s7
0x2bcbbc08	160:	nop
          		@ Captured a stackmap here.
0x2bcbbc0c	164:	lw	s7, 28(JFP)	@ Java temp cell # 0
0x2bcbbc10	168:	sw	s7, 0(JSP)
0x2bcbbc14	172:	lw	s6, 32(JFP)	@ Java temp cell # 1
0x2bcbbc18	176:	sw	s6, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbbc1c	180:	lw	s6, 0(s7)	@ Get object.cb
0x2bcbbc20	184:	addiu	t7, zero, -4
0x2bcbbc24	188:	and	s6, s6, t7
0x2bcbbc28	192:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcbbc2c	196:	lw	a0, 196(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbbc30	200:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbbc34	204:	lw	s7, 0(a0)	@ call method through mb
0x2bcbbc38	208:	jalr	s7
0x2bcbbc3c	212:	nop
          		@ Captured a stackmap here.
0x2bcbbc40	216:	addiu	JSP, JFP, -12
0x2bcbbc44	220:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbbc48	224:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbbc4c	228:	nop
0x2bcbbc50	232:	.word	9791768	@ mb com.sun.mep.bench.Chess.Point.<init>(II)V
--->Fixed instruction at 140(0x2bcbbbf4) to reference 232
0x2bcbbc54	236:	.word	9791584	@ cb com.sun.mep.bench.Chess.Point
--->Fixed instruction at 112(0x2bcbbbd8) to reference 236
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbbb68) >>>>>>>>
          		@ Capacity is 18 word(s)
0x2bcbbb68	0:	addiu	a1, JSP, 60
<<<<<<<<<Pop Code Buffer to PC = 240 (0x2bcbbc58) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbbbb8) >>>>>>>>
          		@ spillSize is 2 word(s), add to JFP+28
0x2bcbbbb8	80:	addiu	JSP, JFP, 36
          		@ setup cp base register
0x2bcbbbbc	84:	lui	CP, hi16(0x2bcb)
0x2bcbbbc0	88:	ori	CP, CP, lo16(0x2bcbbc50)
0x2bcbbbc4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 240 (0x2bcbbc58) <<<<<<<<<
JS: COMPILED: size=316 startPC=0x2bcbbb68 com.sun.mep.bench.Chess.WPossMoves.Store_Move(II)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.GameState.myClone(Lcom/sun/mep/bench/Chess/GameState;)V
JS: COMPILING com.sun.mep.bench.Chess.GameState.myClone(Lcom/sun/mep/bench/Chess/GameState;)V
orig bkID(0) Incoming Locals(2 0x0): 1- 0- 
orig bkID(0) Incoming Locals(2 0x0): 1- 0- 

#################################################

The maximum node counts per root node are 7
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 5 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.GameState.myClone(Lcom/sun/mep/bench/Chess/GameState;)V(GameState.java:107)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x9537f4):    aload_1 
<1>  (0x9537f5):    agetfield_quick #3
<4>  (0x9537f8):    iconst_0 
<5>  (0x9537f9):    aload_0 
<6>  (0x9537fa):    agetfield_quick #3
<9>  (0x9537fd):    iconst_0 
<10>  (0x9537fe):    bipush 64
<12>  (0x953800):    invokestatic_quick #8 <java.lang.System.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V>
<15>  (0x953803):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(1)	ID(2)
 	local(0)	ID(7)
 
Incoming Locals(2): 
	local(1)	ID(2)
 	local(0)	ID(7)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (reference)  (ref count: 2)
      <(ID: 21) FETCH (reference) 
         <(ID: 4) FIELD_REF (reference) 
            <(ID: 2) LOCAL (reference)   1>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 10) IDENTITY (reference)  (ref count: 2)
      <(ID: 22) FETCH (reference) 
         <(ID: 9) FIELD_REF (reference) 
            <(ID: 7) LOCAL (reference)   0>
            <(ID: 8) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 20) INVOKE (v) 
      <(ID: 19) PARAMETER (reference) 
         <(ID: 5) IDENTITY (reference)  (ref count: 2)
         <(ID: 18) PARAMETER (int) 
            <(ID: 6) CONST_JAVA_NUMERIC32 (int)  (0)
            <(ID: 17) PARAMETER (reference) 
               <(ID: 10) IDENTITY (reference)  (ref count: 2)
               <(ID: 16) PARAMETER (int) 
                  <(ID: 11) CONST_JAVA_NUMERIC32 (int)  (0)
                  <(ID: 15) PARAMETER (int) 
                     <(ID: 12) CONST_JAVA_NUMERIC32 (int)  (64)
                     <(ID: 14) NULL_PARAMETER (NONE) 
      <(ID: 13) CONST_MB (address field)  (java.lang.System.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V)

   <(ID: 23) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 104
ESTIMATED BUFFER SIZE = 208
CODE BUFFER ADDRESS = 0x2bcbbc74
PC MAP TABLE ADDRESS = 0x2bcbbc7c
CODE ENTRY ADDRESS = 0x2bcbbca0
          		@ Method prologue
0x2bcbbca0	0:	addiu	a1, JSP, 52	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbbca4	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbbca8	8:	sltu	t7, a1, CHUNKEND
0x2bcbbcac	12:	bne	t7, zero, PC=0x2bcbbca0	@ goto .skip
0x2bcbbcb0	16:	nop
0x2bcbbcb4	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbbcb8	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbbcac) >>>>>>>>
0x2bcbbcac	12:	bne	t7, zero, PC=0x2bcbbcbc	@ goto .skip
0x2bcbbcb0	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbbcbc) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbbcbc	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbbcc0	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbbcc4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbbcc8	40:	addiu	a3, zero, 0
0x2bcbbccc	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbbcd0	48:	addiu	a3, zero, -1
0x2bcbbcd4	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbbcd8	56:	move	a0, EE
0x2bcbbcdc	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbbce0	64:	lui	t9, hi16(0x65)
0x2bcbbce4	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbbce8	72:	jalr	t9
0x2bcbbcec	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbbcf0	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbbcf4	84:	nop
0x2bcbbcf8	88:	nop
0x2bcbbcfc	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(1) reg(20)
0x2bcbbd00	96:	lw	s4, -4(JFP)	@ Java local cell # 1
			@ Preloading incoming local(0) reg(21)
0x2bcbbd04	100:	lw	s5, -8(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
          		@ Do getfield:
0x2bcbbd08	104:	lw	s7, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbbd0c	108:	lw	s6, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbbd10	112:	sw	s7, 0(JSP)
0x2bcbbd14	116:	sw	zero, 4(JSP)
0x2bcbbd18	120:	sw	s6, 8(JSP)
0x2bcbbd1c	124:	sw	zero, 12(JSP)
0x2bcbbd20	128:	addiu	s7, zero, 64	@ const 64
0x2bcbbd24	132:	sw	s7, 16(JSP)
0x2bcbbd28	136:	lw	a0, 0(CP)	@ mb java.lang.System.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
          		@ Invoke a method w/ a void return type
0x2bcbbd2c	140:	addiu	JSP, JSP, 20	@ adjust JSP before method call
0x2bcbbd30	144:	jal	PC=(0x2bcb8ff8)	@ call CVMCCMinvokeJNIMethod() for java.lang.System.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
0x2bcbbd34	148:	nop
          		@ Captured a stackmap here.
0x2bcbbd38	152:	addiu	JSP, JFP, -8
0x2bcbbd3c	156:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbbd40	160:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbbd44	164:	nop
0x2bcbbd48	168:	.word	9227556	@ mb java.lang.System.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
--->Fixed instruction at 136(0x2bcbbd28) to reference 168
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbbca0) >>>>>>>>
          		@ Capacity is 15 word(s)
0x2bcbbca0	0:	addiu	a1, JSP, 52
<<<<<<<<<Pop Code Buffer to PC = 172 (0x2bcbbd4c) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbbcf0) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbbcf0	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbbcf4	84:	lui	CP, hi16(0x2bcb)
0x2bcbbcf8	88:	ori	CP, CP, lo16(0x2bcbbd48)
0x2bcbbcfc	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 172 (0x2bcbbd4c) <<<<<<<<<
JS: COMPILED: size=232 startPC=0x2bcbbca0 com.sun.mep.bench.Chess.GameState.myClone(Lcom/sun/mep/bench/Chess/GameState;)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.WPossMoves.WKnight_Moves(I)V
JS: COMPILING com.sun.mep.bench.Chess.WPossMoves.WKnight_Moves(I)V
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 

#################################################

The maximum node counts per root node are 6
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 10 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.WPossMoves.WKnight_Moves(I)V(WPossMoves.java:190)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x94e048):    aload_0 
<1>  (0x94e049):    iload_1 
<2>  (0x94e04a):    iconst_1 
<3>  (0x94e04b):    bipush 240
<5>  (0x94e04d):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<8>  (0x94e050):    pop 
<9>  (0x94e051):    aload_0 
<10>  (0x94e052):    iload_1 
<11>  (0x94e053):    iconst_2 
<12>  (0x94e054):    bipush 248
<14>  (0x94e056):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<17>  (0x94e059):    pop 
<18>  (0x94e05a):    aload_0 
<19>  (0x94e05b):    iload_1 
<20>  (0x94e05c):    iconst_2 
<21>  (0x94e05d):    bipush 8
<23>  (0x94e05f):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<26>  (0x94e062):    pop 
<27>  (0x94e063):    aload_0 
<28>  (0x94e064):    iload_1 
<29>  (0x94e065):    iconst_1 
<30>  (0x94e066):    bipush 16
<32>  (0x94e068):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<35>  (0x94e06b):    pop 
<36>  (0x94e06c):    aload_0 
<37>  (0x94e06d):    iload_1 
<38>  (0x94e06e):    iconst_m1 
<39>  (0x94e06f):    bipush 16
<41>  (0x94e071):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<44>  (0x94e074):    pop 
<45>  (0x94e075):    aload_0 
<46>  (0x94e076):    iload_1 
<47>  (0x94e077):    bipush 254
<49>  (0x94e079):    bipush 8
<51>  (0x94e07b):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<54>  (0x94e07e):    pop 
<55>  (0x94e07f):    aload_0 
<56>  (0x94e080):    iload_1 
<57>  (0x94e081):    bipush 254
<59>  (0x94e083):    bipush 248
<61>  (0x94e085):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<64>  (0x94e088):    pop 
<65>  (0x94e089):    aload_0 
<66>  (0x94e08a):    iload_1 
<67>  (0x94e08b):    iconst_m1 
<68>  (0x94e08c):    bipush 240
<70>  (0x94e08e):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<73>  (0x94e091):    pop 
<74>  (0x94e092):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 12) INVOKE (int) 
      <(ID: 11) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 8)
            <(ID: 22) LOCAL (reference)   0>
         <(ID: 10) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 8)
               <(ID: 23) LOCAL (int)   1>
            <(ID: 9) PARAMETER (int) 
               <(ID: 4) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 8) PARAMETER (int) 
                  <(ID: 5) CONST_JAVA_NUMERIC32 (int)  (-16)
                  <(ID: 7) NULL_PARAMETER (NONE) 
      <(ID: 6) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 21) INVOKE (int) 
      <(ID: 20) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 8)
         <(ID: 19) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 8)
            <(ID: 18) PARAMETER (int) 
               <(ID: 13) CONST_JAVA_NUMERIC32 (int)  (2)
               <(ID: 17) PARAMETER (int) 
                  <(ID: 14) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 16) NULL_PARAMETER (NONE) 
      <(ID: 15) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 32) INVOKE (int) 
      <(ID: 31) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 8)
         <(ID: 30) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 8)
            <(ID: 29) PARAMETER (int) 
               <(ID: 24) CONST_JAVA_NUMERIC32 (int)  (2)
               <(ID: 28) PARAMETER (int) 
                  <(ID: 25) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 27) NULL_PARAMETER (NONE) 
      <(ID: 26) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 41) INVOKE (int) 
      <(ID: 40) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 8)
         <(ID: 39) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 8)
            <(ID: 38) PARAMETER (int) 
               <(ID: 33) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 37) PARAMETER (int) 
                  <(ID: 34) CONST_JAVA_NUMERIC32 (int)  (16)
                  <(ID: 36) NULL_PARAMETER (NONE) 
      <(ID: 35) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 50) INVOKE (int) 
      <(ID: 49) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 8)
         <(ID: 48) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 8)
            <(ID: 47) PARAMETER (int) 
               <(ID: 42) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 46) PARAMETER (int) 
                  <(ID: 43) CONST_JAVA_NUMERIC32 (int)  (16)
                  <(ID: 45) NULL_PARAMETER (NONE) 
      <(ID: 44) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 59) INVOKE (int) 
      <(ID: 58) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 8)
         <(ID: 57) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 8)
            <(ID: 56) PARAMETER (int) 
               <(ID: 51) CONST_JAVA_NUMERIC32 (int)  (-2)
               <(ID: 55) PARAMETER (int) 
                  <(ID: 52) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 54) NULL_PARAMETER (NONE) 
      <(ID: 53) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 68) INVOKE (int) 
      <(ID: 67) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 8)
         <(ID: 66) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 8)
            <(ID: 65) PARAMETER (int) 
               <(ID: 60) CONST_JAVA_NUMERIC32 (int)  (-2)
               <(ID: 64) PARAMETER (int) 
                  <(ID: 61) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 63) NULL_PARAMETER (NONE) 
      <(ID: 62) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 77) INVOKE (int) 
      <(ID: 76) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 8)
         <(ID: 75) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 8)
            <(ID: 74) PARAMETER (int) 
               <(ID: 69) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 73) PARAMETER (int) 
                  <(ID: 70) CONST_JAVA_NUMERIC32 (int)  (-16)
                  <(ID: 72) NULL_PARAMETER (NONE) 
      <(ID: 71) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 78) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 458
ESTIMATED BUFFER SIZE = 564
CODE BUFFER ADDRESS = 0x2bcbbd5c
PC MAP TABLE ADDRESS = 0x2bcbbd64
CODE ENTRY ADDRESS = 0x2bcbbd88
          		@ Method prologue
0x2bcbbd88	0:	addiu	a1, JSP, 48	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbbd8c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbbd90	8:	sltu	t7, a1, CHUNKEND
0x2bcbbd94	12:	bne	t7, zero, PC=0x2bcbbd88	@ goto .skip
0x2bcbbd98	16:	nop
0x2bcbbd9c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbbda0	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbbd94) >>>>>>>>
0x2bcbbd94	12:	bne	t7, zero, PC=0x2bcbbda4	@ goto .skip
0x2bcbbd98	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbbda4) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbbda4	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbbda8	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbbdac	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbbdb0	40:	addiu	a3, zero, 0
0x2bcbbdb4	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbbdb8	48:	addiu	a3, zero, -1
0x2bcbbdbc	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbbdc0	56:	move	a0, EE
0x2bcbbdc4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbbdc8	64:	lui	t9, hi16(0x65)
0x2bcbbdcc	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbbdd0	72:	jalr	t9
0x2bcbbdd4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbbdd8	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbbddc	84:	nop
0x2bcbbde0	88:	nop
0x2bcbbde4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbbde8	96:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbbdec	100:	lw	s5, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
0x2bcbbdf0	104:	sw	s4, 0(JSP)
0x2bcbbdf4	108:	sw	s5, 4(JSP)
0x2bcbbdf8	112:	addiu	s7, zero, 1	@ const 1
0x2bcbbdfc	116:	sw	s7, 8(JSP)
0x2bcbbe00	120:	addiu	s6, zero, -16	@ const -16
0x2bcbbe04	124:	sw	s6, 12(JSP)
0x2bcbbe08	128:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbbe0c	132:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbbe10	136:	lw	s7, 0(a0)	@ call method through mb
0x2bcbbe14	140:	jalr	s7
0x2bcbbe18	144:	nop
          		@ Captured a stackmap here.
0x2bcbbe1c	148:	addiu	JSP, JSP, -4
0x2bcbbe20	152:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbbe24	156:	sw	s7, 0(JSP)
0x2bcbbe28	160:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbbe2c	164:	sw	s6, 4(JSP)
0x2bcbbe30	168:	addiu	s5, zero, 2	@ const 2
0x2bcbbe34	172:	sw	s5, 8(JSP)
0x2bcbbe38	176:	addiu	s4, zero, -8	@ const -8
0x2bcbbe3c	180:	sw	s4, 12(JSP)
0x2bcbbe40	184:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbbe44	188:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbbe48	192:	lw	s7, 0(a0)	@ call method through mb
0x2bcbbe4c	196:	jalr	s7
0x2bcbbe50	200:	nop
          		@ Captured a stackmap here.
0x2bcbbe54	204:	addiu	JSP, JSP, -4
0x2bcbbe58	208:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbbe5c	212:	sw	s7, 0(JSP)
0x2bcbbe60	216:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbbe64	220:	sw	s6, 4(JSP)
0x2bcbbe68	224:	addiu	s5, zero, 2	@ const 2
0x2bcbbe6c	228:	sw	s5, 8(JSP)
0x2bcbbe70	232:	addiu	s4, zero, 8	@ const 8
0x2bcbbe74	236:	sw	s4, 12(JSP)
0x2bcbbe78	240:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbbe7c	244:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbbe80	248:	lw	s7, 0(a0)	@ call method through mb
0x2bcbbe84	252:	jalr	s7
0x2bcbbe88	256:	nop
          		@ Captured a stackmap here.
0x2bcbbe8c	260:	addiu	JSP, JSP, -4
0x2bcbbe90	264:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbbe94	268:	sw	s7, 0(JSP)
0x2bcbbe98	272:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbbe9c	276:	sw	s6, 4(JSP)
0x2bcbbea0	280:	addiu	s5, zero, 1	@ const 1
0x2bcbbea4	284:	sw	s5, 8(JSP)
0x2bcbbea8	288:	addiu	s4, zero, 16	@ const 16
0x2bcbbeac	292:	sw	s4, 12(JSP)
0x2bcbbeb0	296:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbbeb4	300:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbbeb8	304:	lw	s7, 0(a0)	@ call method through mb
0x2bcbbebc	308:	jalr	s7
0x2bcbbec0	312:	nop
          		@ Captured a stackmap here.
0x2bcbbec4	316:	addiu	JSP, JSP, -4
0x2bcbbec8	320:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbbecc	324:	sw	s7, 0(JSP)
0x2bcbbed0	328:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbbed4	332:	sw	s6, 4(JSP)
0x2bcbbed8	336:	addiu	s5, zero, -1	@ const -1
0x2bcbbedc	340:	sw	s5, 8(JSP)
0x2bcbbee0	344:	addiu	s4, zero, 16	@ const 16
0x2bcbbee4	348:	sw	s4, 12(JSP)
0x2bcbbee8	352:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbbeec	356:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbbef0	360:	lw	s7, 0(a0)	@ call method through mb
0x2bcbbef4	364:	jalr	s7
0x2bcbbef8	368:	nop
          		@ Captured a stackmap here.
0x2bcbbefc	372:	addiu	JSP, JSP, -4
0x2bcbbf00	376:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbbf04	380:	sw	s7, 0(JSP)
0x2bcbbf08	384:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbbf0c	388:	sw	s6, 4(JSP)
0x2bcbbf10	392:	addiu	s5, zero, -2	@ const -2
0x2bcbbf14	396:	sw	s5, 8(JSP)
0x2bcbbf18	400:	addiu	s4, zero, 8	@ const 8
0x2bcbbf1c	404:	sw	s4, 12(JSP)
0x2bcbbf20	408:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbbf24	412:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbbf28	416:	lw	s7, 0(a0)	@ call method through mb
0x2bcbbf2c	420:	jalr	s7
0x2bcbbf30	424:	nop
          		@ Captured a stackmap here.
0x2bcbbf34	428:	addiu	JSP, JSP, -4
0x2bcbbf38	432:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbbf3c	436:	sw	s7, 0(JSP)
0x2bcbbf40	440:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbbf44	444:	sw	s6, 4(JSP)
0x2bcbbf48	448:	addiu	s5, zero, -2	@ const -2
0x2bcbbf4c	452:	sw	s5, 8(JSP)
0x2bcbbf50	456:	addiu	s4, zero, -8	@ const -8
0x2bcbbf54	460:	sw	s4, 12(JSP)
0x2bcbbf58	464:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbbf5c	468:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbbf60	472:	lw	s7, 0(a0)	@ call method through mb
0x2bcbbf64	476:	jalr	s7
0x2bcbbf68	480:	nop
          		@ Captured a stackmap here.
0x2bcbbf6c	484:	addiu	JSP, JSP, -4
0x2bcbbf70	488:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbbf74	492:	sw	s7, 0(JSP)
0x2bcbbf78	496:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbbf7c	500:	sw	s6, 4(JSP)
0x2bcbbf80	504:	addiu	s5, zero, -1	@ const -1
0x2bcbbf84	508:	sw	s5, 8(JSP)
0x2bcbbf88	512:	addiu	s4, zero, -16	@ const -16
0x2bcbbf8c	516:	sw	s4, 12(JSP)
0x2bcbbf90	520:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbbf94	524:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbbf98	528:	lw	s7, 0(a0)	@ call method through mb
0x2bcbbf9c	532:	jalr	s7
0x2bcbbfa0	536:	nop
          		@ Captured a stackmap here.
0x2bcbbfa4	540:	addiu	JSP, JSP, -4
0x2bcbbfa8	544:	addiu	JSP, JFP, -8
0x2bcbbfac	548:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbbfb0	552:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbbfb4	556:	nop
0x2bcbbfb8	560:	.word	9793524	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
--->Fixed instruction at 520(0x2bcbbf90) to reference 560
--->Fixed instruction at 464(0x2bcbbf58) to reference 560
--->Fixed instruction at 408(0x2bcbbf20) to reference 560
--->Fixed instruction at 352(0x2bcbbee8) to reference 560
--->Fixed instruction at 296(0x2bcbbeb0) to reference 560
--->Fixed instruction at 240(0x2bcbbe78) to reference 560
--->Fixed instruction at 184(0x2bcbbe40) to reference 560
--->Fixed instruction at 128(0x2bcbbe08) to reference 560
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbbd88) >>>>>>>>
          		@ Capacity is 14 word(s)
0x2bcbbd88	0:	addiu	a1, JSP, 48
<<<<<<<<<Pop Code Buffer to PC = 564 (0x2bcbbfbc) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbbdd8) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbbdd8	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbbddc	84:	lui	CP, hi16(0x2bcb)
0x2bcbbde0	88:	ori	CP, CP, lo16(0x2bcbbfb8)
0x2bcbbde4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 564 (0x2bcbbfbc) <<<<<<<<<
JS: COMPILED: size=664 startPC=0x2bcbbd88 com.sun.mep.bench.Chess.WPossMoves.WKnight_Moves(I)V
OSR: Intr2Comp: com.sun.mep.bench.Chess.AlphaBeta.findLocalBest(Lcom/sun/mep/bench/Chess/GameState;III)Lcom/sun/mep/bench/Chess/Move;
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.Move.<init>()V
JS: COMPILING com.sun.mep.bench.Chess.Move.<init>()V
orig bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(1 0x0): 0- 

#################################################

The maximum node counts per root node are 5
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 6 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Move.<init>()V(Move.java:44)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x956660):    aload_0 
<1>  (0x956661):    invokeignored_quick 
<4>  (0x956664):    aload_0 
<5>  (0x956665):    ldc_quick #2
<7>  (0x956667):    putfield_quick #2
<10>  (0x95666a):    aload_0 
<11>  (0x95666b):    new_quick #4 <com.sun.mep.bench.Chess.Point>
<14>  (0x95666e):    dup 
<15>  (0x95666f):    bipush 99
<17>  (0x956671):    bipush 99
<19>  (0x956673):    invokenonvirtual_quick #5 <com.sun.mep.bench.Chess.Point.<init>(II)V>
<22>  (0x956676):    aputfield_quick #3
<25>  (0x956679):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(1): 
	local(0)	ID(2)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 6) ASSIGN (32-bit field) 
      <(ID: 5) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 2)
            <(ID: 21) LOCAL (reference)   0>
         <(ID: 4) CONST_FIELD_OFFSET (NONE)  (2)
      <(ID: 3) CONST_JAVA_NUMERIC32 (32-bit field)  (JavaInt:-2147483648  JavaFloat:-0.000000)	

   <(ID: 8) IDENTITY (reference)  (ref count: 3)
      <(ID: 17) NEW_OBJECT (reference) 
         <(ID: 7) CONST_CB (address field)  (com.sun.mep.bench.Chess.Point)

   <(ID: 16) INVOKE (v) 
      <(ID: 15) PARAMETER (reference) 
         <(ID: 8) IDENTITY (reference)  (ref count: 3)
         <(ID: 14) PARAMETER (int) 
            <(ID: 9) CONST_JAVA_NUMERIC32 (int)  (99)
            <(ID: 13) PARAMETER (int) 
               <(ID: 10) CONST_JAVA_NUMERIC32 (int)  (99)
               <(ID: 12) NULL_PARAMETER (NONE) 
      <(ID: 11) CONST_MB (address field)  (com.sun.mep.bench.Chess.Point.<init>(II)V)

   <(ID: 20) ASSIGN (reference) 
      <(ID: 19) FIELD_REF (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 2)
         <(ID: 18) CONST_FIELD_OFFSET (NONE)  (3)
      <(ID: 8) IDENTITY (reference)  (ref count: 3)

   <(ID: 22) RETURN (v) 


NUM BARRIER BYTES = 16
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 164
ESTIMATED BUFFER SIZE = 284
CODE BUFFER ADDRESS = 0x2bcbbff4
PC MAP TABLE ADDRESS = 0x2bcbbffc
CODE ENTRY ADDRESS = 0x2bcbc020
          		@ Method prologue
0x2bcbc020	0:	addiu	a1, JSP, 56	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbc024	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbc028	8:	sltu	t7, a1, CHUNKEND
0x2bcbc02c	12:	bne	t7, zero, PC=0x2bcbc020	@ goto .skip
0x2bcbc030	16:	nop
0x2bcbc034	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbc038	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbc02c) >>>>>>>>
0x2bcbc02c	12:	bne	t7, zero, PC=0x2bcbc03c	@ goto .skip
0x2bcbc030	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbc03c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbc03c	28:	sw	JFP, 4(JSP)	@ Store curr JFP into new frame
0x2bcbc040	32:	addiu	JFP, JSP, 4	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbc044	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbc048	40:	addiu	a3, zero, 0
0x2bcbc04c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbc050	48:	addiu	a3, zero, -1
0x2bcbc054	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbc058	56:	move	a0, EE
0x2bcbc05c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbc060	64:	lui	t9, hi16(0x65)
0x2bcbc064	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbc068	72:	jalr	t9
0x2bcbc06c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbc070	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbc074	84:	nop
0x2bcbc078	88:	nop
0x2bcbc07c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbc080	96:	lw	s4, -8(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
0x2bcbc084	100:	lui	ra, hi16(0xffff8000)
          		@ Do putfield:
0x2bcbc088	104:	sw	ra, 8(s4)	@ const -2147483648 putfield(obj, fieldOffset, value{I|F});
0x2bcbc08c	108:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Point
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Point
0x2bcbc090	112:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcbc094	116:	nop
          		@ Captured a stackmap here.
0x2bcbc098	120:	sw	v0, 0(JSP)
0x2bcbc09c	124:	addiu	s7, zero, 99	@ const 99
0x2bcbc0a0	128:	sw	s7, 4(JSP)
0x2bcbc0a4	132:	sw	s7, 8(JSP)
0x2bcbc0a8	136:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Point.<init>(II)V
          		@ Invoke a method w/ a void return type
0x2bcbc0ac	140:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbc0b0	144:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcbc0b4	148:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc0b8	152:	jalr	s7
0x2bcbc0bc	156:	nop
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcbc0c0	160:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbc0c4	164:	addiu	s6, s7, 12	@ fieldAddr = obj + fieldOffset;
0x2bcbc0c8	168:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcbc0cc	172:	sw	s5, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcbc0d0	176:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcbc0d4	180:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcbc0d8	184:	srl	t7, s6, 9	@ mark card table
0x2bcbc0dc	188:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcbc0e0	192:	sb	ra, 0(t7)
0x2bcbc0e4	196:	addiu	JSP, JFP, -8
0x2bcbc0e8	200:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbc0ec	204:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbc0f0	208:	nop
0x2bcbc0f4	212:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 176(0x2bcbc0d0) to reference 212
0x2bcbc0f8	216:	.word	9791768	@ mb com.sun.mep.bench.Chess.Point.<init>(II)V
--->Fixed instruction at 136(0x2bcbc0a8) to reference 216
0x2bcbc0fc	220:	.word	9791584	@ cb com.sun.mep.bench.Chess.Point
--->Fixed instruction at 108(0x2bcbc08c) to reference 220
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbc020) >>>>>>>>
          		@ Capacity is 16 word(s)
0x2bcbc020	0:	addiu	a1, JSP, 60
<<<<<<<<<Pop Code Buffer to PC = 224 (0x2bcbc100) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbc070) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcbc070	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcbc074	84:	lui	CP, hi16(0x2bcb)
0x2bcbc078	88:	ori	CP, CP, lo16(0x2bcbc0f4)
0x2bcbc07c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 224 (0x2bcbc100) <<<<<<<<<
JS: COMPILED: size=288 startPC=0x2bcbc020 com.sun.mep.bench.Chess.Move.<init>()V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.WPossMoves.WPawn_Moves(I)V
JS: COMPILING com.sun.mep.bench.Chess.WPossMoves.WPawn_Moves(I)V
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
orig bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
o1   bkID(3) Incoming Locals(1 0x0): 2- 
o1   bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
orig bkID(2) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(2) Incoming Locals(1 0x0): 1- 
s1   bkID(2) Incoming Locals(2 0x0): 1- 0- 
s1   bkID(2) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(2) Incoming Locals(2 0x0): 1- 0- 
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(0) Incoming Locals(1 0x0): 1- 
s1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
s1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
orig bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
o1   bkID(3) Incoming Locals(1 0x0): 2- 
o1   bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
orig bkID(2) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(2) Incoming Locals(1 0x0): 1- 
s1   bkID(2) Incoming Locals(2 0x0): 1- 0- 
s1   bkID(2) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(2) Incoming Locals(2 0x0): 1- 0- 
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(0) Incoming Locals(1 0x0): 1- 
s1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
s1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
bkID(3) local(0 #2)  not found in goalBk
bkID(3) local(1 #0)  not found in goalBk
bkID(3) local(2 #1)  not found in goalBk
bkID(2) local(0 #1)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(2) Incoming Locals(2 0x0): 1- 0- 
+bk  bkID(2) Incoming Locals(2 0x1): 1+ 0- 
-gbk bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
+gbk bkID(3) Incoming Locals(3 0x1): 1+ 0- 2- 
bkID(2) local(0 #1)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(2 0x1): 1+ 0- 
dstBk(2) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(2) Incoming Locals(2 0x1): 1+ 0- 
 ordered in bk
-gbk bkID(3) Incoming Locals(3 0x1): 1+ 0- 2- 
dstBk(3) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(3) Incoming Locals(3 0x1): 1+ 0- 2- 
bkID(2) local(1 #0)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(2) Incoming Locals(2 0x1): 1+ 0- 
+bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
-gbk bkID(3) Incoming Locals(3 0x1): 1+ 0- 2- 
+gbk bkID(3) Incoming Locals(3 0x3): 1+ 0+ 2- 
bkID(2) local(1 #0)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(3 0x3): 1+ 0+ 2- 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(3) Incoming Locals(3 0x3): 1+ 0+ 2- 
bkID(1) local(0 #0)  ordered in goalBk(2)
-bk  bkID(1) Incoming Locals(2 0x0): 0- 1- 
dstBk(1) local(1 0) found in slot(0)
local(#1) swapped with local(#0)
+bk  bkID(1) Incoming Locals(2 0x2): 1- 0+ 
bkID(1) local(1 #0)  ordered in goalBk(2)
-bk  bkID(1) Incoming Locals(2 0x2): 1- 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(1) Incoming Locals(2 0x2): 1- 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
bkID(0) local(0 #1)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(2 0x0): 1- 0- 
+bk  bkID(0) Incoming Locals(2 0x1): 1+ 0- 
-gbk bkID(1) Incoming Locals(2 0x2): 1- 0+ 
+gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
bkID(0) local(0 #1)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x1): 1+ 0- 
dstBk(0) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(0) Incoming Locals(2 0x1): 1+ 0- 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(1) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
bkID(0) local(1 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x1): 1+ 0- 
dstBk(0) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(0) Incoming Locals(2 0x3): 1+ 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
pre  bkID(3) Incoming Locals(3 0x3): 1+ 0+ 2- 
local(#2) swapped with local(#2)
post bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 

#################################################

The maximum node counts per root node are 8
IR block list contains 5 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 9 root nodes: in block 
* flags: 0x41
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.WPossMoves.WPawn_Moves(I)V(WPossMoves.java:165)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<0>  (0x94df80):    iload_1 
<1>  (0x94df81):    bipush 47
<3>  (0x94df83):    if_icmple <49>
<6>  (0x94df86):    aload_0 
<7>  (0x94df87):    agetfield_quick #4
<10>  (0x94df8a):    agetfield_quick #3
<13>  (0x94df8d):    iload_1 
<14>  (0x94df8e):    bipush 8
<16>  (0x94df90):    isub 
<17>  (0x94df91):    baload 
<18>  (0x94df92):    bipush 99
<20>  (0x94df94):    if_icmpne <49>
<23>  (0x94df97):    aload_0 
<24>  (0x94df98):    agetfield_quick #4
<27>  (0x94df9b):    agetfield_quick #3
<30>  (0x94df9e):    iload_1 
<31>  (0x94df9f):    bipush 16
<33>  (0x94dfa1):    isub 
<34>  (0x94dfa2):    baload 
<35>  (0x94dfa3):    bipush 99
<37>  (0x94dfa5):    if_icmpne <49>
<40>  (0x94dfa8):    aload_0 
<41>  (0x94dfa9):    iload_1 
<42>  (0x94dfaa):    iload_1 
<43>  (0x94dfab):    bipush 16
<45>  (0x94dfad):    isub 
<46>  (0x94dfae):    invokevirtual_quick_w #8 <com.sun.mep.bench.Chess.WPossMoves.Store_Move(II)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(1)	ID(2)
 	local(0)	ID(5)
 
Incoming Locals(2): 
	local(1)	ID(2)
 	local(0)	ID(45)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(1 0)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 4) BCOND (int) 
   target: (BlockID: 1 BlockPC: 49)
   condition: LE
   flags: 0
      <(ID: 2) IDENTITY (int)  (ref count: 5)
         <(ID: 22) LOCAL (int)   1>
      <(ID: 3) CONST_JAVA_NUMERIC32 (int)  (47)


   <(ID: 8) IDENTITY (reference)  (ref count: 2)
      <(ID: 12) FETCH (reference) 
         <(ID: 7) FIELD_REF (reference) 
            <(ID: 5) IDENTITY (reference)  (ref count: 3)
               <(ID: 43) LOCAL (reference)   0>
            <(ID: 6) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 11) IDENTITY (reference)  (ref count: 4)
      <(ID: 21) FETCH (reference) 
         <(ID: 10) FIELD_REF (reference) 
            <(ID: 8) IDENTITY (reference)  (ref count: 2)
            <(ID: 9) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 18) IDENTITY (int)  (ref count: 2)
      <(ID: 23) FETCH (int) 
         <(ID: 17) INDEX (int) 
            <(ID: 11) IDENTITY (reference)  (ref count: 4)
            <(ID: 16) BOUNDS_CHECK (int) 
               <(ID: 14) SUB (int) 
                  <(ID: 2) IDENTITY (int)  (ref count: 5)
                  <(ID: 13) CONST_JAVA_NUMERIC32 (int)  (8)
               <(ID: 15) IDENTITY (int)  (ref count: 2)
                  <(ID: 31) ARRAY_LENGTH (int) 
                     <(ID: 11) IDENTITY (reference)  (ref count: 4)

   <(ID: 20) BCOND (int) 
   target: (BlockID: 1 BlockPC: 49)
   condition: NE
   flags: 0
      <(ID: 18) IDENTITY (int)  (ref count: 2)
      <(ID: 19) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 28) IDENTITY (int)  (ref count: 2)
      <(ID: 32) FETCH (int) 
         <(ID: 27) INDEX (int) 
            <(ID: 11) IDENTITY (reference)  (ref count: 4)
            <(ID: 26) BOUNDS_CHECK (int) 
               <(ID: 25) SUB (int) 
                  <(ID: 2) IDENTITY (int)  (ref count: 5)
                  <(ID: 24) CONST_JAVA_NUMERIC32 (int)  (16)
               <(ID: 15) IDENTITY (int)  (ref count: 2)

   <(ID: 30) BCOND (int) 
   target: (BlockID: 1 BlockPC: 49)
   condition: NE
   flags: 0
      <(ID: 28) IDENTITY (int)  (ref count: 2)
      <(ID: 29) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 42) INVOKE (v) 
      <(ID: 39) PARAMETER (reference) 
         <(ID: 5) IDENTITY (reference)  (ref count: 3)
         <(ID: 38) PARAMETER (int) 
            <(ID: 2) IDENTITY (int)  (ref count: 5)
            <(ID: 37) PARAMETER (int) 
               <(ID: 34) SUB (int) 
                  <(ID: 2) IDENTITY (int)  (ref count: 5)
                  <(ID: 33) CONST_JAVA_NUMERIC32 (int)  (16)
               <(ID: 36) NULL_PARAMETER (NONE) 
      <(ID: 41) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 40) GET_VTBL (NONE) 
            <(ID: 5) IDENTITY (reference)  (ref count: 3)
         <(ID: 35) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)


*************************************************
*
* (block ID:1 block PC:49 )
* IR root list contains 6 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.WPossMoves.WPawn_Moves(I)V(WPossMoves.java:173)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<49>  (0x94dfb1):    aload_0 
<50>  (0x94dfb2):    agetfield_quick #4
<53>  (0x94dfb5):    agetfield_quick #3
<56>  (0x94dfb8):    iload_1 
<57>  (0x94dfb9):    bipush 8
<59>  (0x94dfbb):    isub 
<60>  (0x94dfbc):    baload 
<61>  (0x94dfbd):    bipush 99
<63>  (0x94dfbf):    if_icmpne <75>
<66>  (0x94dfc2):    aload_0 
<67>  (0x94dfc3):    iload_1 
<68>  (0x94dfc4):    iload_1 
<69>  (0x94dfc5):    bipush 8
<71>  (0x94dfc7):    isub 
<72>  (0x94dfc8):    invokevirtual_quick_w #8 <com.sun.mep.bench.Chess.WPossMoves.Store_Move(II)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(45)
 	local(1)	ID(53)
 
Incoming Locals(2): 
	local(1)	ID(53)
 	local(0)	ID(45)
 
Successor Blocks(1): 
	ID(2) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(1 0)

   <(ID: 44) MAP_PC (NONE)   49>

   <(ID: 48) IDENTITY (reference)  (ref count: 2)
      <(ID: 52) FETCH (reference) 
         <(ID: 47) FIELD_REF (reference) 
            <(ID: 45) IDENTITY (reference)  (ref count: 3)
               <(ID: 74) LOCAL (reference)   0>
            <(ID: 46) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 51) IDENTITY (reference)  (ref count: 3)
      <(ID: 62) FETCH (reference) 
         <(ID: 50) FIELD_REF (reference) 
            <(ID: 48) IDENTITY (reference)  (ref count: 2)
            <(ID: 49) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 59) IDENTITY (int)  (ref count: 2)
      <(ID: 63) FETCH (int) 
         <(ID: 58) INDEX (int) 
            <(ID: 51) IDENTITY (reference)  (ref count: 3)
            <(ID: 57) BOUNDS_CHECK (int) 
               <(ID: 55) SUB (int) 
                  <(ID: 53) IDENTITY (int)  (ref count: 3)
                     <(ID: 75) LOCAL (int)   1>
                  <(ID: 54) CONST_JAVA_NUMERIC32 (int)  (8)
               <(ID: 56) ARRAY_LENGTH (int) 
                  <(ID: 51) IDENTITY (reference)  (ref count: 3)

   <(ID: 61) BCOND (int) 
   target: (BlockID: 2 BlockPC: 75)
   condition: NE
   flags: 0
      <(ID: 59) IDENTITY (int)  (ref count: 2)
      <(ID: 60) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 73) INVOKE (v) 
      <(ID: 70) PARAMETER (reference) 
         <(ID: 45) IDENTITY (reference)  (ref count: 3)
         <(ID: 69) PARAMETER (int) 
            <(ID: 53) IDENTITY (int)  (ref count: 3)
            <(ID: 68) PARAMETER (int) 
               <(ID: 65) SUB (int) 
                  <(ID: 53) IDENTITY (int)  (ref count: 3)
                  <(ID: 64) CONST_JAVA_NUMERIC32 (int)  (8)
               <(ID: 67) NULL_PARAMETER (NONE) 
      <(ID: 72) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 71) GET_VTBL (NONE) 
            <(ID: 45) IDENTITY (reference)  (ref count: 3)
         <(ID: 66) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)


*************************************************
*
* (block ID:2 block PC:75 )
* IR root list contains 8 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.WPossMoves.WPawn_Moves(I)V(WPossMoves.java:178)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<75>  (0x94dfcb):    iload_1 
<76>  (0x94dfcc):    bipush 7
<78>  (0x94dfce):    iand 
<79>  (0x94dfcf):    istore_2 
<80>  (0x94dfd0):    iload_2 
<81>  (0x94dfd1):    ifle <110>
<84>  (0x94dfd4):    aload_0 
<85>  (0x94dfd5):    agetfield_quick #4
<88>  (0x94dfd8):    agetfield_quick #3
<91>  (0x94dfdb):    iload_1 
<92>  (0x94dfdc):    bipush 9
<94>  (0x94dfde):    isub 
<95>  (0x94dfdf):    baload 
<96>  (0x94dfe0):    bipush 99
<98>  (0x94dfe2):    if_icmpeq <110>
<101>  (0x94dfe5):    aload_0 
<102>  (0x94dfe6):    iload_1 
<103>  (0x94dfe7):    iconst_m1 
<104>  (0x94dfe8):    bipush 248
<106>  (0x94dfea):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<109>  (0x94dfed):    pop 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(1)	ID(77)
 	local(0)	ID(85)
 
Incoming Locals(2): 
	local(1)	ID(77)
 	local(0)	ID(118)
 
Assigned Locals(1): 
	ASSIGN(83): local(2)	ID(82)	rhsID(79)
 
Successor Blocks(1): 
	ID(3) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(1 0 2)

   <(ID: 76) MAP_PC (NONE)   75>

   <(ID: 83) ASSIGN (int)  (assignIdx: 0)
      <(ID: 82) LOCAL (int)   2>
      <(ID: 79) IDENTITY (int)  (ref count: 2)
         <(ID: 84) AND (int) 
            <(ID: 77) IDENTITY (int)  (ref count: 3)
               <(ID: 102) LOCAL (int)   1>
            <(ID: 78) CONST_JAVA_NUMERIC32 (int)  (7)

   <(ID: 81) BCOND (int) 
   target: (BlockID: 3 BlockPC: 110)
   condition: LE
   flags: 0
      <(ID: 79) IDENTITY (int)  (ref count: 2)
      <(ID: 80) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 88) IDENTITY (reference)  (ref count: 2)
      <(ID: 92) FETCH (reference) 
         <(ID: 87) FIELD_REF (reference) 
            <(ID: 85) IDENTITY (reference)  (ref count: 2)
               <(ID: 113) LOCAL (reference)   0>
            <(ID: 86) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 91) IDENTITY (reference)  (ref count: 3)
      <(ID: 101) FETCH (reference) 
         <(ID: 90) FIELD_REF (reference) 
            <(ID: 88) IDENTITY (reference)  (ref count: 2)
            <(ID: 89) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 98) IDENTITY (int)  (ref count: 2)
      <(ID: 103) FETCH (int) 
         <(ID: 97) INDEX (int) 
            <(ID: 91) IDENTITY (reference)  (ref count: 3)
            <(ID: 96) BOUNDS_CHECK (int) 
               <(ID: 94) SUB (int) 
                  <(ID: 77) IDENTITY (int)  (ref count: 3)
                  <(ID: 93) CONST_JAVA_NUMERIC32 (int)  (9)
               <(ID: 95) ARRAY_LENGTH (int) 
                  <(ID: 91) IDENTITY (reference)  (ref count: 3)

   <(ID: 100) BCOND (int) 
   target: (BlockID: 3 BlockPC: 110)
   condition: EQ
   flags: 0
      <(ID: 98) IDENTITY (int)  (ref count: 2)
      <(ID: 99) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 112) INVOKE (int) 
      <(ID: 111) PARAMETER (reference) 
         <(ID: 85) IDENTITY (reference)  (ref count: 2)
         <(ID: 110) PARAMETER (int) 
            <(ID: 77) IDENTITY (int)  (ref count: 3)
            <(ID: 109) PARAMETER (int) 
               <(ID: 104) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 108) PARAMETER (int) 
                  <(ID: 105) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 107) NULL_PARAMETER (NONE) 
      <(ID: 106) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)


*************************************************
*
* (block ID:3 block PC:110 )
* IR root list contains 7 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x7
* Source: com.sun.mep.bench.Chess.WPossMoves.WPawn_Moves(I)V(WPossMoves.java:185)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<110>  (0x94dfee):    iload_2 
<111>  (0x94dfef):    bipush 7
<113>  (0x94dff1):    if_icmpge <142>
<116>  (0x94dff4):    aload_0 
<117>  (0x94dff5):    agetfield_quick #4
<120>  (0x94dff8):    agetfield_quick #3
<123>  (0x94dffb):    iload_1 
<124>  (0x94dffc):    bipush 7
<126>  (0x94dffe):    isub 
<127>  (0x94dfff):    baload 
<128>  (0x94e000):    bipush 99
<130>  (0x94e002):    if_icmpeq <142>
<133>  (0x94e005):    aload_0 
<134>  (0x94e006):    iload_1 
<135>  (0x94e007):    iconst_1 
<136>  (0x94e008):    bipush 248
<138>  (0x94e00a):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<141>  (0x94e00d):    pop 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(2)	ID(115)
 	local(0)	ID(118)
 	local(1)	ID(126)
 
Incoming Locals(3): 
	local(1)	ID(126)
 	local(0)	ID(118)
 	local(2)	ID(115)
 
Successor Blocks(1): 
	ID(4) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 114) MAP_PC (NONE)   110>

   <(ID: 117) BCOND (int) 
   target: (BlockID: 4 BlockPC: 142)
   condition: GE
   flags: 0
      <(ID: 115) LOCAL (int)   2>
      <(ID: 116) CONST_JAVA_NUMERIC32 (int)  (7)


   <(ID: 121) IDENTITY (reference)  (ref count: 2)
      <(ID: 125) FETCH (reference) 
         <(ID: 120) FIELD_REF (reference) 
            <(ID: 118) IDENTITY (reference)  (ref count: 2)
               <(ID: 146) LOCAL (reference)   0>
            <(ID: 119) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 124) IDENTITY (reference)  (ref count: 3)
      <(ID: 135) FETCH (reference) 
         <(ID: 123) FIELD_REF (reference) 
            <(ID: 121) IDENTITY (reference)  (ref count: 2)
            <(ID: 122) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 132) IDENTITY (int)  (ref count: 2)
      <(ID: 136) FETCH (int) 
         <(ID: 131) INDEX (int) 
            <(ID: 124) IDENTITY (reference)  (ref count: 3)
            <(ID: 130) BOUNDS_CHECK (int) 
               <(ID: 128) SUB (int) 
                  <(ID: 126) IDENTITY (int)  (ref count: 2)
                     <(ID: 147) LOCAL (int)   1>
                  <(ID: 127) CONST_JAVA_NUMERIC32 (int)  (7)
               <(ID: 129) ARRAY_LENGTH (int) 
                  <(ID: 124) IDENTITY (reference)  (ref count: 3)

   <(ID: 134) BCOND (int) 
   target: (BlockID: 4 BlockPC: 142)
   condition: EQ
   flags: 0
      <(ID: 132) IDENTITY (int)  (ref count: 2)
      <(ID: 133) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 145) INVOKE (int) 
      <(ID: 144) PARAMETER (reference) 
         <(ID: 118) IDENTITY (reference)  (ref count: 2)
         <(ID: 143) PARAMETER (int) 
            <(ID: 126) IDENTITY (int)  (ref count: 2)
            <(ID: 142) PARAMETER (int) 
               <(ID: 137) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 141) PARAMETER (int) 
                  <(ID: 138) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 140) NULL_PARAMETER (NONE) 
      <(ID: 139) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)


*************************************************
*
* (block ID:4 block PC:142 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.WPossMoves.WPawn_Moves(I)V(WPossMoves.java:187)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<142>  (0x94e00e):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

   <(ID: 148) MAP_PC (NONE)   142>

   <(ID: 149) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 80
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 866
ESTIMATED BUFFER SIZE = 1068
CODE BUFFER ADDRESS = 0x2bcbc114
PC MAP TABLE ADDRESS = 0x2bcbc11c
CODE ENTRY ADDRESS = 0x2bcbc150
          		@ Method prologue
0x2bcbc150	0:	addiu	a1, JSP, 52	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbc154	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbc158	8:	sltu	t7, a1, CHUNKEND
0x2bcbc15c	12:	bne	t7, zero, PC=0x2bcbc150	@ goto .skip
0x2bcbc160	16:	nop
0x2bcbc164	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbc168	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbc15c) >>>>>>>>
0x2bcbc15c	12:	bne	t7, zero, PC=0x2bcbc16c	@ goto .skip
0x2bcbc160	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbc16c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbc16c	28:	sw	JFP, 4(JSP)	@ Store curr JFP into new frame
0x2bcbc170	32:	addiu	JFP, JSP, 4	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbc174	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbc178	40:	addiu	a3, zero, 0
0x2bcbc17c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbc180	48:	addiu	a3, zero, -1
0x2bcbc184	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbc188	56:	move	a0, EE
0x2bcbc18c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbc190	64:	lui	t9, hi16(0x65)
0x2bcbc194	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbc198	72:	jalr	t9
0x2bcbc19c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbc1a0	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbc1a4	84:	nop
0x2bcbc1a8	88:	nop
0x2bcbc1ac	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(1) reg(20)
0x2bcbc1b0	96:	lw	s4, -8(JFP)	@ Java local cell # 1
			@ Preloading incoming local(0) reg(21)
0x2bcbc1b4	100:	lw	s5, -12(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbc1b8	104:	addiu	t7, zero, 47
0x2bcbc1bc	108:	slt	t7, t7, s4
0x2bcbc1c0	112:	beq	t7, zero, PC=0x2bcbc1b8	@ branch to block L1
0x2bcbc1c4	116:	nop
          		@ Do getfield:
0x2bcbc1c8	120:	lw	s7, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbc1cc	124:	lw	s6, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbc1d0	128:	addiu	s7, s4, -8
0x2bcbc1d4	132:	lw	ra, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcbc1d8	136:	sltu	t7, s7, ra
0x2bcbc1dc	140:	bne	t7, zero, PC=0x2bcbc1d8	@ br .skip
0x2bcbc1e0	144:	nop
0x2bcbc1e4	148:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbc1e8	152:	nop
		.skip
--->Fixed instruction at 140(0x2bcbc1dc) to reference 156
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbc1ec	156:	addu	t8, s6, s7
0x2bcbc1f0	160:	lb	t9, 12(t8)
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbc1f4	164:	addiu	t7, zero, 99
0x2bcbc1f8	168:	bne	t9, t7, PC=0x2bcbc1f4	@ branch to block L1
0x2bcbc1fc	172:	nop
0x2bcbc200	176:	addiu	s7, s4, -16
          		@ deferred comparison: 
0x2bcbc204	180:	sltu	t7, s7, ra
0x2bcbc208	184:	bne	t7, zero, PC=0x2bcbc204	@ br .skip
0x2bcbc20c	188:	nop
0x2bcbc210	192:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbc214	196:	nop
		.skip
--->Fixed instruction at 184(0x2bcbc208) to reference 200
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbc218	200:	addu	t9, s6, s7
0x2bcbc21c	204:	lb	ra, 12(t9)
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbc220	208:	addiu	t7, zero, 99
0x2bcbc224	212:	bne	ra, t7, PC=0x2bcbc220	@ branch to block L1
0x2bcbc228	216:	nop
0x2bcbc22c	220:	sw	s5, 0(JSP)
0x2bcbc230	224:	sw	s4, 4(JSP)
0x2bcbc234	228:	addiu	s7, s4, -16
0x2bcbc238	232:	sw	s7, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcbc23c	236:	lw	s7, 0(s5)	@ Get object.cb
0x2bcbc240	240:	addiu	t7, zero, -4
0x2bcbc244	244:	and	s7, s7, t7
0x2bcbc248	248:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbc24c	252:	lw	a0, 68(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbc250	256:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbc254	260:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc258	264:	jalr	s7
0x2bcbc25c	268:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(1) reg(20): not in register
0x2bcbc260	272:	lw	s4, -8(JFP)	@ Java local cell # 1
			@ Outgoing local(0) reg(21): not in register
0x2bcbc264	276:	lw	s5, -12(JFP)	@ Java local cell # 0
			@ Initial Temp REF set is 
	L1:	280:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 212(0x2bcbc224) to reference 280
--->Fixed instruction at 168(0x2bcbc1f8) to reference 280
--->Fixed instruction at 112(0x2bcbc1c0) to reference 280
          		@ MAP_PC idepth=0 javaPc=49 compiledPc=280
          		@ Do getfield:
0x2bcbc268	280:	lw	s7, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbc26c	284:	lw	s6, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbc270	288:	addiu	s7, s4, -8
0x2bcbc274	292:	lw	ra, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcbc278	296:	sltu	t7, s7, ra
0x2bcbc27c	300:	bne	t7, zero, PC=0x2bcbc278	@ br .skip
0x2bcbc280	304:	nop
0x2bcbc284	308:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbc288	312:	nop
		.skip
--->Fixed instruction at 300(0x2bcbc27c) to reference 316
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbc28c	316:	addu	t9, s6, s7
0x2bcbc290	320:	lb	ra, 12(t9)
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbc294	324:	addiu	t7, zero, 99
0x2bcbc298	328:	bne	ra, t7, PC=0x2bcbc294	@ branch to block L2
0x2bcbc29c	332:	nop
0x2bcbc2a0	336:	sw	s5, 0(JSP)
0x2bcbc2a4	340:	sw	s4, 4(JSP)
0x2bcbc2a8	344:	addiu	s7, s4, -8
0x2bcbc2ac	348:	sw	s7, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcbc2b0	352:	lw	s7, 0(s5)	@ Get object.cb
0x2bcbc2b4	356:	addiu	t7, zero, -4
0x2bcbc2b8	360:	and	s7, s7, t7
0x2bcbc2bc	364:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbc2c0	368:	lw	a0, 68(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbc2c4	372:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbc2c8	376:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc2cc	380:	jalr	s7
0x2bcbc2d0	384:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(1) reg(20): not in register
0x2bcbc2d4	388:	lw	s4, -8(JFP)	@ Java local cell # 1
			@ Outgoing local(0) reg(21): not in register
0x2bcbc2d8	392:	lw	s5, -12(JFP)	@ Java local cell # 0
			@ Initial Temp REF set is 
	L2:	396:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 328(0x2bcbc298) to reference 396
          		@ MAP_PC idepth=0 javaPc=75 compiledPc=396
0x2bcbc2dc	396:	andi	s6, s4, 7
0x2bcbc2e0	400:	sw	s6, -4(JFP)	@ Java local cell # 2
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(2) reg(22): in correct register
          		@ deferred comparison: 
0x2bcbc2e4	404:	slt	t7, zero, s6
0x2bcbc2e8	408:	beq	t7, zero, PC=0x2bcbc2e4	@ branch to block L3
0x2bcbc2ec	412:	nop
          		@ Do getfield:
0x2bcbc2f0	416:	lw	s7, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbc2f4	420:	lw	ra, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbc2f8	424:	addiu	s7, s4, -9
0x2bcbc2fc	428:	lw	t9, 8(ra)	@ arraylength
          		@ deferred comparison: 
0x2bcbc300	432:	sltu	t7, s7, t9
0x2bcbc304	436:	bne	t7, zero, PC=0x2bcbc300	@ br .skip
0x2bcbc308	440:	nop
0x2bcbc30c	444:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbc310	448:	nop
		.skip
--->Fixed instruction at 436(0x2bcbc304) to reference 452
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbc314	452:	addu	t8, ra, s7
0x2bcbc318	456:	lb	t9, 12(t8)
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(2) reg(22): in correct register
          		@ deferred comparison: 
0x2bcbc31c	460:	addiu	t7, zero, 99
0x2bcbc320	464:	beq	t9, t7, PC=0x2bcbc31c	@ branch to block L3
0x2bcbc324	468:	nop
0x2bcbc328	472:	sw	s5, 0(JSP)
0x2bcbc32c	476:	sw	s4, 4(JSP)
0x2bcbc330	480:	addiu	s7, zero, -1	@ const -1
0x2bcbc334	484:	sw	s7, 8(JSP)
0x2bcbc338	488:	addiu	ra, zero, -8	@ const -8
0x2bcbc33c	492:	sw	ra, 12(JSP)
0x2bcbc340	496:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbc344	500:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbc348	504:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc34c	508:	jalr	s7
0x2bcbc350	512:	nop
          		@ Captured a stackmap here.
0x2bcbc354	516:	addiu	JSP, JSP, -4
			@ Outgoing local(1) reg(20): not in register
0x2bcbc358	520:	lw	s4, -8(JFP)	@ Java local cell # 1
			@ Outgoing local(0) reg(21): not in register
0x2bcbc35c	524:	lw	s5, -12(JFP)	@ Java local cell # 0
			@ Outgoing local(2) reg(22): not in register
0x2bcbc360	528:	lw	s6, -4(JFP)	@ Java local cell # 2
			@ Initial Temp REF set is 
	L3:	532:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(2) to reg(22)
--->Fixed instruction at 464(0x2bcbc320) to reference 532
--->Fixed instruction at 408(0x2bcbc2e8) to reference 532
          		@ MAP_PC idepth=0 javaPc=110 compiledPc=532
          		@ deferred comparison: 
0x2bcbc364	532:	sltiu	t7, s6, 7
0x2bcbc368	536:	beq	t7, zero, PC=0x2bcbc364	@ branch to block L4
0x2bcbc36c	540:	nop
          		@ Do getfield:
0x2bcbc370	544:	lw	s7, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbc374	548:	lw	ra, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbc378	552:	addiu	s7, s4, -7
0x2bcbc37c	556:	lw	t9, 8(ra)	@ arraylength
          		@ deferred comparison: 
0x2bcbc380	560:	sltu	t7, s7, t9
0x2bcbc384	564:	bne	t7, zero, PC=0x2bcbc380	@ br .skip
0x2bcbc388	568:	nop
0x2bcbc38c	572:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbc390	576:	nop
		.skip
--->Fixed instruction at 564(0x2bcbc384) to reference 580
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbc394	580:	addu	t8, ra, s7
0x2bcbc398	584:	lb	t9, 12(t8)
          		@ deferred comparison: 
0x2bcbc39c	588:	addiu	t7, zero, 99
0x2bcbc3a0	592:	beq	t9, t7, PC=0x2bcbc39c	@ branch to block L4
0x2bcbc3a4	596:	nop
0x2bcbc3a8	600:	sw	s5, 0(JSP)
0x2bcbc3ac	604:	sw	s4, 4(JSP)
0x2bcbc3b0	608:	addiu	s7, zero, 1	@ const 1
0x2bcbc3b4	612:	sw	s7, 8(JSP)
0x2bcbc3b8	616:	addiu	ra, zero, -8	@ const -8
0x2bcbc3bc	620:	sw	ra, 12(JSP)
0x2bcbc3c0	624:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbc3c4	628:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbc3c8	632:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc3cc	636:	jalr	s7
0x2bcbc3d0	640:	nop
          		@ Captured a stackmap here.
0x2bcbc3d4	644:	addiu	JSP, JSP, -4
			@ Initial Temp REF set is 
	L4:	648:	@ entry point for branches
--->Fixed instruction at 592(0x2bcbc3a0) to reference 648
--->Fixed instruction at 536(0x2bcbc368) to reference 648
          		@ MAP_PC idepth=0 javaPc=142 compiledPc=648
0x2bcbc3d8	648:	addiu	JSP, JFP, -12
0x2bcbc3dc	652:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbc3e0	656:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbc3e4	660:	nop
0x2bcbc3e8	664:	.word	9793524	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
--->Fixed instruction at 624(0x2bcbc3c0) to reference 664
--->Fixed instruction at 496(0x2bcbc340) to reference 664
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbc150) >>>>>>>>
          		@ Capacity is 15 word(s)
0x2bcbc150	0:	addiu	a1, JSP, 52
<<<<<<<<<Pop Code Buffer to PC = 668 (0x2bcbc3ec) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbc1a0) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbc1a0	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbc1a4	84:	lui	CP, hi16(0x2bcb)
0x2bcbc1a8	88:	ori	CP, CP, lo16(0x2bcbc3e8)
0x2bcbc1ac	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 668 (0x2bcbc3ec) <<<<<<<<<
JS: COMPILED: size=760 startPC=0x2bcbc150 com.sun.mep.bench.Chess.WPossMoves.WPawn_Moves(I)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;
JS: COMPILING com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;
orig bkID(11) Incoming Locals(1 0x0): 2- 
orig bkID(2) Incoming Locals(1 0x0): 3- 
o1   bkID(2) Incoming Locals(1 0x0): 3- 
s1   bkID(2) Incoming Locals(2 0x0): 3- 1- 
s1   bkID(2) Incoming Locals(2 0x0): 3- 1- 
o1   bkID(2) Incoming Locals(2 0x0): 3- 1- 
s1   bkID(2) Incoming Locals(3 0x0): 3- 1- 2- 
o1   bkID(2) Incoming Locals(3 0x0): 3- 1- 2- 
orig bkID(3) Incoming Locals(2 0x0): 1- 3- 
orig bkID(11) Incoming Locals(1 0x0): 2- 
orig bkID(2) Incoming Locals(3 0x0): 3- 1- 2- 
o1   bkID(2) Incoming Locals(1 0x0): 3- 
s1   bkID(2) Incoming Locals(2 0x0): 3- 1- 
s1   bkID(2) Incoming Locals(2 0x0): 3- 1- 
o1   bkID(2) Incoming Locals(2 0x0): 3- 1- 
s1   bkID(2) Incoming Locals(3 0x0): 3- 1- 2- 
o1   bkID(2) Incoming Locals(3 0x0): 3- 1- 2- 
orig bkID(3) Incoming Locals(2 0x0): 1- 3- 
bkID(2) local(0 #3)  not ordered
bestLocal(0) bestLocalScore(24)
-bk  bkID(2) Incoming Locals(3 0x0): 3- 1- 2- 
+bk  bkID(2) Incoming Locals(3 0x1): 3+ 1- 2- 
-gbk bkID(3) Incoming Locals(2 0x0): 1- 3- 
+gbk bkID(3) Incoming Locals(2 0x1): 3+ 1- 
bkID(2) local(0 #3)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(3 0x1): 3+ 1- 2- 
dstBk(2) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(2) Incoming Locals(3 0x1): 3+ 1- 2- 
 ordered in bk
-gbk bkID(11) Incoming Locals(1 0x0): 2- 
+gbk bkID(11) Incoming Locals(1 0x0): 2- 
-gbk bkID(3) Incoming Locals(2 0x1): 3+ 1- 
dstBk(3) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(3) Incoming Locals(2 0x1): 3+ 1- 
bkID(2) local(1 #1)  not ordered
bestLocal(1) bestLocalScore(24)
-bk  bkID(2) Incoming Locals(3 0x1): 3+ 1- 2- 
+bk  bkID(2) Incoming Locals(3 0x3): 3+ 1+ 2- 
-gbk bkID(3) Incoming Locals(2 0x1): 3+ 1- 
+gbk bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
bkID(2) local(1 #1)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(3 0x3): 3+ 1+ 2- 
dstBk(2) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(2) Incoming Locals(3 0x3): 3+ 1+ 2- 
 ordered in bk
-gbk bkID(11) Incoming Locals(1 0x0): 2- 
+gbk bkID(11) Incoming Locals(1 0x0): 2- 
-gbk bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
dstBk(3) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
bkID(2) local(2 #2)  not found in goalBk
bkID(2) local(0 #3)  not found in goalBk
bkID(2) local(1 #1)  not found in goalBk
bkID(2) local(2 #2)  not ordered
bestLocal(2) bestLocalScore(8)
-bk  bkID(2) Incoming Locals(3 0x3): 3+ 1+ 2- 
+bk  bkID(2) Incoming Locals(3 0x7): 3+ 1+ 2+ 
-gbk bkID(11) Incoming Locals(1 0x0): 2- 
+gbk bkID(11) Incoming Locals(3 0x4): <null> <null> 2+ 
bkID(2) local(2 #2)  ordered in goalBk(11)
-bk  bkID(2) Incoming Locals(3 0x7): 3+ 1+ 2+ 
dstBk(2) local(2 2) found in slot(2)
local(2 2) same slot
+bk  bkID(2) Incoming Locals(3 0x7): 3+ 1+ 2+ 
 ordered in bk
-gbk bkID(11) Incoming Locals(3 0x4): <null> <null> 2+ 
dstBk(11) local(2 2) found in slot(2)
local(2 2) same slot
+gbk bkID(11) Incoming Locals(3 0x4): <null> <null> 2+ 
bkID(11) local(2 #2)  not found in goalBk
Pushing blockID(3)
bkID(3) local(0 #3)  ordered in goalBk(3)
-bk  bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
dstBk(3) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
dstBk(3) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
bkID(3) local(1 #1)  ordered in goalBk(3)
-bk  bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
dstBk(3) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
dstBk(3) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
Popping blockID(3)

#################################################

The maximum node counts per root node are 16
IR block list contains 12 blocks in method
#################################################

*************************************************
*
* (block ID:1 block PC:0 )
* IR root list contains 8 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:112)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<0>  (0x94d2d4):    new_quick #53 <com.sun.mep.bench.Chess.WPossMoves>
<3>  (0x94d2d7):    dup 
<4>  (0x94d2d8):    aload_1 
<5>  (0x94d2d9):    aload_0 
<6>  (0x94d2da):    agetfield_quick #2
<9>  (0x94d2dd):    invokenonvirtual_quick #54 <com.sun.mep.bench.Chess.WPossMoves.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V>
<12>  (0x94d2e0):    astore_2 
<13>  (0x94d2e1):    iconst_0 
<14>  (0x94d2e2):    istore_3 
<15>  (0x94d2e3):    goto <112>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Assigned Locals(2): 
	ASSIGN(20): local(2)	ID(19)	rhsID(3)
 	ASSIGN(22): local(3)	ID(21)	rhsID(18)
 
Successor Blocks(1): 
	ID(2) LocalOrder(0) AssignOrder(2) RefsOK(0) Locals(3 1 2)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 3) IDENTITY (reference)  (ref count: 3)
      <(ID: 15) NEW_OBJECT (reference) 
         <(ID: 2) CONST_CB (address field)  (com.sun.mep.bench.Chess.WPossMoves)

   <(ID: 8) IDENTITY (reference)  (ref count: 2)
      <(ID: 16) FETCH (reference) 
         <(ID: 7) FIELD_REF (reference) 
            <(ID: 5) LOCAL (reference)   0>
            <(ID: 6) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 14) INVOKE (v) 
      <(ID: 13) PARAMETER (reference) 
         <(ID: 3) IDENTITY (reference)  (ref count: 3)
         <(ID: 12) PARAMETER (reference) 
            <(ID: 4) LOCAL (reference)   1>
            <(ID: 11) PARAMETER (reference) 
               <(ID: 8) IDENTITY (reference)  (ref count: 2)
               <(ID: 10) NULL_PARAMETER (NONE) 
      <(ID: 9) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V)

   <(ID: 17) MAP_PC (NONE)   13>

   <(ID: 20) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 19) LOCAL (reference)   2>
      <(ID: 3) IDENTITY (reference)  (ref count: 3)

   <(ID: 22) ASSIGN (int)  (assignIdx: 1)
      <(ID: 21) LOCAL (int)   3>
      <(ID: 18) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 23) GOTO (NONE) 
   target: (BlockID: 2 BlockPC: 112)


*************************************************
*
* (block ID:3 block PC:18 )
* IR root list contains 4 root nodes: in block 
* flags: 0x321
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:118)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<18>  (0x94d2e6):    aload_1 
<19>  (0x94d2e7):    agetfield_quick #3
<22>  (0x94d2ea):    iload_3 
<23>  (0x94d2eb):    baload 
<24>  (0x94d2ec):    tableswitch 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(1)	ID(31)
 	local(3)	ID(35)
 
Incoming Locals(2): 
	local(3)	ID(35)
 	local(1)	ID(31)
 
   <(ID: 30) MAP_PC (NONE)   18>

   <(ID: 34) IDENTITY (reference)  (ref count: 3)
      <(ID: 41) FETCH (reference) 
         <(ID: 33) FIELD_REF (reference) 
            <(ID: 31) LOCAL (reference)   1>
            <(ID: 32) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 39) IDENTITY (int)  (ref count: 2)
      <(ID: 42) FETCH (int) 
         <(ID: 38) INDEX (int) 
            <(ID: 34) IDENTITY (reference)  (ref count: 3)
            <(ID: 37) BOUNDS_CHECK (int) 
               <(ID: 35) LOCAL (int)   3>
               <(ID: 36) ARRAY_LENGTH (int) 
                  <(ID: 34) IDENTITY (reference)  (ref count: 3)

   <(ID: 40) TABLESWITCH (NONE) 
   Key:
      <(ID: 39) IDENTITY (int)  (ref count: 2)
   default target: (BlockID: 4 BlockPC: 109)
   	low: 0
   	high: 5
   	nElements: 6
   	tableList blocks:
      jump offset 0: (BlockID: 5 BlockPC: 88)
      jump offset 1: (BlockID: 6 BlockPC: 80)
      jump offset 2: (BlockID: 7 BlockPC: 64)
      jump offset 3: (BlockID: 8 BlockPC: 104)
      jump offset 4: (BlockID: 9 BlockPC: 96)
      jump offset 5: (BlockID: 10 BlockPC: 72)


*************************************************
*
* (block ID:7 block PC:64 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:121)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<64>  (0x94d314):    aload_2 
<65>  (0x94d315):    iload_3 
<66>  (0x94d316):    invokevirtual_quick_w #56 <com.sun.mep.bench.Chess.WPossMoves.WBishop_Moves(I)V>
<69>  (0x94d319):    goto <109>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(4) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 153) MAP_PC (NONE)   64>

   <(ID: 162) INVOKE (v) 
      <(ID: 159) PARAMETER (reference) 
         <(ID: 154) IDENTITY (reference)  (ref count: 2)
            <(ID: 163) LOCAL (reference)   2>
         <(ID: 158) PARAMETER (int) 
            <(ID: 155) LOCAL (int)   3>
            <(ID: 157) NULL_PARAMETER (NONE) 
      <(ID: 161) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 160) GET_VTBL (NONE) 
            <(ID: 154) IDENTITY (reference)  (ref count: 2)
         <(ID: 156) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 15)

   <(ID: 164) GOTO (NONE) 
   target: (BlockID: 4 BlockPC: 109)


*************************************************
*
* (block ID:10 block PC:72 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:124)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<72>  (0x94d31c):    aload_2 
<73>  (0x94d31d):    iload_3 
<74>  (0x94d31e):    invokevirtual_quick_w #57 <com.sun.mep.bench.Chess.WPossMoves.WKing_Moves(I)V>
<77>  (0x94d321):    goto <109>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(4) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 188) MAP_PC (NONE)   72>

   <(ID: 197) INVOKE (v) 
      <(ID: 194) PARAMETER (reference) 
         <(ID: 189) IDENTITY (reference)  (ref count: 2)
            <(ID: 198) LOCAL (reference)   2>
         <(ID: 193) PARAMETER (int) 
            <(ID: 190) LOCAL (int)   3>
            <(ID: 192) NULL_PARAMETER (NONE) 
      <(ID: 196) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 195) GET_VTBL (NONE) 
            <(ID: 189) IDENTITY (reference)  (ref count: 2)
         <(ID: 191) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 199) GOTO (NONE) 
   target: (BlockID: 4 BlockPC: 109)


*************************************************
*
* (block ID:6 block PC:80 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:127)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<80>  (0x94d324):    aload_2 
<81>  (0x94d325):    iload_3 
<82>  (0x94d326):    invokevirtual_quick_w #58 <com.sun.mep.bench.Chess.WPossMoves.WKnight_Moves(I)V>
<85>  (0x94d329):    goto <109>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(4) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 141) MAP_PC (NONE)   80>

   <(ID: 150) INVOKE (v) 
      <(ID: 147) PARAMETER (reference) 
         <(ID: 142) IDENTITY (reference)  (ref count: 2)
            <(ID: 151) LOCAL (reference)   2>
         <(ID: 146) PARAMETER (int) 
            <(ID: 143) LOCAL (int)   3>
            <(ID: 145) NULL_PARAMETER (NONE) 
      <(ID: 149) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 148) GET_VTBL (NONE) 
            <(ID: 142) IDENTITY (reference)  (ref count: 2)
         <(ID: 144) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 13)

   <(ID: 152) GOTO (NONE) 
   target: (BlockID: 4 BlockPC: 109)


*************************************************
*
* (block ID:5 block PC:88 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:130)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<88>  (0x94d32c):    aload_2 
<89>  (0x94d32d):    iload_3 
<90>  (0x94d32e):    invokevirtual_quick_w #59 <com.sun.mep.bench.Chess.WPossMoves.WPawn_Moves(I)V>
<93>  (0x94d331):    goto <109>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(4) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 129) MAP_PC (NONE)   88>

   <(ID: 138) INVOKE (v) 
      <(ID: 135) PARAMETER (reference) 
         <(ID: 130) IDENTITY (reference)  (ref count: 2)
            <(ID: 139) LOCAL (reference)   2>
         <(ID: 134) PARAMETER (int) 
            <(ID: 131) LOCAL (int)   3>
            <(ID: 133) NULL_PARAMETER (NONE) 
      <(ID: 137) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 136) GET_VTBL (NONE) 
            <(ID: 130) IDENTITY (reference)  (ref count: 2)
         <(ID: 132) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 12)

   <(ID: 140) GOTO (NONE) 
   target: (BlockID: 4 BlockPC: 109)


*************************************************
*
* (block ID:9 block PC:96 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:133)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<96>  (0x94d334):    aload_2 
<97>  (0x94d335):    iload_3 
<98>  (0x94d336):    invokevirtual_quick_w #60 <com.sun.mep.bench.Chess.WPossMoves.WQueen_Moves(I)V>
<101>  (0x94d339):    goto <109>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(4) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 176) MAP_PC (NONE)   96>

   <(ID: 185) INVOKE (v) 
      <(ID: 182) PARAMETER (reference) 
         <(ID: 177) IDENTITY (reference)  (ref count: 2)
            <(ID: 186) LOCAL (reference)   2>
         <(ID: 181) PARAMETER (int) 
            <(ID: 178) LOCAL (int)   3>
            <(ID: 180) NULL_PARAMETER (NONE) 
      <(ID: 184) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 183) GET_VTBL (NONE) 
            <(ID: 177) IDENTITY (reference)  (ref count: 2)
         <(ID: 179) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 16)

   <(ID: 187) GOTO (NONE) 
   target: (BlockID: 4 BlockPC: 109)


*************************************************
*
* (block ID:8 block PC:104 )
* IR root list contains 2 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:136)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<104>  (0x94d33c):    aload_2 
<105>  (0x94d33d):    iload_3 
<106>  (0x94d33e):    invokevirtual_quick_w #61 <com.sun.mep.bench.Chess.WPossMoves.WRook_Moves(I)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(4) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 165) MAP_PC (NONE)   104>

   <(ID: 174) INVOKE (v) 
      <(ID: 171) PARAMETER (reference) 
         <(ID: 166) IDENTITY (reference)  (ref count: 2)
            <(ID: 175) LOCAL (reference)   2>
         <(ID: 170) PARAMETER (int) 
            <(ID: 167) LOCAL (int)   3>
            <(ID: 169) NULL_PARAMETER (NONE) 
      <(ID: 173) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 172) GET_VTBL (NONE) 
            <(ID: 166) IDENTITY (reference)  (ref count: 2)
         <(ID: 168) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 14)


*************************************************
*
* (block ID:4 block PC:109 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:116)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<109>  (0x94d341):    iinc 3 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(127): local(3)	ID(126)	rhsID(125)
 
Successor Blocks(1): 
	ID(2) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(3 1 2)

   <(ID: 122) MAP_PC (NONE)   109>

   <(ID: 123) IDENTITY (int)  (ref count: 2)
      <(ID: 128) LOCAL (int)   3>

   <(ID: 127) ASSIGN (int)  (assignIdx: 0)
      <(ID: 126) LOCAL (int)   3>
      <(ID: 125) ADD (int) 
         <(ID: 123) IDENTITY (int)  (ref count: 2)
         <(ID: 124) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:2 block PC:112 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x7
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:116)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<112>  (0x94d344):    iload_3 
<113>  (0x94d345):    bipush 64
<115>  (0x94d347):    if_icmplt <18>
<118>  (0x94d34a):    goto <169>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(3)	ID(25)
 
Incoming Locals(3): 
	local(3)	ID(25)
 	local(1)	ID(31)
 	local(2)	ID(44)
 
Successor Blocks(2): 
	ID(3) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(3 1)
	ID(11) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(<null> <null> 2)

   <(ID: 24) MAP_PC (NONE)   112>

   <(ID: 27) BCOND (int) 
   target: (BlockID: 3 BlockPC: 18)
   condition: LT
   flags: 0
      <(ID: 25) LOCAL (int)   3>
      <(ID: 26) CONST_JAVA_NUMERIC32 (int)  (64)


   <(ID: 28) MAP_PC (NONE)   118>

   <(ID: 29) GOTO (NONE) 
   target: (BlockID: 11 BlockPC: 169)


*************************************************
*
* (block ID:0 block PC:121 )
* IR root list contains 11 root nodes: in block 
* flags: 0x343
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:143)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<121>  (0x94d34d):    astore_3 
<122>  (0x94d34e):    aload_0 
<123>  (0x94d34f):    getfield #2 <com.sun.mep.bench.Chess.CompMover.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<126>  (0x94d352):    getfield #62 <com.sun.mep.bench.Chess.Game.debugTextManager:Lcom/sun/mep/bench/Chess/DebugTextManager;>
<129>  (0x94d355):    new #21 <java.lang.StringBuffer>
<132>  (0x94d358):    dup 
<133>  (0x94d359):    invokespecial #22 <java.lang.StringBuffer.<init>()V>
<136>  (0x94d35c):    aload_3 
<137>  (0x94d35d):    invokevirtual #63 <java.lang.Throwable.toString()Ljava/lang/String;>
<140>  (0x94d360):    invokevirtual #24 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<143>  (0x94d363):    ldc #64
<145>  (0x94d365):    invokevirtual #24 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<148>  (0x94d368):    invokevirtual #26 <java.lang.StringBuffer.toString()Ljava/lang/String;>
<151>  (0x94d36b):    invokevirtual #51 <com.sun.mep.bench.Chess.DebugTextManager.set(Ljava/lang/String;)V>
<154>  (0x94d36e):    aload_0 
<155>  (0x94d36f):    getfield #2 <com.sun.mep.bench.Chess.CompMover.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<158>  (0x94d372):    getfield #65 <com.sun.mep.bench.Chess.Game.debugTextManager:Lcom/sun/mep/bench/Chess/DebugTextManager;>
<161>  (0x94d375):    ldc #66
<163>  (0x94d377):    invokevirtual #51 <com.sun.mep.bench.Chess.DebugTextManager.set(Ljava/lang/String;)V>
<166>  (0x94d37a):    goto <169>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: -1 0

Assigned Locals(1): 
	ASSIGN(121): local(3)	ID(120)	rhsID(51)
 
Successor Blocks(1): 
	ID(11) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(<null> <null> 2)

   <(ID: 50) MAP_PC (NONE)   121>

   <(ID: 51) IDENTITY (reference)  (ref count: 4)
      <(ID: 100) EXCEPTION_OBJECT (reference) 

   <(ID: 55) IDENTITY (reference)  (ref count: 2)
      <(ID: 59) FETCH (reference) 
         <(ID: 54) FIELD_REF (reference) 
            <(ID: 52) IDENTITY (reference)  (ref count: 2)
               <(ID: 106) LOCAL (reference)   0>
            <(ID: 53) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 58) IDENTITY (reference)  (ref count: 3)
      <(ID: 99) FETCH (reference) 
         <(ID: 57) FIELD_REF (reference) 
            <(ID: 55) IDENTITY (reference)  (ref count: 2)
            <(ID: 56) CONST_FIELD_OFFSET (NONE)  (18)

   <(ID: 61) IDENTITY (reference)  (ref count: 3)
      <(ID: 66) NEW_OBJECT (reference) 
         <(ID: 60) CONST_CB (address field)  (java.lang.StringBuffer)

   <(ID: 65) INVOKE (v) 
      <(ID: 64) PARAMETER (reference) 
         <(ID: 61) IDENTITY (reference)  (ref count: 3)
         <(ID: 63) NULL_PARAMETER (NONE) 
      <(ID: 62) CONST_MB (address field)  (java.lang.StringBuffer.<init>()V)

   <(ID: 98) INVOKE (v) 
      <(ID: 95) PARAMETER (reference) 
         <(ID: 58) IDENTITY (reference)  (ref count: 3)
         <(ID: 94) PARAMETER (reference) 
            <(ID: 91) INVOKE (reference) 
               <(ID: 88) PARAMETER (reference) 
                  <(ID: 85) IDENTITY (reference)  (ref count: 2)
                     <(ID: 102) INVOKE (reference) 
                        <(ID: 82) PARAMETER (reference) 
                           <(ID: 77) IDENTITY (reference)  (ref count: 2)
                              <(ID: 101) INVOKE (reference) 
                                 <(ID: 76) PARAMETER (reference) 
                                    <(ID: 61) IDENTITY (reference)  (ref count: 3)
                                    <(ID: 75) PARAMETER (reference) 
                                       <(ID: 72) INVOKE (reference) 
                                          <(ID: 69) PARAMETER (reference) 
                                             <(ID: 51) IDENTITY (reference)  (ref count: 4)
                                             <(ID: 68) NULL_PARAMETER (NONE) 
                                          <(ID: 71) FETCH_MB_FROM_VTABLE (address field) 
                                             <(ID: 70) GET_VTBL (NONE) 
                                                <(ID: 51) IDENTITY (reference)  (ref count: 4)
                                             <(ID: 67) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 5)
                                       <(ID: 74) NULL_PARAMETER (NONE) 
                                 <(ID: 73) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                           <(ID: 81) PARAMETER (reference) 
                              <(ID: 78) CONST_STRING_ICELL (reference)  (stringICell 0x80ba40)

                              <(ID: 80) NULL_PARAMETER (NONE) 
                        <(ID: 84) SEQUENCE_R (address field) 
                           <(ID: 83) NULL_CHECK (reference) 
                              <(ID: 77) IDENTITY (reference)  (ref count: 2)
                           <(ID: 79) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                  <(ID: 87) NULL_PARAMETER (NONE) 
               <(ID: 90) SEQUENCE_R (address field) 
                  <(ID: 89) NULL_CHECK (reference) 
                     <(ID: 85) IDENTITY (reference)  (ref count: 2)
                  <(ID: 86) CONST_MB (address field)  (java.lang.StringBuffer.toString()Ljava/lang/String;)
            <(ID: 93) NULL_PARAMETER (NONE) 
      <(ID: 97) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 96) GET_VTBL (NONE) 
            <(ID: 58) IDENTITY (reference)  (ref count: 3)
         <(ID: 92) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 105) IDENTITY (reference)  (ref count: 2)
      <(ID: 110) FETCH (reference) 
         <(ID: 104) FIELD_REF (reference) 
            <(ID: 52) IDENTITY (reference)  (ref count: 2)
            <(ID: 103) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 109) IDENTITY (reference)  (ref count: 3)
      <(ID: 119) FETCH (reference) 
         <(ID: 108) FIELD_REF (reference) 
            <(ID: 105) IDENTITY (reference)  (ref count: 2)
            <(ID: 107) CONST_FIELD_OFFSET (NONE)  (18)

   <(ID: 118) INVOKE (v) 
      <(ID: 115) PARAMETER (reference) 
         <(ID: 109) IDENTITY (reference)  (ref count: 3)
         <(ID: 114) PARAMETER (reference) 
            <(ID: 111) CONST_STRING_ICELL (reference)  (stringICell 0x90ea94)

            <(ID: 113) NULL_PARAMETER (NONE) 
      <(ID: 117) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 116) GET_VTBL (NONE) 
            <(ID: 109) IDENTITY (reference)  (ref count: 3)
         <(ID: 112) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 121) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 120) LOCAL (reference)   3>
      <(ID: 51) IDENTITY (reference)  (ref count: 4)


*************************************************
*
* (block ID:11 block PC:169 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x4
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:147)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<169>  (0x94d37d):    aload_2 
<170>  (0x94d37e):    agetfield_quick #2
<173>  (0x94d381):    areturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(2)	ID(44)
 
Incoming Locals(3): 
	<null>
	<null>
	local(2)	ID(44)
 
   <(ID: 43) MAP_PC (NONE)   169>

   <(ID: 47) IDENTITY (reference)  (ref count: 2)
      <(ID: 49) FETCH (reference) 
         <(ID: 46) FIELD_REF (reference) 
            <(ID: 44) LOCAL (reference)   2>
            <(ID: 45) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 48) RETURN_VALUE (reference) 
      <(ID: 47) IDENTITY (reference)  (ref count: 2)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 248
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 1052
ESTIMATED BUFFER SIZE = 1472
CODE BUFFER ADDRESS = 0x2bcbc40c
PC MAP TABLE ADDRESS = 0x2bcbc414
GC CHECK PCS ADDRESS = 0x2bcbc450
CODE ENTRY ADDRESS = 0x2bcbc480
          		@ Method prologue
0x2bcbc480	0:	addiu	a1, JSP, 56	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbc484	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbc488	8:	sltu	t7, a1, CHUNKEND
0x2bcbc48c	12:	bne	t7, zero, PC=0x2bcbc480	@ goto .skip
0x2bcbc490	16:	nop
0x2bcbc494	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbc498	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbc48c) >>>>>>>>
0x2bcbc48c	12:	bne	t7, zero, PC=0x2bcbc49c	@ goto .skip
0x2bcbc490	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbc49c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbc49c	28:	sw	JFP, 8(JSP)	@ Store curr JFP into new frame
0x2bcbc4a0	32:	addiu	JFP, JSP, 8	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbc4a4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbc4a8	40:	addiu	a3, zero, 0
0x2bcbc4ac	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbc4b0	48:	addiu	a3, zero, -1
0x2bcbc4b4	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbc4b8	56:	move	a0, EE
0x2bcbc4bc	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbc4c0	64:	lui	t9, hi16(0x65)
0x2bcbc4c4	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbc4c8	72:	jalr	t9
0x2bcbc4cc	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbc4d0	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbc4d4	84:	nop
0x2bcbc4d8	88:	nop
0x2bcbc4dc	92:	nop
			@ Initial Temp REF set is 
	L1:	96:	@ entry point for first block
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=96
0x2bcbc4e0	96:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.WPossMoves
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.WPossMoves
0x2bcbc4e4	100:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcbc4e8	104:	nop
          		@ Captured a stackmap here.
0x2bcbc4ec	108:	lw	ra, -16(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcbc4f0	112:	lw	s7, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbc4f4	116:	sw	v0, 0(JSP)
0x2bcbc4f8	120:	lw	s5, -12(JFP)	@ Java local cell # 1
0x2bcbc4fc	124:	sw	s5, 4(JSP)
0x2bcbc500	128:	sw	s7, 8(JSP)
0x2bcbc504	132:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V
          		@ Invoke a method w/ a void return type
0x2bcbc508	136:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbc50c	140:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcbc510	144:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc514	148:	jalr	s7
0x2bcbc518	152:	nop
          		@ Captured a stackmap here.
          		@ MAP_PC idepth=0 javaPc=13 compiledPc=156
0x2bcbc51c	156:	lw	s7, 28(JFP)	@ Java temp cell # 0
0x2bcbc520	160:	sw	s7, -8(JFP)	@ Java local cell # 2
0x2bcbc524	164:	sw	zero, -4(JFP)	@ Java local cell # 3
			@ Outgoing local(3) reg(20): in wrong register
0x2bcbc528	168:	move	s4, zero
			@ Outgoing local(1) reg(21): not in register
0x2bcbc52c	172:	lw	s5, -12(JFP)	@ Java local cell # 1
			@ Outgoing local(2) reg(22): in wrong register
0x2bcbc530	176:	move	s6, s7
0x2bcbc534	180:	b	PC=0x2bcbc534	@ branch to block L2
0x2bcbc538	184:	nop
			@ Initial Temp REF set is 
	L3:	188:	@ Patchable GC Check point
0x2bcbc53c	188:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcbc53c	188:	nop
0x2bcbc540	192:	nop
          		@ Captured a stackmap here.
	L3:	196:	@ entry point when locals need to be loaded
			@ Preloading incoming local(3) reg(20)
0x2bcbc544	196:	lw	s4, -4(JFP)	@ Java local cell # 3
			@ Preloading incoming local(1) reg(21)
0x2bcbc548	200:	lw	s5, -12(JFP)	@ Java local cell # 1
	L3:	204:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=18 compiledPc=196
          		@ Do getfield:
0x2bcbc54c	204:	lw	s7, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbc550	208:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcbc554	212:	sltu	t7, s4, s6
0x2bcbc558	216:	bne	t7, zero, PC=0x2bcbc554	@ br .skip
0x2bcbc55c	220:	nop
0x2bcbc560	224:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbc564	228:	nop
		.skip
--->Fixed instruction at 216(0x2bcbc558) to reference 232
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbc568	232:	addu	ra, s7, s4
0x2bcbc56c	236:	lb	s6, 12(ra)
          		@ tableswitch
          		@ deferred comparison: 
0x2bcbc570	240:	addiu	t7, zero, 5
0x2bcbc574	244:	sltu	t7, t7, s6
0x2bcbc578	248:	bne	t7, zero, PC=0x2bcbc570	@ branch to block L4
0x2bcbc57c	252:	nop
0x2bcbc580	256:	lw	s7, 0(CP)
0x2bcbc584	260:	sll	t9, s6, 3
0x2bcbc588	264:	addu	t9, t9, s7
0x2bcbc58c	268:	jr	t9
0x2bcbc590	272:	nop
0x2bcbc594	276:	b	PC=0x2bcbc594	@ branch to block L5
0x2bcbc598	280:	nop
0x2bcbc59c	284:	b	PC=0x2bcbc59c	@ branch to block L6
0x2bcbc5a0	288:	nop
0x2bcbc5a4	292:	b	PC=0x2bcbc5a4	@ branch to block L7
0x2bcbc5a8	296:	nop
0x2bcbc5ac	300:	b	PC=0x2bcbc5ac	@ branch to block L8
0x2bcbc5b0	304:	nop
0x2bcbc5b4	308:	b	PC=0x2bcbc5b4	@ branch to block L9
0x2bcbc5b8	312:	nop
0x2bcbc5bc	316:	b	PC=0x2bcbc5bc	@ branch to block L10
0x2bcbc5c0	320:	nop
			@ Initial Temp REF set is 
	L7:	324:	@ entry point for branches
--->Fixed instruction at 292(0x2bcbc5a4) to reference 324
          		@ MAP_PC idepth=0 javaPc=64 compiledPc=324
0x2bcbc5c4	324:	lw	ra, -8(JFP)	@ Java local cell # 2
0x2bcbc5c8	328:	sw	ra, 0(JSP)
0x2bcbc5cc	332:	lw	t9, -4(JFP)	@ Java local cell # 3
0x2bcbc5d0	336:	sw	t9, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbc5d4	340:	lw	s7, 0(ra)	@ Get object.cb
0x2bcbc5d8	344:	addiu	t7, zero, -4
0x2bcbc5dc	348:	and	s7, s7, t7
0x2bcbc5e0	352:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbc5e4	356:	lw	a0, 60(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbc5e8	360:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbc5ec	364:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc5f0	368:	jalr	s7
0x2bcbc5f4	372:	nop
          		@ Captured a stackmap here.
0x2bcbc5f8	376:	b	PC=0x2bcbc5f8	@ branch to block L4
0x2bcbc5fc	380:	nop
			@ Initial Temp REF set is 
	L10:	384:	@ entry point for branches
--->Fixed instruction at 316(0x2bcbc5bc) to reference 384
          		@ MAP_PC idepth=0 javaPc=72 compiledPc=384
0x2bcbc600	384:	lw	ra, -8(JFP)	@ Java local cell # 2
0x2bcbc604	388:	sw	ra, 0(JSP)
0x2bcbc608	392:	lw	t9, -4(JFP)	@ Java local cell # 3
0x2bcbc60c	396:	sw	t9, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbc610	400:	lw	s7, 0(ra)	@ Get object.cb
0x2bcbc614	404:	addiu	t7, zero, -4
0x2bcbc618	408:	and	s7, s7, t7
0x2bcbc61c	412:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbc620	416:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbc624	420:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbc628	424:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc62c	428:	jalr	s7
0x2bcbc630	432:	nop
          		@ Captured a stackmap here.
0x2bcbc634	436:	b	PC=0x2bcbc634	@ branch to block L4
0x2bcbc638	440:	nop
			@ Initial Temp REF set is 
	L6:	444:	@ entry point for branches
--->Fixed instruction at 284(0x2bcbc59c) to reference 444
          		@ MAP_PC idepth=0 javaPc=80 compiledPc=444
0x2bcbc63c	444:	lw	ra, -8(JFP)	@ Java local cell # 2
0x2bcbc640	448:	sw	ra, 0(JSP)
0x2bcbc644	452:	lw	t9, -4(JFP)	@ Java local cell # 3
0x2bcbc648	456:	sw	t9, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbc64c	460:	lw	s7, 0(ra)	@ Get object.cb
0x2bcbc650	464:	addiu	t7, zero, -4
0x2bcbc654	468:	and	s7, s7, t7
0x2bcbc658	472:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbc65c	476:	lw	a0, 52(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbc660	480:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbc664	484:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc668	488:	jalr	s7
0x2bcbc66c	492:	nop
          		@ Captured a stackmap here.
0x2bcbc670	496:	b	PC=0x2bcbc670	@ branch to block L4
0x2bcbc674	500:	nop
			@ Initial Temp REF set is 
	L5:	504:	@ entry point for branches
--->Fixed instruction at 276(0x2bcbc594) to reference 504
          		@ MAP_PC idepth=0 javaPc=88 compiledPc=504
0x2bcbc678	504:	lw	ra, -8(JFP)	@ Java local cell # 2
0x2bcbc67c	508:	sw	ra, 0(JSP)
0x2bcbc680	512:	lw	t9, -4(JFP)	@ Java local cell # 3
0x2bcbc684	516:	sw	t9, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbc688	520:	lw	s7, 0(ra)	@ Get object.cb
0x2bcbc68c	524:	addiu	t7, zero, -4
0x2bcbc690	528:	and	s7, s7, t7
0x2bcbc694	532:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbc698	536:	lw	a0, 48(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbc69c	540:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbc6a0	544:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc6a4	548:	jalr	s7
0x2bcbc6a8	552:	nop
          		@ Captured a stackmap here.
0x2bcbc6ac	556:	b	PC=0x2bcbc6ac	@ branch to block L4
0x2bcbc6b0	560:	nop
			@ Initial Temp REF set is 
	L9:	564:	@ entry point for branches
--->Fixed instruction at 308(0x2bcbc5b4) to reference 564
          		@ MAP_PC idepth=0 javaPc=96 compiledPc=564
0x2bcbc6b4	564:	lw	ra, -8(JFP)	@ Java local cell # 2
0x2bcbc6b8	568:	sw	ra, 0(JSP)
0x2bcbc6bc	572:	lw	t9, -4(JFP)	@ Java local cell # 3
0x2bcbc6c0	576:	sw	t9, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbc6c4	580:	lw	s7, 0(ra)	@ Get object.cb
0x2bcbc6c8	584:	addiu	t7, zero, -4
0x2bcbc6cc	588:	and	s7, s7, t7
0x2bcbc6d0	592:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbc6d4	596:	lw	a0, 64(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbc6d8	600:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbc6dc	604:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc6e0	608:	jalr	s7
0x2bcbc6e4	612:	nop
          		@ Captured a stackmap here.
0x2bcbc6e8	616:	b	PC=0x2bcbc6e8	@ branch to block L4
0x2bcbc6ec	620:	nop
			@ Initial Temp REF set is 
	L8:	624:	@ entry point for branches
--->Fixed instruction at 300(0x2bcbc5ac) to reference 624
          		@ MAP_PC idepth=0 javaPc=104 compiledPc=624
0x2bcbc6f0	624:	lw	ra, -8(JFP)	@ Java local cell # 2
0x2bcbc6f4	628:	sw	ra, 0(JSP)
0x2bcbc6f8	632:	lw	t9, -4(JFP)	@ Java local cell # 3
0x2bcbc6fc	636:	sw	t9, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbc700	640:	lw	s7, 0(ra)	@ Get object.cb
0x2bcbc704	644:	addiu	t7, zero, -4
0x2bcbc708	648:	and	s7, s7, t7
0x2bcbc70c	652:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbc710	656:	lw	a0, 56(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbc714	660:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbc718	664:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc71c	668:	jalr	s7
0x2bcbc720	672:	nop
          		@ Captured a stackmap here.
			@ Initial Temp REF set is 
	L4:	676:	@ entry point for branches
--->Fixed instruction at 616(0x2bcbc6e8) to reference 676
--->Fixed instruction at 556(0x2bcbc6ac) to reference 676
--->Fixed instruction at 496(0x2bcbc670) to reference 676
--->Fixed instruction at 436(0x2bcbc634) to reference 676
--->Fixed instruction at 376(0x2bcbc5f8) to reference 676
--->Fixed instruction at 248(0x2bcbc578) to reference 676
          		@ MAP_PC idepth=0 javaPc=109 compiledPc=676
0x2bcbc724	676:	lw	ra, -4(JFP)	@ Java local cell # 3
0x2bcbc728	680:	addiu	s4, ra, 1
0x2bcbc72c	684:	sw	s4, -4(JFP)	@ Java local cell # 3
			@ Outgoing local(3) reg(20): in correct register
			@ Outgoing local(1) reg(21): not in register
0x2bcbc730	688:	lw	s5, -12(JFP)	@ Java local cell # 1
			@ Outgoing local(2) reg(22): not in register
0x2bcbc734	692:	lw	s6, -8(JFP)	@ Java local cell # 2
			@ Initial Temp REF set is 
	L2:	696:	@ entry point for branches
			@ Binding Incoming Local(3) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
			@ Binding Incoming Local(2) to reg(22)
--->Fixed instruction at 180(0x2bcbc534) to reference 696
          		@ MAP_PC idepth=0 javaPc=112 compiledPc=696
			@ Outgoing local(3) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcbc738	696:	sltiu	t7, s4, 64
0x2bcbc73c	700:	bne	t7, zero, PC=0x2bcbc53c	@ branch to block L3
0x2bcbc740	704:	nop
0x2bcbc738	696:	sltiu	t7, s4, 64
0x2bcbc73c	700:	bne	t7, zero, PC=0x2bcbc54c	@ branch to block L3, skip GC
0x2bcbc740	704:	nop
          		@ MAP_PC idepth=0 javaPc=118 compiledPc=708
			@ Outgoing local(2) reg(22): in correct register
0x2bcbc744	708:	b	PC=0x2bcbc744	@ branch to block L11
0x2bcbc748	712:	nop
			@ Initial Temp REF set is 
	L0:	716:	@ entry point for exception handler
          		@ Captured a stackmap here.
          		@ MAP_PC idepth=0 javaPc=121 compiledPc=716
0x2bcbc74c	716:	lw	ra, -16(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcbc750	720:	lw	s7, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbc754	724:	lw	s6, 72(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbc758	728:	lw	a1, 0(CP)	@ cb java.lang.StringBuffer
          		@ Do new:
0x2bcbc75c	732:	sw	a0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcbc760	736:	sw	s6, 32(JFP)	@ REF spill Java temp cell # 1
          		@ cb: java.lang.StringBuffer
0x2bcbc764	740:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcbc768	744:	nop
          		@ Captured a stackmap here.
0x2bcbc76c	748:	sw	v0, 0(JSP)
0x2bcbc770	752:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcbc774	756:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbc778	760:	sw	v0, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcbc77c	764:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc780	768:	jalr	s7
0x2bcbc784	772:	nop
          		@ Captured a stackmap here.
0x2bcbc788	776:	lw	s7, 32(JFP)	@ Java temp cell # 1
0x2bcbc78c	780:	sw	s7, 0(JSP)
0x2bcbc790	784:	lw	s6, 36(JFP)	@ Java temp cell # 2
0x2bcbc794	788:	sw	s6, 4(JSP)
0x2bcbc798	792:	lw	s6, 28(JFP)	@ Java temp cell # 0
0x2bcbc79c	796:	sw	s6, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcbc7a0	800:	lw	s5, 0(s6)	@ Get object.cb
0x2bcbc7a4	804:	addiu	t7, zero, -4
0x2bcbc7a8	808:	and	s5, s5, t7
0x2bcbc7ac	812:	lw	s5, 76(s5)	@ Get cb.vtbl
0x2bcbc7b0	816:	lw	a0, 20(s5)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbc7b4	820:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbc7b8	824:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc7bc	828:	jalr	s7
0x2bcbc7c0	832:	nop
          		@ Captured a stackmap here.
0x2bcbc7c4	836:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcbc7c8	840:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc7cc	844:	jalr	s7
0x2bcbc7d0	848:	nop
          		@ Captured a stackmap here.
0x2bcbc7d4	852:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbc7d8	856:	lw	s7, 0(JSP)
0x2bcbc7dc	860:	sw	s7, 0(JSP)
0x2bcbc7e0	864:	lw	s5, 0(CP)	@ StringICell
0x2bcbc7e4	868:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcbc7e8	872:	sw	s6, 4(JSP)
0x2bcbc7ec	876:	lw	s6, 0(s7)	@ NULL check
0x2bcbc7f0	880:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcbc7f4	884:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbc7f8	888:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc7fc	892:	jalr	s7
0x2bcbc800	896:	nop
          		@ Captured a stackmap here.
0x2bcbc804	900:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbc808	904:	lw	s7, 0(JSP)
0x2bcbc80c	908:	sw	s7, 0(JSP)
0x2bcbc810	912:	lw	s6, 0(s7)	@ NULL check
0x2bcbc814	916:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcbc818	920:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbc81c	924:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc820	928:	jalr	s7
0x2bcbc824	932:	nop
          		@ Captured a stackmap here.
          		@ Fetch mb from vtable:
0x2bcbc828	936:	lw	s6, 32(JFP)	@ Java temp cell # 1
0x2bcbc82c	940:	lw	s7, 0(s6)	@ Get object.cb
0x2bcbc830	944:	addiu	t7, zero, -4
0x2bcbc834	948:	and	s7, s7, t7
0x2bcbc838	952:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbc83c	956:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbc840	960:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc844	964:	jalr	s7
0x2bcbc848	968:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcbc84c	972:	lw	s6, -16(JFP)	@ Java local cell # 0
0x2bcbc850	976:	lw	s7, 8(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbc854	980:	lw	s5, 72(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbc858	984:	sw	s5, 0(JSP)
0x2bcbc85c	988:	lw	s4, 0(CP)	@ StringICell
0x2bcbc860	992:	lw	s7, 0(s4)	@ StringObject from StringICell
0x2bcbc864	996:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbc868	1000:	lw	s7, 0(s5)	@ Get object.cb
0x2bcbc86c	1004:	addiu	t7, zero, -4
0x2bcbc870	1008:	and	s7, s7, t7
0x2bcbc874	1012:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbc878	1016:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbc87c	1020:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbc880	1024:	lw	s7, 0(a0)	@ call method through mb
0x2bcbc884	1028:	jalr	s7
0x2bcbc888	1032:	nop
          		@ Captured a stackmap here.
0x2bcbc88c	1036:	lw	s7, 28(JFP)	@ Java temp cell # 0
0x2bcbc890	1040:	sw	s7, -4(JFP)	@ Java local cell # 3
			@ Outgoing local(2) reg(22): not in register
0x2bcbc894	1044:	lw	s6, -8(JFP)	@ Java local cell # 2
			@ Initial Temp REF set is 
	L11:	1048:	@ entry point for branches
			@ Binding Incoming Local(2) to reg(22)
--->Fixed instruction at 708(0x2bcbc744) to reference 1048
          		@ MAP_PC idepth=0 javaPc=169 compiledPc=1048
          		@ Do getfield:
0x2bcbc898	1048:	lw	s7, 8(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbc89c	1052:	sw	s7, -16(JFP)	@ Java local cell # 0
0x2bcbc8a0	1056:	addiu	JSP, JFP, -12
0x2bcbc8a4	1060:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbc8a8	1064:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbc8ac	1068:	nop
0x2bcbc8b0	1072:	.word	9497236	@ StringICell
--->Fixed instruction at 988(0x2bcbc85c) to reference 1072
0x2bcbc8b4	1076:	.word	9110340	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
--->Fixed instruction at 916(0x2bcbc814) to reference 1076
0x2bcbc8b8	1080:	.word	8436288	@ StringICell
--->Fixed instruction at 864(0x2bcbc7e0) to reference 1080
0x2bcbc8bc	1084:	.word	9109444	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
--->Fixed instruction at 880(0x2bcbc7f0) to reference 1084
--->Fixed instruction at 836(0x2bcbc7c4) to reference 1084
0x2bcbc8c0	1088:	.word	9108968	@ mb java.lang.StringBuffer.<init>()V
--->Fixed instruction at 752(0x2bcbc770) to reference 1088
0x2bcbc8c4	1092:	.word	8642484	@ cb java.lang.StringBuffer
--->Fixed instruction at 728(0x2bcbc758) to reference 1092
0x2bcbc8c8	1096:	.word	734774676
--->Fixed instruction at 256(0x2bcbc580) to reference 1096
0x2bcbc8cc	1100:	.word	9793496	@ mb com.sun.mep.bench.Chess.WPossMoves.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V
--->Fixed instruction at 132(0x2bcbc504) to reference 1100
0x2bcbc8d0	1104:	.word	9793032	@ cb com.sun.mep.bench.Chess.WPossMoves
--->Fixed instruction at 96(0x2bcbc4e0) to reference 1104
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbc480) >>>>>>>>
          		@ Capacity is 19 word(s)
0x2bcbc480	0:	addiu	a1, JSP, 68
<<<<<<<<<Pop Code Buffer to PC = 1108 (0x2bcbc8d4) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbc4d0) >>>>>>>>
          		@ spillSize is 3 word(s), add to JFP+28
0x2bcbc4d0	80:	addiu	JSP, JFP, 40
          		@ setup cp base register
0x2bcbc4d4	84:	lui	CP, hi16(0x2bcb)
0x2bcbc4d8	88:	ori	CP, CP, lo16(0x2bcbc8b0)
0x2bcbc4dc	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 1108 (0x2bcbc8d4) <<<<<<<<<
JS: COMPILED: size=1340 startPC=0x2bcbc480 com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;
OSR: Intr2Comp: com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.WPossMoves.WRook_Moves(I)V
JS: COMPILING com.sun.mep.bench.Chess.WPossMoves.WRook_Moves(I)V
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 

#################################################

The maximum node counts per root node are 6
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 6 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.WPossMoves.WRook_Moves(I)V(WPossMoves.java:203)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x94e0c8):    aload_0 
<1>  (0x94e0c9):    iload_1 
<2>  (0x94e0ca):    iconst_0 
<3>  (0x94e0cb):    bipush 248
<5>  (0x94e0cd):    invokenonvirtual_quick #19 <com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V>
<8>  (0x94e0d0):    aload_0 
<9>  (0x94e0d1):    iload_1 
<10>  (0x94e0d2):    iconst_0 
<11>  (0x94e0d3):    bipush 8
<13>  (0x94e0d5):    invokenonvirtual_quick #19 <com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V>
<16>  (0x94e0d8):    aload_0 
<17>  (0x94e0d9):    iload_1 
<18>  (0x94e0da):    iconst_m1 
<19>  (0x94e0db):    iconst_0 
<20>  (0x94e0dc):    invokenonvirtual_quick #19 <com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V>
<23>  (0x94e0df):    aload_0 
<24>  (0x94e0e0):    iload_1 
<25>  (0x94e0e1):    iconst_1 
<26>  (0x94e0e2):    iconst_0 
<27>  (0x94e0e3):    invokenonvirtual_quick #19 <com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V>
<30>  (0x94e0e6):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 12) INVOKE (v) 
      <(ID: 11) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
            <(ID: 22) LOCAL (reference)   0>
         <(ID: 10) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 4)
               <(ID: 23) LOCAL (int)   1>
            <(ID: 9) PARAMETER (int) 
               <(ID: 4) CONST_JAVA_NUMERIC32 (int)  (0)
               <(ID: 8) PARAMETER (int) 
                  <(ID: 5) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 7) NULL_PARAMETER (NONE) 
      <(ID: 6) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V)

   <(ID: 21) INVOKE (v) 
      <(ID: 20) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 19) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 4)
            <(ID: 18) PARAMETER (int) 
               <(ID: 13) CONST_JAVA_NUMERIC32 (int)  (0)
               <(ID: 17) PARAMETER (int) 
                  <(ID: 14) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 16) NULL_PARAMETER (NONE) 
      <(ID: 15) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V)

   <(ID: 32) INVOKE (v) 
      <(ID: 31) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 30) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 4)
            <(ID: 29) PARAMETER (int) 
               <(ID: 24) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 28) PARAMETER (int) 
                  <(ID: 25) CONST_JAVA_NUMERIC32 (int)  (0)
                  <(ID: 27) NULL_PARAMETER (NONE) 
      <(ID: 26) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V)

   <(ID: 41) INVOKE (v) 
      <(ID: 40) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 39) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 4)
            <(ID: 38) PARAMETER (int) 
               <(ID: 33) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 37) PARAMETER (int) 
                  <(ID: 34) CONST_JAVA_NUMERIC32 (int)  (0)
                  <(ID: 36) NULL_PARAMETER (NONE) 
      <(ID: 35) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V)

   <(ID: 42) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 194
ESTIMATED BUFFER SIZE = 300
CODE BUFFER ADDRESS = 0x2bcbc948
PC MAP TABLE ADDRESS = 0x2bcbc950
CODE ENTRY ADDRESS = 0x2bcbc978
          		@ Method prologue
0x2bcbc978	0:	addiu	a1, JSP, 48	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbc97c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbc980	8:	sltu	t7, a1, CHUNKEND
0x2bcbc984	12:	bne	t7, zero, PC=0x2bcbc978	@ goto .skip
0x2bcbc988	16:	nop
0x2bcbc98c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbc990	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbc984) >>>>>>>>
0x2bcbc984	12:	bne	t7, zero, PC=0x2bcbc994	@ goto .skip
0x2bcbc988	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbc994) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbc994	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbc998	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbc99c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbc9a0	40:	addiu	a3, zero, 0
0x2bcbc9a4	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbc9a8	48:	addiu	a3, zero, -1
0x2bcbc9ac	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbc9b0	56:	move	a0, EE
0x2bcbc9b4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbc9b8	64:	lui	t9, hi16(0x65)
0x2bcbc9bc	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbc9c0	72:	jalr	t9
0x2bcbc9c4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbc9c8	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbc9cc	84:	nop
0x2bcbc9d0	88:	nop
0x2bcbc9d4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbc9d8	96:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbc9dc	100:	lw	s5, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
0x2bcbc9e0	104:	sw	s4, 0(JSP)
0x2bcbc9e4	108:	sw	s5, 4(JSP)
0x2bcbc9e8	112:	sw	zero, 8(JSP)
0x2bcbc9ec	116:	addiu	s7, zero, -8	@ const -8
0x2bcbc9f0	120:	sw	s7, 12(JSP)
0x2bcbc9f4	124:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V
          		@ Invoke a method w/ a void return type
0x2bcbc9f8	128:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbc9fc	132:	lw	s7, 0(a0)	@ call method through mb
0x2bcbca00	136:	jalr	s7
0x2bcbca04	140:	nop
          		@ Captured a stackmap here.
0x2bcbca08	144:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbca0c	148:	sw	s7, 0(JSP)
0x2bcbca10	152:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbca14	156:	sw	s6, 4(JSP)
0x2bcbca18	160:	sw	zero, 8(JSP)
0x2bcbca1c	164:	addiu	s5, zero, 8	@ const 8
0x2bcbca20	168:	sw	s5, 12(JSP)
0x2bcbca24	172:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V
          		@ Invoke a method w/ a void return type
0x2bcbca28	176:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbca2c	180:	lw	s7, 0(a0)	@ call method through mb
0x2bcbca30	184:	jalr	s7
0x2bcbca34	188:	nop
          		@ Captured a stackmap here.
0x2bcbca38	192:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbca3c	196:	sw	s7, 0(JSP)
0x2bcbca40	200:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbca44	204:	sw	s6, 4(JSP)
0x2bcbca48	208:	addiu	s5, zero, -1	@ const -1
0x2bcbca4c	212:	sw	s5, 8(JSP)
0x2bcbca50	216:	sw	zero, 12(JSP)
0x2bcbca54	220:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V
          		@ Invoke a method w/ a void return type
0x2bcbca58	224:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbca5c	228:	lw	s7, 0(a0)	@ call method through mb
0x2bcbca60	232:	jalr	s7
0x2bcbca64	236:	nop
          		@ Captured a stackmap here.
0x2bcbca68	240:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbca6c	244:	sw	s7, 0(JSP)
0x2bcbca70	248:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbca74	252:	sw	s6, 4(JSP)
0x2bcbca78	256:	addiu	s5, zero, 1	@ const 1
0x2bcbca7c	260:	sw	s5, 8(JSP)
0x2bcbca80	264:	sw	zero, 12(JSP)
0x2bcbca84	268:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V
          		@ Invoke a method w/ a void return type
0x2bcbca88	272:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbca8c	276:	lw	s7, 0(a0)	@ call method through mb
0x2bcbca90	280:	jalr	s7
0x2bcbca94	284:	nop
          		@ Captured a stackmap here.
0x2bcbca98	288:	addiu	JSP, JFP, -8
0x2bcbca9c	292:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbcaa0	296:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbcaa4	300:	nop
0x2bcbcaa8	304:	.word	9793552	@ mb com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V
--->Fixed instruction at 268(0x2bcbca84) to reference 304
--->Fixed instruction at 220(0x2bcbca54) to reference 304
--->Fixed instruction at 172(0x2bcbca24) to reference 304
--->Fixed instruction at 124(0x2bcbc9f4) to reference 304
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbc978) >>>>>>>>
          		@ Capacity is 14 word(s)
0x2bcbc978	0:	addiu	a1, JSP, 48
<<<<<<<<<Pop Code Buffer to PC = 308 (0x2bcbcaac) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbc9c8) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbc9c8	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbc9cc	84:	lui	CP, hi16(0x2bcb)
0x2bcbc9d0	88:	ori	CP, CP, lo16(0x2bcbcaa8)
0x2bcbc9d4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 308 (0x2bcbcaac) <<<<<<<<<
JS: COMPILED: size=388 startPC=0x2bcbc978 com.sun.mep.bench.Chess.WPossMoves.WRook_Moves(I)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.WPossMoves.WBishop_Moves(I)V
JS: COMPILING com.sun.mep.bench.Chess.WPossMoves.WBishop_Moves(I)V
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 

#################################################

The maximum node counts per root node are 6
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 6 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.WPossMoves.WBishop_Moves(I)V(WPossMoves.java:218)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x94e10c):    aload_0 
<1>  (0x94e10d):    iload_1 
<2>  (0x94e10e):    iconst_1 
<3>  (0x94e10f):    bipush 248
<5>  (0x94e111):    invokenonvirtual_quick #19 <com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V>
<8>  (0x94e114):    aload_0 
<9>  (0x94e115):    iload_1 
<10>  (0x94e116):    iconst_1 
<11>  (0x94e117):    bipush 8
<13>  (0x94e119):    invokenonvirtual_quick #19 <com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V>
<16>  (0x94e11c):    aload_0 
<17>  (0x94e11d):    iload_1 
<18>  (0x94e11e):    iconst_m1 
<19>  (0x94e11f):    bipush 8
<21>  (0x94e121):    invokenonvirtual_quick #19 <com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V>
<24>  (0x94e124):    aload_0 
<25>  (0x94e125):    iload_1 
<26>  (0x94e126):    iconst_m1 
<27>  (0x94e127):    bipush 248
<29>  (0x94e129):    invokenonvirtual_quick #19 <com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V>
<32>  (0x94e12c):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 12) INVOKE (v) 
      <(ID: 11) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
            <(ID: 22) LOCAL (reference)   0>
         <(ID: 10) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 4)
               <(ID: 23) LOCAL (int)   1>
            <(ID: 9) PARAMETER (int) 
               <(ID: 4) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 8) PARAMETER (int) 
                  <(ID: 5) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 7) NULL_PARAMETER (NONE) 
      <(ID: 6) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V)

   <(ID: 21) INVOKE (v) 
      <(ID: 20) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 19) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 4)
            <(ID: 18) PARAMETER (int) 
               <(ID: 13) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 17) PARAMETER (int) 
                  <(ID: 14) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 16) NULL_PARAMETER (NONE) 
      <(ID: 15) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V)

   <(ID: 32) INVOKE (v) 
      <(ID: 31) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 30) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 4)
            <(ID: 29) PARAMETER (int) 
               <(ID: 24) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 28) PARAMETER (int) 
                  <(ID: 25) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 27) NULL_PARAMETER (NONE) 
      <(ID: 26) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V)

   <(ID: 41) INVOKE (v) 
      <(ID: 40) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 39) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 4)
            <(ID: 38) PARAMETER (int) 
               <(ID: 33) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 37) PARAMETER (int) 
                  <(ID: 34) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 36) NULL_PARAMETER (NONE) 
      <(ID: 35) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V)

   <(ID: 42) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 206
ESTIMATED BUFFER SIZE = 312
CODE BUFFER ADDRESS = 0x2bcbcacc
PC MAP TABLE ADDRESS = 0x2bcbcad4
CODE ENTRY ADDRESS = 0x2bcbcaf8
          		@ Method prologue
0x2bcbcaf8	0:	addiu	a1, JSP, 48	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbcafc	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbcb00	8:	sltu	t7, a1, CHUNKEND
0x2bcbcb04	12:	bne	t7, zero, PC=0x2bcbcaf8	@ goto .skip
0x2bcbcb08	16:	nop
0x2bcbcb0c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbcb10	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbcb04) >>>>>>>>
0x2bcbcb04	12:	bne	t7, zero, PC=0x2bcbcb14	@ goto .skip
0x2bcbcb08	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbcb14) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbcb14	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbcb18	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbcb1c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbcb20	40:	addiu	a3, zero, 0
0x2bcbcb24	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbcb28	48:	addiu	a3, zero, -1
0x2bcbcb2c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbcb30	56:	move	a0, EE
0x2bcbcb34	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbcb38	64:	lui	t9, hi16(0x65)
0x2bcbcb3c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbcb40	72:	jalr	t9
0x2bcbcb44	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbcb48	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbcb4c	84:	nop
0x2bcbcb50	88:	nop
0x2bcbcb54	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbcb58	96:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbcb5c	100:	lw	s5, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
0x2bcbcb60	104:	sw	s4, 0(JSP)
0x2bcbcb64	108:	sw	s5, 4(JSP)
0x2bcbcb68	112:	addiu	s7, zero, 1	@ const 1
0x2bcbcb6c	116:	sw	s7, 8(JSP)
0x2bcbcb70	120:	addiu	s6, zero, -8	@ const -8
0x2bcbcb74	124:	sw	s6, 12(JSP)
0x2bcbcb78	128:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V
          		@ Invoke a method w/ a void return type
0x2bcbcb7c	132:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbcb80	136:	lw	s7, 0(a0)	@ call method through mb
0x2bcbcb84	140:	jalr	s7
0x2bcbcb88	144:	nop
          		@ Captured a stackmap here.
0x2bcbcb8c	148:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbcb90	152:	sw	s7, 0(JSP)
0x2bcbcb94	156:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbcb98	160:	sw	s6, 4(JSP)
0x2bcbcb9c	164:	addiu	s5, zero, 1	@ const 1
0x2bcbcba0	168:	sw	s5, 8(JSP)
0x2bcbcba4	172:	addiu	s4, zero, 8	@ const 8
0x2bcbcba8	176:	sw	s4, 12(JSP)
0x2bcbcbac	180:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V
          		@ Invoke a method w/ a void return type
0x2bcbcbb0	184:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbcbb4	188:	lw	s7, 0(a0)	@ call method through mb
0x2bcbcbb8	192:	jalr	s7
0x2bcbcbbc	196:	nop
          		@ Captured a stackmap here.
0x2bcbcbc0	200:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbcbc4	204:	sw	s7, 0(JSP)
0x2bcbcbc8	208:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbcbcc	212:	sw	s6, 4(JSP)
0x2bcbcbd0	216:	addiu	s5, zero, -1	@ const -1
0x2bcbcbd4	220:	sw	s5, 8(JSP)
0x2bcbcbd8	224:	addiu	s4, zero, 8	@ const 8
0x2bcbcbdc	228:	sw	s4, 12(JSP)
0x2bcbcbe0	232:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V
          		@ Invoke a method w/ a void return type
0x2bcbcbe4	236:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbcbe8	240:	lw	s7, 0(a0)	@ call method through mb
0x2bcbcbec	244:	jalr	s7
0x2bcbcbf0	248:	nop
          		@ Captured a stackmap here.
0x2bcbcbf4	252:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbcbf8	256:	sw	s7, 0(JSP)
0x2bcbcbfc	260:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbcc00	264:	sw	s6, 4(JSP)
0x2bcbcc04	268:	addiu	s5, zero, -1	@ const -1
0x2bcbcc08	272:	sw	s5, 8(JSP)
0x2bcbcc0c	276:	addiu	s4, zero, -8	@ const -8
0x2bcbcc10	280:	sw	s4, 12(JSP)
0x2bcbcc14	284:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V
          		@ Invoke a method w/ a void return type
0x2bcbcc18	288:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbcc1c	292:	lw	s7, 0(a0)	@ call method through mb
0x2bcbcc20	296:	jalr	s7
0x2bcbcc24	300:	nop
          		@ Captured a stackmap here.
0x2bcbcc28	304:	addiu	JSP, JFP, -8
0x2bcbcc2c	308:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbcc30	312:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbcc34	316:	nop
0x2bcbcc38	320:	.word	9793552	@ mb com.sun.mep.bench.Chess.WPossMoves.checkRunOfMoves(III)V
--->Fixed instruction at 284(0x2bcbcc14) to reference 320
--->Fixed instruction at 232(0x2bcbcbe0) to reference 320
--->Fixed instruction at 180(0x2bcbcbac) to reference 320
--->Fixed instruction at 128(0x2bcbcb78) to reference 320
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbcaf8) >>>>>>>>
          		@ Capacity is 14 word(s)
0x2bcbcaf8	0:	addiu	a1, JSP, 48
<<<<<<<<<Pop Code Buffer to PC = 324 (0x2bcbcc3c) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbcb48) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbcb48	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbcb4c	84:	lui	CP, hi16(0x2bcb)
0x2bcbcb50	88:	ori	CP, CP, lo16(0x2bcbcc38)
0x2bcbcb54	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 324 (0x2bcbcc3c) <<<<<<<<<
JS: COMPILED: size=400 startPC=0x2bcbcaf8 com.sun.mep.bench.Chess.WPossMoves.WBishop_Moves(I)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.WPossMoves.WKing_Moves(I)V
JS: COMPILING com.sun.mep.bench.Chess.WPossMoves.WKing_Moves(I)V
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
orig bkID(9) Incoming Locals(3 0x0): 2- 0- 1- 
o1   bkID(9) Incoming Locals(1 0x0): 2- 
o1   bkID(9) Incoming Locals(3 0x0): 2- 0- 1- 
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(2) Incoming Locals(1 0x0): 0- 
o1   bkID(2) Incoming Locals(1 0x0): 0- 
s1   bkID(2) Incoming Locals(1 0x0): 0- 
s1   bkID(2) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(9) Incoming Locals(3 0x0): 2- 0- 1- 
o1   bkID(9) Incoming Locals(1 0x0): 2- 
o1   bkID(9) Incoming Locals(3 0x0): 2- 0- 1- 
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(2) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(2) Incoming Locals(1 0x0): 0- 
s1   bkID(2) Incoming Locals(1 0x0): 0- 
s1   bkID(2) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
bkID(9) local(0 #2)  not found in goalBk
bkID(9) local(1 #0)  not found in goalBk
bkID(9) local(2 #1)  not found in goalBk
bkID(2) local(0 #0)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(2) Incoming Locals(2 0x0): 0- 1- 
+bk  bkID(2) Incoming Locals(2 0x1): 0+ 1- 
-gbk bkID(1) Incoming Locals(2 0x0): 0- 1- 
+gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
bkID(2) local(0 #0)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(2 0x1): 0+ 1- 
dstBk(2) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(2) Incoming Locals(2 0x1): 0+ 1- 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
dstBk(1) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
bkID(2) local(1 #1)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(2) Incoming Locals(2 0x1): 0+ 1- 
+bk  bkID(2) Incoming Locals(2 0x3): 0+ 1+ 
-gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
+gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
bkID(2) local(1 #1)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(2) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(1) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
bkID(0) local(0 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x0): 0- 1- 
dstBk(0) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(1) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
bkID(0) local(1 #1)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
dstBk(0) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(0) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(1) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
pre  bkID(9) Incoming Locals(3 0x0): 2- 0- 1- 
local(#0) swapped with local(#0)
post bkID(9) Incoming Locals(3 0x1): 2+ 0- 1- 
pre  bkID(9) Incoming Locals(3 0x1): 2+ 0- 1- 
local(#1) swapped with local(#1)
post bkID(9) Incoming Locals(3 0x3): 2+ 0+ 1- 
pre  bkID(9) Incoming Locals(3 0x3): 2+ 0+ 1- 
local(#2) swapped with local(#2)
post bkID(9) Incoming Locals(3 0x7): 2+ 0+ 1+ 

#################################################

The maximum node counts per root node are 8
IR block list contains 11 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 29 root nodes: in block 
* flags: 0x41
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.WPossMoves.WKing_Moves(I)V(WPossMoves.java:112)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<0>  (0x94ddb4):    iconst_1 
<1>  (0x94ddb5):    istore_2 
<2>  (0x94ddb6):    iconst_1 
<3>  (0x94ddb7):    istore_3 
<4>  (0x94ddb8):    aload_0 
<5>  (0x94ddb9):    agetfield_quick #4
<8>  (0x94ddbc):    agetfield_quick #3
<11>  (0x94ddbf):    bipush 60
<13>  (0x94ddc1):    baload 
<14>  (0x94ddc2):    iconst_5 
<15>  (0x94ddc3):    if_icmpne <183>
<18>  (0x94ddc6):    aload_0 
<19>  (0x94ddc7):    agetfield_quick #3
<22>  (0x94ddca):    agetfield_quick #41
<25>  (0x94ddcd):    bipush 60
<27>  (0x94ddcf):    baload 
<28>  (0x94ddd0):    iconst_5 
<29>  (0x94ddd1):    if_icmpne <183>
<32>  (0x94ddd4):    aload_0 
<33>  (0x94ddd5):    agetfield_quick #3
<36>  (0x94ddd8):    agetfield_quick #23
<39>  (0x94dddb):    bipush 60
<41>  (0x94dddd):    invokevirtual_quick_w #12 <com.sun.mep.bench.Chess.ActorManager.getPiece(I)Lcom/sun/mep/bench/Chess/ChessPiece;>
<44>  (0x94dde0):    checkcast_quick #13 <com.sun.mep.bench.Chess.King>
<47>  (0x94dde3):    astore 4
<49>  (0x94dde5):    aload_0 
<50>  (0x94dde6):    agetfield_quick #4
<53>  (0x94dde9):    agetfield_quick #3
<56>  (0x94ddec):    bipush 56
<58>  (0x94ddee):    baload 
<59>  (0x94ddef):    iconst_3 
<60>  (0x94ddf0):    if_icmpne <116>
<63>  (0x94ddf3):    aload_0 
<64>  (0x94ddf4):    agetfield_quick #3
<67>  (0x94ddf7):    agetfield_quick #41
<70>  (0x94ddfa):    bipush 56
<72>  (0x94ddfc):    baload 
<73>  (0x94ddfd):    iconst_3 
<74>  (0x94ddfe):    if_icmpne <116>
<77>  (0x94de01):    aload_0 
<78>  (0x94de02):    agetfield_quick #3
<81>  (0x94de05):    agetfield_quick #23
<84>  (0x94de08):    bipush 56
<86>  (0x94de0a):    invokevirtual_quick_w #12 <com.sun.mep.bench.Chess.ActorManager.getPiece(I)Lcom/sun/mep/bench/Chess/ChessPiece;>
<89>  (0x94de0d):    checkcast_quick #15 <com.sun.mep.bench.Chess.Rook>
<92>  (0x94de10):    astore 5
<94>  (0x94de12):    aload 4
<96>  (0x94de14):    getfield_quick #28
<99>  (0x94de17):    ifne <110>
<102>  (0x94de1a):    aload 5
<104>  (0x94de1c):    getfield_quick #28
<107>  (0x94de1f):    ifeq <114>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(4)
 
Incoming Locals(2): 
	local(0)	ID(4)
 	local(1)	ID(122)
 
Assigned Locals(4): 
	ASSIGN(21): local(2)	ID(20)	rhsID(2)
 	ASSIGN(23): local(3)	ID(22)	rhsID(3)
 	ASSIGN(72): local(4)	ID(71)	rhsID(54)
 	ASSIGN(111): local(5)	ID(110)	rhsID(103)
 
Successor Blocks(4): 
	ID(1) LocalOrder(1) AssignOrder(2) RefsOK(1) Locals(0 1)
	ID(2) LocalOrder(1) AssignOrder(3) RefsOK(0) Locals(0 1)
	ID(3) LocalOrder(1) AssignOrder(4) RefsOK(0) Locals()
	ID(4) LocalOrder(1) AssignOrder(4) RefsOK(0) Locals()

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 7) IDENTITY (reference)  (ref count: 2)
      <(ID: 11) FETCH (reference) 
         <(ID: 6) FIELD_REF (reference) 
            <(ID: 4) IDENTITY (reference)  (ref count: 4)
               <(ID: 28) LOCAL (reference)   0>
            <(ID: 5) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 10) IDENTITY (reference)  (ref count: 3)
      <(ID: 19) FETCH (reference) 
         <(ID: 9) FIELD_REF (reference) 
            <(ID: 7) IDENTITY (reference)  (ref count: 2)
            <(ID: 8) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 16) IDENTITY (int)  (ref count: 2)
      <(ID: 24) FETCH (int) 
         <(ID: 15) INDEX (int) 
            <(ID: 10) IDENTITY (reference)  (ref count: 3)
            <(ID: 14) BOUNDS_CHECK (int) 
               <(ID: 12) CONST_JAVA_NUMERIC32 (int)  (60)
               <(ID: 13) ARRAY_LENGTH (int) 
                  <(ID: 10) IDENTITY (reference)  (ref count: 3)

   <(ID: 21) ASSIGN (int)  (assignIdx: 0)
      <(ID: 20) LOCAL (int)   2>
      <(ID: 2) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 23) ASSIGN (int)  (assignIdx: 1)
      <(ID: 22) LOCAL (int)   3>
      <(ID: 3) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 18) BCOND (int) 
   target: (BlockID: 1 BlockPC: 183)
   condition: NE
   flags: 0
      <(ID: 16) IDENTITY (int)  (ref count: 2)
      <(ID: 17) CONST_JAVA_NUMERIC32 (int)  (5)


   <(ID: 27) IDENTITY (reference)  (ref count: 3)
      <(ID: 32) FETCH (reference) 
         <(ID: 26) FIELD_REF (reference) 
            <(ID: 4) IDENTITY (reference)  (ref count: 4)
            <(ID: 25) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 31) IDENTITY (reference)  (ref count: 3)
      <(ID: 40) FETCH (reference) 
         <(ID: 30) FIELD_REF (reference) 
            <(ID: 27) IDENTITY (reference)  (ref count: 3)
            <(ID: 29) CONST_FIELD_OFFSET (NONE)  (41)

   <(ID: 37) IDENTITY (int)  (ref count: 2)
      <(ID: 41) FETCH (int) 
         <(ID: 36) INDEX (int) 
            <(ID: 31) IDENTITY (reference)  (ref count: 3)
            <(ID: 35) BOUNDS_CHECK (int) 
               <(ID: 33) CONST_JAVA_NUMERIC32 (int)  (60)
               <(ID: 34) ARRAY_LENGTH (int) 
                  <(ID: 31) IDENTITY (reference)  (ref count: 3)

   <(ID: 39) BCOND (int) 
   target: (BlockID: 1 BlockPC: 183)
   condition: NE
   flags: 0
      <(ID: 37) IDENTITY (int)  (ref count: 2)
      <(ID: 38) CONST_JAVA_NUMERIC32 (int)  (5)


   <(ID: 44) IDENTITY (reference)  (ref count: 3)
      <(ID: 55) FETCH (reference) 
         <(ID: 43) FIELD_REF (reference) 
            <(ID: 27) IDENTITY (reference)  (ref count: 3)
            <(ID: 42) CONST_FIELD_OFFSET (NONE)  (23)

   <(ID: 54) IDENTITY (reference)  (ref count: 3)
      <(ID: 73) CHECKCAST (reference) 
         <(ID: 52) INVOKE (reference) 
            <(ID: 49) PARAMETER (reference) 
               <(ID: 44) IDENTITY (reference)  (ref count: 3)
               <(ID: 48) PARAMETER (int) 
                  <(ID: 45) CONST_JAVA_NUMERIC32 (int)  (60)
                  <(ID: 47) NULL_PARAMETER (NONE) 
            <(ID: 51) FETCH_MB_FROM_VTABLE (address field) 
               <(ID: 50) GET_VTBL (NONE) 
                  <(ID: 44) IDENTITY (reference)  (ref count: 3)
               <(ID: 46) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 14)
         <(ID: 53) CONST_CB (address field)  (com.sun.mep.bench.Chess.King)

   <(ID: 58) IDENTITY (reference)  (ref count: 2)
      <(ID: 62) FETCH (reference) 
         <(ID: 57) FIELD_REF (reference) 
            <(ID: 4) IDENTITY (reference)  (ref count: 4)
            <(ID: 56) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 61) IDENTITY (reference)  (ref count: 3)
      <(ID: 70) FETCH (reference) 
         <(ID: 60) FIELD_REF (reference) 
            <(ID: 58) IDENTITY (reference)  (ref count: 2)
            <(ID: 59) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 67) IDENTITY (int)  (ref count: 2)
      <(ID: 74) FETCH (int) 
         <(ID: 66) INDEX (int) 
            <(ID: 61) IDENTITY (reference)  (ref count: 3)
            <(ID: 65) BOUNDS_CHECK (int) 
               <(ID: 63) CONST_JAVA_NUMERIC32 (int)  (56)
               <(ID: 64) ARRAY_LENGTH (int) 
                  <(ID: 61) IDENTITY (reference)  (ref count: 3)

   <(ID: 72) ASSIGN (reference)  (assignIdx: 2)
      <(ID: 71) LOCAL (reference)   4>
      <(ID: 54) IDENTITY (reference)  (ref count: 3)

   <(ID: 69) BCOND (int) 
   target: (BlockID: 2 BlockPC: 116)
   condition: NE
   flags: 0
      <(ID: 67) IDENTITY (int)  (ref count: 2)
      <(ID: 68) CONST_JAVA_NUMERIC32 (int)  (3)


   <(ID: 77) IDENTITY (reference)  (ref count: 3)
      <(ID: 81) FETCH (reference) 
         <(ID: 76) FIELD_REF (reference) 
            <(ID: 4) IDENTITY (reference)  (ref count: 4)
            <(ID: 75) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 80) IDENTITY (reference)  (ref count: 3)
      <(ID: 89) FETCH (reference) 
         <(ID: 79) FIELD_REF (reference) 
            <(ID: 77) IDENTITY (reference)  (ref count: 3)
            <(ID: 78) CONST_FIELD_OFFSET (NONE)  (41)

   <(ID: 86) IDENTITY (int)  (ref count: 2)
      <(ID: 90) FETCH (int) 
         <(ID: 85) INDEX (int) 
            <(ID: 80) IDENTITY (reference)  (ref count: 3)
            <(ID: 84) BOUNDS_CHECK (int) 
               <(ID: 82) CONST_JAVA_NUMERIC32 (int)  (56)
               <(ID: 83) ARRAY_LENGTH (int) 
                  <(ID: 80) IDENTITY (reference)  (ref count: 3)

   <(ID: 88) BCOND (int) 
   target: (BlockID: 2 BlockPC: 116)
   condition: NE
   flags: 0
      <(ID: 86) IDENTITY (int)  (ref count: 2)
      <(ID: 87) CONST_JAVA_NUMERIC32 (int)  (3)


   <(ID: 93) IDENTITY (reference)  (ref count: 3)
      <(ID: 104) FETCH (reference) 
         <(ID: 92) FIELD_REF (reference) 
            <(ID: 77) IDENTITY (reference)  (ref count: 3)
            <(ID: 91) CONST_FIELD_OFFSET (NONE)  (23)

   <(ID: 103) IDENTITY (reference)  (ref count: 3)
      <(ID: 112) CHECKCAST (reference) 
         <(ID: 101) INVOKE (reference) 
            <(ID: 98) PARAMETER (reference) 
               <(ID: 93) IDENTITY (reference)  (ref count: 3)
               <(ID: 97) PARAMETER (int) 
                  <(ID: 94) CONST_JAVA_NUMERIC32 (int)  (56)
                  <(ID: 96) NULL_PARAMETER (NONE) 
            <(ID: 100) FETCH_MB_FROM_VTABLE (address field) 
               <(ID: 99) GET_VTBL (NONE) 
                  <(ID: 93) IDENTITY (reference)  (ref count: 3)
               <(ID: 95) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 14)
         <(ID: 102) CONST_CB (address field)  (com.sun.mep.bench.Chess.Rook)

   <(ID: 107) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 113) FETCH (32-bit field) 
         <(ID: 106) FIELD_REF (32-bit field) 
            <(ID: 54) IDENTITY (reference)  (ref count: 3)
            <(ID: 105) CONST_FIELD_OFFSET (NONE)  (28)

   <(ID: 111) ASSIGN (reference)  (assignIdx: 3)
      <(ID: 110) LOCAL (reference)   5>
      <(ID: 103) IDENTITY (reference)  (ref count: 3)

   <(ID: 109) BCOND (int) 
   target: (BlockID: 3 BlockPC: 110)
   condition: NE
   flags: 0
      <(ID: 107) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 108) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 116) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 119) FETCH (32-bit field) 
         <(ID: 115) FIELD_REF (32-bit field) 
            <(ID: 103) IDENTITY (reference)  (ref count: 3)
            <(ID: 114) CONST_FIELD_OFFSET (NONE)  (28)

   <(ID: 118) BCOND (int) 
   target: (BlockID: 4 BlockPC: 114)
   condition: EQ
   flags: 0
      <(ID: 116) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 117) CONST_JAVA_NUMERIC32 (int)  (0)



*************************************************
*
* (block ID:3 block PC:110 )
* IR root list contains 5 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.WPossMoves.WKing_Moves(I)V(WPossMoves.java:124)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<110>  (0x94de22):    iconst_1 
<111>  (0x94de23):    goto <115>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 5 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(5) LocalOrder(0) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 305) MAP_PC (NONE)   110>

   <(ID: 308) DEFINE (int) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 306) CONST_JAVA_NUMERIC32 (int)  (1)


   <(ID: 309) LOAD_PHIS (NONE) 

   <(ID: 310) RELEASE_PHIS (NONE) 

   <(ID: 311) GOTO (NONE) 
   target: (BlockID: 5 BlockPC: 115)


*************************************************
*
* (block ID:4 block PC:114 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.WPossMoves.WKing_Moves(I)V(WPossMoves.java:124)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<114>  (0x94de26):    iconst_0 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 5 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(5) LocalOrder(0) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 312) MAP_PC (NONE)   114>

   <(ID: 314) DEFINE (int) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 313) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 315) LOAD_PHIS (NONE) 

   <(ID: 316) RELEASE_PHIS (NONE) 


*************************************************
*
* (block ID:5 block PC:115 )
* IR root list contains 2 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.WPossMoves.WKing_Moves(I)V(WPossMoves.java:124)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<115>  (0x94de27):    istore_3 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 5 
*************************************************

Number and size of USED nodes in phi array: 1 1

Assigned Locals(1): 
	ASSIGN(371): local(3)	ID(370)	rhsID(307)
 
Successor Blocks(1): 
	ID(2) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(0 1)

   <(ID: 369) MAP_PC (NONE)   115>

   <(ID: 371) ASSIGN (int)  (assignIdx: 0)
      <(ID: 370) LOCAL (int)   3>
      <(ID: 307) USED (int) 
      spillLocation: 0
      registerSpillOk: 1



*************************************************
*
* (block ID:2 block PC:116 )
* IR root list contains 16 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.WPossMoves.WKing_Moves(I)V(WPossMoves.java:127)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<116>  (0x94de28):    aload_0 
<117>  (0x94de29):    agetfield_quick #4
<120>  (0x94de2c):    agetfield_quick #3
<123>  (0x94de2f):    bipush 63
<125>  (0x94de31):    baload 
<126>  (0x94de32):    iconst_3 
<127>  (0x94de33):    if_icmpne <183>
<130>  (0x94de36):    aload_0 
<131>  (0x94de37):    agetfield_quick #3
<134>  (0x94de3a):    agetfield_quick #41
<137>  (0x94de3d):    bipush 63
<139>  (0x94de3f):    baload 
<140>  (0x94de40):    iconst_3 
<141>  (0x94de41):    if_icmpne <183>
<144>  (0x94de44):    aload_0 
<145>  (0x94de45):    agetfield_quick #3
<148>  (0x94de48):    agetfield_quick #23
<151>  (0x94de4b):    bipush 63
<153>  (0x94de4d):    invokevirtual_quick_w #12 <com.sun.mep.bench.Chess.ActorManager.getPiece(I)Lcom/sun/mep/bench/Chess/ChessPiece;>
<156>  (0x94de50):    checkcast_quick #15 <com.sun.mep.bench.Chess.Rook>
<159>  (0x94de53):    astore 5
<161>  (0x94de55):    aload 4
<163>  (0x94de57):    getfield_quick #28
<166>  (0x94de5a):    ifne <177>
<169>  (0x94de5d):    aload 5
<171>  (0x94de5f):    getfield_quick #28
<174>  (0x94de62):    ifeq <181>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(241)
 
Incoming Locals(2): 
	local(0)	ID(241)
 	local(1)	ID(122)
 
Assigned Locals(1): 
	ASSIGN(296): local(5)	ID(295)	rhsID(287)
 
Successor Blocks(3): 
	ID(1) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(0 1)
	ID(6) LocalOrder(1) AssignOrder(1) RefsOK(0) Locals()
	ID(7) LocalOrder(1) AssignOrder(1) RefsOK(0) Locals()

   <(ID: 240) MAP_PC (NONE)   116>

   <(ID: 244) IDENTITY (reference)  (ref count: 2)
      <(ID: 248) FETCH (reference) 
         <(ID: 243) FIELD_REF (reference) 
            <(ID: 241) IDENTITY (reference)  (ref count: 2)
               <(ID: 261) LOCAL (reference)   0>
            <(ID: 242) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 247) IDENTITY (reference)  (ref count: 3)
      <(ID: 256) FETCH (reference) 
         <(ID: 246) FIELD_REF (reference) 
            <(ID: 244) IDENTITY (reference)  (ref count: 2)
            <(ID: 245) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 253) IDENTITY (int)  (ref count: 2)
      <(ID: 257) FETCH (int) 
         <(ID: 252) INDEX (int) 
            <(ID: 247) IDENTITY (reference)  (ref count: 3)
            <(ID: 251) BOUNDS_CHECK (int) 
               <(ID: 249) CONST_JAVA_NUMERIC32 (int)  (63)
               <(ID: 250) ARRAY_LENGTH (int) 
                  <(ID: 247) IDENTITY (reference)  (ref count: 3)

   <(ID: 255) BCOND (int) 
   target: (BlockID: 1 BlockPC: 183)
   condition: NE
   flags: 0
      <(ID: 253) IDENTITY (int)  (ref count: 2)
      <(ID: 254) CONST_JAVA_NUMERIC32 (int)  (3)


   <(ID: 260) IDENTITY (reference)  (ref count: 3)
      <(ID: 265) FETCH (reference) 
         <(ID: 259) FIELD_REF (reference) 
            <(ID: 241) IDENTITY (reference)  (ref count: 2)
            <(ID: 258) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 264) IDENTITY (reference)  (ref count: 3)
      <(ID: 273) FETCH (reference) 
         <(ID: 263) FIELD_REF (reference) 
            <(ID: 260) IDENTITY (reference)  (ref count: 3)
            <(ID: 262) CONST_FIELD_OFFSET (NONE)  (41)

   <(ID: 270) IDENTITY (int)  (ref count: 2)
      <(ID: 274) FETCH (int) 
         <(ID: 269) INDEX (int) 
            <(ID: 264) IDENTITY (reference)  (ref count: 3)
            <(ID: 268) BOUNDS_CHECK (int) 
               <(ID: 266) CONST_JAVA_NUMERIC32 (int)  (63)
               <(ID: 267) ARRAY_LENGTH (int) 
                  <(ID: 264) IDENTITY (reference)  (ref count: 3)

   <(ID: 272) BCOND (int) 
   target: (BlockID: 1 BlockPC: 183)
   condition: NE
   flags: 0
      <(ID: 270) IDENTITY (int)  (ref count: 2)
      <(ID: 271) CONST_JAVA_NUMERIC32 (int)  (3)


   <(ID: 277) IDENTITY (reference)  (ref count: 3)
      <(ID: 288) FETCH (reference) 
         <(ID: 276) FIELD_REF (reference) 
            <(ID: 260) IDENTITY (reference)  (ref count: 3)
            <(ID: 275) CONST_FIELD_OFFSET (NONE)  (23)

   <(ID: 287) IDENTITY (reference)  (ref count: 3)
      <(ID: 297) CHECKCAST (reference) 
         <(ID: 285) INVOKE (reference) 
            <(ID: 282) PARAMETER (reference) 
               <(ID: 277) IDENTITY (reference)  (ref count: 3)
               <(ID: 281) PARAMETER (int) 
                  <(ID: 278) CONST_JAVA_NUMERIC32 (int)  (63)
                  <(ID: 280) NULL_PARAMETER (NONE) 
            <(ID: 284) FETCH_MB_FROM_VTABLE (address field) 
               <(ID: 283) GET_VTBL (NONE) 
                  <(ID: 277) IDENTITY (reference)  (ref count: 3)
               <(ID: 279) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 14)
         <(ID: 286) CONST_CB (address field)  (com.sun.mep.bench.Chess.Rook)

   <(ID: 292) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 298) FETCH (32-bit field) 
         <(ID: 291) FIELD_REF (32-bit field) 
            <(ID: 289) LOCAL (reference)   4>
            <(ID: 290) CONST_FIELD_OFFSET (NONE)  (28)

   <(ID: 296) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 295) LOCAL (reference)   5>
      <(ID: 287) IDENTITY (reference)  (ref count: 3)

   <(ID: 294) BCOND (int) 
   target: (BlockID: 6 BlockPC: 177)
   condition: NE
   flags: 0
      <(ID: 292) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 293) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 301) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 304) FETCH (32-bit field) 
         <(ID: 300) FIELD_REF (32-bit field) 
            <(ID: 287) IDENTITY (reference)  (ref count: 3)
            <(ID: 299) CONST_FIELD_OFFSET (NONE)  (28)

   <(ID: 303) BCOND (int) 
   target: (BlockID: 7 BlockPC: 181)
   condition: EQ
   flags: 0
      <(ID: 301) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 302) CONST_JAVA_NUMERIC32 (int)  (0)



*************************************************
*
* (block ID:6 block PC:177 )
* IR root list contains 5 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.WPossMoves.WKing_Moves(I)V(WPossMoves.java:131)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<177>  (0x94de65):    iconst_1 
<178>  (0x94de66):    goto <182>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 5 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(8) LocalOrder(0) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 357) MAP_PC (NONE)   177>

   <(ID: 360) DEFINE (int) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 358) CONST_JAVA_NUMERIC32 (int)  (1)


   <(ID: 361) LOAD_PHIS (NONE) 

   <(ID: 362) RELEASE_PHIS (NONE) 

   <(ID: 363) GOTO (NONE) 
   target: (BlockID: 8 BlockPC: 182)


*************************************************
*
* (block ID:7 block PC:181 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.WPossMoves.WKing_Moves(I)V(WPossMoves.java:131)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<181>  (0x94de69):    iconst_0 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 5 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(8) LocalOrder(0) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 364) MAP_PC (NONE)   181>

   <(ID: 366) DEFINE (int) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 365) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 367) LOAD_PHIS (NONE) 

   <(ID: 368) RELEASE_PHIS (NONE) 


*************************************************
*
* (block ID:8 block PC:182 )
* IR root list contains 2 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.WPossMoves.WKing_Moves(I)V(WPossMoves.java:131)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<182>  (0x94de6a):    istore_2 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 5 
*************************************************

Number and size of USED nodes in phi array: 1 1

Assigned Locals(1): 
	ASSIGN(376): local(2)	ID(375)	rhsID(359)
 
Successor Blocks(1): 
	ID(1) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(0 1)

   <(ID: 374) MAP_PC (NONE)   182>

   <(ID: 376) ASSIGN (int)  (assignIdx: 0)
      <(ID: 375) LOCAL (int)   2>
      <(ID: 359) USED (int) 
      spillLocation: 0
      registerSpillOk: 1



*************************************************
*
* (block ID:1 block PC:183 )
* IR root list contains 19 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.WPossMoves.WKing_Moves(I)V(WPossMoves.java:135)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<183>  (0x94de6b):    aload_0 
<184>  (0x94de6c):    iload_1 
<185>  (0x94de6d):    iconst_0 
<186>  (0x94de6e):    bipush 248
<188>  (0x94de70):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<191>  (0x94de73):    pop 
<192>  (0x94de74):    aload_0 
<193>  (0x94de75):    iload_1 
<194>  (0x94de76):    iconst_0 
<195>  (0x94de77):    bipush 8
<197>  (0x94de79):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<200>  (0x94de7c):    pop 
<201>  (0x94de7d):    aload_0 
<202>  (0x94de7e):    iload_1 
<203>  (0x94de7f):    iconst_m1 
<204>  (0x94de80):    iconst_0 
<205>  (0x94de81):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<208>  (0x94de84):    pop 
<209>  (0x94de85):    aload_0 
<210>  (0x94de86):    iload_1 
<211>  (0x94de87):    iconst_1 
<212>  (0x94de88):    iconst_0 
<213>  (0x94de89):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<216>  (0x94de8c):    pop 
<217>  (0x94de8d):    aload_0 
<218>  (0x94de8e):    iload_1 
<219>  (0x94de8f):    iconst_1 
<220>  (0x94de90):    bipush 248
<222>  (0x94de92):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<225>  (0x94de95):    pop 
<226>  (0x94de96):    aload_0 
<227>  (0x94de97):    iload_1 
<228>  (0x94de98):    iconst_1 
<229>  (0x94de99):    bipush 8
<231>  (0x94de9b):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<234>  (0x94de9e):    pop 
<235>  (0x94de9f):    aload_0 
<236>  (0x94dea0):    iload_1 
<237>  (0x94dea1):    iconst_m1 
<238>  (0x94dea2):    bipush 8
<240>  (0x94dea4):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<243>  (0x94dea7):    pop 
<244>  (0x94dea8):    aload_0 
<245>  (0x94dea9):    iload_1 
<246>  (0x94deaa):    iconst_m1 
<247>  (0x94deab):    bipush 248
<249>  (0x94dead):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I>
<252>  (0x94deb0):    pop 
<253>  (0x94deb1):    iload_3 
<254>  (0x94deb2):    ifne <309>
<257>  (0x94deb5):    aload_0 
<258>  (0x94deb6):    agetfield_quick #4
<261>  (0x94deb9):    agetfield_quick #3
<264>  (0x94debc):    bipush 57
<266>  (0x94debe):    baload 
<267>  (0x94debf):    bipush 99
<269>  (0x94dec1):    if_icmpne <309>
<272>  (0x94dec4):    aload_0 
<273>  (0x94dec5):    getfield #2 <com.sun.mep.bench.Chess.WPossMoves.gState:Lcom/sun/mep/bench/Chess/GameState;>
<276>  (0x94dec8):    getfield #7 <com.sun.mep.bench.Chess.GameState.typeAtSquare:[B>
<279>  (0x94decb):    bipush 58
<281>  (0x94decd):    baload 
<282>  (0x94dece):    bipush 99
<284>  (0x94ded0):    if_icmpne <309>
<287>  (0x94ded3):    aload_0 
<288>  (0x94ded4):    getfield #2 <com.sun.mep.bench.Chess.WPossMoves.gState:Lcom/sun/mep/bench/Chess/GameState;>
<291>  (0x94ded7):    getfield #7 <com.sun.mep.bench.Chess.GameState.typeAtSquare:[B>
<294>  (0x94deda):    bipush 59
<296>  (0x94dedc):    baload 
<297>  (0x94dedd):    bipush 99
<299>  (0x94dedf):    if_icmpne <309>
<302>  (0x94dee2):    aload_0 
<303>  (0x94dee3):    iload_1 
<304>  (0x94dee4):    bipush 58
<306>  (0x94dee6):    invokevirtual #8 <com.sun.mep.bench.Chess.WPossMoves.Store_Move(II)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(121)
 	local(1)	ID(122)
 
Incoming Locals(2): 
	local(0)	ID(121)
 	local(1)	ID(122)
 
Successor Blocks(1): 
	ID(9) LocalOrder(2) AssignOrder(0) RefsOK(0) Locals(2 0 1)

   <(ID: 120) MAP_PC (NONE)   183>

   <(ID: 131) INVOKE (int) 
      <(ID: 130) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
            <(ID: 141) LOCAL (reference)   0>
         <(ID: 129) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
               <(ID: 142) LOCAL (int)   1>
            <(ID: 128) PARAMETER (int) 
               <(ID: 123) CONST_JAVA_NUMERIC32 (int)  (0)
               <(ID: 127) PARAMETER (int) 
                  <(ID: 124) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 126) NULL_PARAMETER (NONE) 
      <(ID: 125) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 140) INVOKE (int) 
      <(ID: 139) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 138) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
            <(ID: 137) PARAMETER (int) 
               <(ID: 132) CONST_JAVA_NUMERIC32 (int)  (0)
               <(ID: 136) PARAMETER (int) 
                  <(ID: 133) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 135) NULL_PARAMETER (NONE) 
      <(ID: 134) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 151) INVOKE (int) 
      <(ID: 150) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 149) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
            <(ID: 148) PARAMETER (int) 
               <(ID: 143) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 147) PARAMETER (int) 
                  <(ID: 144) CONST_JAVA_NUMERIC32 (int)  (0)
                  <(ID: 146) NULL_PARAMETER (NONE) 
      <(ID: 145) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 160) INVOKE (int) 
      <(ID: 159) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 158) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
            <(ID: 157) PARAMETER (int) 
               <(ID: 152) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 156) PARAMETER (int) 
                  <(ID: 153) CONST_JAVA_NUMERIC32 (int)  (0)
                  <(ID: 155) NULL_PARAMETER (NONE) 
      <(ID: 154) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 169) INVOKE (int) 
      <(ID: 168) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 167) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
            <(ID: 166) PARAMETER (int) 
               <(ID: 161) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 165) PARAMETER (int) 
                  <(ID: 162) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 164) NULL_PARAMETER (NONE) 
      <(ID: 163) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 178) INVOKE (int) 
      <(ID: 177) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 176) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
            <(ID: 175) PARAMETER (int) 
               <(ID: 170) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 174) PARAMETER (int) 
                  <(ID: 171) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 173) NULL_PARAMETER (NONE) 
      <(ID: 172) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 187) INVOKE (int) 
      <(ID: 186) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 185) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
            <(ID: 184) PARAMETER (int) 
               <(ID: 179) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 183) PARAMETER (int) 
                  <(ID: 180) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 182) NULL_PARAMETER (NONE) 
      <(ID: 181) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 196) INVOKE (int) 
      <(ID: 195) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 194) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
            <(ID: 193) PARAMETER (int) 
               <(ID: 188) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 192) PARAMETER (int) 
                  <(ID: 189) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 191) NULL_PARAMETER (NONE) 
      <(ID: 190) CONST_MB (address field)  (com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I)

   <(ID: 199) BCOND (int) 
   target: (BlockID: 9 BlockPC: 309)
   condition: NE
   flags: 0
      <(ID: 197) LOCAL (int)   3>
      <(ID: 198) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 202) IDENTITY (reference)  (ref count: 2)
      <(ID: 206) FETCH (reference) 
         <(ID: 201) FIELD_REF (reference) 
            <(ID: 121) IDENTITY (reference)  (ref count: 11)
            <(ID: 200) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 205) IDENTITY (reference)  (ref count: 5)
      <(ID: 214) FETCH (reference) 
         <(ID: 204) FIELD_REF (reference) 
            <(ID: 202) IDENTITY (reference)  (ref count: 2)
            <(ID: 203) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 211) IDENTITY (int)  (ref count: 2)
      <(ID: 215) FETCH (int) 
         <(ID: 210) INDEX (int) 
            <(ID: 205) IDENTITY (reference)  (ref count: 5)
            <(ID: 209) BOUNDS_CHECK (int) 
               <(ID: 207) CONST_JAVA_NUMERIC32 (int)  (57)
               <(ID: 208) IDENTITY (int)  (ref count: 3)
                  <(ID: 222) ARRAY_LENGTH (int) 
                     <(ID: 205) IDENTITY (reference)  (ref count: 5)

   <(ID: 213) BCOND (int) 
   target: (BlockID: 9 BlockPC: 309)
   condition: NE
   flags: 0
      <(ID: 211) IDENTITY (int)  (ref count: 2)
      <(ID: 212) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 219) IDENTITY (int)  (ref count: 2)
      <(ID: 223) FETCH (int) 
         <(ID: 218) INDEX (int) 
            <(ID: 205) IDENTITY (reference)  (ref count: 5)
            <(ID: 217) BOUNDS_CHECK (int) 
               <(ID: 216) CONST_JAVA_NUMERIC32 (int)  (58)
               <(ID: 208) IDENTITY (int)  (ref count: 3)

   <(ID: 221) BCOND (int) 
   target: (BlockID: 9 BlockPC: 309)
   condition: NE
   flags: 0
      <(ID: 219) IDENTITY (int)  (ref count: 2)
      <(ID: 220) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 227) IDENTITY (int)  (ref count: 2)
      <(ID: 230) FETCH (int) 
         <(ID: 226) INDEX (int) 
            <(ID: 205) IDENTITY (reference)  (ref count: 5)
            <(ID: 225) BOUNDS_CHECK (int) 
               <(ID: 224) CONST_JAVA_NUMERIC32 (int)  (59)
               <(ID: 208) IDENTITY (int)  (ref count: 3)

   <(ID: 229) BCOND (int) 
   target: (BlockID: 9 BlockPC: 309)
   condition: NE
   flags: 0
      <(ID: 227) IDENTITY (int)  (ref count: 2)
      <(ID: 228) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 239) INVOKE (v) 
      <(ID: 236) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 235) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
            <(ID: 234) PARAMETER (int) 
               <(ID: 231) CONST_JAVA_NUMERIC32 (int)  (58)
               <(ID: 233) NULL_PARAMETER (NONE) 
      <(ID: 238) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 237) GET_VTBL (NONE) 
            <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 232) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)


*************************************************
*
* (block ID:9 block PC:309 )
* IR root list contains 9 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x7
* Source: com.sun.mep.bench.Chess.WPossMoves.WKing_Moves(I)V(WPossMoves.java:154)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<309>  (0x94dee9):    iload_2 
<310>  (0x94deea):    ifne <350>
<313>  (0x94deed):    aload_0 
<314>  (0x94deee):    agetfield_quick #4
<317>  (0x94def1):    agetfield_quick #3
<320>  (0x94def4):    bipush 61
<322>  (0x94def6):    baload 
<323>  (0x94def7):    bipush 99
<325>  (0x94def9):    if_icmpne <350>
<328>  (0x94defc):    aload_0 
<329>  (0x94defd):    getfield #2 <com.sun.mep.bench.Chess.WPossMoves.gState:Lcom/sun/mep/bench/Chess/GameState;>
<332>  (0x94df00):    getfield #7 <com.sun.mep.bench.Chess.GameState.typeAtSquare:[B>
<335>  (0x94df03):    bipush 62
<337>  (0x94df05):    baload 
<338>  (0x94df06):    bipush 99
<340>  (0x94df08):    if_icmpne <350>
<343>  (0x94df0b):    aload_0 
<344>  (0x94df0c):    iload_1 
<345>  (0x94df0d):    bipush 62
<347>  (0x94df0f):    invokevirtual #8 <com.sun.mep.bench.Chess.WPossMoves.Store_Move(II)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(2)	ID(318)
 	local(0)	ID(321)
 	local(1)	ID(346)
 
Incoming Locals(3): 
	local(2)	ID(318)
 	local(0)	ID(321)
 	local(1)	ID(346)
 
Successor Blocks(1): 
	ID(10) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 317) MAP_PC (NONE)   309>

   <(ID: 320) BCOND (int) 
   target: (BlockID: 10 BlockPC: 350)
   condition: NE
   flags: 0
      <(ID: 318) LOCAL (int)   2>
      <(ID: 319) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 324) IDENTITY (reference)  (ref count: 2)
      <(ID: 328) FETCH (reference) 
         <(ID: 323) FIELD_REF (reference) 
            <(ID: 321) IDENTITY (reference)  (ref count: 3)
               <(ID: 356) LOCAL (reference)   0>
            <(ID: 322) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 327) IDENTITY (reference)  (ref count: 4)
      <(ID: 336) FETCH (reference) 
         <(ID: 326) FIELD_REF (reference) 
            <(ID: 324) IDENTITY (reference)  (ref count: 2)
            <(ID: 325) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 333) IDENTITY (int)  (ref count: 2)
      <(ID: 337) FETCH (int) 
         <(ID: 332) INDEX (int) 
            <(ID: 327) IDENTITY (reference)  (ref count: 4)
            <(ID: 331) BOUNDS_CHECK (int) 
               <(ID: 329) CONST_JAVA_NUMERIC32 (int)  (61)
               <(ID: 330) IDENTITY (int)  (ref count: 2)
                  <(ID: 344) ARRAY_LENGTH (int) 
                     <(ID: 327) IDENTITY (reference)  (ref count: 4)

   <(ID: 335) BCOND (int) 
   target: (BlockID: 10 BlockPC: 350)
   condition: NE
   flags: 0
      <(ID: 333) IDENTITY (int)  (ref count: 2)
      <(ID: 334) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 341) IDENTITY (int)  (ref count: 2)
      <(ID: 345) FETCH (int) 
         <(ID: 340) INDEX (int) 
            <(ID: 327) IDENTITY (reference)  (ref count: 4)
            <(ID: 339) BOUNDS_CHECK (int) 
               <(ID: 338) CONST_JAVA_NUMERIC32 (int)  (62)
               <(ID: 330) IDENTITY (int)  (ref count: 2)

   <(ID: 343) BCOND (int) 
   target: (BlockID: 10 BlockPC: 350)
   condition: NE
   flags: 0
      <(ID: 341) IDENTITY (int)  (ref count: 2)
      <(ID: 342) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 355) INVOKE (v) 
      <(ID: 352) PARAMETER (reference) 
         <(ID: 321) IDENTITY (reference)  (ref count: 3)
         <(ID: 351) PARAMETER (int) 
            <(ID: 346) LOCAL (int)   1>
            <(ID: 350) PARAMETER (int) 
               <(ID: 347) CONST_JAVA_NUMERIC32 (int)  (62)
               <(ID: 349) NULL_PARAMETER (NONE) 
      <(ID: 354) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 353) GET_VTBL (NONE) 
            <(ID: 321) IDENTITY (reference)  (ref count: 3)
         <(ID: 348) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)


*************************************************
*
* (block ID:10 block PC:350 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.WPossMoves.WKing_Moves(I)V(WPossMoves.java:160)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<350>  (0x94df12):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

   <(ID: 372) MAP_PC (NONE)   350>

   <(ID: 373) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 368
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 2114
ESTIMATED BUFFER SIZE = 2628
CODE BUFFER ADDRESS = 0x2bcbcc5c
PC MAP TABLE ADDRESS = 0x2bcbcc64
CODE ENTRY ADDRESS = 0x2bcbccb0
          		@ Method prologue
0x2bcbccb0	0:	addiu	a1, JSP, 68	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbccb4	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbccb8	8:	sltu	t7, a1, CHUNKEND
0x2bcbccbc	12:	bne	t7, zero, PC=0x2bcbccb0	@ goto .skip
0x2bcbccc0	16:	nop
0x2bcbccc4	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbccc8	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbccbc) >>>>>>>>
0x2bcbccbc	12:	bne	t7, zero, PC=0x2bcbcccc	@ goto .skip
0x2bcbccc0	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbcccc) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbcccc	28:	sw	JFP, 16(JSP)	@ Store curr JFP into new frame
0x2bcbccd0	32:	addiu	JFP, JSP, 16	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbccd4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbccd8	40:	addiu	a3, zero, 0
0x2bcbccdc	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbcce0	48:	addiu	a3, zero, -1
0x2bcbcce4	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbcce8	56:	move	a0, EE
0x2bcbccec	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbccf0	64:	lui	t9, hi16(0x65)
0x2bcbccf4	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbccf8	72:	jalr	t9
0x2bcbccfc	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbcd00	80:	addiu	JSP, JFP, 32	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbcd04	84:	nop
0x2bcbcd08	88:	nop
0x2bcbcd0c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbcd10	96:	lw	s4, -24(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbcd14	100:	lw	s5, -20(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
          		@ Do getfield:
0x2bcbcd18	104:	lw	s7, 16(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbcd1c	108:	lw	s6, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbcd20	112:	lw	s7, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcbcd24	116:	addiu	t7, zero, 60
0x2bcbcd28	120:	sltu	t7, t7, s7
0x2bcbcd2c	124:	bne	t7, zero, PC=0x2bcbcd24	@ br .skip
0x2bcbcd30	128:	nop
0x2bcbcd34	132:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbcd38	136:	nop
		.skip
--->Fixed instruction at 124(0x2bcbcd2c) to reference 140
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbcd3c	140:	lb	s7, 72(s6)
0x2bcbcd40	144:	addiu	s6, zero, 1	@ const 1
0x2bcbcd44	148:	sw	s6, -16(JFP)	@ Java local cell # 2
0x2bcbcd48	152:	sw	s6, -12(JFP)	@ Java local cell # 3
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbcd4c	156:	addiu	t7, zero, 5
0x2bcbcd50	160:	bne	s7, t7, PC=0x2bcbcd4c	@ branch to block L1
0x2bcbcd54	164:	nop
          		@ Do getfield:
0x2bcbcd58	168:	lw	s7, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbcd5c	172:	lw	ra, 164(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbcd60	176:	lw	t9, 8(ra)	@ arraylength
          		@ deferred comparison: 
0x2bcbcd64	180:	addiu	t7, zero, 60
0x2bcbcd68	184:	sltu	t7, t7, t9
0x2bcbcd6c	188:	bne	t7, zero, PC=0x2bcbcd64	@ br .skip
0x2bcbcd70	192:	nop
0x2bcbcd74	196:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbcd78	200:	nop
		.skip
--->Fixed instruction at 188(0x2bcbcd6c) to reference 204
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbcd7c	204:	lb	t9, 72(ra)
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbcd80	208:	addiu	t7, zero, 5
0x2bcbcd84	212:	bne	t9, t7, PC=0x2bcbcd80	@ branch to block L1
0x2bcbcd88	216:	nop
          		@ Do getfield:
0x2bcbcd8c	220:	lw	ra, 92(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbcd90	224:	sw	ra, 0(JSP)
0x2bcbcd94	228:	addiu	s7, zero, 60	@ const 60
0x2bcbcd98	232:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbcd9c	236:	lw	t9, 0(ra)	@ Get object.cb
0x2bcbcda0	240:	addiu	t7, zero, -4
0x2bcbcda4	244:	and	t9, t9, t7
0x2bcbcda8	248:	lw	t9, 76(t9)	@ Get cb.vtbl
0x2bcbcdac	252:	lw	a0, 56(t9)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbcdb0	256:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbcdb4	260:	lw	s7, 0(a0)	@ call method through mb
0x2bcbcdb8	264:	jalr	s7
0x2bcbcdbc	268:	nop
          		@ Captured a stackmap here.
0x2bcbcdc0	272:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbcdc4	276:	lw	s7, 0(JSP)
0x2bcbcdc8	280:	lw	a2, 0(CP)	@ cb com.sun.mep.bench.Chess.King
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcbcdcc	284:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcbcdd0	288:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcbcdd4	292:	nop
0x2bcbcdd8	296:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcbcddc	300:	lw	s5, -24(JFP)	@ Java local cell # 0
0x2bcbcde0	304:	lw	s6, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbcde4	308:	lw	s4, 12(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbcde8	312:	lw	s6, 8(s4)	@ arraylength
          		@ deferred comparison: 
0x2bcbcdec	316:	addiu	t7, zero, 56
0x2bcbcdf0	320:	sltu	t7, t7, s6
0x2bcbcdf4	324:	bne	t7, zero, PC=0x2bcbcdec	@ br .skip
0x2bcbcdf8	328:	nop
0x2bcbcdfc	332:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbce00	336:	nop
		.skip
--->Fixed instruction at 324(0x2bcbcdf4) to reference 340
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbce04	340:	lb	s6, 68(s4)
0x2bcbce08	344:	sw	s7, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(0) reg(20): in wrong register
0x2bcbce0c	348:	move	s4, s5
			@ Outgoing local(1) reg(21): not in register
0x2bcbce10	352:	lw	s5, -20(JFP)	@ Java local cell # 1
          		@ deferred comparison: 
0x2bcbce14	356:	addiu	t7, zero, 3
0x2bcbce18	360:	bne	s6, t7, PC=0x2bcbce14	@ branch to block L2
0x2bcbce1c	364:	nop
          		@ Do getfield:
0x2bcbce20	368:	lw	s6, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbce24	372:	lw	ra, 164(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbce28	376:	lw	t9, 8(ra)	@ arraylength
          		@ deferred comparison: 
0x2bcbce2c	380:	addiu	t7, zero, 56
0x2bcbce30	384:	sltu	t7, t7, t9
0x2bcbce34	388:	bne	t7, zero, PC=0x2bcbce2c	@ br .skip
0x2bcbce38	392:	nop
0x2bcbce3c	396:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbce40	400:	nop
		.skip
--->Fixed instruction at 388(0x2bcbce34) to reference 404
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbce44	404:	lb	t9, 68(ra)
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbce48	408:	addiu	t7, zero, 3
0x2bcbce4c	412:	bne	t9, t7, PC=0x2bcbce48	@ branch to block L2
0x2bcbce50	416:	nop
          		@ Do getfield:
0x2bcbce54	420:	lw	ra, 92(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbce58	424:	sw	ra, 0(JSP)
0x2bcbce5c	428:	addiu	s6, zero, 56	@ const 56
0x2bcbce60	432:	sw	s6, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbce64	436:	lw	t9, 0(ra)	@ Get object.cb
0x2bcbce68	440:	addiu	t7, zero, -4
0x2bcbce6c	444:	and	t9, t9, t7
0x2bcbce70	448:	lw	t9, 76(t9)	@ Get cb.vtbl
0x2bcbce74	452:	lw	a0, 56(t9)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbce78	456:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbce7c	460:	lw	s7, 0(a0)	@ call method through mb
0x2bcbce80	464:	jalr	s7
0x2bcbce84	468:	nop
          		@ Captured a stackmap here.
0x2bcbce88	472:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbce8c	476:	lw	s7, 0(JSP)
0x2bcbce90	480:	lw	a2, 0(CP)	@ cb com.sun.mep.bench.Chess.Rook
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcbce94	484:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcbce98	488:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcbce9c	492:	nop
0x2bcbcea0	496:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcbcea4	500:	lw	s5, -8(JFP)	@ Java local cell # 4
0x2bcbcea8	504:	lw	s6, 112(s5)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbceac	508:	sw	s7, -4(JFP)	@ Java local cell # 5
          		@ deferred comparison: 
0x2bcbceb0	512:	bne	s6, zero, PC=0x2bcbceb0	@ branch to block L3
0x2bcbceb4	516:	nop
          		@ Do getfield:
0x2bcbceb8	520:	lw	s6, 112(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ deferred comparison: 
0x2bcbcebc	524:	beq	s6, zero, PC=0x2bcbcebc	@ branch to block L4
0x2bcbcec0	528:	nop
			@ Initial Temp REF set is 
	L3:	532:	@ entry point for branches
--->Fixed instruction at 512(0x2bcbceb0) to reference 532
          		@ MAP_PC idepth=0 javaPc=110 compiledPc=532
			@ Processing DEFINE(0) reg(20): not in register
			@ Loading DEFINE(0) register(20): not in register
0x2bcbcec4	532:	addiu	s4, zero, 1	@ const 1
0x2bcbcec8	536:	b	PC=0x2bcbcec8	@ branch to block L5
0x2bcbcecc	540:	nop
			@ Initial Temp REF set is 
	L4:	544:	@ entry point for branches
--->Fixed instruction at 524(0x2bcbcebc) to reference 544
          		@ MAP_PC idepth=0 javaPc=114 compiledPc=544
			@ Processing DEFINE(0) reg(20): in wrong register
			@ Loading DEFINE(0) register(20): in wrong register
0x2bcbced0	544:	move	s4, zero
			@ Initial Temp REF set is 
	L5:	548:	@ entry point for branches
--->Fixed instruction at 536(0x2bcbcec8) to reference 548
          		@ MAP_PC idepth=0 javaPc=115 compiledPc=548
0x2bcbced4	548:	sw	s4, -12(JFP)	@ Java local cell # 3
			@ Outgoing local(0) reg(20): not in register
0x2bcbced8	552:	lw	s4, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(21): not in register
0x2bcbcedc	556:	lw	s5, -20(JFP)	@ Java local cell # 1
			@ Initial Temp REF set is 
	L2:	560:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
--->Fixed instruction at 412(0x2bcbce4c) to reference 560
--->Fixed instruction at 360(0x2bcbce18) to reference 560
          		@ MAP_PC idepth=0 javaPc=116 compiledPc=560
          		@ Do getfield:
0x2bcbcee0	560:	lw	s7, 16(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbcee4	564:	lw	s6, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbcee8	568:	lw	s7, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcbceec	572:	addiu	t7, zero, 63
0x2bcbcef0	576:	sltu	t7, t7, s7
0x2bcbcef4	580:	bne	t7, zero, PC=0x2bcbceec	@ br .skip
0x2bcbcef8	584:	nop
0x2bcbcefc	588:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbcf00	592:	nop
		.skip
--->Fixed instruction at 580(0x2bcbcef4) to reference 596
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbcf04	596:	lb	s7, 75(s6)
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbcf08	600:	addiu	t7, zero, 3
0x2bcbcf0c	604:	bne	s7, t7, PC=0x2bcbcf08	@ branch to block L1
0x2bcbcf10	608:	nop
          		@ Do getfield:
0x2bcbcf14	612:	lw	s7, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbcf18	616:	lw	s6, 164(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbcf1c	620:	lw	ra, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcbcf20	624:	addiu	t7, zero, 63
0x2bcbcf24	628:	sltu	t7, t7, ra
0x2bcbcf28	632:	bne	t7, zero, PC=0x2bcbcf20	@ br .skip
0x2bcbcf2c	636:	nop
0x2bcbcf30	640:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbcf34	644:	nop
		.skip
--->Fixed instruction at 632(0x2bcbcf28) to reference 648
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbcf38	648:	lb	ra, 75(s6)
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbcf3c	652:	addiu	t7, zero, 3
0x2bcbcf40	656:	bne	ra, t7, PC=0x2bcbcf3c	@ branch to block L1
0x2bcbcf44	660:	nop
          		@ Do getfield:
0x2bcbcf48	664:	lw	s6, 92(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbcf4c	668:	sw	s6, 0(JSP)
0x2bcbcf50	672:	addiu	s7, zero, 63	@ const 63
0x2bcbcf54	676:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbcf58	680:	lw	ra, 0(s6)	@ Get object.cb
0x2bcbcf5c	684:	addiu	t7, zero, -4
0x2bcbcf60	688:	and	ra, ra, t7
0x2bcbcf64	692:	lw	ra, 76(ra)	@ Get cb.vtbl
0x2bcbcf68	696:	lw	a0, 56(ra)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbcf6c	700:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbcf70	704:	lw	s7, 0(a0)	@ call method through mb
0x2bcbcf74	708:	jalr	s7
0x2bcbcf78	712:	nop
          		@ Captured a stackmap here.
0x2bcbcf7c	716:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbcf80	720:	lw	s7, 0(JSP)
0x2bcbcf84	724:	lw	a2, 0(CP)	@ cb com.sun.mep.bench.Chess.Rook
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcbcf88	728:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcbcf8c	732:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcbcf90	736:	nop
0x2bcbcf94	740:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
0x2bcbcf98	744:	lw	ra, -8(JFP)	@ Java local cell # 4
          		@ Do getfield:
0x2bcbcf9c	748:	lw	s6, 112(ra)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbcfa0	752:	sw	s7, -4(JFP)	@ Java local cell # 5
          		@ deferred comparison: 
0x2bcbcfa4	756:	bne	s6, zero, PC=0x2bcbcfa4	@ branch to block L6
0x2bcbcfa8	760:	nop
          		@ Do getfield:
0x2bcbcfac	764:	lw	s6, 112(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ deferred comparison: 
0x2bcbcfb0	768:	beq	s6, zero, PC=0x2bcbcfb0	@ branch to block L7
0x2bcbcfb4	772:	nop
			@ Initial Temp REF set is 
	L6:	776:	@ entry point for branches
--->Fixed instruction at 756(0x2bcbcfa4) to reference 776
          		@ MAP_PC idepth=0 javaPc=177 compiledPc=776
			@ Processing DEFINE(0) reg(20): not in register
			@ Loading DEFINE(0) register(20): not in register
0x2bcbcfb8	776:	addiu	s4, zero, 1	@ const 1
0x2bcbcfbc	780:	b	PC=0x2bcbcfbc	@ branch to block L8
0x2bcbcfc0	784:	nop
			@ Initial Temp REF set is 
	L7:	788:	@ entry point for branches
--->Fixed instruction at 768(0x2bcbcfb0) to reference 788
          		@ MAP_PC idepth=0 javaPc=181 compiledPc=788
			@ Processing DEFINE(0) reg(20): in wrong register
			@ Loading DEFINE(0) register(20): in wrong register
0x2bcbcfc4	788:	move	s4, zero
			@ Initial Temp REF set is 
	L8:	792:	@ entry point for branches
--->Fixed instruction at 780(0x2bcbcfbc) to reference 792
          		@ MAP_PC idepth=0 javaPc=182 compiledPc=792
0x2bcbcfc8	792:	sw	s4, -16(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(20): not in register
0x2bcbcfcc	796:	lw	s4, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(21): not in register
0x2bcbcfd0	800:	lw	s5, -20(JFP)	@ Java local cell # 1
			@ Initial Temp REF set is 
	L1:	804:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
--->Fixed instruction at 656(0x2bcbcf40) to reference 804
--->Fixed instruction at 604(0x2bcbcf0c) to reference 804
--->Fixed instruction at 212(0x2bcbcd84) to reference 804
--->Fixed instruction at 160(0x2bcbcd50) to reference 804
          		@ MAP_PC idepth=0 javaPc=183 compiledPc=804
0x2bcbcfd4	804:	sw	s4, 0(JSP)
0x2bcbcfd8	808:	sw	s5, 4(JSP)
0x2bcbcfdc	812:	sw	zero, 8(JSP)
0x2bcbcfe0	816:	addiu	s7, zero, -8	@ const -8
0x2bcbcfe4	820:	sw	s7, 12(JSP)
0x2bcbcfe8	824:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbcfec	828:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbcff0	832:	lw	s7, 0(a0)	@ call method through mb
0x2bcbcff4	836:	jalr	s7
0x2bcbcff8	840:	nop
          		@ Captured a stackmap here.
0x2bcbcffc	844:	addiu	JSP, JSP, -4
0x2bcbd000	848:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcbd004	852:	sw	s7, 0(JSP)
0x2bcbd008	856:	lw	s6, -20(JFP)	@ Java local cell # 1
0x2bcbd00c	860:	sw	s6, 4(JSP)
0x2bcbd010	864:	sw	zero, 8(JSP)
0x2bcbd014	868:	addiu	s5, zero, 8	@ const 8
0x2bcbd018	872:	sw	s5, 12(JSP)
0x2bcbd01c	876:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbd020	880:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbd024	884:	lw	s7, 0(a0)	@ call method through mb
0x2bcbd028	888:	jalr	s7
0x2bcbd02c	892:	nop
          		@ Captured a stackmap here.
0x2bcbd030	896:	addiu	JSP, JSP, -4
0x2bcbd034	900:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcbd038	904:	sw	s7, 0(JSP)
0x2bcbd03c	908:	lw	s6, -20(JFP)	@ Java local cell # 1
0x2bcbd040	912:	sw	s6, 4(JSP)
0x2bcbd044	916:	addiu	s5, zero, -1	@ const -1
0x2bcbd048	920:	sw	s5, 8(JSP)
0x2bcbd04c	924:	sw	zero, 12(JSP)
0x2bcbd050	928:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbd054	932:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbd058	936:	lw	s7, 0(a0)	@ call method through mb
0x2bcbd05c	940:	jalr	s7
0x2bcbd060	944:	nop
          		@ Captured a stackmap here.
0x2bcbd064	948:	addiu	JSP, JSP, -4
0x2bcbd068	952:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcbd06c	956:	sw	s7, 0(JSP)
0x2bcbd070	960:	lw	s6, -20(JFP)	@ Java local cell # 1
0x2bcbd074	964:	sw	s6, 4(JSP)
0x2bcbd078	968:	addiu	s5, zero, 1	@ const 1
0x2bcbd07c	972:	sw	s5, 8(JSP)
0x2bcbd080	976:	sw	zero, 12(JSP)
0x2bcbd084	980:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbd088	984:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbd08c	988:	lw	s7, 0(a0)	@ call method through mb
0x2bcbd090	992:	jalr	s7
0x2bcbd094	996:	nop
          		@ Captured a stackmap here.
0x2bcbd098	1000:	addiu	JSP, JSP, -4
0x2bcbd09c	1004:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcbd0a0	1008:	sw	s7, 0(JSP)
0x2bcbd0a4	1012:	lw	s6, -20(JFP)	@ Java local cell # 1
0x2bcbd0a8	1016:	sw	s6, 4(JSP)
0x2bcbd0ac	1020:	addiu	s5, zero, 1	@ const 1
0x2bcbd0b0	1024:	sw	s5, 8(JSP)
0x2bcbd0b4	1028:	addiu	s4, zero, -8	@ const -8
0x2bcbd0b8	1032:	sw	s4, 12(JSP)
0x2bcbd0bc	1036:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbd0c0	1040:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbd0c4	1044:	lw	s7, 0(a0)	@ call method through mb
0x2bcbd0c8	1048:	jalr	s7
0x2bcbd0cc	1052:	nop
          		@ Captured a stackmap here.
0x2bcbd0d0	1056:	addiu	JSP, JSP, -4
0x2bcbd0d4	1060:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcbd0d8	1064:	sw	s7, 0(JSP)
0x2bcbd0dc	1068:	lw	s6, -20(JFP)	@ Java local cell # 1
0x2bcbd0e0	1072:	sw	s6, 4(JSP)
0x2bcbd0e4	1076:	addiu	s5, zero, 1	@ const 1
0x2bcbd0e8	1080:	sw	s5, 8(JSP)
0x2bcbd0ec	1084:	addiu	s4, zero, 8	@ const 8
0x2bcbd0f0	1088:	sw	s4, 12(JSP)
0x2bcbd0f4	1092:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbd0f8	1096:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbd0fc	1100:	lw	s7, 0(a0)	@ call method through mb
0x2bcbd100	1104:	jalr	s7
0x2bcbd104	1108:	nop
          		@ Captured a stackmap here.
0x2bcbd108	1112:	addiu	JSP, JSP, -4
0x2bcbd10c	1116:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcbd110	1120:	sw	s7, 0(JSP)
0x2bcbd114	1124:	lw	s6, -20(JFP)	@ Java local cell # 1
0x2bcbd118	1128:	sw	s6, 4(JSP)
0x2bcbd11c	1132:	addiu	s5, zero, -1	@ const -1
0x2bcbd120	1136:	sw	s5, 8(JSP)
0x2bcbd124	1140:	addiu	s4, zero, 8	@ const 8
0x2bcbd128	1144:	sw	s4, 12(JSP)
0x2bcbd12c	1148:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbd130	1152:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbd134	1156:	lw	s7, 0(a0)	@ call method through mb
0x2bcbd138	1160:	jalr	s7
0x2bcbd13c	1164:	nop
          		@ Captured a stackmap here.
0x2bcbd140	1168:	addiu	JSP, JSP, -4
0x2bcbd144	1172:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcbd148	1176:	sw	s7, 0(JSP)
0x2bcbd14c	1180:	lw	s6, -20(JFP)	@ Java local cell # 1
0x2bcbd150	1184:	sw	s6, 4(JSP)
0x2bcbd154	1188:	addiu	s5, zero, -1	@ const -1
0x2bcbd158	1192:	sw	s5, 8(JSP)
0x2bcbd15c	1196:	addiu	s4, zero, -8	@ const -8
0x2bcbd160	1200:	sw	s4, 12(JSP)
0x2bcbd164	1204:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbd168	1208:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbd16c	1212:	lw	s7, 0(a0)	@ call method through mb
0x2bcbd170	1216:	jalr	s7
0x2bcbd174	1220:	nop
          		@ Captured a stackmap here.
0x2bcbd178	1224:	addiu	JSP, JSP, -4
0x2bcbd17c	1228:	lw	ra, -12(JFP)	@ Java local cell # 3
			@ Outgoing local(2) reg(20): not in register
0x2bcbd180	1232:	lw	s4, -16(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(21): not in register
0x2bcbd184	1236:	lw	s5, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(22): not in register
0x2bcbd188	1240:	lw	s6, -20(JFP)	@ Java local cell # 1
          		@ deferred comparison: 
0x2bcbd18c	1244:	bne	ra, zero, PC=0x2bcbd18c	@ branch to block L9
0x2bcbd190	1248:	nop
          		@ Do getfield:
0x2bcbd194	1252:	lw	s7, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbd198	1256:	lw	t9, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbd19c	1260:	lw	s7, 8(t9)	@ arraylength
          		@ deferred comparison: 
0x2bcbd1a0	1264:	addiu	t7, zero, 57
0x2bcbd1a4	1268:	sltu	t7, t7, s7
0x2bcbd1a8	1272:	bne	t7, zero, PC=0x2bcbd1a0	@ br .skip
0x2bcbd1ac	1276:	nop
0x2bcbd1b0	1280:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd1b4	1284:	nop
		.skip
--->Fixed instruction at 1272(0x2bcbd1a8) to reference 1288
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbd1b8	1288:	lb	t8, 69(t9)
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(1) reg(22): in correct register
          		@ deferred comparison: 
0x2bcbd1bc	1292:	addiu	t7, zero, 99
0x2bcbd1c0	1296:	bne	t8, t7, PC=0x2bcbd1bc	@ branch to block L9
0x2bcbd1c4	1300:	nop
          		@ deferred comparison: 
0x2bcbd1c8	1304:	addiu	t7, zero, 58
0x2bcbd1cc	1308:	sltu	t7, t7, s7
0x2bcbd1d0	1312:	bne	t7, zero, PC=0x2bcbd1c8	@ br .skip
0x2bcbd1d4	1316:	nop
0x2bcbd1d8	1320:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd1dc	1324:	nop
		.skip
--->Fixed instruction at 1312(0x2bcbd1d0) to reference 1328
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbd1e0	1328:	lb	t8, 70(t9)
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(1) reg(22): in correct register
          		@ deferred comparison: 
0x2bcbd1e4	1332:	addiu	t7, zero, 99
0x2bcbd1e8	1336:	bne	t8, t7, PC=0x2bcbd1e4	@ branch to block L9
0x2bcbd1ec	1340:	nop
          		@ deferred comparison: 
0x2bcbd1f0	1344:	addiu	t7, zero, 59
0x2bcbd1f4	1348:	sltu	t7, t7, s7
0x2bcbd1f8	1352:	bne	t7, zero, PC=0x2bcbd1f0	@ br .skip
0x2bcbd1fc	1356:	nop
0x2bcbd200	1360:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd204	1364:	nop
		.skip
--->Fixed instruction at 1352(0x2bcbd1f8) to reference 1368
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbd208	1368:	lb	s7, 71(t9)
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(1) reg(22): in correct register
          		@ deferred comparison: 
0x2bcbd20c	1372:	addiu	t7, zero, 99
0x2bcbd210	1376:	bne	s7, t7, PC=0x2bcbd20c	@ branch to block L9
0x2bcbd214	1380:	nop
0x2bcbd218	1384:	sw	s5, 0(JSP)
0x2bcbd21c	1388:	sw	s6, 4(JSP)
0x2bcbd220	1392:	addiu	s7, zero, 58	@ const 58
0x2bcbd224	1396:	sw	s7, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcbd228	1400:	lw	t9, 0(s5)	@ Get object.cb
0x2bcbd22c	1404:	addiu	t7, zero, -4
0x2bcbd230	1408:	and	t9, t9, t7
0x2bcbd234	1412:	lw	t9, 76(t9)	@ Get cb.vtbl
0x2bcbd238	1416:	lw	a0, 68(t9)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbd23c	1420:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbd240	1424:	lw	s7, 0(a0)	@ call method through mb
0x2bcbd244	1428:	jalr	s7
0x2bcbd248	1432:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(2) reg(20): not in register
0x2bcbd24c	1436:	lw	s4, -16(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(21): not in register
0x2bcbd250	1440:	lw	s5, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(22): not in register
0x2bcbd254	1444:	lw	s6, -20(JFP)	@ Java local cell # 1
			@ Initial Temp REF set is 
	L9:	1448:	@ entry point for branches
			@ Binding Incoming Local(2) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(1) to reg(22)
--->Fixed instruction at 1376(0x2bcbd210) to reference 1448
--->Fixed instruction at 1336(0x2bcbd1e8) to reference 1448
--->Fixed instruction at 1296(0x2bcbd1c0) to reference 1448
--->Fixed instruction at 1244(0x2bcbd18c) to reference 1448
          		@ MAP_PC idepth=0 javaPc=309 compiledPc=1448
          		@ deferred comparison: 
0x2bcbd258	1448:	bne	s4, zero, PC=0x2bcbd258	@ branch to block L10
0x2bcbd25c	1452:	nop
          		@ Do getfield:
0x2bcbd260	1456:	lw	s7, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbd264	1460:	lw	ra, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbd268	1464:	lw	s7, 8(ra)	@ arraylength
          		@ deferred comparison: 
0x2bcbd26c	1468:	addiu	t7, zero, 61
0x2bcbd270	1472:	sltu	t7, t7, s7
0x2bcbd274	1476:	bne	t7, zero, PC=0x2bcbd26c	@ br .skip
0x2bcbd278	1480:	nop
0x2bcbd27c	1484:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd280	1488:	nop
		.skip
--->Fixed instruction at 1476(0x2bcbd274) to reference 1492
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbd284	1492:	lb	t9, 73(ra)
          		@ deferred comparison: 
0x2bcbd288	1496:	addiu	t7, zero, 99
0x2bcbd28c	1500:	bne	t9, t7, PC=0x2bcbd288	@ branch to block L10
0x2bcbd290	1504:	nop
          		@ deferred comparison: 
0x2bcbd294	1508:	addiu	t7, zero, 62
0x2bcbd298	1512:	sltu	t7, t7, s7
0x2bcbd29c	1516:	bne	t7, zero, PC=0x2bcbd294	@ br .skip
0x2bcbd2a0	1520:	nop
0x2bcbd2a4	1524:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd2a8	1528:	nop
		.skip
--->Fixed instruction at 1516(0x2bcbd29c) to reference 1532
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbd2ac	1532:	lb	s7, 74(ra)
          		@ deferred comparison: 
0x2bcbd2b0	1536:	addiu	t7, zero, 99
0x2bcbd2b4	1540:	bne	s7, t7, PC=0x2bcbd2b0	@ branch to block L10
0x2bcbd2b8	1544:	nop
0x2bcbd2bc	1548:	sw	s5, 0(JSP)
0x2bcbd2c0	1552:	sw	s6, 4(JSP)
0x2bcbd2c4	1556:	addiu	s7, zero, 62	@ const 62
0x2bcbd2c8	1560:	sw	s7, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcbd2cc	1564:	lw	ra, 0(s5)	@ Get object.cb
0x2bcbd2d0	1568:	addiu	t7, zero, -4
0x2bcbd2d4	1572:	and	ra, ra, t7
0x2bcbd2d8	1576:	lw	ra, 76(ra)	@ Get cb.vtbl
0x2bcbd2dc	1580:	lw	a0, 68(ra)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbd2e0	1584:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbd2e4	1588:	lw	s7, 0(a0)	@ call method through mb
0x2bcbd2e8	1592:	jalr	s7
0x2bcbd2ec	1596:	nop
          		@ Captured a stackmap here.
			@ Initial Temp REF set is 
	L10:	1600:	@ entry point for branches
--->Fixed instruction at 1540(0x2bcbd2b4) to reference 1600
--->Fixed instruction at 1500(0x2bcbd28c) to reference 1600
--->Fixed instruction at 1448(0x2bcbd258) to reference 1600
          		@ MAP_PC idepth=0 javaPc=350 compiledPc=1600
0x2bcbd2f0	1600:	addiu	JSP, JFP, -24
0x2bcbd2f4	1604:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbd2f8	1608:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbd2fc	1612:	nop
0x2bcbd300	1616:	.word	9793524	@ mb com.sun.mep.bench.Chess.WPossMoves.checkMove(III)I
--->Fixed instruction at 1204(0x2bcbd164) to reference 1616
--->Fixed instruction at 1148(0x2bcbd12c) to reference 1616
--->Fixed instruction at 1092(0x2bcbd0f4) to reference 1616
--->Fixed instruction at 1036(0x2bcbd0bc) to reference 1616
--->Fixed instruction at 980(0x2bcbd084) to reference 1616
--->Fixed instruction at 928(0x2bcbd050) to reference 1616
--->Fixed instruction at 876(0x2bcbd01c) to reference 1616
--->Fixed instruction at 824(0x2bcbcfe8) to reference 1616
0x2bcbd304	1620:	.word	9790344	@ cb com.sun.mep.bench.Chess.Rook
--->Fixed instruction at 724(0x2bcbcf84) to reference 1620
--->Fixed instruction at 480(0x2bcbce90) to reference 1620
0x2bcbd308	1624:	.word	9795336	@ cb com.sun.mep.bench.Chess.King
--->Fixed instruction at 280(0x2bcbcdc8) to reference 1624
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbccb0) >>>>>>>>
          		@ Capacity is 19 word(s)
0x2bcbccb0	0:	addiu	a1, JSP, 68
<<<<<<<<<Pop Code Buffer to PC = 1628 (0x2bcbd30c) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbcd00) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcbcd00	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcbcd04	84:	lui	CP, hi16(0x2bcb)
0x2bcbcd08	88:	ori	CP, CP, lo16(0x2bcbd300)
0x2bcbcd0c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 1628 (0x2bcbd30c) <<<<<<<<<
JS: COMPILED: size=1816 startPC=0x2bcbccb0 com.sun.mep.bench.Chess.WPossMoves.WKing_Moves(I)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.CompMover.applyMove(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/Move;I)Lcom/sun/mep/bench/Chess/GameState;
JS: COMPILING com.sun.mep.bench.Chess.CompMover.applyMove(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/Move;I)Lcom/sun/mep/bench/Chess/GameState;
orig bkID(7) Incoming Locals(2 0x0): 4- 1- 
o1   bkID(7) Incoming Locals(1 0x0): 4- 
o1   bkID(7) Incoming Locals(2 0x0): 4- 1- 
orig bkID(6) Incoming Locals(2 0x0): 4- 1- 
o1   bkID(6) Incoming Locals(1 0x0): 4- 
o1   bkID(6) Incoming Locals(2 0x0): 4- 1- 
orig bkID(0) Incoming Locals(2 0x0): 2- 1- 
orig bkID(7) Incoming Locals(2 0x0): 4- 1- 
o1   bkID(7) Incoming Locals(1 0x0): 4- 
o1   bkID(7) Incoming Locals(2 0x0): 4- 1- 
orig bkID(6) Incoming Locals(2 0x0): 4- 1- 
o1   bkID(6) Incoming Locals(1 0x0): 4- 
o1   bkID(6) Incoming Locals(2 0x0): 4- 1- 
orig bkID(0) Incoming Locals(2 0x0): 2- 1- 
bkID(7) local(0 #4)  not found in goalBk
bkID(7) local(1 #1)  not found in goalBk
bkID(6) local(0 #4)  not found in goalBk
bkID(6) local(1 #1)  not found in goalBk
pre  bkID(6) Incoming Locals(2 0x0): 4- 1- 
local(#0) swapped with local(#0)
post bkID(6) Incoming Locals(2 0x1): 4+ 1- 
pre  bkID(6) Incoming Locals(2 0x1): 4+ 1- 
local(#1) swapped with local(#1)
post bkID(6) Incoming Locals(2 0x3): 4+ 1+ 
pre  bkID(7) Incoming Locals(2 0x0): 4- 1- 
local(#0) swapped with local(#0)
post bkID(7) Incoming Locals(2 0x1): 4+ 1- 
pre  bkID(7) Incoming Locals(2 0x1): 4+ 1- 
local(#1) swapped with local(#1)
post bkID(7) Incoming Locals(2 0x3): 4+ 1+ 

#################################################

The maximum node counts per root node are 7
IR block list contains 8 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 12 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.applyMove(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/Move;I)Lcom/sun/mep/bench/Chess/GameState;(CompMover.java:195)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<0>  (0x94d504):    aload_2 
<1>  (0x94d505):    agetfield_quick #3
<4>  (0x94d508):    astore 4
<6>  (0x94d50a):    aload_1 
<7>  (0x94d50b):    aload 4
<9>  (0x94d50d):    getfield_quick #2
<12>  (0x94d510):    invokevirtual_quick_w #81 <com.sun.mep.bench.Chess.GameState.getPieceType(I)B>
<15>  (0x94d513):    istore 5
<17>  (0x94d515):    aload_1 
<18>  (0x94d516):    agetfield_quick #3
<21>  (0x94d519):    aload 4
<23>  (0x94d51b):    getfield_quick #2
<26>  (0x94d51e):    bipush 99
<28>  (0x94d520):    bastore 
<29>  (0x94d521):    aload_1 
<30>  (0x94d522):    agetfield_quick #3
<33>  (0x94d525):    aload 4
<35>  (0x94d527):    getfield_quick #3
<38>  (0x94d52a):    iload 5
<40>  (0x94d52c):    bastore 
<41>  (0x94d52d):    iload 5
<43>  (0x94d52f):    lookupswitch 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(2)	ID(2)
 	local(1)	ID(6)
 
Incoming Locals(2): 
	local(2)	ID(2)
 	local(1)	ID(6)
 
Assigned Locals(2): 
	ASSIGN(44): local(4)	ID(43)	rhsID(5)
 	ASSIGN(46): local(5)	ID(45)	rhsID(17)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (reference)  (ref count: 5)
      <(ID: 10) FETCH (reference) 
         <(ID: 4) FIELD_REF (reference) 
            <(ID: 2) LOCAL (reference)   2>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 9) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 18) FETCH (32-bit field) 
         <(ID: 8) FIELD_REF (32-bit field) 
            <(ID: 5) IDENTITY (reference)  (ref count: 5)
            <(ID: 7) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 17) IDENTITY (int)  (ref count: 4)
      <(ID: 41) INVOKE (int) 
         <(ID: 14) PARAMETER (reference) 
            <(ID: 6) IDENTITY (reference)  (ref count: 3)
               <(ID: 19) LOCAL (reference)   1>
            <(ID: 13) PARAMETER (32-bit field) 
               <(ID: 9) IDENTITY (32-bit field)  (ref count: 2)
               <(ID: 12) NULL_PARAMETER (NONE) 
         <(ID: 16) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 15) GET_VTBL (NONE) 
               <(ID: 6) IDENTITY (reference)  (ref count: 3)
            <(ID: 11) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 12)

   <(ID: 22) IDENTITY (reference)  (ref count: 4)
      <(ID: 31) FETCH (reference) 
         <(ID: 21) FIELD_REF (reference) 
            <(ID: 6) IDENTITY (reference)  (ref count: 3)
            <(ID: 20) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 25) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 32) FETCH (32-bit field) 
         <(ID: 24) FIELD_REF (32-bit field) 
            <(ID: 5) IDENTITY (reference)  (ref count: 5)
            <(ID: 23) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 30) ASSIGN (byte) 
      <(ID: 29) INDEX (int) 
         <(ID: 22) IDENTITY (reference)  (ref count: 4)
         <(ID: 28) BOUNDS_CHECK (int) 
            <(ID: 25) IDENTITY (32-bit field)  (ref count: 2)
            <(ID: 27) IDENTITY (int)  (ref count: 2)
               <(ID: 40) ARRAY_LENGTH (int) 
                  <(ID: 22) IDENTITY (reference)  (ref count: 4)
      <(ID: 26) CONST_JAVA_NUMERIC32 (int)  (99)

   <(ID: 35) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 39) FETCH (32-bit field) 
         <(ID: 34) FIELD_REF (32-bit field) 
            <(ID: 5) IDENTITY (reference)  (ref count: 5)
            <(ID: 33) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 38) ASSIGN (byte) 
      <(ID: 37) INDEX (int) 
         <(ID: 22) IDENTITY (reference)  (ref count: 4)
         <(ID: 36) BOUNDS_CHECK (int) 
            <(ID: 35) IDENTITY (32-bit field)  (ref count: 2)
            <(ID: 27) IDENTITY (int)  (ref count: 2)
      <(ID: 17) IDENTITY (int)  (ref count: 4)

   <(ID: 44) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 43) LOCAL (reference)   4>
      <(ID: 5) IDENTITY (reference)  (ref count: 5)

   <(ID: 46) ASSIGN (int)  (assignIdx: 1)
      <(ID: 45) LOCAL (int)   5>
      <(ID: 17) IDENTITY (int)  (ref count: 4)

   <(ID: 42) LOOKUPSWITCH (NONE) 
   Key:
      <(ID: 17) IDENTITY (int)  (ref count: 4)
   default target: (BlockID: 1 BlockPC: 286)
   	nElements: 4
   	lookupList blocks:
      match 0: (BlockID: 2 BlockPC: 84)
      match 5: (BlockID: 3 BlockPC: 108)
      match 6: (BlockID: 4 BlockPC: 188)
      match 11: (BlockID: 5 BlockPC: 213)


*************************************************
*
* (block ID:2 block PC:84 )
* IR root list contains 6 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.applyMove(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/Move;I)Lcom/sun/mep/bench/Chess/GameState;(CompMover.java:205)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<84>  (0x94d558):    aload 4
<86>  (0x94d55a):    getfield_quick #3
<89>  (0x94d55d):    bipush 8
<91>  (0x94d55f):    if_icmpge <286>
<94>  (0x94d562):    aload_1 
<95>  (0x94d563):    getfield #55 <com.sun.mep.bench.Chess.GameState.typeAtSquare:[B>
<98>  (0x94d566):    aload 4
<100>  (0x94d568):    getfield #16 <com.sun.mep.bench.Chess.Point.y:I>
<103>  (0x94d56b):    iconst_4 
<104>  (0x94d56c):    bastore 
<105>  (0x94d56d):    goto <286>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 4 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(1) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 50) MAP_PC (NONE)   84>

   <(ID: 54) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 57) FETCH (32-bit field) 
         <(ID: 53) FIELD_REF (32-bit field) 
            <(ID: 51) LOCAL (reference)   4>
            <(ID: 52) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 56) BCOND (int) 
   target: (BlockID: 1 BlockPC: 286)
   condition: GE
   flags: 0
      <(ID: 54) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 55) CONST_JAVA_NUMERIC32 (int)  (8)


   <(ID: 61) IDENTITY (reference)  (ref count: 3)
      <(ID: 67) FETCH (reference) 
         <(ID: 60) FIELD_REF (reference) 
            <(ID: 58) LOCAL (reference)   1>
            <(ID: 59) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 66) ASSIGN (byte) 
      <(ID: 65) INDEX (int) 
         <(ID: 61) IDENTITY (reference)  (ref count: 3)
         <(ID: 64) BOUNDS_CHECK (int) 
            <(ID: 54) IDENTITY (32-bit field)  (ref count: 3)
            <(ID: 63) ARRAY_LENGTH (int) 
               <(ID: 61) IDENTITY (reference)  (ref count: 3)
      <(ID: 62) CONST_JAVA_NUMERIC32 (int)  (4)

   <(ID: 68) GOTO (NONE) 
   target: (BlockID: 1 BlockPC: 286)


*************************************************
*
* (block ID:3 block PC:108 )
* IR root list contains 9 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.applyMove(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/Move;I)Lcom/sun/mep/bench/Chess/GameState;(CompMover.java:212)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<108>  (0x94d570):    aload 4
<110>  (0x94d572):    getfield #16 <com.sun.mep.bench.Chess.Point.y:I>
<113>  (0x94d575):    bipush 62
<115>  (0x94d577):    if_icmpne <148>
<118>  (0x94d57a):    aload 4
<120>  (0x94d57c):    getfield #15 <com.sun.mep.bench.Chess.Point.x:I>
<123>  (0x94d57f):    bipush 60
<125>  (0x94d581):    if_icmpne <148>
<128>  (0x94d584):    aload_1 
<129>  (0x94d585):    getfield #55 <com.sun.mep.bench.Chess.GameState.typeAtSquare:[B>
<132>  (0x94d588):    bipush 63
<134>  (0x94d58a):    bipush 99
<136>  (0x94d58c):    bastore 
<137>  (0x94d58d):    aload_1 
<138>  (0x94d58e):    getfield #55 <com.sun.mep.bench.Chess.GameState.typeAtSquare:[B>
<141>  (0x94d591):    bipush 61
<143>  (0x94d593):    iconst_3 
<144>  (0x94d594):    bastore 
<145>  (0x94d595):    goto <286>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 4 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(2): 
	ID(6) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals(4 1)
	ID(1) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 69) MAP_PC (NONE)   108>

   <(ID: 73) IDENTITY (int)  (ref count: 2)
      <(ID: 76) FETCH (int) 
         <(ID: 72) FIELD_REF (int) 
            <(ID: 70) IDENTITY (reference)  (ref count: 2)
               <(ID: 80) LOCAL (reference)   4>
            <(ID: 71) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 75) BCOND (int) 
   target: (BlockID: 6 BlockPC: 148)
   condition: NE
   flags: 0
      <(ID: 73) IDENTITY (int)  (ref count: 2)
      <(ID: 74) CONST_JAVA_NUMERIC32 (int)  (62)


   <(ID: 79) IDENTITY (int)  (ref count: 2)
      <(ID: 83) FETCH (int) 
         <(ID: 78) FIELD_REF (int) 
            <(ID: 70) IDENTITY (reference)  (ref count: 2)
            <(ID: 77) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 82) BCOND (int) 
   target: (BlockID: 6 BlockPC: 148)
   condition: NE
   flags: 0
      <(ID: 79) IDENTITY (int)  (ref count: 2)
      <(ID: 81) CONST_JAVA_NUMERIC32 (int)  (60)


   <(ID: 87) IDENTITY (reference)  (ref count: 4)
      <(ID: 94) FETCH (reference) 
         <(ID: 86) FIELD_REF (reference) 
            <(ID: 84) LOCAL (reference)   1>
            <(ID: 85) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 93) ASSIGN (byte) 
      <(ID: 92) INDEX (int) 
         <(ID: 87) IDENTITY (reference)  (ref count: 4)
         <(ID: 91) BOUNDS_CHECK (int) 
            <(ID: 88) CONST_JAVA_NUMERIC32 (int)  (63)
            <(ID: 90) IDENTITY (int)  (ref count: 2)
               <(ID: 100) ARRAY_LENGTH (int) 
                  <(ID: 87) IDENTITY (reference)  (ref count: 4)
      <(ID: 89) CONST_JAVA_NUMERIC32 (int)  (99)

   <(ID: 99) ASSIGN (byte) 
      <(ID: 98) INDEX (int) 
         <(ID: 87) IDENTITY (reference)  (ref count: 4)
         <(ID: 97) BOUNDS_CHECK (int) 
            <(ID: 95) CONST_JAVA_NUMERIC32 (int)  (61)
            <(ID: 90) IDENTITY (int)  (ref count: 2)
      <(ID: 96) CONST_JAVA_NUMERIC32 (int)  (3)

   <(ID: 101) GOTO (NONE) 
   target: (BlockID: 1 BlockPC: 286)


*************************************************
*
* (block ID:6 block PC:148 )
* IR root list contains 9 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.CompMover.applyMove(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/Move;I)Lcom/sun/mep/bench/Chess/GameState;(CompMover.java:217)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<148>  (0x94d598):    aload 4
<150>  (0x94d59a):    getfield #16 <com.sun.mep.bench.Chess.Point.y:I>
<153>  (0x94d59d):    bipush 58
<155>  (0x94d59f):    if_icmpne <286>
<158>  (0x94d5a2):    aload 4
<160>  (0x94d5a4):    getfield #15 <com.sun.mep.bench.Chess.Point.x:I>
<163>  (0x94d5a7):    bipush 60
<165>  (0x94d5a9):    if_icmpne <286>
<168>  (0x94d5ac):    aload_1 
<169>  (0x94d5ad):    getfield #55 <com.sun.mep.bench.Chess.GameState.typeAtSquare:[B>
<172>  (0x94d5b0):    bipush 56
<174>  (0x94d5b2):    bipush 99
<176>  (0x94d5b4):    bastore 
<177>  (0x94d5b5):    aload_1 
<178>  (0x94d5b6):    getfield #55 <com.sun.mep.bench.Chess.GameState.typeAtSquare:[B>
<181>  (0x94d5b9):    bipush 59
<183>  (0x94d5bb):    iconst_3 
<184>  (0x94d5bc):    bastore 
<185>  (0x94d5bd):    goto <286>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 4 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(4)	ID(155)
 	local(1)	ID(169)
 
Incoming Locals(2): 
	local(4)	ID(155)
 	local(1)	ID(169)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 154) MAP_PC (NONE)   148>

   <(ID: 158) IDENTITY (int)  (ref count: 2)
      <(ID: 161) FETCH (int) 
         <(ID: 157) FIELD_REF (int) 
            <(ID: 155) IDENTITY (reference)  (ref count: 2)
               <(ID: 165) LOCAL (reference)   4>
            <(ID: 156) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 160) BCOND (int) 
   target: (BlockID: 1 BlockPC: 286)
   condition: NE
   flags: 0
      <(ID: 158) IDENTITY (int)  (ref count: 2)
      <(ID: 159) CONST_JAVA_NUMERIC32 (int)  (58)


   <(ID: 164) IDENTITY (int)  (ref count: 2)
      <(ID: 168) FETCH (int) 
         <(ID: 163) FIELD_REF (int) 
            <(ID: 155) IDENTITY (reference)  (ref count: 2)
            <(ID: 162) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 167) BCOND (int) 
   target: (BlockID: 1 BlockPC: 286)
   condition: NE
   flags: 0
      <(ID: 164) IDENTITY (int)  (ref count: 2)
      <(ID: 166) CONST_JAVA_NUMERIC32 (int)  (60)


   <(ID: 172) IDENTITY (reference)  (ref count: 4)
      <(ID: 179) FETCH (reference) 
         <(ID: 171) FIELD_REF (reference) 
            <(ID: 169) LOCAL (reference)   1>
            <(ID: 170) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 178) ASSIGN (byte) 
      <(ID: 177) INDEX (int) 
         <(ID: 172) IDENTITY (reference)  (ref count: 4)
         <(ID: 176) BOUNDS_CHECK (int) 
            <(ID: 173) CONST_JAVA_NUMERIC32 (int)  (56)
            <(ID: 175) IDENTITY (int)  (ref count: 2)
               <(ID: 185) ARRAY_LENGTH (int) 
                  <(ID: 172) IDENTITY (reference)  (ref count: 4)
      <(ID: 174) CONST_JAVA_NUMERIC32 (int)  (99)

   <(ID: 184) ASSIGN (byte) 
      <(ID: 183) INDEX (int) 
         <(ID: 172) IDENTITY (reference)  (ref count: 4)
         <(ID: 182) BOUNDS_CHECK (int) 
            <(ID: 180) CONST_JAVA_NUMERIC32 (int)  (59)
            <(ID: 175) IDENTITY (int)  (ref count: 2)
      <(ID: 181) CONST_JAVA_NUMERIC32 (int)  (3)

   <(ID: 186) GOTO (NONE) 
   target: (BlockID: 1 BlockPC: 286)


*************************************************
*
* (block ID:4 block PC:188 )
* IR root list contains 6 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.applyMove(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/Move;I)Lcom/sun/mep/bench/Chess/GameState;(CompMover.java:225)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<188>  (0x94d5c0):    aload 4
<190>  (0x94d5c2):    getfield_quick #3
<193>  (0x94d5c5):    bipush 55
<195>  (0x94d5c7):    if_icmple <286>
<198>  (0x94d5ca):    aload_1 
<199>  (0x94d5cb):    getfield #55 <com.sun.mep.bench.Chess.GameState.typeAtSquare:[B>
<202>  (0x94d5ce):    aload 4
<204>  (0x94d5d0):    getfield #16 <com.sun.mep.bench.Chess.Point.y:I>
<207>  (0x94d5d3):    bipush 10
<209>  (0x94d5d5):    bastore 
<210>  (0x94d5d6):    goto <286>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 4 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(1) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 102) MAP_PC (NONE)   188>

   <(ID: 106) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 109) FETCH (32-bit field) 
         <(ID: 105) FIELD_REF (32-bit field) 
            <(ID: 103) LOCAL (reference)   4>
            <(ID: 104) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 108) BCOND (int) 
   target: (BlockID: 1 BlockPC: 286)
   condition: LE
   flags: 0
      <(ID: 106) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 107) CONST_JAVA_NUMERIC32 (int)  (55)


   <(ID: 113) IDENTITY (reference)  (ref count: 3)
      <(ID: 119) FETCH (reference) 
         <(ID: 112) FIELD_REF (reference) 
            <(ID: 110) LOCAL (reference)   1>
            <(ID: 111) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 118) ASSIGN (byte) 
      <(ID: 117) INDEX (int) 
         <(ID: 113) IDENTITY (reference)  (ref count: 3)
         <(ID: 116) BOUNDS_CHECK (int) 
            <(ID: 106) IDENTITY (32-bit field)  (ref count: 3)
            <(ID: 115) ARRAY_LENGTH (int) 
               <(ID: 113) IDENTITY (reference)  (ref count: 3)
      <(ID: 114) CONST_JAVA_NUMERIC32 (int)  (10)

   <(ID: 120) GOTO (NONE) 
   target: (BlockID: 1 BlockPC: 286)


*************************************************
*
* (block ID:5 block PC:213 )
* IR root list contains 9 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.applyMove(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/Move;I)Lcom/sun/mep/bench/Chess/GameState;(CompMover.java:232)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<213>  (0x94d5d9):    aload 4
<215>  (0x94d5db):    getfield #16 <com.sun.mep.bench.Chess.Point.y:I>
<218>  (0x94d5de):    bipush 6
<220>  (0x94d5e0):    if_icmpne <252>
<223>  (0x94d5e3):    aload 4
<225>  (0x94d5e5):    getfield #15 <com.sun.mep.bench.Chess.Point.x:I>
<228>  (0x94d5e8):    iconst_4 
<229>  (0x94d5e9):    if_icmpne <252>
<232>  (0x94d5ec):    aload_1 
<233>  (0x94d5ed):    getfield #55 <com.sun.mep.bench.Chess.GameState.typeAtSquare:[B>
<236>  (0x94d5f0):    bipush 7
<238>  (0x94d5f2):    bipush 99
<240>  (0x94d5f4):    bastore 
<241>  (0x94d5f5):    aload_1 
<242>  (0x94d5f6):    getfield #55 <com.sun.mep.bench.Chess.GameState.typeAtSquare:[B>
<245>  (0x94d5f9):    iconst_5 
<246>  (0x94d5fa):    bipush 9
<248>  (0x94d5fc):    bastore 
<249>  (0x94d5fd):    goto <286>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 4 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(2): 
	ID(7) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals(4 1)
	ID(1) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 121) MAP_PC (NONE)   213>

   <(ID: 125) IDENTITY (int)  (ref count: 2)
      <(ID: 128) FETCH (int) 
         <(ID: 124) FIELD_REF (int) 
            <(ID: 122) IDENTITY (reference)  (ref count: 2)
               <(ID: 132) LOCAL (reference)   4>
            <(ID: 123) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 127) BCOND (int) 
   target: (BlockID: 7 BlockPC: 252)
   condition: NE
   flags: 0
      <(ID: 125) IDENTITY (int)  (ref count: 2)
      <(ID: 126) CONST_JAVA_NUMERIC32 (int)  (6)


   <(ID: 131) IDENTITY (int)  (ref count: 2)
      <(ID: 135) FETCH (int) 
         <(ID: 130) FIELD_REF (int) 
            <(ID: 122) IDENTITY (reference)  (ref count: 2)
            <(ID: 129) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 134) BCOND (int) 
   target: (BlockID: 7 BlockPC: 252)
   condition: NE
   flags: 0
      <(ID: 131) IDENTITY (int)  (ref count: 2)
      <(ID: 133) CONST_JAVA_NUMERIC32 (int)  (4)


   <(ID: 139) IDENTITY (reference)  (ref count: 4)
      <(ID: 146) FETCH (reference) 
         <(ID: 138) FIELD_REF (reference) 
            <(ID: 136) LOCAL (reference)   1>
            <(ID: 137) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 145) ASSIGN (byte) 
      <(ID: 144) INDEX (int) 
         <(ID: 139) IDENTITY (reference)  (ref count: 4)
         <(ID: 143) BOUNDS_CHECK (int) 
            <(ID: 140) CONST_JAVA_NUMERIC32 (int)  (7)
            <(ID: 142) IDENTITY (int)  (ref count: 2)
               <(ID: 152) ARRAY_LENGTH (int) 
                  <(ID: 139) IDENTITY (reference)  (ref count: 4)
      <(ID: 141) CONST_JAVA_NUMERIC32 (int)  (99)

   <(ID: 151) ASSIGN (byte) 
      <(ID: 150) INDEX (int) 
         <(ID: 139) IDENTITY (reference)  (ref count: 4)
         <(ID: 149) BOUNDS_CHECK (int) 
            <(ID: 147) CONST_JAVA_NUMERIC32 (int)  (5)
            <(ID: 142) IDENTITY (int)  (ref count: 2)
      <(ID: 148) CONST_JAVA_NUMERIC32 (int)  (9)

   <(ID: 153) GOTO (NONE) 
   target: (BlockID: 1 BlockPC: 286)


*************************************************
*
* (block ID:7 block PC:252 )
* IR root list contains 8 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.CompMover.applyMove(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/Move;I)Lcom/sun/mep/bench/Chess/GameState;(CompMover.java:237)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<252>  (0x94d600):    aload 4
<254>  (0x94d602):    getfield #16 <com.sun.mep.bench.Chess.Point.y:I>
<257>  (0x94d605):    iconst_2 
<258>  (0x94d606):    if_icmpne <286>
<261>  (0x94d609):    aload 4
<263>  (0x94d60b):    getfield #15 <com.sun.mep.bench.Chess.Point.x:I>
<266>  (0x94d60e):    iconst_4 
<267>  (0x94d60f):    if_icmpne <286>
<270>  (0x94d612):    aload_1 
<271>  (0x94d613):    getfield #55 <com.sun.mep.bench.Chess.GameState.typeAtSquare:[B>
<274>  (0x94d616):    iconst_0 
<275>  (0x94d617):    bipush 99
<277>  (0x94d619):    bastore 
<278>  (0x94d61a):    aload_1 
<279>  (0x94d61b):    getfield #55 <com.sun.mep.bench.Chess.GameState.typeAtSquare:[B>
<282>  (0x94d61e):    iconst_3 
<283>  (0x94d61f):    bipush 9
<285>  (0x94d621):    bastore 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 4 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(4)	ID(188)
 	local(1)	ID(202)
 
Incoming Locals(2): 
	local(4)	ID(188)
 	local(1)	ID(202)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 187) MAP_PC (NONE)   252>

   <(ID: 191) IDENTITY (int)  (ref count: 2)
      <(ID: 194) FETCH (int) 
         <(ID: 190) FIELD_REF (int) 
            <(ID: 188) IDENTITY (reference)  (ref count: 2)
               <(ID: 198) LOCAL (reference)   4>
            <(ID: 189) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 193) BCOND (int) 
   target: (BlockID: 1 BlockPC: 286)
   condition: NE
   flags: 0
      <(ID: 191) IDENTITY (int)  (ref count: 2)
      <(ID: 192) CONST_JAVA_NUMERIC32 (int)  (2)


   <(ID: 197) IDENTITY (int)  (ref count: 2)
      <(ID: 201) FETCH (int) 
         <(ID: 196) FIELD_REF (int) 
            <(ID: 188) IDENTITY (reference)  (ref count: 2)
            <(ID: 195) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 200) BCOND (int) 
   target: (BlockID: 1 BlockPC: 286)
   condition: NE
   flags: 0
      <(ID: 197) IDENTITY (int)  (ref count: 2)
      <(ID: 199) CONST_JAVA_NUMERIC32 (int)  (4)


   <(ID: 205) IDENTITY (reference)  (ref count: 4)
      <(ID: 212) FETCH (reference) 
         <(ID: 204) FIELD_REF (reference) 
            <(ID: 202) LOCAL (reference)   1>
            <(ID: 203) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 211) ASSIGN (byte) 
      <(ID: 210) INDEX (int) 
         <(ID: 205) IDENTITY (reference)  (ref count: 4)
         <(ID: 209) BOUNDS_CHECK (int) 
            <(ID: 206) CONST_JAVA_NUMERIC32 (int)  (0)
            <(ID: 208) IDENTITY (int)  (ref count: 2)
               <(ID: 218) ARRAY_LENGTH (int) 
                  <(ID: 205) IDENTITY (reference)  (ref count: 4)
      <(ID: 207) CONST_JAVA_NUMERIC32 (int)  (99)

   <(ID: 217) ASSIGN (byte) 
      <(ID: 216) INDEX (int) 
         <(ID: 205) IDENTITY (reference)  (ref count: 4)
         <(ID: 215) BOUNDS_CHECK (int) 
            <(ID: 213) CONST_JAVA_NUMERIC32 (int)  (3)
            <(ID: 208) IDENTITY (int)  (ref count: 2)
      <(ID: 214) CONST_JAVA_NUMERIC32 (int)  (9)


*************************************************
*
* (block ID:1 block PC:286 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.applyMove(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/Move;I)Lcom/sun/mep/bench/Chess/GameState;(CompMover.java:245)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<286>  (0x94d622):    aload_1 
<287>  (0x94d623):    areturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 4 
*************************************************

Number and size of USED nodes in phi array: 0 0

   <(ID: 47) MAP_PC (NONE)   286>

   <(ID: 49) RETURN_VALUE (reference) 
      <(ID: 48) LOCAL (reference)   1>


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 116
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 1736
ESTIMATED BUFFER SIZE = 1984
CODE BUFFER ADDRESS = 0x2bcbd374
PC MAP TABLE ADDRESS = 0x2bcbd37c
CODE ENTRY ADDRESS = 0x2bcbd3c0
          		@ Method prologue
0x2bcbd3c0	0:	addiu	a1, JSP, 52	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbd3c4	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbd3c8	8:	sltu	t7, a1, CHUNKEND
0x2bcbd3cc	12:	bne	t7, zero, PC=0x2bcbd3c0	@ goto .skip
0x2bcbd3d0	16:	nop
0x2bcbd3d4	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbd3d8	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbd3cc) >>>>>>>>
0x2bcbd3cc	12:	bne	t7, zero, PC=0x2bcbd3dc	@ goto .skip
0x2bcbd3d0	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbd3dc) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbd3dc	28:	sw	JFP, 8(JSP)	@ Store curr JFP into new frame
0x2bcbd3e0	32:	addiu	JFP, JSP, 8	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbd3e4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbd3e8	40:	addiu	a3, zero, 0
0x2bcbd3ec	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbd3f0	48:	addiu	a3, zero, -1
0x2bcbd3f4	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbd3f8	56:	move	a0, EE
0x2bcbd3fc	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbd400	64:	lui	t9, hi16(0x65)
0x2bcbd404	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbd408	72:	jalr	t9
0x2bcbd40c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbd410	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbd414	84:	nop
0x2bcbd418	88:	nop
0x2bcbd41c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(2) reg(20)
0x2bcbd420	96:	lw	s4, -16(JFP)	@ Java local cell # 2
			@ Preloading incoming local(1) reg(21)
0x2bcbd424	100:	lw	s5, -20(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
          		@ Do getfield:
0x2bcbd428	104:	lw	s7, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbd42c	108:	lw	s6, 8(s7)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbd430	112:	sw	s5, 0(JSP)
0x2bcbd434	116:	sw	s6, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbd438	120:	lw	s6, 0(s5)	@ Get object.cb
0x2bcbd43c	124:	addiu	t7, zero, -4
0x2bcbd440	128:	and	s6, s6, t7
0x2bcbd444	132:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcbd448	136:	lw	a0, 48(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbd44c	140:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbd450	144:	sw	s7, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcbd454	148:	lw	s7, 0(a0)	@ call method through mb
0x2bcbd458	152:	jalr	s7
0x2bcbd45c	156:	nop
          		@ Captured a stackmap here.
0x2bcbd460	160:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbd464	164:	lw	s7, 0(JSP)
          		@ Do getfield:
0x2bcbd468	168:	lw	s5, -20(JFP)	@ Java local cell # 1
0x2bcbd46c	172:	lw	s6, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbd470	176:	lw	ra, 28(JFP)	@ Java temp cell # 0
0x2bcbd474	180:	lw	s4, 8(ra)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbd478	184:	lw	t9, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcbd47c	188:	sltu	t7, s4, t9
0x2bcbd480	192:	bne	t7, zero, PC=0x2bcbd47c	@ br .skip
0x2bcbd484	196:	nop
0x2bcbd488	200:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd48c	204:	nop
		.skip
--->Fixed instruction at 192(0x2bcbd480) to reference 208
          		@ Do store(arrayObj, index) (elem type=B):
0x2bcbd490	208:	addiu	t8, zero, 99	@ const 99
0x2bcbd494	212:	addu	t6, s6, s4
0x2bcbd498	216:	sb	t8, 12(t6)
          		@ Do getfield:
0x2bcbd49c	220:	lw	s4, 12(ra)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ deferred comparison: 
0x2bcbd4a0	224:	sltu	t7, s4, t9
0x2bcbd4a4	228:	bne	t7, zero, PC=0x2bcbd4a0	@ br .skip
0x2bcbd4a8	232:	nop
0x2bcbd4ac	236:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd4b0	240:	nop
		.skip
--->Fixed instruction at 228(0x2bcbd4a4) to reference 244
          		@ Do store(arrayObj, index) (elem type=B):
0x2bcbd4b4	244:	addu	t9, s6, s4
0x2bcbd4b8	248:	sb	s7, 12(t9)
0x2bcbd4bc	252:	sw	ra, -8(JFP)	@ Java local cell # 4
0x2bcbd4c0	256:	sw	s7, -4(JFP)	@ Java local cell # 5
          		@ lookupswitch
.match1 (low=0 index=1 high=3)
          		@ deferred comparison: 
0x2bcbd4c4	260:	sltiu	t7, s7, 5
0x2bcbd4c8	264:	bne	t7, zero, PC=0x2bcbd4c4
0x2bcbd4cc	268:	nop
---> Pushing #0 (low=0 index=0 high=0 prev=1)
          		@ deferred comparison: 
0x2bcbd4d0	272:	addiu	t7, zero, 5
0x2bcbd4d4	276:	beq	s7, t7, PC=0x2bcbd4d0	@ branch to block L3
0x2bcbd4d8	280:	nop
.match2 (low=2 index=2 high=3)
          		@ deferred comparison: 
0x2bcbd4dc	284:	addiu	t7, zero, 6
0x2bcbd4e0	288:	beq	s7, t7, PC=0x2bcbd4dc	@ branch to block L4
0x2bcbd4e4	292:	nop
.match3 (low=3 index=3 high=3)
          		@ deferred comparison: 
0x2bcbd4e8	296:	addiu	t7, zero, 11
0x2bcbd4ec	300:	beq	s7, t7, PC=0x2bcbd4e8	@ branch to block L5
0x2bcbd4f0	304:	nop
0x2bcbd4f4	308:	b	PC=0x2bcbd4f4	@ branch to block L1
0x2bcbd4f8	312:	nop
<--- Popping #0 (low=0 index=0 high=0 prev=1)
--->Fixed instruction at 264(0x2bcbd4c8) to reference 316
.match0 (low=0 index=0 high=0)
          		@ deferred comparison: 
0x2bcbd4fc	316:	beq	s7, zero, PC=0x2bcbd4fc	@ branch to block L2
0x2bcbd500	320:	nop
0x2bcbd504	324:	b	PC=0x2bcbd504	@ branch to block L1
0x2bcbd508	328:	nop
			@ Initial Temp REF set is 
	L2:	332:	@ entry point for branches
--->Fixed instruction at 316(0x2bcbd4fc) to reference 332
          		@ MAP_PC idepth=0 javaPc=84 compiledPc=332
0x2bcbd50c	332:	lw	ra, -8(JFP)	@ Java local cell # 4
          		@ Do getfield:
0x2bcbd510	336:	lw	s7, 12(ra)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ deferred comparison: 
0x2bcbd514	340:	sltiu	t7, s7, 8
0x2bcbd518	344:	beq	t7, zero, PC=0x2bcbd514	@ branch to block L1
0x2bcbd51c	348:	nop
0x2bcbd520	352:	lw	t9, -20(JFP)	@ Java local cell # 1
          		@ Do getfield:
0x2bcbd524	356:	lw	s6, 12(t9)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbd528	360:	lw	s5, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcbd52c	364:	sltu	t7, s7, s5
0x2bcbd530	368:	bne	t7, zero, PC=0x2bcbd52c	@ br .skip
0x2bcbd534	372:	nop
0x2bcbd538	376:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd53c	380:	nop
		.skip
--->Fixed instruction at 368(0x2bcbd530) to reference 384
          		@ Do store(arrayObj, index) (elem type=B):
0x2bcbd540	384:	addiu	s5, zero, 4	@ const 4
0x2bcbd544	388:	addu	s4, s6, s7
0x2bcbd548	392:	sb	s5, 12(s4)
0x2bcbd54c	396:	b	PC=0x2bcbd54c	@ branch to block L1
0x2bcbd550	400:	nop
			@ Initial Temp REF set is 
	L3:	404:	@ entry point for branches
--->Fixed instruction at 276(0x2bcbd4d4) to reference 404
          		@ MAP_PC idepth=0 javaPc=108 compiledPc=404
0x2bcbd554	404:	lw	ra, -8(JFP)	@ Java local cell # 4
          		@ Do getfield:
0x2bcbd558	408:	lw	s7, 12(ra)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(4) reg(20): in wrong register
0x2bcbd55c	412:	move	s4, ra
			@ Outgoing local(1) reg(21): not in register
0x2bcbd560	416:	lw	s5, -20(JFP)	@ Java local cell # 1
          		@ deferred comparison: 
0x2bcbd564	420:	addiu	t7, zero, 62
0x2bcbd568	424:	bne	s7, t7, PC=0x2bcbd564	@ branch to block L6
0x2bcbd56c	428:	nop
          		@ Do getfield:
0x2bcbd570	432:	lw	s7, 8(s4)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(4) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbd574	436:	addiu	t7, zero, 60
0x2bcbd578	440:	bne	s7, t7, PC=0x2bcbd574	@ branch to block L6
0x2bcbd57c	444:	nop
          		@ Do getfield:
0x2bcbd580	448:	lw	s7, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbd584	452:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcbd588	456:	addiu	t7, zero, 63
0x2bcbd58c	460:	sltu	t7, t7, s6
0x2bcbd590	464:	bne	t7, zero, PC=0x2bcbd588	@ br .skip
0x2bcbd594	468:	nop
0x2bcbd598	472:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd59c	476:	nop
		.skip
--->Fixed instruction at 464(0x2bcbd590) to reference 480
          		@ Do store(arrayObj, index) (elem type=B):
0x2bcbd5a0	480:	addiu	ra, zero, 99	@ const 99
0x2bcbd5a4	484:	sb	ra, 75(s7)
          		@ deferred comparison: 
0x2bcbd5a8	488:	addiu	t7, zero, 61
0x2bcbd5ac	492:	sltu	t7, t7, s6
0x2bcbd5b0	496:	bne	t7, zero, PC=0x2bcbd5a8	@ br .skip
0x2bcbd5b4	500:	nop
0x2bcbd5b8	504:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd5bc	508:	nop
		.skip
--->Fixed instruction at 496(0x2bcbd5b0) to reference 512
          		@ Do store(arrayObj, index) (elem type=B):
0x2bcbd5c0	512:	addiu	s6, zero, 3	@ const 3
0x2bcbd5c4	516:	sb	s6, 73(s7)
0x2bcbd5c8	520:	b	PC=0x2bcbd5c8	@ branch to block L1
0x2bcbd5cc	524:	nop
			@ Initial Temp REF set is 
	L6:	528:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
--->Fixed instruction at 440(0x2bcbd578) to reference 528
--->Fixed instruction at 424(0x2bcbd568) to reference 528
          		@ MAP_PC idepth=0 javaPc=148 compiledPc=528
          		@ Do getfield:
0x2bcbd5d0	528:	lw	s7, 12(s4)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ deferred comparison: 
0x2bcbd5d4	532:	addiu	t7, zero, 58
0x2bcbd5d8	536:	bne	s7, t7, PC=0x2bcbd5d4	@ branch to block L1
0x2bcbd5dc	540:	nop
          		@ Do getfield:
0x2bcbd5e0	544:	lw	s7, 8(s4)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ deferred comparison: 
0x2bcbd5e4	548:	addiu	t7, zero, 60
0x2bcbd5e8	552:	bne	s7, t7, PC=0x2bcbd5e4	@ branch to block L1
0x2bcbd5ec	556:	nop
          		@ Do getfield:
0x2bcbd5f0	560:	lw	s7, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbd5f4	564:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcbd5f8	568:	addiu	t7, zero, 56
0x2bcbd5fc	572:	sltu	t7, t7, s6
0x2bcbd600	576:	bne	t7, zero, PC=0x2bcbd5f8	@ br .skip
0x2bcbd604	580:	nop
0x2bcbd608	584:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd60c	588:	nop
		.skip
--->Fixed instruction at 576(0x2bcbd600) to reference 592
          		@ Do store(arrayObj, index) (elem type=B):
0x2bcbd610	592:	addiu	ra, zero, 99	@ const 99
0x2bcbd614	596:	sb	ra, 68(s7)
          		@ deferred comparison: 
0x2bcbd618	600:	addiu	t7, zero, 59
0x2bcbd61c	604:	sltu	t7, t7, s6
0x2bcbd620	608:	bne	t7, zero, PC=0x2bcbd618	@ br .skip
0x2bcbd624	612:	nop
0x2bcbd628	616:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd62c	620:	nop
		.skip
--->Fixed instruction at 608(0x2bcbd620) to reference 624
          		@ Do store(arrayObj, index) (elem type=B):
0x2bcbd630	624:	addiu	s6, zero, 3	@ const 3
0x2bcbd634	628:	sb	s6, 71(s7)
0x2bcbd638	632:	b	PC=0x2bcbd638	@ branch to block L1
0x2bcbd63c	636:	nop
			@ Initial Temp REF set is 
	L4:	640:	@ entry point for branches
--->Fixed instruction at 288(0x2bcbd4e0) to reference 640
          		@ MAP_PC idepth=0 javaPc=188 compiledPc=640
0x2bcbd640	640:	lw	ra, -8(JFP)	@ Java local cell # 4
          		@ Do getfield:
0x2bcbd644	644:	lw	s7, 12(ra)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ deferred comparison: 
0x2bcbd648	648:	addiu	t7, zero, 55
0x2bcbd64c	652:	slt	t7, t7, s7
0x2bcbd650	656:	beq	t7, zero, PC=0x2bcbd648	@ branch to block L1
0x2bcbd654	660:	nop
0x2bcbd658	664:	lw	t9, -20(JFP)	@ Java local cell # 1
          		@ Do getfield:
0x2bcbd65c	668:	lw	s6, 12(t9)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbd660	672:	lw	s5, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcbd664	676:	sltu	t7, s7, s5
0x2bcbd668	680:	bne	t7, zero, PC=0x2bcbd664	@ br .skip
0x2bcbd66c	684:	nop
0x2bcbd670	688:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd674	692:	nop
		.skip
--->Fixed instruction at 680(0x2bcbd668) to reference 696
          		@ Do store(arrayObj, index) (elem type=B):
0x2bcbd678	696:	addiu	s5, zero, 10	@ const 10
0x2bcbd67c	700:	addu	s4, s6, s7
0x2bcbd680	704:	sb	s5, 12(s4)
0x2bcbd684	708:	b	PC=0x2bcbd684	@ branch to block L1
0x2bcbd688	712:	nop
			@ Initial Temp REF set is 
	L5:	716:	@ entry point for branches
--->Fixed instruction at 300(0x2bcbd4ec) to reference 716
          		@ MAP_PC idepth=0 javaPc=213 compiledPc=716
0x2bcbd68c	716:	lw	ra, -8(JFP)	@ Java local cell # 4
          		@ Do getfield:
0x2bcbd690	720:	lw	s7, 12(ra)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(4) reg(20): in wrong register
0x2bcbd694	724:	move	s4, ra
			@ Outgoing local(1) reg(21): not in register
0x2bcbd698	728:	lw	s5, -20(JFP)	@ Java local cell # 1
          		@ deferred comparison: 
0x2bcbd69c	732:	addiu	t7, zero, 6
0x2bcbd6a0	736:	bne	s7, t7, PC=0x2bcbd69c	@ branch to block L7
0x2bcbd6a4	740:	nop
          		@ Do getfield:
0x2bcbd6a8	744:	lw	s7, 8(s4)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(4) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbd6ac	748:	addiu	t7, zero, 4
0x2bcbd6b0	752:	bne	s7, t7, PC=0x2bcbd6ac	@ branch to block L7
0x2bcbd6b4	756:	nop
          		@ Do getfield:
0x2bcbd6b8	760:	lw	s7, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbd6bc	764:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcbd6c0	768:	addiu	t7, zero, 7
0x2bcbd6c4	772:	sltu	t7, t7, s6
0x2bcbd6c8	776:	bne	t7, zero, PC=0x2bcbd6c0	@ br .skip
0x2bcbd6cc	780:	nop
0x2bcbd6d0	784:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd6d4	788:	nop
		.skip
--->Fixed instruction at 776(0x2bcbd6c8) to reference 792
          		@ Do store(arrayObj, index) (elem type=B):
0x2bcbd6d8	792:	addiu	ra, zero, 99	@ const 99
0x2bcbd6dc	796:	sb	ra, 19(s7)
          		@ deferred comparison: 
0x2bcbd6e0	800:	addiu	t7, zero, 5
0x2bcbd6e4	804:	sltu	t7, t7, s6
0x2bcbd6e8	808:	bne	t7, zero, PC=0x2bcbd6e0	@ br .skip
0x2bcbd6ec	812:	nop
0x2bcbd6f0	816:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd6f4	820:	nop
		.skip
--->Fixed instruction at 808(0x2bcbd6e8) to reference 824
          		@ Do store(arrayObj, index) (elem type=B):
0x2bcbd6f8	824:	addiu	s6, zero, 9	@ const 9
0x2bcbd6fc	828:	sb	s6, 17(s7)
0x2bcbd700	832:	b	PC=0x2bcbd700	@ branch to block L1
0x2bcbd704	836:	nop
			@ Initial Temp REF set is 
	L7:	840:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
--->Fixed instruction at 752(0x2bcbd6b0) to reference 840
--->Fixed instruction at 736(0x2bcbd6a0) to reference 840
          		@ MAP_PC idepth=0 javaPc=252 compiledPc=840
          		@ Do getfield:
0x2bcbd708	840:	lw	s7, 12(s4)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ deferred comparison: 
0x2bcbd70c	844:	addiu	t7, zero, 2
0x2bcbd710	848:	bne	s7, t7, PC=0x2bcbd70c	@ branch to block L1
0x2bcbd714	852:	nop
          		@ Do getfield:
0x2bcbd718	856:	lw	s7, 8(s4)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ deferred comparison: 
0x2bcbd71c	860:	addiu	t7, zero, 4
0x2bcbd720	864:	bne	s7, t7, PC=0x2bcbd71c	@ branch to block L1
0x2bcbd724	868:	nop
          		@ Do getfield:
0x2bcbd728	872:	lw	s7, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbd72c	876:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcbd730	880:	sltu	t7, zero, s6
0x2bcbd734	884:	bne	t7, zero, PC=0x2bcbd730	@ br .skip
0x2bcbd738	888:	nop
0x2bcbd73c	892:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd740	896:	nop
		.skip
--->Fixed instruction at 884(0x2bcbd734) to reference 900
          		@ Do store(arrayObj, index) (elem type=B):
0x2bcbd744	900:	addiu	ra, zero, 99	@ const 99
0x2bcbd748	904:	sb	ra, 12(s7)
          		@ deferred comparison: 
0x2bcbd74c	908:	addiu	t7, zero, 3
0x2bcbd750	912:	sltu	t7, t7, s6
0x2bcbd754	916:	bne	t7, zero, PC=0x2bcbd74c	@ br .skip
0x2bcbd758	920:	nop
0x2bcbd75c	924:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd760	928:	nop
		.skip
--->Fixed instruction at 916(0x2bcbd754) to reference 932
          		@ Do store(arrayObj, index) (elem type=B):
0x2bcbd764	932:	addiu	s6, zero, 9	@ const 9
0x2bcbd768	936:	sb	s6, 15(s7)
			@ Initial Temp REF set is 
	L1:	940:	@ entry point for branches
--->Fixed instruction at 832(0x2bcbd700) to reference 940
--->Fixed instruction at 708(0x2bcbd684) to reference 940
--->Fixed instruction at 632(0x2bcbd638) to reference 940
--->Fixed instruction at 520(0x2bcbd5c8) to reference 940
--->Fixed instruction at 396(0x2bcbd54c) to reference 940
--->Fixed instruction at 324(0x2bcbd504) to reference 940
--->Fixed instruction at 308(0x2bcbd4f4) to reference 940
--->Fixed instruction at 864(0x2bcbd720) to reference 940
--->Fixed instruction at 848(0x2bcbd710) to reference 940
--->Fixed instruction at 656(0x2bcbd650) to reference 940
--->Fixed instruction at 552(0x2bcbd5e8) to reference 940
--->Fixed instruction at 536(0x2bcbd5d8) to reference 940
--->Fixed instruction at 344(0x2bcbd518) to reference 940
          		@ MAP_PC idepth=0 javaPc=286 compiledPc=940
0x2bcbd76c	940:	lw	ra, -20(JFP)	@ Java local cell # 1
0x2bcbd770	944:	sw	ra, -24(JFP)	@ Java local cell # 0
0x2bcbd774	948:	addiu	JSP, JFP, -20
0x2bcbd778	952:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbd77c	956:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbd780	960:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbd3c0) >>>>>>>>
          		@ Capacity is 18 word(s)
0x2bcbd3c0	0:	addiu	a1, JSP, 56
<<<<<<<<<Pop Code Buffer to PC = 964 (0x2bcbd784) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbd410) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcbd410	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcbd414	84:	lui	CP, hi16(0x2bcb)
0x2bcbd418	88:	ori	CP, CP, lo16(0x2bcbd784)
0x2bcbd41c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 964 (0x2bcbd784) <<<<<<<<<
JS: COMPILED: size=1056 startPC=0x2bcbd3c0 com.sun.mep.bench.Chess.CompMover.applyMove(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/Move;I)Lcom/sun/mep/bench/Chess/GameState;
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.GameState.getPieceType(I)B
JS: COMPILING com.sun.mep.bench.Chess.GameState.getPieceType(I)B
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 

#################################################

The maximum node counts per root node are 8
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 3 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.GameState.getPieceType(I)B(GameState.java:71)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x95369c):    aload_0 
<1>  (0x95369d):    agetfield_quick #3
<4>  (0x9536a0):    iload_1 
<5>  (0x9536a1):    baload 
<6>  (0x9536a2):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(6)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(6)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (reference)  (ref count: 3)
      <(ID: 12) FETCH (reference) 
         <(ID: 4) FIELD_REF (reference) 
            <(ID: 2) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 11) RETURN_VALUE (int) 
      <(ID: 10) FETCH (int) 
         <(ID: 9) INDEX (int) 
            <(ID: 5) IDENTITY (reference)  (ref count: 3)
            <(ID: 8) BOUNDS_CHECK (int) 
               <(ID: 6) LOCAL (int)   1>
               <(ID: 7) ARRAY_LENGTH (int) 
                  <(ID: 5) IDENTITY (reference)  (ref count: 3)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 8
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 50
ESTIMATED BUFFER SIZE = 164
CODE BUFFER ADDRESS = 0x2bcbd794
PC MAP TABLE ADDRESS = 0x2bcbd79c
CODE ENTRY ADDRESS = 0x2bcbd7c0
          		@ Method prologue
0x2bcbd7c0	0:	addiu	a1, JSP, 40	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbd7c4	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbd7c8	8:	sltu	t7, a1, CHUNKEND
0x2bcbd7cc	12:	bne	t7, zero, PC=0x2bcbd7c0	@ goto .skip
0x2bcbd7d0	16:	nop
0x2bcbd7d4	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbd7d8	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbd7cc) >>>>>>>>
0x2bcbd7cc	12:	bne	t7, zero, PC=0x2bcbd7dc	@ goto .skip
0x2bcbd7d0	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbd7dc) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbd7dc	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbd7e0	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbd7e4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbd7e8	40:	addiu	a3, zero, 0
0x2bcbd7ec	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbd7f0	48:	addiu	a3, zero, -1
0x2bcbd7f4	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbd7f8	56:	move	a0, EE
0x2bcbd7fc	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbd800	64:	lui	t9, hi16(0x65)
0x2bcbd804	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbd808	72:	jalr	t9
0x2bcbd80c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbd810	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbd814	84:	nop
0x2bcbd818	88:	nop
0x2bcbd81c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbd820	96:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbd824	100:	lw	s5, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
          		@ Do getfield:
0x2bcbd828	104:	lw	s7, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbd82c	108:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcbd830	112:	sltu	t7, s5, s6
0x2bcbd834	116:	bne	t7, zero, PC=0x2bcbd830	@ br .skip
0x2bcbd838	120:	nop
0x2bcbd83c	124:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbd840	128:	nop
		.skip
--->Fixed instruction at 116(0x2bcbd834) to reference 132
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbd844	132:	addu	ra, s7, s5
0x2bcbd848	136:	lb	s6, 12(ra)
0x2bcbd84c	140:	sw	s6, -8(JFP)	@ Java local cell # 0
0x2bcbd850	144:	addiu	JSP, JFP, -4
0x2bcbd854	148:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbd858	152:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbd85c	156:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbd7c0) >>>>>>>>
          		@ Capacity is 12 word(s)
0x2bcbd7c0	0:	addiu	a1, JSP, 40
<<<<<<<<<Pop Code Buffer to PC = 160 (0x2bcbd860) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbd810) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbd810	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbd814	84:	lui	CP, hi16(0x2bcb)
0x2bcbd818	88:	ori	CP, CP, lo16(0x2bcbd860)
0x2bcbd81c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 160 (0x2bcbd860) <<<<<<<<<
JS: COMPILED: size=208 startPC=0x2bcbd7c0 com.sun.mep.bench.Chess.GameState.getPieceType(I)B
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.BPossMoves.Store_Move(II)V
JS: COMPILING com.sun.mep.bench.Chess.BPossMoves.Store_Move(II)V
orig bkID(0) Incoming Locals(3 0x0): 0- 1- 2- 
orig bkID(0) Incoming Locals(3 0x0): 0- 1- 2- 

#################################################

The maximum node counts per root node are 6
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 6 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.BPossMoves.Store_Move(II)V(BPossMoves.java:241)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<0>  (0x94fa98):    aload_0 
<1>  (0x94fa99):    agetfield_quick #2
<4>  (0x94fa9c):    new_quick #22 <com.sun.mep.bench.Chess.Point>
<7>  (0x94fa9f):    dup 
<8>  (0x94faa0):    iload_1 
<9>  (0x94faa1):    iload_2 
<10>  (0x94faa2):    invokenonvirtual_quick #23 <com.sun.mep.bench.Chess.Point.<init>(II)V>
<13>  (0x94faa5):    invokevirtual_quick_w #24 <java.util.Vector.addElement(Ljava/lang/Object;)V>
<16>  (0x94faa8):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(3): 
	local(0)	ID(2)
 	local(1)	ID(8)
 	local(2)	ID(9)
 
Incoming Locals(3): 
	local(0)	ID(2)
 	local(1)	ID(8)
 	local(2)	ID(9)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (reference)  (ref count: 3)
      <(ID: 24) FETCH (reference) 
         <(ID: 4) FIELD_REF (reference) 
            <(ID: 2) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 7) IDENTITY (reference)  (ref count: 3)
      <(ID: 16) NEW_OBJECT (reference) 
         <(ID: 6) CONST_CB (address field)  (com.sun.mep.bench.Chess.Point)

   <(ID: 15) INVOKE (v) 
      <(ID: 14) PARAMETER (reference) 
         <(ID: 7) IDENTITY (reference)  (ref count: 3)
         <(ID: 13) PARAMETER (int) 
            <(ID: 8) LOCAL (int)   1>
            <(ID: 12) PARAMETER (int) 
               <(ID: 9) LOCAL (int)   2>
               <(ID: 11) NULL_PARAMETER (NONE) 
      <(ID: 10) CONST_MB (address field)  (com.sun.mep.bench.Chess.Point.<init>(II)V)

   <(ID: 23) INVOKE (v) 
      <(ID: 20) PARAMETER (reference) 
         <(ID: 5) IDENTITY (reference)  (ref count: 3)
         <(ID: 19) PARAMETER (reference) 
            <(ID: 7) IDENTITY (reference)  (ref count: 3)
            <(ID: 18) NULL_PARAMETER (NONE) 
      <(ID: 22) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 21) GET_VTBL (NONE) 
            <(ID: 5) IDENTITY (reference)  (ref count: 3)
         <(ID: 17) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 49)

   <(ID: 25) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 20
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 110
ESTIMATED BUFFER SIZE = 236
CODE BUFFER ADDRESS = 0x2bcbd864
PC MAP TABLE ADDRESS = 0x2bcbd86c
CODE ENTRY ADDRESS = 0x2bcbd890
          		@ Method prologue
0x2bcbd890	0:	addiu	a1, JSP, 52	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbd894	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbd898	8:	sltu	t7, a1, CHUNKEND
0x2bcbd89c	12:	bne	t7, zero, PC=0x2bcbd890	@ goto .skip
0x2bcbd8a0	16:	nop
0x2bcbd8a4	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbd8a8	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbd89c) >>>>>>>>
0x2bcbd89c	12:	bne	t7, zero, PC=0x2bcbd8ac	@ goto .skip
0x2bcbd8a0	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbd8ac) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbd8ac	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbd8b0	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbd8b4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbd8b8	40:	addiu	a3, zero, 0
0x2bcbd8bc	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbd8c0	48:	addiu	a3, zero, -1
0x2bcbd8c4	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbd8c8	56:	move	a0, EE
0x2bcbd8cc	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbd8d0	64:	lui	t9, hi16(0x65)
0x2bcbd8d4	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbd8d8	72:	jalr	t9
0x2bcbd8dc	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbd8e0	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbd8e4	84:	nop
0x2bcbd8e8	88:	nop
0x2bcbd8ec	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbd8f0	96:	lw	s4, -12(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbd8f4	100:	lw	s5, -8(JFP)	@ Java local cell # 1
			@ Preloading incoming local(2) reg(22)
0x2bcbd8f8	104:	lw	s6, -4(JFP)	@ Java local cell # 2
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=108
          		@ Do getfield:
0x2bcbd8fc	108:	lw	s7, 8(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbd900	112:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Point
          		@ Do new:
0x2bcbd904	116:	sw	s7, 28(JFP)	@ REF spill Java temp cell # 0
          		@ cb: com.sun.mep.bench.Chess.Point
0x2bcbd908	120:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcbd90c	124:	nop
          		@ Captured a stackmap here.
0x2bcbd910	128:	sw	v0, 0(JSP)
0x2bcbd914	132:	sw	s5, 4(JSP)
0x2bcbd918	136:	sw	s6, 8(JSP)
0x2bcbd91c	140:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Point.<init>(II)V
          		@ Invoke a method w/ a void return type
0x2bcbd920	144:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbd924	148:	sw	v0, 32(JFP)	@ REF spill Java temp cell # 1
0x2bcbd928	152:	lw	s7, 0(a0)	@ call method through mb
0x2bcbd92c	156:	jalr	s7
0x2bcbd930	160:	nop
          		@ Captured a stackmap here.
0x2bcbd934	164:	lw	s7, 28(JFP)	@ Java temp cell # 0
0x2bcbd938	168:	sw	s7, 0(JSP)
0x2bcbd93c	172:	lw	s6, 32(JFP)	@ Java temp cell # 1
0x2bcbd940	176:	sw	s6, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbd944	180:	lw	s6, 0(s7)	@ Get object.cb
0x2bcbd948	184:	addiu	t7, zero, -4
0x2bcbd94c	188:	and	s6, s6, t7
0x2bcbd950	192:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcbd954	196:	lw	a0, 196(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbd958	200:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbd95c	204:	lw	s7, 0(a0)	@ call method through mb
0x2bcbd960	208:	jalr	s7
0x2bcbd964	212:	nop
          		@ Captured a stackmap here.
0x2bcbd968	216:	addiu	JSP, JFP, -12
0x2bcbd96c	220:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbd970	224:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbd974	228:	nop
0x2bcbd978	232:	.word	9791768	@ mb com.sun.mep.bench.Chess.Point.<init>(II)V
--->Fixed instruction at 140(0x2bcbd91c) to reference 232
0x2bcbd97c	236:	.word	9791584	@ cb com.sun.mep.bench.Chess.Point
--->Fixed instruction at 112(0x2bcbd900) to reference 236
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbd890) >>>>>>>>
          		@ Capacity is 18 word(s)
0x2bcbd890	0:	addiu	a1, JSP, 60
<<<<<<<<<Pop Code Buffer to PC = 240 (0x2bcbd980) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbd8e0) >>>>>>>>
          		@ spillSize is 2 word(s), add to JFP+28
0x2bcbd8e0	80:	addiu	JSP, JFP, 36
          		@ setup cp base register
0x2bcbd8e4	84:	lui	CP, hi16(0x2bcb)
0x2bcbd8e8	88:	ori	CP, CP, lo16(0x2bcbd978)
0x2bcbd8ec	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 240 (0x2bcbd980) <<<<<<<<<
JS: COMPILED: size=312 startPC=0x2bcbd890 com.sun.mep.bench.Chess.BPossMoves.Store_Move(II)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
JS: COMPILING com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
orig bkID(2) Incoming Locals(4 0x0): 6- 0- 1- 5- 
o1   bkID(2) Incoming Locals(1 0x0): 6- 
o1   bkID(2) Incoming Locals(4 0x0): 6- 0- 1- 5- 
orig bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
o1   bkID(0) Incoming Locals(3 0x0): 1- 2- 3- 
o1   bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
s1   bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
s1   bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
o1   bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
orig bkID(2) Incoming Locals(4 0x0): 6- 0- 1- 5- 
o1   bkID(2) Incoming Locals(1 0x0): 6- 
o1   bkID(2) Incoming Locals(4 0x0): 6- 0- 1- 5- 
orig bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
o1   bkID(0) Incoming Locals(3 0x0): 1- 2- 3- 
o1   bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
s1   bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
s1   bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
o1   bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
bkID(2) local(0 #6)  not found in goalBk
bkID(2) local(1 #0)  not found in goalBk
bkID(2) local(2 #1)  not found in goalBk
bkID(2) local(3 #5)  not found in goalBk
bkID(0) local(0 #1)  not found in goalBk
bkID(0) local(1 #2)  not found in goalBk
bkID(0) local(2 #3)  not found in goalBk
bkID(0) local(3 #0)  not found in goalBk
bkID(0) local(0 #1)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(4 0x0): 1- 2- 3- 0- 
+bk  bkID(0) Incoming Locals(4 0x1): 1+ 2- 3- 0- 
-gbk bkID(2) Incoming Locals(4 0x0): 6- 0- 1- 5- 
+gbk bkID(2) Incoming Locals(4 0x1): 1+ 0- 6- 5- 
bkID(0) local(0 #1)  ordered in goalBk(2)
-bk  bkID(0) Incoming Locals(4 0x1): 1+ 2- 3- 0- 
dstBk(0) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(0) Incoming Locals(4 0x1): 1+ 2- 3- 0- 
 ordered in bk
-gbk bkID(2) Incoming Locals(4 0x1): 1+ 0- 6- 5- 
dstBk(2) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(2) Incoming Locals(4 0x1): 1+ 0- 6- 5- 
bkID(0) local(1 #2)  not found in goalBk
bkID(0) local(2 #3)  not found in goalBk
bkID(0) local(3 #0)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(4 0x1): 1+ 2- 3- 0- 
+bk  bkID(0) Incoming Locals(4 0x3): 1+ 0+ 3- 2- 
-gbk bkID(2) Incoming Locals(4 0x1): 1+ 0- 6- 5- 
+gbk bkID(2) Incoming Locals(4 0x3): 1+ 0+ 6- 5- 
bkID(0) local(3 #2)  not found in goalBk
bkID(2) local(0 #1)  not found in goalBk
bkID(2) local(1 #0)  not found in goalBk
bkID(2) local(2 #6)  not found in goalBk
bkID(2) local(3 #5)  not found in goalBk
pre  bkID(0) Incoming Locals(4 0x3): 1+ 0+ 3- 2- 
local(#2) swapped with local(#2)
post bkID(0) Incoming Locals(4 0x7): 1+ 0+ 3+ 2- 
pre2  bkID(2) Incoming Locals(4 0x3): 1+ 0+ 6- 5- 
local(#4) swapped with local(#2)
post2 bkID(2) Incoming Locals(5 0x7): 1+ 0+ <null> 5- 6- 
pre  bkID(0) Incoming Locals(4 0x7): 1+ 0+ 3+ 2- 
local(#3) swapped with local(#3)
post bkID(0) Incoming Locals(4 0xf): 1+ 0+ 3+ 2+ 
pre2  bkID(2) Incoming Locals(5 0x7): 1+ 0+ <null> 5- 6- 
local(#5) swapped with local(#3)
post2 bkID(2) Incoming Locals(6 0xf): 1+ 0+ <null> <null> 6- 5- 
pre  bkID(2) Incoming Locals(6 0xf): 1+ 0+ <null> <null> 6- 5- 
local(#4) swapped with local(#4)
post bkID(2) Incoming Locals(6 0x1f): 1+ 0+ <null> <null> 6+ 5- 
pre  bkID(2) Incoming Locals(6 0x1f): 1+ 0+ <null> <null> 6+ 5- 
local(#5) swapped with local(#5)
post bkID(2) Incoming Locals(6 0x3f): 1+ 0+ <null> <null> 6+ 5+ 

#################################################

The maximum node counts per root node are 7
IR block list contains 3 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 11 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0xf
* Source: com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I(BPossMoves.java:67)
* Compilation depth: 0 locals : 0 .. 6
* Byte-codes for block:
<0>  (0x94f600):    iload_1 
<1>  (0x94f601):    bipush 7
<3>  (0x94f603):    iand 
<4>  (0x94f604):    iload_2 
<5>  (0x94f605):    iadd 
<6>  (0x94f606):    istore 4
<8>  (0x94f608):    iload_1 
<9>  (0x94f609):    iload_2 
<10>  (0x94f60a):    iadd 
<11>  (0x94f60b):    iload_3 
<12>  (0x94f60c):    iadd 
<13>  (0x94f60d):    istore 5
<15>  (0x94f60f):    iload 4
<17>  (0x94f611):    bipush 248
<19>  (0x94f613):    iand 
<20>  (0x94f614):    iload 5
<22>  (0x94f616):    bipush 192
<24>  (0x94f618):    iand 
<25>  (0x94f619):    ior 
<26>  (0x94f61a):    ifne <72>
<29>  (0x94f61d):    aload_0 
<30>  (0x94f61e):    agetfield_quick #4
<33>  (0x94f621):    agetfield_quick #3
<36>  (0x94f624):    iload 5
<38>  (0x94f626):    baload 
<39>  (0x94f627):    istore 6
<41>  (0x94f629):    iload 6
<43>  (0x94f62b):    bipush 99
<45>  (0x94f62d):    if_icmpne <58>
<48>  (0x94f630):    aload_0 
<49>  (0x94f631):    iload_1 
<50>  (0x94f632):    iload 5
<52>  (0x94f634):    invokevirtual_quick_w #8 <com.sun.mep.bench.Chess.BPossMoves.Store_Move(II)V>
<55>  (0x94f637):    iload 5
<57>  (0x94f639):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(4): 
	local(1)	ID(2)
 	local(2)	ID(5)
 	local(3)	ID(8)
 	local(0)	ID(25)
 
Incoming Locals(4): 
	local(1)	ID(2)
 	local(0)	ID(25)
 	local(3)	ID(8)
 	local(2)	ID(5)
 
Assigned Locals(3): 
	ASSIGN(18): local(4)	ID(17)	rhsID(6)
 	ASSIGN(20): local(5)	ID(19)	rhsID(9)
 	ASSIGN(41): local(6)	ID(40)	rhsID(36)
 
Successor Blocks(2): 
	ID(1) LocalOrder(3) AssignOrder(2) RefsOK(1) Locals()
	ID(2) LocalOrder(4) AssignOrder(3) RefsOK(1) Locals(1 0 <null> <null> 6 5)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 18) ASSIGN (int)  (assignIdx: 0)
      <(ID: 17) LOCAL (int)   4>
      <(ID: 6) IDENTITY (int)  (ref count: 2)
         <(ID: 23) ADD (int) 
            <(ID: 4) AND (int) 
               <(ID: 2) IDENTITY (int)  (ref count: 3)
                  <(ID: 21) LOCAL (int)   1>
               <(ID: 3) CONST_JAVA_NUMERIC32 (int)  (7)
            <(ID: 5) IDENTITY (int)  (ref count: 2)
               <(ID: 22) LOCAL (int)   2>

   <(ID: 20) ASSIGN (int)  (assignIdx: 1)
      <(ID: 19) LOCAL (int)   5>
      <(ID: 9) IDENTITY (int)  (ref count: 5)
         <(ID: 24) ADD (int) 
            <(ID: 7) ADD (int) 
               <(ID: 2) IDENTITY (int)  (ref count: 3)
               <(ID: 5) IDENTITY (int)  (ref count: 2)
            <(ID: 8) LOCAL (int)   3>

   <(ID: 16) BCOND (int) 
   target: (BlockID: 1 BlockPC: 72)
   condition: NE
   flags: 0
      <(ID: 14) OR (int) 
         <(ID: 11) AND (int) 
            <(ID: 6) IDENTITY (int)  (ref count: 2)
            <(ID: 10) CONST_JAVA_NUMERIC32 (int)  (-8)
         <(ID: 13) AND (int) 
            <(ID: 9) IDENTITY (int)  (ref count: 5)
            <(ID: 12) CONST_JAVA_NUMERIC32 (int)  (-64)
      <(ID: 15) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 28) IDENTITY (reference)  (ref count: 2)
      <(ID: 32) FETCH (reference) 
         <(ID: 27) FIELD_REF (reference) 
            <(ID: 25) IDENTITY (reference)  (ref count: 3)
               <(ID: 51) LOCAL (reference)   0>
            <(ID: 26) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 31) IDENTITY (reference)  (ref count: 3)
      <(ID: 37) FETCH (reference) 
         <(ID: 30) FIELD_REF (reference) 
            <(ID: 28) IDENTITY (reference)  (ref count: 2)
            <(ID: 29) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 36) IDENTITY (int)  (ref count: 3)
      <(ID: 42) FETCH (int) 
         <(ID: 35) INDEX (int) 
            <(ID: 31) IDENTITY (reference)  (ref count: 3)
            <(ID: 34) BOUNDS_CHECK (int) 
               <(ID: 9) IDENTITY (int)  (ref count: 5)
               <(ID: 33) ARRAY_LENGTH (int) 
                  <(ID: 31) IDENTITY (reference)  (ref count: 3)

   <(ID: 41) ASSIGN (int)  (assignIdx: 2)
      <(ID: 40) LOCAL (int)   6>
      <(ID: 36) IDENTITY (int)  (ref count: 3)

   <(ID: 39) BCOND (int) 
   target: (BlockID: 2 BlockPC: 58)
   condition: NE
   flags: 0
      <(ID: 36) IDENTITY (int)  (ref count: 3)
      <(ID: 38) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 50) INVOKE (v) 
      <(ID: 47) PARAMETER (reference) 
         <(ID: 25) IDENTITY (reference)  (ref count: 3)
         <(ID: 46) PARAMETER (int) 
            <(ID: 2) IDENTITY (int)  (ref count: 3)
            <(ID: 45) PARAMETER (int) 
               <(ID: 9) IDENTITY (int)  (ref count: 5)
               <(ID: 44) NULL_PARAMETER (NONE) 
      <(ID: 49) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 48) GET_VTBL (NONE) 
            <(ID: 25) IDENTITY (reference)  (ref count: 3)
         <(ID: 43) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)

   <(ID: 52) RETURN_VALUE (int) 
      <(ID: 9) IDENTITY (int)  (ref count: 5)


*************************************************
*
* (block ID:2 block PC:58 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3f
* Source: com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I(BPossMoves.java:81)
* Compilation depth: 0 locals : 0 .. 6
* Byte-codes for block:
<58>  (0x94f63a):    iload 6
<60>  (0x94f63c):    bipush 6
<62>  (0x94f63e):    if_icmpge <72>
<65>  (0x94f641):    aload_0 
<66>  (0x94f642):    iload_1 
<67>  (0x94f643):    iload 5
<69>  (0x94f645):    invokevirtual #8 <com.sun.mep.bench.Chess.BPossMoves.Store_Move(II)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(4): 
	local(6)	ID(57)
 	local(0)	ID(60)
 	local(1)	ID(61)
 	local(5)	ID(62)
 
Incoming Locals(6): 
	local(1)	ID(61)
 	local(0)	ID(60)
 	<null>
	<null>
	local(6)	ID(57)
 	local(5)	ID(62)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 56) MAP_PC (NONE)   58>

   <(ID: 59) BCOND (int) 
   target: (BlockID: 1 BlockPC: 72)
   condition: GE
   flags: 0
      <(ID: 57) LOCAL (int)   6>
      <(ID: 58) CONST_JAVA_NUMERIC32 (int)  (6)


   <(ID: 70) INVOKE (v) 
      <(ID: 67) PARAMETER (reference) 
         <(ID: 60) IDENTITY (reference)  (ref count: 2)
            <(ID: 71) LOCAL (reference)   0>
         <(ID: 66) PARAMETER (int) 
            <(ID: 61) LOCAL (int)   1>
            <(ID: 65) PARAMETER (int) 
               <(ID: 62) LOCAL (int)   5>
               <(ID: 64) NULL_PARAMETER (NONE) 
      <(ID: 69) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 68) GET_VTBL (NONE) 
            <(ID: 60) IDENTITY (reference)  (ref count: 2)
         <(ID: 63) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)


*************************************************
*
* (block ID:1 block PC:72 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I(BPossMoves.java:86)
* Compilation depth: 0 locals : 0 .. 6
* Byte-codes for block:
<72>  (0x94f648):    iconst_m1 
<73>  (0x94f649):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

   <(ID: 53) MAP_PC (NONE)   72>

   <(ID: 55) RETURN_VALUE (int) 
      <(ID: 54) CONST_JAVA_NUMERIC32 (int)  (-1)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 48
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 452
ESTIMATED BUFFER SIZE = 612
CODE BUFFER ADDRESS = 0x2bcbd99c
PC MAP TABLE ADDRESS = 0x2bcbd9a4
CODE ENTRY ADDRESS = 0x2bcbd9d0
          		@ Method prologue
0x2bcbd9d0	0:	addiu	a1, JSP, 56	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbd9d4	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbd9d8	8:	sltu	t7, a1, CHUNKEND
0x2bcbd9dc	12:	bne	t7, zero, PC=0x2bcbd9d0	@ goto .skip
0x2bcbd9e0	16:	nop
0x2bcbd9e4	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbd9e8	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbd9dc) >>>>>>>>
0x2bcbd9dc	12:	bne	t7, zero, PC=0x2bcbd9ec	@ goto .skip
0x2bcbd9e0	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbd9ec) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbd9ec	28:	sw	JFP, 12(JSP)	@ Store curr JFP into new frame
0x2bcbd9f0	32:	addiu	JFP, JSP, 12	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbd9f4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbd9f8	40:	addiu	a3, zero, 0
0x2bcbd9fc	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbda00	48:	addiu	a3, zero, -1
0x2bcbda04	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbda08	56:	move	a0, EE
0x2bcbda0c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbda10	64:	lui	t9, hi16(0x65)
0x2bcbda14	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbda18	72:	jalr	t9
0x2bcbda1c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbda20	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbda24	84:	nop
0x2bcbda28	88:	nop
0x2bcbda2c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(1) reg(20)
0x2bcbda30	96:	lw	s4, -24(JFP)	@ Java local cell # 1
			@ Preloading incoming local(0) reg(21)
0x2bcbda34	100:	lw	s5, -28(JFP)	@ Java local cell # 0
			@ Preloading incoming local(3) reg(22)
0x2bcbda38	104:	lw	s6, -16(JFP)	@ Java local cell # 3
			@ Preloading incoming local(2) reg(23)
0x2bcbda3c	108:	lw	s7, -20(JFP)	@ Java local cell # 2
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=112
0x2bcbda40	112:	andi	ra, s4, 7
0x2bcbda44	116:	addu	t9, ra, s7
0x2bcbda48	120:	sw	t9, -12(JFP)	@ Java local cell # 4
0x2bcbda4c	124:	addu	ra, s4, s7
0x2bcbda50	128:	addu	t8, ra, s6
0x2bcbda54	132:	sw	t8, -8(JFP)	@ Java local cell # 5
0x2bcbda58	136:	addiu	ra, zero, -8	@ const -8
0x2bcbda5c	140:	and	t6, t9, ra
0x2bcbda60	144:	addiu	t5, zero, -64	@ const -64
0x2bcbda64	148:	and	t4, t8, t5
0x2bcbda68	152:	or	t3, t6, t4
          		@ deferred comparison: 
0x2bcbda6c	156:	bne	t3, zero, PC=0x2bcbda6c	@ branch to block L1
0x2bcbda70	160:	nop
          		@ Do getfield:
0x2bcbda74	164:	lw	t6, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbda78	168:	lw	t4, 12(t6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbda7c	172:	lw	t6, 8(t4)	@ arraylength
          		@ deferred comparison: 
0x2bcbda80	176:	sltu	t7, t8, t6
0x2bcbda84	180:	bne	t7, zero, PC=0x2bcbda80	@ br .skip
0x2bcbda88	184:	nop
0x2bcbda8c	188:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbda90	192:	nop
		.skip
--->Fixed instruction at 180(0x2bcbda84) to reference 196
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbda94	196:	addu	t3, t4, t8
0x2bcbda98	200:	lb	t6, 12(t3)
0x2bcbda9c	204:	sw	t6, -4(JFP)	@ Java local cell # 6
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbdaa0	208:	addiu	t7, zero, 99
0x2bcbdaa4	212:	bne	t6, t7, PC=0x2bcbdaa0	@ branch to block L2
0x2bcbdaa8	216:	nop
0x2bcbdaac	220:	sw	s5, 0(JSP)
0x2bcbdab0	224:	sw	s4, 4(JSP)
0x2bcbdab4	228:	sw	t8, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcbdab8	232:	lw	t4, 0(s5)	@ Get object.cb
0x2bcbdabc	236:	addiu	t7, zero, -4
0x2bcbdac0	240:	and	t4, t4, t7
0x2bcbdac4	244:	lw	t4, 76(t4)	@ Get cb.vtbl
0x2bcbdac8	248:	lw	a0, 68(t4)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbdacc	252:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbdad0	256:	lw	s7, 0(a0)	@ call method through mb
0x2bcbdad4	260:	jalr	s7
0x2bcbdad8	264:	nop
          		@ Captured a stackmap here.
0x2bcbdadc	268:	lw	s7, -8(JFP)	@ Java local cell # 5
0x2bcbdae0	272:	sw	s7, -28(JFP)	@ Java local cell # 0
0x2bcbdae4	276:	addiu	JSP, JFP, -24
0x2bcbdae8	280:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbdaec	284:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbdaf0	288:	nop
			@ Initial Temp REF set is 
	L2:	292:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 212(0x2bcbdaa4) to reference 292
          		@ MAP_PC idepth=0 javaPc=58 compiledPc=292
0x2bcbdaf4	292:	lw	ra, -4(JFP)	@ Java local cell # 6
          		@ deferred comparison: 
0x2bcbdaf8	296:	sltiu	t7, ra, 6
0x2bcbdafc	300:	beq	t7, zero, PC=0x2bcbdaf8	@ branch to block L1
0x2bcbdb00	304:	nop
0x2bcbdb04	308:	sw	s5, 0(JSP)
0x2bcbdb08	312:	sw	s4, 4(JSP)
0x2bcbdb0c	316:	lw	t9, -8(JFP)	@ Java local cell # 5
0x2bcbdb10	320:	sw	t9, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcbdb14	324:	lw	s7, 0(s5)	@ Get object.cb
0x2bcbdb18	328:	addiu	t7, zero, -4
0x2bcbdb1c	332:	and	s7, s7, t7
0x2bcbdb20	336:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbdb24	340:	lw	a0, 68(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbdb28	344:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbdb2c	348:	lw	s7, 0(a0)	@ call method through mb
0x2bcbdb30	352:	jalr	s7
0x2bcbdb34	356:	nop
          		@ Captured a stackmap here.
			@ Initial Temp REF set is 
	L1:	360:	@ entry point for branches
--->Fixed instruction at 300(0x2bcbdafc) to reference 360
--->Fixed instruction at 156(0x2bcbda6c) to reference 360
          		@ MAP_PC idepth=0 javaPc=72 compiledPc=360
0x2bcbdb38	360:	addiu	s7, zero, -1	@ const -1
0x2bcbdb3c	364:	sw	s7, -28(JFP)	@ Java local cell # 0
0x2bcbdb40	368:	addiu	JSP, JFP, -24
0x2bcbdb44	372:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbdb48	376:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbdb4c	380:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbd9d0) >>>>>>>>
          		@ Capacity is 18 word(s)
0x2bcbd9d0	0:	addiu	a1, JSP, 56
<<<<<<<<<Pop Code Buffer to PC = 384 (0x2bcbdb50) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbda20) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbda20	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbda24	84:	lui	CP, hi16(0x2bcb)
0x2bcbda28	88:	ori	CP, CP, lo16(0x2bcbdb50)
0x2bcbda2c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 384 (0x2bcbdb50) <<<<<<<<<
JS: COMPILED: size=456 startPC=0x2bcbd9d0 com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
JS: ATTEMPTING TO COMPILE java.util.Vector.ensureCapacityHelper(I)V
JS: COMPILING java.util.Vector.ensureCapacityHelper(I)V
orig bkID(6) Incoming Locals(2 0x0): 3- 0- 
o1   bkID(6) Incoming Locals(2 0x0): 3- 0- 
orig bkID(4) Incoming Locals(3 0x0): 0- 4- 2- 
o1   bkID(4) Incoming Locals(2 0x0): 0- 4- 
o1   bkID(4) Incoming Locals(3 0x0): 0- 4- 2- 
o1   bkID(4) Incoming Locals(3 0x0): 0- 4- 2- 
orig bkID(2) Incoming Locals(1 0x0): 2- 
o1   bkID(2) Incoming Locals(1 0x0): 2- 
o1   bkID(2) Incoming Locals(1 0x0): 2- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(6) Incoming Locals(2 0x0): 3- 0- 
o1   bkID(6) Incoming Locals(2 0x0): 3- 0- 
orig bkID(4) Incoming Locals(3 0x0): 0- 4- 2- 
o1   bkID(4) Incoming Locals(2 0x0): 0- 4- 
o1   bkID(4) Incoming Locals(3 0x0): 0- 4- 2- 
o1   bkID(4) Incoming Locals(3 0x0): 0- 4- 2- 
orig bkID(2) Incoming Locals(1 0x0): 2- 
o1   bkID(2) Incoming Locals(1 0x0): 2- 
o1   bkID(2) Incoming Locals(1 0x0): 2- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
bkID(4) local(0 #0)  not found in goalBk
bkID(4) local(1 #4)  not found in goalBk
bkID(4) local(2 #2)  not found in goalBk
bkID(4) local(0 #0)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(4) Incoming Locals(3 0x0): 0- 4- 2- 
+bk  bkID(4) Incoming Locals(3 0x1): 0+ 4- 2- 
-gbk bkID(6) Incoming Locals(2 0x0): 3- 0- 
+gbk bkID(6) Incoming Locals(2 0x1): 0+ 3- 
bkID(4) local(0 #0)  ordered in goalBk(6)
-bk  bkID(4) Incoming Locals(3 0x1): 0+ 4- 2- 
dstBk(4) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(4) Incoming Locals(3 0x1): 0+ 4- 2- 
 ordered in bk
-gbk bkID(6) Incoming Locals(2 0x1): 0+ 3- 
dstBk(6) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(6) Incoming Locals(2 0x1): 0+ 3- 
bkID(4) local(1 #4)  not found in goalBk
bkID(4) local(2 #2)  not found in goalBk
bkID(6) local(0 #0)  not found in goalBk
bkID(6) local(1 #3)  not found in goalBk
bkID(2) local(0 #2)  not found in goalBk
bkID(0) local(0 #0)  not found in goalBk
bkID(0) local(1 #1)  not found in goalBk
bkID(0) local(0 #0)  not found in goalBk
bkID(0) local(1 #1)  not found in goalBk
bkID(0) local(0 #0)  not found in goalBk
bkID(0) local(1 #1)  not found in goalBk
bkID(2) local(0 #2)  not found in goalBk
pre  bkID(0) Incoming Locals(2 0x0): 0- 1- 
local(#0) swapped with local(#0)
post bkID(0) Incoming Locals(2 0x1): 0+ 1- 
pre2  bkID(2) Incoming Locals(1 0x0): 2- 
local(#1) swapped with local(#0)
post2 bkID(2) Incoming Locals(2 0x1): <null> 2- 
pre  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
local(#1) swapped with local(#1)
post bkID(0) Incoming Locals(2 0x3): 0+ 1+ 
pre2  bkID(2) Incoming Locals(2 0x1): <null> 2- 
local(#2) swapped with local(#1)
post2 bkID(2) Incoming Locals(3 0x3): <null> <null> 2- 
pre  bkID(2) Incoming Locals(3 0x3): <null> <null> 2- 
local(#2) swapped with local(#2)
post bkID(2) Incoming Locals(3 0x7): <null> <null> 2+ 
pre  bkID(4) Incoming Locals(3 0x1): 0+ 4- 2- 
local(#1) swapped with local(#1)
post bkID(4) Incoming Locals(3 0x3): 0+ 4+ 2- 
pre2  bkID(6) Incoming Locals(2 0x1): 0+ 3- 
local(#2) swapped with local(#1)
post2 bkID(6) Incoming Locals(3 0x3): 0+ <null> 3- 
pre  bkID(4) Incoming Locals(3 0x3): 0+ 4+ 2- 
local(#2) swapped with local(#2)
post bkID(4) Incoming Locals(3 0x7): 0+ 4+ 2+ 
pre2  bkID(6) Incoming Locals(3 0x3): 0+ <null> 3- 
local(#3) swapped with local(#2)
post2 bkID(6) Incoming Locals(4 0x7): 0+ <null> <null> 3- 
pre  bkID(6) Incoming Locals(4 0x7): 0+ <null> <null> 3- 
local(#3) swapped with local(#3)
post bkID(6) Incoming Locals(4 0xf): 0+ <null> <null> 3+ 

#################################################

The maximum node counts per root node are 9
IR block list contains 7 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 12 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: java.util.Vector.ensureCapacityHelper(I)V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<0>  (0x6e6334):    aload_0 
<1>  (0x6e6335):    agetfield_quick #3
<4>  (0x6e6338):    arraylength 
<5>  (0x6e6339):    istore_2 
<6>  (0x6e633a):    iload_1 
<7>  (0x6e633b):    iload_2 
<8>  (0x6e633c):    if_icmple <92>
<11>  (0x6e633f):    aload_0 
<12>  (0x6e6340):    agetfield_quick #3
<15>  (0x6e6343):    astore_3 
<16>  (0x6e6344):    aload_0 
<17>  (0x6e6345):    getfield_quick #5
<20>  (0x6e6348):    ifle <32>
<23>  (0x6e634b):    iload_2 
<24>  (0x6e634c):    aload_0 
<25>  (0x6e634d):    getfield_quick #5
<28>  (0x6e6350):    iadd 
<29>  (0x6e6351):    goto <35>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(8)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(8)
 
Assigned Locals(2): 
	ASSIGN(11): local(2)	ID(10)	rhsID(6)
 	ASSIGN(20): local(3)	ID(19)	rhsID(5)
 
Successor Blocks(3): 
	ID(1) LocalOrder(2) AssignOrder(1) RefsOK(1) Locals()
	ID(2) LocalOrder(2) AssignOrder(2) RefsOK(1) Locals(<null> <null> 2)
	ID(3) LocalOrder(2) AssignOrder(2) RefsOK(1) Locals()

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (reference)  (ref count: 3)
      <(ID: 7) FETCH (reference) 
         <(ID: 4) FIELD_REF (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 2)
               <(ID: 16) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 6) IDENTITY (int)  (ref count: 4)
      <(ID: 12) ARRAY_LENGTH (int) 
         <(ID: 5) IDENTITY (reference)  (ref count: 3)

   <(ID: 11) ASSIGN (int)  (assignIdx: 0)
      <(ID: 10) LOCAL (int)   2>
      <(ID: 6) IDENTITY (int)  (ref count: 4)

   <(ID: 9) BCOND (int) 
   target: (BlockID: 1 BlockPC: 92)
   condition: LE
   flags: 0
      <(ID: 8) LOCAL (int)   1>
      <(ID: 6) IDENTITY (int)  (ref count: 4)


   <(ID: 15) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 21) FETCH (32-bit field) 
         <(ID: 14) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 2)
            <(ID: 13) CONST_FIELD_OFFSET (NONE)  (5)

   <(ID: 20) ASSIGN (reference)  (assignIdx: 1)
      <(ID: 19) LOCAL (reference)   3>
      <(ID: 5) IDENTITY (reference)  (ref count: 3)

   <(ID: 18) BCOND (int) 
   target: (BlockID: 2 BlockPC: 32)
   condition: LE
   flags: 0
      <(ID: 15) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 17) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 24) DEFINE (int) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 22) ADD (int) 
         <(ID: 6) IDENTITY (int)  (ref count: 4)
         <(ID: 15) IDENTITY (32-bit field)  (ref count: 3)


   <(ID: 25) LOAD_PHIS (NONE) 

   <(ID: 26) RELEASE_PHIS (NONE) 

   <(ID: 27) GOTO (NONE) 
   target: (BlockID: 3 BlockPC: 35)


*************************************************
*
* (block ID:2 block PC:32 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x7
* Source: java.util.Vector.ensureCapacityHelper(I)V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<32>  (0x6e6354):    iload_2 
<33>  (0x6e6355):    iconst_2 
<34>  (0x6e6356):    imul 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(2)	ID(31)
 
Incoming Locals(3): 
	<null>
	<null>
	local(2)	ID(31)
 
Successor Blocks(1): 
	ID(3) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 30) MAP_PC (NONE)   32>

   <(ID: 34) DEFINE (int) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 33) MUL (int) 
         <(ID: 31) LOCAL (int)   2>
         <(ID: 32) CONST_JAVA_NUMERIC32 (int)  (2)


   <(ID: 35) LOAD_PHIS (NONE) 

   <(ID: 36) RELEASE_PHIS (NONE) 


*************************************************
*
* (block ID:3 block PC:35 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.util.Vector.ensureCapacityHelper(I)V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<35>  (0x6e6357):    istore 4
<37>  (0x6e6359):    iload 4
<39>  (0x6e635b):    iload_1 
<40>  (0x6e635c):    if_icmpge <46>
<43>  (0x6e635f):    iload_1 
<44>  (0x6e6360):    istore 4
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 3 
*************************************************

Number and size of USED nodes in phi array: 1 1

Assigned Locals(2): 
	ASSIGN(41): local(4)	ID(40)	rhsID(23)
 	ASSIGN(44): local(4)	ID(43)	rhsID(38)
 
Successor Blocks(1): 
	ID(4) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(0 4 2)

   <(ID: 37) MAP_PC (NONE)   35>

   <(ID: 41) ASSIGN (int)  (assignIdx: 0)
      <(ID: 40) LOCAL (int)   4>
      <(ID: 23) IDENTITY (int)  (ref count: 2)
         <(ID: 42) USED (int) 
         spillLocation: 0
         registerSpillOk: 1


   <(ID: 39) BCOND (int) 
   target: (BlockID: 4 BlockPC: 46)
   condition: GE
   flags: 0
      <(ID: 23) IDENTITY (int)  (ref count: 2)
      <(ID: 38) IDENTITY (int)  (ref count: 2)
         <(ID: 45) LOCAL (int)   1>


   <(ID: 44) ASSIGN (int)  (assignIdx: 1)
      <(ID: 43) LOCAL (int)   4>
      <(ID: 38) IDENTITY (int)  (ref count: 2)


*************************************************
*
* (block ID:4 block PC:46 )
* IR root list contains 6 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x7
* Source: java.util.Vector.ensureCapacityHelper(I)V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<46>  (0x6e6362):    aload_0 
<47>  (0x6e6363):    iload 4
<49>  (0x6e6365):    anewarray_quick class #7406
<52>  (0x6e6368):    aputfield_quick #3
<55>  (0x6e636b):    aload_0 
<56>  (0x6e636c):    getfield_quick #4
<59>  (0x6e636f):    iflt <70>
<62>  (0x6e6372):    iload_2 
<63>  (0x6e6373):    aload_0 
<64>  (0x6e6374):    getfield_quick #4
<67>  (0x6e6377):    if_icmpge <78>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(0)	ID(47)
 	local(4)	ID(48)
 	local(2)	ID(62)
 
Incoming Locals(3): 
	local(0)	ID(47)
 	local(4)	ID(48)
 	local(2)	ID(62)
 
Successor Blocks(2): 
	ID(5) LocalOrder(2) AssignOrder(0) RefsOK(0) Locals()
	ID(6) LocalOrder(3) AssignOrder(0) RefsOK(0) Locals(0 <null> <null> 3)

   <(ID: 46) MAP_PC (NONE)   46>

   <(ID: 50) IDENTITY (reference)  (ref count: 2)
      <(ID: 54) NEW_ARRAY_REF (reference) 
         <(ID: 49) CONST_CB (address field)  ([Ljava.lang.Object;)
         <(ID: 48) LOCAL (int)   4>

   <(ID: 53) ASSIGN (reference) 
      <(ID: 52) FIELD_REF (reference) 
         <(ID: 47) IDENTITY (reference)  (ref count: 2)
            <(ID: 58) LOCAL (reference)   0>
         <(ID: 51) CONST_FIELD_OFFSET (NONE)  (3)
      <(ID: 50) IDENTITY (reference)  (ref count: 2)

   <(ID: 57) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 61) FETCH (32-bit field) 
         <(ID: 56) FIELD_REF (32-bit field) 
            <(ID: 47) IDENTITY (reference)  (ref count: 2)
            <(ID: 55) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 60) BCOND (int) 
   target: (BlockID: 5 BlockPC: 70)
   condition: LT
   flags: 0
      <(ID: 57) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 59) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 63) BCOND (int) 
   target: (BlockID: 6 BlockPC: 78)
   condition: GE
   flags: 0
      <(ID: 62) LOCAL (int)   2>
      <(ID: 57) IDENTITY (32-bit field)  (ref count: 3)



*************************************************
*
* (block ID:5 block PC:70 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.util.Vector.ensureCapacityHelper(I)V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<70>  (0x6e637a):    new_quick #10784 <java.lang.ArrayIndexOutOfBoundsException>
<73>  (0x6e637d):    dup 
<74>  (0x6e637e):    invokenonvirtual_quick #4522 <java.lang.ArrayIndexOutOfBoundsException.<init>()V>
<77>  (0x6e6381):    athrow 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

   <(ID: 64) MAP_PC (NONE)   70>

   <(ID: 66) IDENTITY (reference)  (ref count: 3)
      <(ID: 71) NEW_OBJECT (reference) 
         <(ID: 65) CONST_CB (address field)  (java.lang.ArrayIndexOutOfBoundsException)

   <(ID: 70) INVOKE (v) 
      <(ID: 69) PARAMETER (reference) 
         <(ID: 66) IDENTITY (reference)  (ref count: 3)
         <(ID: 68) NULL_PARAMETER (NONE) 
      <(ID: 67) CONST_MB (address field)  (java.lang.ArrayIndexOutOfBoundsException.<init>()V)

   <(ID: 72) THROW (NONE) 
      <(ID: 66) IDENTITY (reference)  (ref count: 3)


*************************************************
*
* (block ID:6 block PC:78 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0xf
* Source: java.util.Vector.ensureCapacityHelper(I)V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<78>  (0x6e6382):    aload_3 
<79>  (0x6e6383):    iconst_0 
<80>  (0x6e6384):    aload_0 
<81>  (0x6e6385):    agetfield_quick #3
<84>  (0x6e6388):    iconst_0 
<85>  (0x6e6389):    aload_0 
<86>  (0x6e638a):    getfield_quick #4
<89>  (0x6e638d):    invokestatic_quick #10521 <sun.misc.CVM.copyObjectArray([Ljava/lang/Object;I[Ljava/lang/Object;II)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(3)	ID(74)
 	local(0)	ID(76)
 
Incoming Locals(4): 
	local(0)	ID(76)
 	<null>
	<null>
	local(3)	ID(74)
 
Successor Blocks(1): 
	ID(1) LocalOrder(2) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 73) MAP_PC (NONE)   78>

   <(ID: 79) IDENTITY (reference)  (ref count: 2)
      <(ID: 93) FETCH (reference) 
         <(ID: 78) FIELD_REF (reference) 
            <(ID: 76) IDENTITY (reference)  (ref count: 2)
               <(ID: 84) LOCAL (reference)   0>
            <(ID: 77) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 83) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 94) FETCH (32-bit field) 
         <(ID: 82) FIELD_REF (32-bit field) 
            <(ID: 76) IDENTITY (reference)  (ref count: 2)
            <(ID: 81) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 92) INVOKE (v) 
      <(ID: 91) PARAMETER (reference) 
         <(ID: 74) LOCAL (reference)   3>
         <(ID: 90) PARAMETER (int) 
            <(ID: 75) CONST_JAVA_NUMERIC32 (int)  (0)
            <(ID: 89) PARAMETER (reference) 
               <(ID: 79) IDENTITY (reference)  (ref count: 2)
               <(ID: 88) PARAMETER (int) 
                  <(ID: 80) CONST_JAVA_NUMERIC32 (int)  (0)
                  <(ID: 87) PARAMETER (32-bit field) 
                     <(ID: 83) IDENTITY (32-bit field)  (ref count: 2)
                     <(ID: 86) NULL_PARAMETER (NONE) 
      <(ID: 85) CONST_MB (address field)  (sun.misc.CVM.copyObjectArray([Ljava/lang/Object;I[Ljava/lang/Object;II)V)


*************************************************
*
* (block ID:1 block PC:92 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: java.util.Vector.ensureCapacityHelper(I)V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<92>  (0x6e6390):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

   <(ID: 28) MAP_PC (NONE)   92>

   <(ID: 29) RETURN (v) 


NUM BARRIER BYTES = 16
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 566
ESTIMATED BUFFER SIZE = 712
CODE BUFFER ADDRESS = 0x2bcbdb64
PC MAP TABLE ADDRESS = 0x2bcbdb6c
CODE ENTRY ADDRESS = 0x2bcbdba8
          		@ Method prologue
0x2bcbdba8	0:	addiu	a1, JSP, 68	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbdbac	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbdbb0	8:	sltu	t7, a1, CHUNKEND
0x2bcbdbb4	12:	bne	t7, zero, PC=0x2bcbdba8	@ goto .skip
0x2bcbdbb8	16:	nop
0x2bcbdbbc	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbdbc0	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbdbb4) >>>>>>>>
0x2bcbdbb4	12:	bne	t7, zero, PC=0x2bcbdbc4	@ goto .skip
0x2bcbdbb8	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbdbc4) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbdbc4	28:	sw	JFP, 12(JSP)	@ Store curr JFP into new frame
0x2bcbdbc8	32:	addiu	JFP, JSP, 12	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbdbcc	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbdbd0	40:	addiu	a3, zero, 0
0x2bcbdbd4	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbdbd8	48:	addiu	a3, zero, -1
0x2bcbdbdc	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbdbe0	56:	move	a0, EE
0x2bcbdbe4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbdbe8	64:	lui	t9, hi16(0x65)
0x2bcbdbec	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbdbf0	72:	jalr	t9
0x2bcbdbf4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbdbf8	80:	addiu	JSP, JFP, 32	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbdbfc	84:	nop
0x2bcbdc00	88:	nop
0x2bcbdc04	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbdc08	96:	lw	s4, -20(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbdc0c	100:	lw	s5, -16(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
          		@ Do getfield:
0x2bcbdc10	104:	lw	s7, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbdc14	108:	lw	s6, 8(s7)	@ arraylength
0x2bcbdc18	112:	sw	s6, -12(JFP)	@ Java local cell # 2
          		@ deferred comparison: 
0x2bcbdc1c	116:	slt	t7, s6, s5
0x2bcbdc20	120:	beq	t7, zero, PC=0x2bcbdc1c	@ branch to block L1
0x2bcbdc24	124:	nop
          		@ Do getfield:
0x2bcbdc28	128:	lw	ra, 20(s4)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbdc2c	132:	sw	s7, -8(JFP)	@ Java local cell # 3
			@ Outgoing local(2) reg(22): in correct register
          		@ deferred comparison: 
0x2bcbdc30	136:	slt	t7, zero, ra
0x2bcbdc34	140:	beq	t7, zero, PC=0x2bcbdc30	@ branch to block L2
0x2bcbdc38	144:	nop
0x2bcbdc3c	148:	addu	s4, s6, ra
			@ Processing DEFINE(0) reg(20): in correct register
			@ Loading DEFINE(0) register(20): in correct register
0x2bcbdc40	152:	b	PC=0x2bcbdc40	@ branch to block L3
0x2bcbdc44	156:	nop
			@ Initial Temp REF set is 
	L2:	160:	@ entry point for branches
			@ Binding Incoming Local(2) to reg(22)
--->Fixed instruction at 140(0x2bcbdc34) to reference 160
          		@ MAP_PC idepth=0 javaPc=32 compiledPc=160
0x2bcbdc48	160:	sll	s4, s6, 1	@ imul by 2
			@ Processing DEFINE(0) reg(20): in correct register
			@ Loading DEFINE(0) register(20): in correct register
			@ Initial Temp REF set is 
	L3:	164:	@ entry point for branches
--->Fixed instruction at 152(0x2bcbdc40) to reference 164
          		@ MAP_PC idepth=0 javaPc=35 compiledPc=164
0x2bcbdc4c	164:	sw	s4, -4(JFP)	@ Java local cell # 4
0x2bcbdc50	168:	lw	s5, -16(JFP)	@ Java local cell # 1
			@ Outgoing local(0) reg(20): not in register
0x2bcbdc54	172:	lw	s4, -20(JFP)	@ Java local cell # 0
			@ Outgoing local(4) reg(21): not in register
0x2bcbdc58	176:	lw	s5, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(2) reg(22): not in register
0x2bcbdc5c	180:	lw	s6, -12(JFP)	@ Java local cell # 2
0x2bcbdc60	184:	lw	s7, -16(JFP)	@ Java local cell # 1
          		@ deferred comparison: 
0x2bcbdc64	188:	slt	t7, s5, s7
0x2bcbdc68	192:	beq	t7, zero, PC=0x2bcbdc64	@ branch to block L4
0x2bcbdc6c	196:	nop
0x2bcbdc70	200:	sw	s7, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(4) reg(21): not in register
0x2bcbdc74	204:	lw	s5, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(2) reg(22): in correct register
			@ Initial Temp REF set is 
	L4:	208:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(4) to reg(21)
			@ Binding Incoming Local(2) to reg(22)
--->Fixed instruction at 192(0x2bcbdc68) to reference 208
          		@ MAP_PC idepth=0 javaPc=46 compiledPc=208
0x2bcbdc78	208:	lw	a2, 0(CP)	@ cb [Ljava.lang.Object;
          		@ Do anewarray:
0x2bcbdc7c	212:	move	a1, s5
0x2bcbdc80	216:	jal	PC=(0x2bcb8acc)	@ call CVMCCMruntimeANewArrayGlue
0x2bcbdc84	220:	nop
          		@ Captured a stackmap here.
0x2bcbdc88	224:	lw	s4, -20(JFP)	@ Java local cell # 0
          		@ Do putfield:
0x2bcbdc8c	228:	addiu	s7, s4, 12	@ fieldAddr = obj + fieldOffset;
0x2bcbdc90	232:	sw	v0, 0(s7)	@ putfield(fieldAddr, valueObj);
0x2bcbdc94	236:	lw	s5, 0(CP)	@ cardTableVirtualBase
0x2bcbdc98	240:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcbdc9c	244:	srl	t7, s7, 9	@ mark card table
0x2bcbdca0	248:	addu	t7, s5, t7	@ add indexReg and baseReg
0x2bcbdca4	252:	sb	ra, 0(t7)
          		@ Do getfield:
0x2bcbdca8	256:	lw	s7, 16(s4)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ deferred comparison: 
0x2bcbdcac	260:	sltiu	t7, s7, 0
0x2bcbdcb0	264:	bne	t7, zero, PC=0x2bcbdcac	@ branch to block L5
0x2bcbdcb4	268:	nop
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(3) reg(23): not in register
0x2bcbdcb8	272:	sw	s7, 32(JFP)	@ spill Java temp cell # 1
0x2bcbdcbc	276:	lw	s7, -8(JFP)	@ Java local cell # 3
0x2bcbdcc0	280:	lw	t9, 32(JFP)	@ Java temp cell # 1
          		@ deferred comparison: 
0x2bcbdcc4	284:	slt	t7, s6, t9
0x2bcbdcc8	288:	beq	t7, zero, PC=0x2bcbdcc4	@ branch to block L6
0x2bcbdccc	292:	nop
			@ Initial Temp REF set is 
	L5:	296:	@ entry point for branches
--->Fixed instruction at 264(0x2bcbdcb0) to reference 296
          		@ MAP_PC idepth=0 javaPc=70 compiledPc=296
0x2bcbdcd0	296:	lw	a1, 0(CP)	@ cb java.lang.ArrayIndexOutOfBoundsException
          		@ Do new:
          		@ cb: java.lang.ArrayIndexOutOfBoundsException
0x2bcbdcd4	300:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcbdcd8	304:	nop
          		@ Captured a stackmap here.
0x2bcbdcdc	308:	sw	v0, 0(JSP)
0x2bcbdce0	312:	lw	a0, 0(CP)	@ mb java.lang.ArrayIndexOutOfBoundsException.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcbdce4	316:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbdce8	320:	sw	v0, 32(JFP)	@ REF spill Java temp cell # 1
0x2bcbdcec	324:	lw	s7, 0(a0)	@ call method through mb
0x2bcbdcf0	328:	jalr	s7
0x2bcbdcf4	332:	nop
          		@ Captured a stackmap here.
0x2bcbdcf8	336:	lw	a2, 32(JFP)	@ Java temp cell # 1
0x2bcbdcfc	340:	jal	PC=(0x2bcb8138)	@ goto CVMCCMruntimeThrowObjectGlue
0x2bcbdd00	344:	nop
			@ Initial Temp REF set is 
	L6:	348:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(3) to reg(23)
--->Fixed instruction at 288(0x2bcbdcc8) to reference 348
          		@ MAP_PC idepth=0 javaPc=78 compiledPc=348
          		@ Do getfield:
0x2bcbdd04	348:	lw	s6, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbdd08	352:	lw	s5, 16(s4)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbdd0c	356:	sw	s7, 0(JSP)
0x2bcbdd10	360:	sw	zero, 4(JSP)
0x2bcbdd14	364:	sw	s6, 8(JSP)
0x2bcbdd18	368:	sw	zero, 12(JSP)
0x2bcbdd1c	372:	sw	s5, 16(JSP)
0x2bcbdd20	376:	lw	a0, 0(CP)	@ mb sun.misc.CVM.copyObjectArray([Ljava/lang/Object;I[Ljava/lang/Object;II)V
          		@ Invoke a method w/ a void return type
0x2bcbdd24	380:	addiu	JSP, JSP, 20	@ adjust JSP before method call
0x2bcbdd28	384:	jal	PC=(0x2bcb8f14)	@ call CVMCCMinvokeCNIMethod() for sun.misc.CVM.copyObjectArray([Ljava/lang/Object;I[Ljava/lang/Object;II)V
0x2bcbdd2c	388:	nop
          		@ Captured a stackmap here.
			@ Initial Temp REF set is 
	L1:	392:	@ entry point for branches
--->Fixed instruction at 120(0x2bcbdc20) to reference 392
          		@ MAP_PC idepth=0 javaPc=92 compiledPc=392
0x2bcbdd30	392:	addiu	JSP, JFP, -20
0x2bcbdd34	396:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbdd38	400:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbdd3c	404:	nop
0x2bcbdd40	408:	.word	9309680	@ mb sun.misc.CVM.copyObjectArray([Ljava/lang/Object;I[Ljava/lang/Object;II)V
--->Fixed instruction at 376(0x2bcbdd20) to reference 408
0x2bcbdd44	412:	.word	9231104	@ mb java.lang.ArrayIndexOutOfBoundsException.<init>()V
--->Fixed instruction at 312(0x2bcbdce0) to reference 412
0x2bcbdd48	416:	.word	8776224	@ cb java.lang.ArrayIndexOutOfBoundsException
--->Fixed instruction at 296(0x2bcbdcd0) to reference 416
0x2bcbdd4c	420:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 236(0x2bcbdc94) to reference 420
0x2bcbdd50	424:	.word	8898260	@ cb [Ljava.lang.Object;
--->Fixed instruction at 208(0x2bcbdc78) to reference 424
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbdba8) >>>>>>>>
          		@ Capacity is 20 word(s)
0x2bcbdba8	0:	addiu	a1, JSP, 72
<<<<<<<<<Pop Code Buffer to PC = 428 (0x2bcbdd54) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbdbf8) >>>>>>>>
          		@ spillSize is 2 word(s), add to JFP+28
0x2bcbdbf8	80:	addiu	JSP, JFP, 36
          		@ setup cp base register
0x2bcbdbfc	84:	lui	CP, hi16(0x2bcb)
0x2bcbdc00	88:	ori	CP, CP, lo16(0x2bcbdd40)
0x2bcbdc04	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 428 (0x2bcbdd54) <<<<<<<<<
JS: COMPILED: size=528 startPC=0x2bcbdba8 java.util.Vector.ensureCapacityHelper(I)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.WPossMoves.WQueen_Moves(I)V
JS: COMPILING com.sun.mep.bench.Chess.WPossMoves.WQueen_Moves(I)V
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 

#################################################

The maximum node counts per root node are 4
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 4 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.WPossMoves.WQueen_Moves(I)V(WPossMoves.java:232)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x94e154):    aload_0 
<1>  (0x94e155):    iload_1 
<2>  (0x94e156):    invokevirtual_quick_w #20 <com.sun.mep.bench.Chess.WPossMoves.WRook_Moves(I)V>
<5>  (0x94e159):    aload_0 
<6>  (0x94e15a):    iload_1 
<7>  (0x94e15b):    invokevirtual_quick_w #21 <com.sun.mep.bench.Chess.WPossMoves.WBishop_Moves(I)V>
<10>  (0x94e15e):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 10) INVOKE (v) 
      <(ID: 7) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
            <(ID: 11) LOCAL (reference)   0>
         <(ID: 6) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 2)
               <(ID: 19) LOCAL (int)   1>
            <(ID: 5) NULL_PARAMETER (NONE) 
      <(ID: 9) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 8) GET_VTBL (NONE) 
            <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 4) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 14)

   <(ID: 18) INVOKE (v) 
      <(ID: 15) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 14) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 2)
            <(ID: 13) NULL_PARAMETER (NONE) 
      <(ID: 17) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 16) GET_VTBL (NONE) 
            <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 12) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 15)

   <(ID: 20) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 40
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 74
ESTIMATED BUFFER SIZE = 220
CODE BUFFER ADDRESS = 0x2bcbdd74
PC MAP TABLE ADDRESS = 0x2bcbdd7c
CODE ENTRY ADDRESS = 0x2bcbdda0
          		@ Method prologue
0x2bcbdda0	0:	addiu	a1, JSP, 40	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbdda4	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbdda8	8:	sltu	t7, a1, CHUNKEND
0x2bcbddac	12:	bne	t7, zero, PC=0x2bcbdda0	@ goto .skip
0x2bcbddb0	16:	nop
0x2bcbddb4	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbddb8	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbddac) >>>>>>>>
0x2bcbddac	12:	bne	t7, zero, PC=0x2bcbddbc	@ goto .skip
0x2bcbddb0	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbddbc) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbddbc	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbddc0	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbddc4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbddc8	40:	addiu	a3, zero, 0
0x2bcbddcc	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbddd0	48:	addiu	a3, zero, -1
0x2bcbddd4	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbddd8	56:	move	a0, EE
0x2bcbdddc	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbdde0	64:	lui	t9, hi16(0x65)
0x2bcbdde4	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbdde8	72:	jalr	t9
0x2bcbddec	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbddf0	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbddf4	84:	nop
0x2bcbddf8	88:	nop
0x2bcbddfc	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbde00	96:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbde04	100:	lw	s5, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
0x2bcbde08	104:	sw	s4, 0(JSP)
0x2bcbde0c	108:	sw	s5, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbde10	112:	lw	s7, 0(s4)	@ Get object.cb
0x2bcbde14	116:	addiu	t7, zero, -4
0x2bcbde18	120:	and	s7, s7, t7
0x2bcbde1c	124:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbde20	128:	lw	a0, 56(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbde24	132:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbde28	136:	lw	s7, 0(a0)	@ call method through mb
0x2bcbde2c	140:	jalr	s7
0x2bcbde30	144:	nop
          		@ Captured a stackmap here.
0x2bcbde34	148:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbde38	152:	sw	s7, 0(JSP)
0x2bcbde3c	156:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbde40	160:	sw	s6, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbde44	164:	lw	s5, 0(s7)	@ Get object.cb
0x2bcbde48	168:	addiu	t7, zero, -4
0x2bcbde4c	172:	and	s5, s5, t7
0x2bcbde50	176:	lw	s5, 76(s5)	@ Get cb.vtbl
0x2bcbde54	180:	lw	a0, 60(s5)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbde58	184:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbde5c	188:	lw	s7, 0(a0)	@ call method through mb
0x2bcbde60	192:	jalr	s7
0x2bcbde64	196:	nop
          		@ Captured a stackmap here.
0x2bcbde68	200:	addiu	JSP, JFP, -8
0x2bcbde6c	204:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbde70	208:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbde74	212:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbdda0) >>>>>>>>
          		@ Capacity is 12 word(s)
0x2bcbdda0	0:	addiu	a1, JSP, 40
<<<<<<<<<Pop Code Buffer to PC = 216 (0x2bcbde78) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbddf0) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbddf0	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbddf4	84:	lui	CP, hi16(0x2bcb)
0x2bcbddf8	88:	ori	CP, CP, lo16(0x2bcbde78)
0x2bcbddfc	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 216 (0x2bcbde78) <<<<<<<<<
JS: COMPILED: size=280 startPC=0x2bcbdda0 com.sun.mep.bench.Chess.WPossMoves.WQueen_Moves(I)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V
JS: COMPILING com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V
orig bkID(1) Incoming Locals(4 0x0): 0- 1- 4- 5- 
o1   bkID(1) Incoming Locals(4 0x0): 0- 1- 4- 5- 
orig bkID(2) Incoming Locals(4 0x0): 4- 2- 5- 3- 
o1   bkID(2) Incoming Locals(4 0x0): 4- 2- 5- 3- 
s1   bkID(2) Incoming Locals(5 0x0): 4- 2- 5- 3- 0- 
s1   bkID(2) Incoming Locals(6 0x0): 4- 2- 5- 3- 0- 1- 
o1   bkID(2) Incoming Locals(6 0x0): 4- 2- 5- 3- 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 2- 3- 
o1   bkID(0) Incoming Locals(2 0x0): 2- 3- 
s1   bkID(0) Incoming Locals(3 0x0): 2- 3- 0- 
s1   bkID(0) Incoming Locals(4 0x0): 2- 3- 0- 1- 
o1   bkID(0) Incoming Locals(4 0x0): 2- 3- 0- 1- 
orig bkID(1) Incoming Locals(4 0x0): 0- 1- 4- 5- 
o1   bkID(1) Incoming Locals(4 0x0): 0- 1- 4- 5- 
orig bkID(2) Incoming Locals(6 0x0): 4- 2- 5- 3- 0- 1- 
o1   bkID(2) Incoming Locals(4 0x0): 4- 2- 5- 3- 
s1   bkID(2) Incoming Locals(5 0x0): 4- 2- 5- 3- 0- 
s1   bkID(2) Incoming Locals(6 0x0): 4- 2- 5- 3- 0- 1- 
o1   bkID(2) Incoming Locals(6 0x0): 4- 2- 5- 3- 0- 1- 
orig bkID(0) Incoming Locals(4 0x0): 2- 3- 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 2- 3- 
s1   bkID(0) Incoming Locals(3 0x0): 2- 3- 0- 
s1   bkID(0) Incoming Locals(4 0x0): 2- 3- 0- 1- 
o1   bkID(0) Incoming Locals(4 0x0): 2- 3- 0- 1- 
Pushing blockID(2)
bkID(2) local(0 #4)  not ordered
bestLocal(0) bestLocalScore(24)
-bk  bkID(2) Incoming Locals(6 0x0): 4- 2- 5- 3- 0- 1- 
+bk  bkID(2) Incoming Locals(6 0x1): 4+ 2- 5- 3- 0- 1- 
-gbk bkID(1) Incoming Locals(4 0x0): 0- 1- 4- 5- 
+gbk bkID(1) Incoming Locals(4 0x1): 4+ 1- 0- 5- 
bkID(2) local(0 #4)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(6 0x1): 4+ 2- 5- 3- 0- 1- 
dstBk(2) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(2) Incoming Locals(6 0x1): 4+ 2- 5- 3- 0- 1- 
 ordered in bk
-gbk bkID(2) Incoming Locals(6 0x1): 4+ 2- 5- 3- 0- 1- 
dstBk(2) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(2) Incoming Locals(6 0x1): 4+ 2- 5- 3- 0- 1- 
-gbk bkID(1) Incoming Locals(4 0x1): 4+ 1- 0- 5- 
dstBk(1) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(1) Incoming Locals(4 0x1): 4+ 1- 0- 5- 
bkID(2) local(1 #2)  not found in goalBk
bkID(2) local(2 #5)  not ordered
bestLocal(1) bestLocalScore(24)
-bk  bkID(2) Incoming Locals(6 0x1): 4+ 2- 5- 3- 0- 1- 
+bk  bkID(2) Incoming Locals(6 0x3): 4+ 5+ 2- 3- 0- 1- 
-gbk bkID(1) Incoming Locals(4 0x1): 4+ 1- 0- 5- 
+gbk bkID(1) Incoming Locals(4 0x3): 4+ 5+ 0- 1- 
bkID(2) local(2 #2)  not found in goalBk
bkID(2) local(3 #3)  not found in goalBk
bkID(2) local(4 #0)  not ordered
bestLocal(2) bestLocalScore(24)
-bk  bkID(2) Incoming Locals(6 0x3): 4+ 5+ 2- 3- 0- 1- 
+bk  bkID(2) Incoming Locals(6 0x7): 4+ 5+ 0+ 3- 2- 1- 
-gbk bkID(1) Incoming Locals(4 0x3): 4+ 5+ 0- 1- 
+gbk bkID(1) Incoming Locals(4 0x7): 4+ 5+ 0+ 1- 
bkID(2) local(4 #2)  not found in goalBk
bkID(2) local(5 #1)  not ordered
bestLocal(3) bestLocalScore(24)
-bk  bkID(2) Incoming Locals(6 0x7): 4+ 5+ 0+ 3- 2- 1- 
+bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
-gbk bkID(1) Incoming Locals(4 0x7): 4+ 5+ 0+ 1- 
+gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
bkID(2) local(5 #3)  not found in goalBk
bkID(2) local(0 #4)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
dstBk(2) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
dstBk(2) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
bkID(2) local(1 #5)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
dstBk(2) local(1 5) found in slot(1)
local(1 5) same slot
+bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
dstBk(2) local(1 5) found in slot(1)
local(1 5) same slot
+gbk bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
bkID(2) local(2 #0)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
dstBk(2) local(2 0) found in slot(2)
local(2 0) same slot
+bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
dstBk(2) local(2 0) found in slot(2)
local(2 0) same slot
+gbk bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
bkID(2) local(3 #1)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
dstBk(2) local(3 1) found in slot(3)
local(3 1) same slot
+bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
dstBk(2) local(3 1) found in slot(3)
local(3 1) same slot
+gbk bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
bkID(2) local(4 #2)  not ordered
bestLocal(4) bestLocalScore(8)
-bk  bkID(2) Incoming Locals(6 0xf): 4+ 5+ 0+ 1+ 2- 3- 
+bk  bkID(2) Incoming Locals(6 0x1f): 4+ 5+ 0+ 1+ 2+ 3- 
bkID(2) local(4 #2)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(6 0x1f): 4+ 5+ 0+ 1+ 2+ 3- 
dstBk(2) local(4 2) found in slot(4)
local(4 2) same slot
+bk  bkID(2) Incoming Locals(6 0x1f): 4+ 5+ 0+ 1+ 2+ 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(6 0x1f): 4+ 5+ 0+ 1+ 2+ 3- 
dstBk(2) local(4 2) found in slot(4)
local(4 2) same slot
+gbk bkID(2) Incoming Locals(6 0x1f): 4+ 5+ 0+ 1+ 2+ 3- 
bkID(2) local(5 #3)  not ordered
bestLocal(5) bestLocalScore(8)
-bk  bkID(2) Incoming Locals(6 0x1f): 4+ 5+ 0+ 1+ 2+ 3- 
+bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
bkID(2) local(5 #3)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
dstBk(2) local(5 3) found in slot(5)
local(5 3) same slot
+bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
dstBk(2) local(5 3) found in slot(5)
local(5 3) same slot
+gbk bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
bkID(2) local(0 #4)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
dstBk(2) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
dstBk(1) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
bkID(2) local(1 #5)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
dstBk(2) local(1 5) found in slot(1)
local(1 5) same slot
+bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
dstBk(1) local(1 5) found in slot(1)
local(1 5) same slot
+gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
bkID(2) local(2 #0)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
dstBk(2) local(2 0) found in slot(2)
local(2 0) same slot
+bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
dstBk(1) local(2 0) found in slot(2)
local(2 0) same slot
+gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
bkID(2) local(3 #1)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
dstBk(2) local(3 1) found in slot(3)
local(3 1) same slot
+bk  bkID(2) Incoming Locals(6 0x3f): 4+ 5+ 0+ 1+ 2+ 3+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
dstBk(1) local(3 1) found in slot(3)
local(3 1) same slot
+gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
bkID(2) local(4 #2)  not found in goalBk
bkID(2) local(5 #3)  not found in goalBk
Popping blockID(2)
bkID(0) local(0 #2)  not found in goalBk
bkID(0) local(1 #3)  not found in goalBk
bkID(0) local(2 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(4 0x0): 2- 3- 0- 1- 
dstBk(0) local(2 0) found in slot(2)
local(2 0) same slot
+bk  bkID(0) Incoming Locals(4 0x4): 2- 3- 0+ 1- 
 ordered in bk
-gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
dstBk(1) local(2 0) found in slot(2)
local(2 0) same slot
+gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
bkID(0) local(3 #1)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(4 0x4): 2- 3- 0+ 1- 
dstBk(0) local(3 1) found in slot(3)
local(3 1) same slot
+bk  bkID(0) Incoming Locals(4 0xc): 2- 3- 0+ 1+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
dstBk(1) local(3 1) found in slot(3)
local(3 1) same slot
+gbk bkID(1) Incoming Locals(4 0xf): 4+ 5+ 0+ 1+ 
pre  bkID(0) Incoming Locals(4 0xc): 2- 3- 0+ 1+ 
local(#0) swapped with local(#4)
post bkID(0) Incoming Locals(5 0x1c): <null> 3- 0+ 1+ 2+ 
pre  bkID(0) Incoming Locals(5 0x1c): <null> 3- 0+ 1+ 2+ 
local(#1) swapped with local(#5)
post bkID(0) Incoming Locals(6 0x3c): <null> <null> 0+ 1+ 2+ 3+ 

#################################################

The maximum node counts per root node are 7
IR block list contains 3 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 4 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3c
* Source: com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V(BPossMoves.java:101)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<0>  (0x94f684):    iload_2 
<1>  (0x94f685):    istore 4
<3>  (0x94f687):    iload_3 
<4>  (0x94f688):    istore 5
<6>  (0x94f68a):    goto <21>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(2)	ID(2)
 	local(3)	ID(3)
 
Incoming Locals(6): 
	<null>
	<null>
	local(0)	ID(10)
 	local(1)	ID(11)
 	local(2)	ID(2)
 	local(3)	ID(3)
 
Assigned Locals(2): 
	ASSIGN(5): local(4)	ID(4)	rhsID(2)
 	ASSIGN(7): local(5)	ID(6)	rhsID(3)
 
Successor Blocks(1): 
	ID(1) LocalOrder(2) AssignOrder(2) RefsOK(1) Locals(4 5 0 1 <null> <null>)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) ASSIGN (int)  (assignIdx: 0)
      <(ID: 4) LOCAL (int)   4>
      <(ID: 2) LOCAL (int)   2>

   <(ID: 7) ASSIGN (int)  (assignIdx: 1)
      <(ID: 6) LOCAL (int)   5>
      <(ID: 3) LOCAL (int)   3>

   <(ID: 8) GOTO (NONE) 
   target: (BlockID: 1 BlockPC: 21)


*************************************************
*
* (block ID:2 block PC:9 )
* IR root list contains 5 root nodes: in block 
* flags: 0x361
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3f
* Source: com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V(BPossMoves.java:106)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<9>  (0x94f68d):    iload 4
<11>  (0x94f68f):    iload_2 
<12>  (0x94f690):    iadd 
<13>  (0x94f691):    istore 4
<15>  (0x94f693):    iload 5
<17>  (0x94f695):    iload_3 
<18>  (0x94f696):    iadd 
<19>  (0x94f697):    istore 5
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(4): 
	local(4)	ID(26)
 	local(2)	ID(27)
 	local(5)	ID(29)
 	local(3)	ID(30)
 
Incoming Locals(6): 
	local(4)	ID(26)
 	local(5)	ID(29)
 	local(0)	ID(10)
 	local(1)	ID(11)
 	local(2)	ID(27)
 	local(3)	ID(30)
 
Assigned Locals(2): 
	ASSIGN(33): local(4)	ID(32)	rhsID(28)
 	ASSIGN(36): local(5)	ID(35)	rhsID(31)
 
Successor Blocks(1): 
	ID(1) LocalOrder(4) AssignOrder(2) RefsOK(1) Locals(4 5 0 1 <null> <null>)

   <(ID: 25) MAP_PC (NONE)   9>

   <(ID: 26) IDENTITY (int)  (ref count: 2)
      <(ID: 34) LOCAL (int)   4>

   <(ID: 33) ASSIGN (int)  (assignIdx: 0)
      <(ID: 32) LOCAL (int)   4>
      <(ID: 28) ADD (int) 
         <(ID: 26) IDENTITY (int)  (ref count: 2)
         <(ID: 27) LOCAL (int)   2>

   <(ID: 29) IDENTITY (int)  (ref count: 2)
      <(ID: 37) LOCAL (int)   5>

   <(ID: 36) ASSIGN (int)  (assignIdx: 1)
      <(ID: 35) LOCAL (int)   5>
      <(ID: 31) ADD (int) 
         <(ID: 29) IDENTITY (int)  (ref count: 2)
         <(ID: 30) LOCAL (int)   3>


*************************************************
*
* (block ID:1 block PC:21 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3f
* Source: com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V(BPossMoves.java:104)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<21>  (0x94f699):    aload_0 
<22>  (0x94f69a):    iload_1 
<23>  (0x94f69b):    iload 4
<25>  (0x94f69d):    iload 5
<27>  (0x94f69f):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<30>  (0x94f6a2):    iconst_m1 
<31>  (0x94f6a3):    if_icmpne <9>
<34>  (0x94f6a6):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(4): 
	local(0)	ID(10)
 	local(1)	ID(11)
 	local(4)	ID(12)
 	local(5)	ID(13)
 
Incoming Locals(6): 
	local(4)	ID(12)
 	local(5)	ID(13)
 	local(0)	ID(10)
 	local(1)	ID(11)
 	<null>
	<null>

Successor Blocks(1): 
	ID(2) LocalOrder(4) AssignOrder(0) RefsOK(0) Locals(4 5 0 1 2 3)

   <(ID: 9) MAP_PC (NONE)   21>

   <(ID: 20) IDENTITY (int)  (ref count: 2)
      <(ID: 23) INVOKE (int) 
         <(ID: 19) PARAMETER (reference) 
            <(ID: 10) LOCAL (reference)   0>
            <(ID: 18) PARAMETER (int) 
               <(ID: 11) LOCAL (int)   1>
               <(ID: 17) PARAMETER (int) 
                  <(ID: 12) LOCAL (int)   4>
                  <(ID: 16) PARAMETER (int) 
                     <(ID: 13) LOCAL (int)   5>
                     <(ID: 15) NULL_PARAMETER (NONE) 
         <(ID: 14) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 22) BCOND (int) 
   target: (BlockID: 2 BlockPC: 9)
   condition: NE
   flags: 0
      <(ID: 20) IDENTITY (int)  (ref count: 2)
      <(ID: 21) CONST_JAVA_NUMERIC32 (int)  (-1)


   <(ID: 24) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 218
ESTIMATED BUFFER SIZE = 348
CODE BUFFER ADDRESS = 0x2bcbde8c
PC MAP TABLE ADDRESS = 0x2bcbde94
GC CHECK PCS ADDRESS = 0x2bcbdea4
CODE ENTRY ADDRESS = 0x2bcbded0
          		@ Method prologue
0x2bcbded0	0:	addiu	a1, JSP, 56	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbded4	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbded8	8:	sltu	t7, a1, CHUNKEND
0x2bcbdedc	12:	bne	t7, zero, PC=0x2bcbded0	@ goto .skip
0x2bcbdee0	16:	nop
0x2bcbdee4	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbdee8	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbdedc) >>>>>>>>
0x2bcbdedc	12:	bne	t7, zero, PC=0x2bcbdeec	@ goto .skip
0x2bcbdee0	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbdeec) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbdeec	28:	sw	JFP, 8(JSP)	@ Store curr JFP into new frame
0x2bcbdef0	32:	addiu	JFP, JSP, 8	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbdef4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbdef8	40:	addiu	a3, zero, 0
0x2bcbdefc	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbdf00	48:	addiu	a3, zero, -1
0x2bcbdf04	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbdf08	56:	move	a0, EE
0x2bcbdf0c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbdf10	64:	lui	t9, hi16(0x65)
0x2bcbdf14	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbdf18	72:	jalr	t9
0x2bcbdf1c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbdf20	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbdf24	84:	nop
0x2bcbdf28	88:	nop
0x2bcbdf2c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(22)
0x2bcbdf30	96:	lw	s6, -24(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(23)
0x2bcbdf34	100:	lw	s7, -20(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
0x2bcbdf38	104:	lw	ra, -16(JFP)	@ Java local cell # 2
0x2bcbdf3c	108:	sw	ra, -8(JFP)	@ Java local cell # 4
0x2bcbdf40	112:	lw	t9, -12(JFP)	@ Java local cell # 3
0x2bcbdf44	116:	sw	t9, -4(JFP)	@ Java local cell # 5
			@ Outgoing local(4) reg(20): not in register
0x2bcbdf48	120:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(5) reg(21): not in register
0x2bcbdf4c	124:	lw	s5, -4(JFP)	@ Java local cell # 5
			@ Outgoing local(0) reg(22): in correct register
			@ Outgoing local(1) reg(23): in correct register
0x2bcbdf50	128:	b	PC=0x2bcbdf50	@ branch to block L1
0x2bcbdf54	132:	nop
			@ Initial Temp REF set is 
	L2:	136:	@ Patchable GC Check point
0x2bcbdf58	136:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcbdf58	136:	nop
0x2bcbdf5c	140:	nop
          		@ Captured a stackmap here.
	L2:	144:	@ entry point when locals need to be loaded
			@ Preloading incoming local(4) reg(20)
0x2bcbdf60	144:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Preloading incoming local(5) reg(21)
0x2bcbdf64	148:	lw	s5, -4(JFP)	@ Java local cell # 5
			@ Preloading incoming local(0) reg(22)
0x2bcbdf68	152:	lw	s6, -24(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(23)
0x2bcbdf6c	156:	lw	s7, -20(JFP)	@ Java local cell # 1
	L2:	160:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=9 compiledPc=144
0x2bcbdf70	160:	lw	ra, -16(JFP)	@ Java local cell # 2
0x2bcbdf74	164:	addu	s4, s4, ra
0x2bcbdf78	168:	sw	s4, -8(JFP)	@ Java local cell # 4
0x2bcbdf7c	172:	lw	t9, -12(JFP)	@ Java local cell # 3
0x2bcbdf80	176:	addu	s5, s5, t9
0x2bcbdf84	180:	sw	s5, -4(JFP)	@ Java local cell # 5
			@ Outgoing local(4) reg(20): in correct register
			@ Outgoing local(5) reg(21): in correct register
			@ Outgoing local(0) reg(22): in correct register
			@ Outgoing local(1) reg(23): in correct register
			@ Initial Temp REF set is 
	L1:	184:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(20)
			@ Binding Incoming Local(5) to reg(21)
			@ Binding Incoming Local(0) to reg(22)
			@ Binding Incoming Local(1) to reg(23)
--->Fixed instruction at 128(0x2bcbdf50) to reference 184
          		@ MAP_PC idepth=0 javaPc=21 compiledPc=184
0x2bcbdf88	184:	sw	s6, 0(JSP)
0x2bcbdf8c	188:	sw	s7, 4(JSP)
0x2bcbdf90	192:	sw	s4, 8(JSP)
0x2bcbdf94	196:	sw	s5, 12(JSP)
0x2bcbdf98	200:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbdf9c	204:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbdfa0	208:	lw	s7, 0(a0)	@ call method through mb
0x2bcbdfa4	212:	jalr	s7
0x2bcbdfa8	216:	nop
          		@ Captured a stackmap here.
0x2bcbdfac	220:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbdfb0	224:	lw	s7, 0(JSP)
			@ Outgoing local(4) reg(20): not in register
0x2bcbdfb4	228:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(5) reg(21): not in register
0x2bcbdfb8	232:	lw	s5, -4(JFP)	@ Java local cell # 5
			@ Outgoing local(0) reg(22): not in register
0x2bcbdfbc	236:	lw	s6, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(23): not in register
0x2bcbdfc0	240:	sw	s7, 28(JFP)	@ spill Java temp cell # 0
0x2bcbdfc4	244:	lw	s7, -20(JFP)	@ Java local cell # 1
0x2bcbdfc8	248:	lw	ra, 28(JFP)	@ Java temp cell # 0
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcbdfcc	252:	addiu	t7, zero, -1
0x2bcbdfd0	256:	bne	ra, t7, PC=0x2bcbdf58	@ branch to block L2
0x2bcbdfd4	260:	nop
0x2bcbdfcc	252:	addiu	t7, zero, -1
0x2bcbdfd0	256:	bne	ra, t7, PC=0x2bcbdf70	@ branch to block L2, skip GC
0x2bcbdfd4	260:	nop
0x2bcbdfd8	264:	addiu	JSP, JFP, -24
0x2bcbdfdc	268:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbdfe0	272:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbdfe4	276:	nop
0x2bcbdfe8	280:	.word	9757796	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
--->Fixed instruction at 200(0x2bcbdf98) to reference 280
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbded0) >>>>>>>>
          		@ Capacity is 19 word(s)
0x2bcbded0	0:	addiu	a1, JSP, 60
<<<<<<<<<Pop Code Buffer to PC = 284 (0x2bcbdfec) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbdf20) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcbdf20	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcbdf24	84:	lui	CP, hi16(0x2bcb)
0x2bcbdf28	88:	ori	CP, CP, lo16(0x2bcbdfe8)
0x2bcbdf2c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 284 (0x2bcbdfec) <<<<<<<<<
JS: COMPILED: size=372 startPC=0x2bcbded0 com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.BPossMoves.BPawn_Moves(I)V
JS: COMPILING com.sun.mep.bench.Chess.BPossMoves.BPawn_Moves(I)V
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
orig bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
o1   bkID(3) Incoming Locals(1 0x0): 2- 
o1   bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
orig bkID(2) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(2) Incoming Locals(1 0x0): 1- 
s1   bkID(2) Incoming Locals(2 0x0): 1- 0- 
s1   bkID(2) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(2) Incoming Locals(2 0x0): 1- 0- 
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(0) Incoming Locals(1 0x0): 1- 
s1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
s1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
orig bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
o1   bkID(3) Incoming Locals(1 0x0): 2- 
o1   bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
orig bkID(2) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(2) Incoming Locals(1 0x0): 1- 
s1   bkID(2) Incoming Locals(2 0x0): 1- 0- 
s1   bkID(2) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(2) Incoming Locals(2 0x0): 1- 0- 
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(0) Incoming Locals(1 0x0): 1- 
s1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
s1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
bkID(3) local(0 #2)  not found in goalBk
bkID(3) local(1 #0)  not found in goalBk
bkID(3) local(2 #1)  not found in goalBk
bkID(2) local(0 #1)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(2) Incoming Locals(2 0x0): 1- 0- 
+bk  bkID(2) Incoming Locals(2 0x1): 1+ 0- 
-gbk bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
+gbk bkID(3) Incoming Locals(3 0x1): 1+ 0- 2- 
bkID(2) local(0 #1)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(2 0x1): 1+ 0- 
dstBk(2) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(2) Incoming Locals(2 0x1): 1+ 0- 
 ordered in bk
-gbk bkID(3) Incoming Locals(3 0x1): 1+ 0- 2- 
dstBk(3) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(3) Incoming Locals(3 0x1): 1+ 0- 2- 
bkID(2) local(1 #0)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(2) Incoming Locals(2 0x1): 1+ 0- 
+bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
-gbk bkID(3) Incoming Locals(3 0x1): 1+ 0- 2- 
+gbk bkID(3) Incoming Locals(3 0x3): 1+ 0+ 2- 
bkID(2) local(1 #0)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(3 0x3): 1+ 0+ 2- 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(3) Incoming Locals(3 0x3): 1+ 0+ 2- 
bkID(1) local(0 #0)  ordered in goalBk(2)
-bk  bkID(1) Incoming Locals(2 0x0): 0- 1- 
dstBk(1) local(1 0) found in slot(0)
local(#1) swapped with local(#0)
+bk  bkID(1) Incoming Locals(2 0x2): 1- 0+ 
bkID(1) local(1 #0)  ordered in goalBk(2)
-bk  bkID(1) Incoming Locals(2 0x2): 1- 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(1) Incoming Locals(2 0x2): 1- 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
bkID(0) local(0 #1)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(2 0x0): 1- 0- 
+bk  bkID(0) Incoming Locals(2 0x1): 1+ 0- 
-gbk bkID(1) Incoming Locals(2 0x2): 1- 0+ 
+gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
bkID(0) local(0 #1)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x1): 1+ 0- 
dstBk(0) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(0) Incoming Locals(2 0x1): 1+ 0- 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(1) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
bkID(0) local(1 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x1): 1+ 0- 
dstBk(0) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(0) Incoming Locals(2 0x3): 1+ 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
pre  bkID(3) Incoming Locals(3 0x3): 1+ 0+ 2- 
local(#2) swapped with local(#2)
post bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 

#################################################

The maximum node counts per root node are 8
IR block list contains 5 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 9 root nodes: in block 
* flags: 0x41
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.BPossMoves.BPawn_Moves(I)V(BPossMoves.java:167)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<0>  (0x94f89c):    iload_1 
<1>  (0x94f89d):    bipush 16
<3>  (0x94f89f):    if_icmpge <49>
<6>  (0x94f8a2):    aload_0 
<7>  (0x94f8a3):    agetfield_quick #4
<10>  (0x94f8a6):    agetfield_quick #3
<13>  (0x94f8a9):    iload_1 
<14>  (0x94f8aa):    bipush 8
<16>  (0x94f8ac):    iadd 
<17>  (0x94f8ad):    baload 
<18>  (0x94f8ae):    bipush 99
<20>  (0x94f8b0):    if_icmpne <49>
<23>  (0x94f8b3):    aload_0 
<24>  (0x94f8b4):    agetfield_quick #4
<27>  (0x94f8b7):    agetfield_quick #3
<30>  (0x94f8ba):    iload_1 
<31>  (0x94f8bb):    bipush 16
<33>  (0x94f8bd):    iadd 
<34>  (0x94f8be):    baload 
<35>  (0x94f8bf):    bipush 99
<37>  (0x94f8c1):    if_icmpne <49>
<40>  (0x94f8c4):    aload_0 
<41>  (0x94f8c5):    iload_1 
<42>  (0x94f8c6):    iload_1 
<43>  (0x94f8c7):    bipush 16
<45>  (0x94f8c9):    iadd 
<46>  (0x94f8ca):    invokevirtual_quick_w #8 <com.sun.mep.bench.Chess.BPossMoves.Store_Move(II)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(1)	ID(2)
 	local(0)	ID(5)
 
Incoming Locals(2): 
	local(1)	ID(2)
 	local(0)	ID(45)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(1 0)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 4) BCOND (int) 
   target: (BlockID: 1 BlockPC: 49)
   condition: GE
   flags: 0
      <(ID: 2) IDENTITY (int)  (ref count: 5)
         <(ID: 22) LOCAL (int)   1>
      <(ID: 3) CONST_JAVA_NUMERIC32 (int)  (16)


   <(ID: 8) IDENTITY (reference)  (ref count: 2)
      <(ID: 12) FETCH (reference) 
         <(ID: 7) FIELD_REF (reference) 
            <(ID: 5) IDENTITY (reference)  (ref count: 3)
               <(ID: 43) LOCAL (reference)   0>
            <(ID: 6) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 11) IDENTITY (reference)  (ref count: 4)
      <(ID: 21) FETCH (reference) 
         <(ID: 10) FIELD_REF (reference) 
            <(ID: 8) IDENTITY (reference)  (ref count: 2)
            <(ID: 9) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 18) IDENTITY (int)  (ref count: 2)
      <(ID: 23) FETCH (int) 
         <(ID: 17) INDEX (int) 
            <(ID: 11) IDENTITY (reference)  (ref count: 4)
            <(ID: 16) BOUNDS_CHECK (int) 
               <(ID: 14) ADD (int) 
                  <(ID: 2) IDENTITY (int)  (ref count: 5)
                  <(ID: 13) CONST_JAVA_NUMERIC32 (int)  (8)
               <(ID: 15) IDENTITY (int)  (ref count: 2)
                  <(ID: 31) ARRAY_LENGTH (int) 
                     <(ID: 11) IDENTITY (reference)  (ref count: 4)

   <(ID: 20) BCOND (int) 
   target: (BlockID: 1 BlockPC: 49)
   condition: NE
   flags: 0
      <(ID: 18) IDENTITY (int)  (ref count: 2)
      <(ID: 19) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 28) IDENTITY (int)  (ref count: 2)
      <(ID: 32) FETCH (int) 
         <(ID: 27) INDEX (int) 
            <(ID: 11) IDENTITY (reference)  (ref count: 4)
            <(ID: 26) BOUNDS_CHECK (int) 
               <(ID: 25) ADD (int) 
                  <(ID: 2) IDENTITY (int)  (ref count: 5)
                  <(ID: 24) CONST_JAVA_NUMERIC32 (int)  (16)
               <(ID: 15) IDENTITY (int)  (ref count: 2)

   <(ID: 30) BCOND (int) 
   target: (BlockID: 1 BlockPC: 49)
   condition: NE
   flags: 0
      <(ID: 28) IDENTITY (int)  (ref count: 2)
      <(ID: 29) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 42) INVOKE (v) 
      <(ID: 39) PARAMETER (reference) 
         <(ID: 5) IDENTITY (reference)  (ref count: 3)
         <(ID: 38) PARAMETER (int) 
            <(ID: 2) IDENTITY (int)  (ref count: 5)
            <(ID: 37) PARAMETER (int) 
               <(ID: 34) ADD (int) 
                  <(ID: 2) IDENTITY (int)  (ref count: 5)
                  <(ID: 33) CONST_JAVA_NUMERIC32 (int)  (16)
               <(ID: 36) NULL_PARAMETER (NONE) 
      <(ID: 41) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 40) GET_VTBL (NONE) 
            <(ID: 5) IDENTITY (reference)  (ref count: 3)
         <(ID: 35) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)


*************************************************
*
* (block ID:1 block PC:49 )
* IR root list contains 6 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.BPossMoves.BPawn_Moves(I)V(BPossMoves.java:175)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<49>  (0x94f8cd):    aload_0 
<50>  (0x94f8ce):    agetfield_quick #4
<53>  (0x94f8d1):    agetfield_quick #3
<56>  (0x94f8d4):    iload_1 
<57>  (0x94f8d5):    bipush 8
<59>  (0x94f8d7):    iadd 
<60>  (0x94f8d8):    baload 
<61>  (0x94f8d9):    bipush 99
<63>  (0x94f8db):    if_icmpne <75>
<66>  (0x94f8de):    aload_0 
<67>  (0x94f8df):    iload_1 
<68>  (0x94f8e0):    iload_1 
<69>  (0x94f8e1):    bipush 8
<71>  (0x94f8e3):    iadd 
<72>  (0x94f8e4):    invokevirtual_quick_w #8 <com.sun.mep.bench.Chess.BPossMoves.Store_Move(II)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(45)
 	local(1)	ID(53)
 
Incoming Locals(2): 
	local(1)	ID(53)
 	local(0)	ID(45)
 
Successor Blocks(1): 
	ID(2) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(1 0)

   <(ID: 44) MAP_PC (NONE)   49>

   <(ID: 48) IDENTITY (reference)  (ref count: 2)
      <(ID: 52) FETCH (reference) 
         <(ID: 47) FIELD_REF (reference) 
            <(ID: 45) IDENTITY (reference)  (ref count: 3)
               <(ID: 74) LOCAL (reference)   0>
            <(ID: 46) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 51) IDENTITY (reference)  (ref count: 3)
      <(ID: 62) FETCH (reference) 
         <(ID: 50) FIELD_REF (reference) 
            <(ID: 48) IDENTITY (reference)  (ref count: 2)
            <(ID: 49) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 59) IDENTITY (int)  (ref count: 2)
      <(ID: 63) FETCH (int) 
         <(ID: 58) INDEX (int) 
            <(ID: 51) IDENTITY (reference)  (ref count: 3)
            <(ID: 57) BOUNDS_CHECK (int) 
               <(ID: 55) ADD (int) 
                  <(ID: 53) IDENTITY (int)  (ref count: 3)
                     <(ID: 75) LOCAL (int)   1>
                  <(ID: 54) CONST_JAVA_NUMERIC32 (int)  (8)
               <(ID: 56) ARRAY_LENGTH (int) 
                  <(ID: 51) IDENTITY (reference)  (ref count: 3)

   <(ID: 61) BCOND (int) 
   target: (BlockID: 2 BlockPC: 75)
   condition: NE
   flags: 0
      <(ID: 59) IDENTITY (int)  (ref count: 2)
      <(ID: 60) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 73) INVOKE (v) 
      <(ID: 70) PARAMETER (reference) 
         <(ID: 45) IDENTITY (reference)  (ref count: 3)
         <(ID: 69) PARAMETER (int) 
            <(ID: 53) IDENTITY (int)  (ref count: 3)
            <(ID: 68) PARAMETER (int) 
               <(ID: 65) ADD (int) 
                  <(ID: 53) IDENTITY (int)  (ref count: 3)
                  <(ID: 64) CONST_JAVA_NUMERIC32 (int)  (8)
               <(ID: 67) NULL_PARAMETER (NONE) 
      <(ID: 72) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 71) GET_VTBL (NONE) 
            <(ID: 45) IDENTITY (reference)  (ref count: 3)
         <(ID: 66) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)


*************************************************
*
* (block ID:2 block PC:75 )
* IR root list contains 8 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.BPossMoves.BPawn_Moves(I)V(BPossMoves.java:180)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<75>  (0x94f8e7):    iload_1 
<76>  (0x94f8e8):    bipush 7
<78>  (0x94f8ea):    iand 
<79>  (0x94f8eb):    istore_2 
<80>  (0x94f8ec):    iload_2 
<81>  (0x94f8ed):    bipush 7
<83>  (0x94f8ef):    if_icmpge <112>
<86>  (0x94f8f2):    aload_0 
<87>  (0x94f8f3):    agetfield_quick #4
<90>  (0x94f8f6):    agetfield_quick #3
<93>  (0x94f8f9):    iload_1 
<94>  (0x94f8fa):    bipush 9
<96>  (0x94f8fc):    iadd 
<97>  (0x94f8fd):    baload 
<98>  (0x94f8fe):    bipush 99
<100>  (0x94f900):    if_icmpeq <112>
<103>  (0x94f903):    aload_0 
<104>  (0x94f904):    iload_1 
<105>  (0x94f905):    iconst_1 
<106>  (0x94f906):    bipush 8
<108>  (0x94f908):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<111>  (0x94f90b):    pop 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(1)	ID(77)
 	local(0)	ID(85)
 
Incoming Locals(2): 
	local(1)	ID(77)
 	local(0)	ID(118)
 
Assigned Locals(1): 
	ASSIGN(83): local(2)	ID(82)	rhsID(79)
 
Successor Blocks(1): 
	ID(3) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(1 0 2)

   <(ID: 76) MAP_PC (NONE)   75>

   <(ID: 83) ASSIGN (int)  (assignIdx: 0)
      <(ID: 82) LOCAL (int)   2>
      <(ID: 79) IDENTITY (int)  (ref count: 2)
         <(ID: 84) AND (int) 
            <(ID: 77) IDENTITY (int)  (ref count: 3)
               <(ID: 102) LOCAL (int)   1>
            <(ID: 78) CONST_JAVA_NUMERIC32 (int)  (7)

   <(ID: 81) BCOND (int) 
   target: (BlockID: 3 BlockPC: 112)
   condition: GE
   flags: 0
      <(ID: 79) IDENTITY (int)  (ref count: 2)
      <(ID: 80) CONST_JAVA_NUMERIC32 (int)  (7)


   <(ID: 88) IDENTITY (reference)  (ref count: 2)
      <(ID: 92) FETCH (reference) 
         <(ID: 87) FIELD_REF (reference) 
            <(ID: 85) IDENTITY (reference)  (ref count: 2)
               <(ID: 113) LOCAL (reference)   0>
            <(ID: 86) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 91) IDENTITY (reference)  (ref count: 3)
      <(ID: 101) FETCH (reference) 
         <(ID: 90) FIELD_REF (reference) 
            <(ID: 88) IDENTITY (reference)  (ref count: 2)
            <(ID: 89) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 98) IDENTITY (int)  (ref count: 2)
      <(ID: 103) FETCH (int) 
         <(ID: 97) INDEX (int) 
            <(ID: 91) IDENTITY (reference)  (ref count: 3)
            <(ID: 96) BOUNDS_CHECK (int) 
               <(ID: 94) ADD (int) 
                  <(ID: 77) IDENTITY (int)  (ref count: 3)
                  <(ID: 93) CONST_JAVA_NUMERIC32 (int)  (9)
               <(ID: 95) ARRAY_LENGTH (int) 
                  <(ID: 91) IDENTITY (reference)  (ref count: 3)

   <(ID: 100) BCOND (int) 
   target: (BlockID: 3 BlockPC: 112)
   condition: EQ
   flags: 0
      <(ID: 98) IDENTITY (int)  (ref count: 2)
      <(ID: 99) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 112) INVOKE (int) 
      <(ID: 111) PARAMETER (reference) 
         <(ID: 85) IDENTITY (reference)  (ref count: 2)
         <(ID: 110) PARAMETER (int) 
            <(ID: 77) IDENTITY (int)  (ref count: 3)
            <(ID: 109) PARAMETER (int) 
               <(ID: 104) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 108) PARAMETER (int) 
                  <(ID: 105) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 107) NULL_PARAMETER (NONE) 
      <(ID: 106) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)


*************************************************
*
* (block ID:3 block PC:112 )
* IR root list contains 7 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x7
* Source: com.sun.mep.bench.Chess.BPossMoves.BPawn_Moves(I)V(BPossMoves.java:187)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<112>  (0x94f90c):    iload_2 
<113>  (0x94f90d):    ifle <142>
<116>  (0x94f910):    aload_0 
<117>  (0x94f911):    agetfield_quick #4
<120>  (0x94f914):    agetfield_quick #3
<123>  (0x94f917):    iload_1 
<124>  (0x94f918):    bipush 7
<126>  (0x94f91a):    iadd 
<127>  (0x94f91b):    baload 
<128>  (0x94f91c):    bipush 99
<130>  (0x94f91e):    if_icmpeq <142>
<133>  (0x94f921):    aload_0 
<134>  (0x94f922):    iload_1 
<135>  (0x94f923):    iconst_m1 
<136>  (0x94f924):    bipush 8
<138>  (0x94f926):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<141>  (0x94f929):    pop 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(2)	ID(115)
 	local(0)	ID(118)
 	local(1)	ID(126)
 
Incoming Locals(3): 
	local(1)	ID(126)
 	local(0)	ID(118)
 	local(2)	ID(115)
 
Successor Blocks(1): 
	ID(4) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 114) MAP_PC (NONE)   112>

   <(ID: 117) BCOND (int) 
   target: (BlockID: 4 BlockPC: 142)
   condition: LE
   flags: 0
      <(ID: 115) LOCAL (int)   2>
      <(ID: 116) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 121) IDENTITY (reference)  (ref count: 2)
      <(ID: 125) FETCH (reference) 
         <(ID: 120) FIELD_REF (reference) 
            <(ID: 118) IDENTITY (reference)  (ref count: 2)
               <(ID: 146) LOCAL (reference)   0>
            <(ID: 119) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 124) IDENTITY (reference)  (ref count: 3)
      <(ID: 135) FETCH (reference) 
         <(ID: 123) FIELD_REF (reference) 
            <(ID: 121) IDENTITY (reference)  (ref count: 2)
            <(ID: 122) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 132) IDENTITY (int)  (ref count: 2)
      <(ID: 136) FETCH (int) 
         <(ID: 131) INDEX (int) 
            <(ID: 124) IDENTITY (reference)  (ref count: 3)
            <(ID: 130) BOUNDS_CHECK (int) 
               <(ID: 128) ADD (int) 
                  <(ID: 126) IDENTITY (int)  (ref count: 2)
                     <(ID: 147) LOCAL (int)   1>
                  <(ID: 127) CONST_JAVA_NUMERIC32 (int)  (7)
               <(ID: 129) ARRAY_LENGTH (int) 
                  <(ID: 124) IDENTITY (reference)  (ref count: 3)

   <(ID: 134) BCOND (int) 
   target: (BlockID: 4 BlockPC: 142)
   condition: EQ
   flags: 0
      <(ID: 132) IDENTITY (int)  (ref count: 2)
      <(ID: 133) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 145) INVOKE (int) 
      <(ID: 144) PARAMETER (reference) 
         <(ID: 118) IDENTITY (reference)  (ref count: 2)
         <(ID: 143) PARAMETER (int) 
            <(ID: 126) IDENTITY (int)  (ref count: 2)
            <(ID: 142) PARAMETER (int) 
               <(ID: 137) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 141) PARAMETER (int) 
                  <(ID: 138) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 140) NULL_PARAMETER (NONE) 
      <(ID: 139) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)


*************************************************
*
* (block ID:4 block PC:142 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.BPossMoves.BPawn_Moves(I)V(BPossMoves.java:189)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<142>  (0x94f92a):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

   <(ID: 148) MAP_PC (NONE)   142>

   <(ID: 149) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 80
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 866
ESTIMATED BUFFER SIZE = 1068
CODE BUFFER ADDRESS = 0x2bcbe000
PC MAP TABLE ADDRESS = 0x2bcbe008
CODE ENTRY ADDRESS = 0x2bcbe040
          		@ Method prologue
0x2bcbe040	0:	addiu	a1, JSP, 52	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbe044	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbe048	8:	sltu	t7, a1, CHUNKEND
0x2bcbe04c	12:	bne	t7, zero, PC=0x2bcbe040	@ goto .skip
0x2bcbe050	16:	nop
0x2bcbe054	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbe058	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbe04c) >>>>>>>>
0x2bcbe04c	12:	bne	t7, zero, PC=0x2bcbe05c	@ goto .skip
0x2bcbe050	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbe05c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbe05c	28:	sw	JFP, 4(JSP)	@ Store curr JFP into new frame
0x2bcbe060	32:	addiu	JFP, JSP, 4	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbe064	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbe068	40:	addiu	a3, zero, 0
0x2bcbe06c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbe070	48:	addiu	a3, zero, -1
0x2bcbe074	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbe078	56:	move	a0, EE
0x2bcbe07c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbe080	64:	lui	t9, hi16(0x65)
0x2bcbe084	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbe088	72:	jalr	t9
0x2bcbe08c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbe090	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbe094	84:	nop
0x2bcbe098	88:	nop
0x2bcbe09c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(1) reg(20)
0x2bcbe0a0	96:	lw	s4, -8(JFP)	@ Java local cell # 1
			@ Preloading incoming local(0) reg(21)
0x2bcbe0a4	100:	lw	s5, -12(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbe0a8	104:	sltiu	t7, s4, 16
0x2bcbe0ac	108:	beq	t7, zero, PC=0x2bcbe0a8	@ branch to block L1
0x2bcbe0b0	112:	nop
          		@ Do getfield:
0x2bcbe0b4	116:	lw	s7, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbe0b8	120:	lw	s6, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbe0bc	124:	addiu	s7, s4, 8
0x2bcbe0c0	128:	lw	ra, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcbe0c4	132:	sltu	t7, s7, ra
0x2bcbe0c8	136:	bne	t7, zero, PC=0x2bcbe0c4	@ br .skip
0x2bcbe0cc	140:	nop
0x2bcbe0d0	144:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbe0d4	148:	nop
		.skip
--->Fixed instruction at 136(0x2bcbe0c8) to reference 152
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbe0d8	152:	addu	t8, s6, s7
0x2bcbe0dc	156:	lb	t9, 12(t8)
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbe0e0	160:	addiu	t7, zero, 99
0x2bcbe0e4	164:	bne	t9, t7, PC=0x2bcbe0e0	@ branch to block L1
0x2bcbe0e8	168:	nop
0x2bcbe0ec	172:	addiu	s7, s4, 16
          		@ deferred comparison: 
0x2bcbe0f0	176:	sltu	t7, s7, ra
0x2bcbe0f4	180:	bne	t7, zero, PC=0x2bcbe0f0	@ br .skip
0x2bcbe0f8	184:	nop
0x2bcbe0fc	188:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbe100	192:	nop
		.skip
--->Fixed instruction at 180(0x2bcbe0f4) to reference 196
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbe104	196:	addu	t9, s6, s7
0x2bcbe108	200:	lb	ra, 12(t9)
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbe10c	204:	addiu	t7, zero, 99
0x2bcbe110	208:	bne	ra, t7, PC=0x2bcbe10c	@ branch to block L1
0x2bcbe114	212:	nop
0x2bcbe118	216:	sw	s5, 0(JSP)
0x2bcbe11c	220:	sw	s4, 4(JSP)
0x2bcbe120	224:	addiu	s7, s4, 16
0x2bcbe124	228:	sw	s7, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcbe128	232:	lw	s7, 0(s5)	@ Get object.cb
0x2bcbe12c	236:	addiu	t7, zero, -4
0x2bcbe130	240:	and	s7, s7, t7
0x2bcbe134	244:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbe138	248:	lw	a0, 68(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbe13c	252:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbe140	256:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe144	260:	jalr	s7
0x2bcbe148	264:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(1) reg(20): not in register
0x2bcbe14c	268:	lw	s4, -8(JFP)	@ Java local cell # 1
			@ Outgoing local(0) reg(21): not in register
0x2bcbe150	272:	lw	s5, -12(JFP)	@ Java local cell # 0
			@ Initial Temp REF set is 
	L1:	276:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 208(0x2bcbe110) to reference 276
--->Fixed instruction at 164(0x2bcbe0e4) to reference 276
--->Fixed instruction at 108(0x2bcbe0ac) to reference 276
          		@ MAP_PC idepth=0 javaPc=49 compiledPc=276
          		@ Do getfield:
0x2bcbe154	276:	lw	s7, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbe158	280:	lw	s6, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbe15c	284:	addiu	s7, s4, 8
0x2bcbe160	288:	lw	ra, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcbe164	292:	sltu	t7, s7, ra
0x2bcbe168	296:	bne	t7, zero, PC=0x2bcbe164	@ br .skip
0x2bcbe16c	300:	nop
0x2bcbe170	304:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbe174	308:	nop
		.skip
--->Fixed instruction at 296(0x2bcbe168) to reference 312
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbe178	312:	addu	t9, s6, s7
0x2bcbe17c	316:	lb	ra, 12(t9)
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbe180	320:	addiu	t7, zero, 99
0x2bcbe184	324:	bne	ra, t7, PC=0x2bcbe180	@ branch to block L2
0x2bcbe188	328:	nop
0x2bcbe18c	332:	sw	s5, 0(JSP)
0x2bcbe190	336:	sw	s4, 4(JSP)
0x2bcbe194	340:	addiu	s7, s4, 8
0x2bcbe198	344:	sw	s7, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcbe19c	348:	lw	s7, 0(s5)	@ Get object.cb
0x2bcbe1a0	352:	addiu	t7, zero, -4
0x2bcbe1a4	356:	and	s7, s7, t7
0x2bcbe1a8	360:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbe1ac	364:	lw	a0, 68(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbe1b0	368:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbe1b4	372:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe1b8	376:	jalr	s7
0x2bcbe1bc	380:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(1) reg(20): not in register
0x2bcbe1c0	384:	lw	s4, -8(JFP)	@ Java local cell # 1
			@ Outgoing local(0) reg(21): not in register
0x2bcbe1c4	388:	lw	s5, -12(JFP)	@ Java local cell # 0
			@ Initial Temp REF set is 
	L2:	392:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 324(0x2bcbe184) to reference 392
          		@ MAP_PC idepth=0 javaPc=75 compiledPc=392
0x2bcbe1c8	392:	andi	s6, s4, 7
0x2bcbe1cc	396:	sw	s6, -4(JFP)	@ Java local cell # 2
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(2) reg(22): in correct register
          		@ deferred comparison: 
0x2bcbe1d0	400:	sltiu	t7, s6, 7
0x2bcbe1d4	404:	beq	t7, zero, PC=0x2bcbe1d0	@ branch to block L3
0x2bcbe1d8	408:	nop
          		@ Do getfield:
0x2bcbe1dc	412:	lw	s7, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbe1e0	416:	lw	ra, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbe1e4	420:	addiu	s7, s4, 9
0x2bcbe1e8	424:	lw	t9, 8(ra)	@ arraylength
          		@ deferred comparison: 
0x2bcbe1ec	428:	sltu	t7, s7, t9
0x2bcbe1f0	432:	bne	t7, zero, PC=0x2bcbe1ec	@ br .skip
0x2bcbe1f4	436:	nop
0x2bcbe1f8	440:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbe1fc	444:	nop
		.skip
--->Fixed instruction at 432(0x2bcbe1f0) to reference 448
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbe200	448:	addu	t8, ra, s7
0x2bcbe204	452:	lb	t9, 12(t8)
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(2) reg(22): in correct register
          		@ deferred comparison: 
0x2bcbe208	456:	addiu	t7, zero, 99
0x2bcbe20c	460:	beq	t9, t7, PC=0x2bcbe208	@ branch to block L3
0x2bcbe210	464:	nop
0x2bcbe214	468:	sw	s5, 0(JSP)
0x2bcbe218	472:	sw	s4, 4(JSP)
0x2bcbe21c	476:	addiu	s7, zero, 1	@ const 1
0x2bcbe220	480:	sw	s7, 8(JSP)
0x2bcbe224	484:	addiu	ra, zero, 8	@ const 8
0x2bcbe228	488:	sw	ra, 12(JSP)
0x2bcbe22c	492:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbe230	496:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbe234	500:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe238	504:	jalr	s7
0x2bcbe23c	508:	nop
          		@ Captured a stackmap here.
0x2bcbe240	512:	addiu	JSP, JSP, -4
			@ Outgoing local(1) reg(20): not in register
0x2bcbe244	516:	lw	s4, -8(JFP)	@ Java local cell # 1
			@ Outgoing local(0) reg(21): not in register
0x2bcbe248	520:	lw	s5, -12(JFP)	@ Java local cell # 0
			@ Outgoing local(2) reg(22): not in register
0x2bcbe24c	524:	lw	s6, -4(JFP)	@ Java local cell # 2
			@ Initial Temp REF set is 
	L3:	528:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(2) to reg(22)
--->Fixed instruction at 460(0x2bcbe20c) to reference 528
--->Fixed instruction at 404(0x2bcbe1d4) to reference 528
          		@ MAP_PC idepth=0 javaPc=112 compiledPc=528
          		@ deferred comparison: 
0x2bcbe250	528:	slt	t7, zero, s6
0x2bcbe254	532:	beq	t7, zero, PC=0x2bcbe250	@ branch to block L4
0x2bcbe258	536:	nop
          		@ Do getfield:
0x2bcbe25c	540:	lw	s7, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbe260	544:	lw	ra, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbe264	548:	addiu	s7, s4, 7
0x2bcbe268	552:	lw	t9, 8(ra)	@ arraylength
          		@ deferred comparison: 
0x2bcbe26c	556:	sltu	t7, s7, t9
0x2bcbe270	560:	bne	t7, zero, PC=0x2bcbe26c	@ br .skip
0x2bcbe274	564:	nop
0x2bcbe278	568:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbe27c	572:	nop
		.skip
--->Fixed instruction at 560(0x2bcbe270) to reference 576
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbe280	576:	addu	t8, ra, s7
0x2bcbe284	580:	lb	t9, 12(t8)
          		@ deferred comparison: 
0x2bcbe288	584:	addiu	t7, zero, 99
0x2bcbe28c	588:	beq	t9, t7, PC=0x2bcbe288	@ branch to block L4
0x2bcbe290	592:	nop
0x2bcbe294	596:	sw	s5, 0(JSP)
0x2bcbe298	600:	sw	s4, 4(JSP)
0x2bcbe29c	604:	addiu	s7, zero, -1	@ const -1
0x2bcbe2a0	608:	sw	s7, 8(JSP)
0x2bcbe2a4	612:	addiu	ra, zero, 8	@ const 8
0x2bcbe2a8	616:	sw	ra, 12(JSP)
0x2bcbe2ac	620:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbe2b0	624:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbe2b4	628:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe2b8	632:	jalr	s7
0x2bcbe2bc	636:	nop
          		@ Captured a stackmap here.
0x2bcbe2c0	640:	addiu	JSP, JSP, -4
			@ Initial Temp REF set is 
	L4:	644:	@ entry point for branches
--->Fixed instruction at 588(0x2bcbe28c) to reference 644
--->Fixed instruction at 532(0x2bcbe254) to reference 644
          		@ MAP_PC idepth=0 javaPc=142 compiledPc=644
0x2bcbe2c4	644:	addiu	JSP, JFP, -12
0x2bcbe2c8	648:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbe2cc	652:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbe2d0	656:	nop
0x2bcbe2d4	660:	.word	9757796	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
--->Fixed instruction at 620(0x2bcbe2ac) to reference 660
--->Fixed instruction at 492(0x2bcbe22c) to reference 660
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbe040) >>>>>>>>
          		@ Capacity is 15 word(s)
0x2bcbe040	0:	addiu	a1, JSP, 52
<<<<<<<<<Pop Code Buffer to PC = 664 (0x2bcbe2d8) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbe090) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbe090	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbe094	84:	lui	CP, hi16(0x2bcb)
0x2bcbe098	88:	ori	CP, CP, lo16(0x2bcbe2d4)
0x2bcbe09c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 664 (0x2bcbe2d8) <<<<<<<<<
JS: COMPILED: size=760 startPC=0x2bcbe040 com.sun.mep.bench.Chess.BPossMoves.BPawn_Moves(I)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.BPossMoves.BKnight_Moves(I)V
JS: COMPILING com.sun.mep.bench.Chess.BPossMoves.BKnight_Moves(I)V
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 

#################################################

The maximum node counts per root node are 6
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 10 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.BPossMoves.BKnight_Moves(I)V(BPossMoves.java:192)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x94f964):    aload_0 
<1>  (0x94f965):    iload_1 
<2>  (0x94f966):    iconst_1 
<3>  (0x94f967):    bipush 240
<5>  (0x94f969):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<8>  (0x94f96c):    pop 
<9>  (0x94f96d):    aload_0 
<10>  (0x94f96e):    iload_1 
<11>  (0x94f96f):    iconst_2 
<12>  (0x94f970):    bipush 248
<14>  (0x94f972):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<17>  (0x94f975):    pop 
<18>  (0x94f976):    aload_0 
<19>  (0x94f977):    iload_1 
<20>  (0x94f978):    iconst_2 
<21>  (0x94f979):    bipush 8
<23>  (0x94f97b):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<26>  (0x94f97e):    pop 
<27>  (0x94f97f):    aload_0 
<28>  (0x94f980):    iload_1 
<29>  (0x94f981):    iconst_1 
<30>  (0x94f982):    bipush 16
<32>  (0x94f984):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<35>  (0x94f987):    pop 
<36>  (0x94f988):    aload_0 
<37>  (0x94f989):    iload_1 
<38>  (0x94f98a):    iconst_m1 
<39>  (0x94f98b):    bipush 16
<41>  (0x94f98d):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<44>  (0x94f990):    pop 
<45>  (0x94f991):    aload_0 
<46>  (0x94f992):    iload_1 
<47>  (0x94f993):    bipush 254
<49>  (0x94f995):    bipush 8
<51>  (0x94f997):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<54>  (0x94f99a):    pop 
<55>  (0x94f99b):    aload_0 
<56>  (0x94f99c):    iload_1 
<57>  (0x94f99d):    bipush 254
<59>  (0x94f99f):    bipush 248
<61>  (0x94f9a1):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<64>  (0x94f9a4):    pop 
<65>  (0x94f9a5):    aload_0 
<66>  (0x94f9a6):    iload_1 
<67>  (0x94f9a7):    iconst_m1 
<68>  (0x94f9a8):    bipush 240
<70>  (0x94f9aa):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<73>  (0x94f9ad):    pop 
<74>  (0x94f9ae):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 12) INVOKE (int) 
      <(ID: 11) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 8)
            <(ID: 22) LOCAL (reference)   0>
         <(ID: 10) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 8)
               <(ID: 23) LOCAL (int)   1>
            <(ID: 9) PARAMETER (int) 
               <(ID: 4) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 8) PARAMETER (int) 
                  <(ID: 5) CONST_JAVA_NUMERIC32 (int)  (-16)
                  <(ID: 7) NULL_PARAMETER (NONE) 
      <(ID: 6) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 21) INVOKE (int) 
      <(ID: 20) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 8)
         <(ID: 19) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 8)
            <(ID: 18) PARAMETER (int) 
               <(ID: 13) CONST_JAVA_NUMERIC32 (int)  (2)
               <(ID: 17) PARAMETER (int) 
                  <(ID: 14) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 16) NULL_PARAMETER (NONE) 
      <(ID: 15) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 32) INVOKE (int) 
      <(ID: 31) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 8)
         <(ID: 30) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 8)
            <(ID: 29) PARAMETER (int) 
               <(ID: 24) CONST_JAVA_NUMERIC32 (int)  (2)
               <(ID: 28) PARAMETER (int) 
                  <(ID: 25) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 27) NULL_PARAMETER (NONE) 
      <(ID: 26) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 41) INVOKE (int) 
      <(ID: 40) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 8)
         <(ID: 39) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 8)
            <(ID: 38) PARAMETER (int) 
               <(ID: 33) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 37) PARAMETER (int) 
                  <(ID: 34) CONST_JAVA_NUMERIC32 (int)  (16)
                  <(ID: 36) NULL_PARAMETER (NONE) 
      <(ID: 35) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 50) INVOKE (int) 
      <(ID: 49) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 8)
         <(ID: 48) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 8)
            <(ID: 47) PARAMETER (int) 
               <(ID: 42) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 46) PARAMETER (int) 
                  <(ID: 43) CONST_JAVA_NUMERIC32 (int)  (16)
                  <(ID: 45) NULL_PARAMETER (NONE) 
      <(ID: 44) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 59) INVOKE (int) 
      <(ID: 58) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 8)
         <(ID: 57) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 8)
            <(ID: 56) PARAMETER (int) 
               <(ID: 51) CONST_JAVA_NUMERIC32 (int)  (-2)
               <(ID: 55) PARAMETER (int) 
                  <(ID: 52) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 54) NULL_PARAMETER (NONE) 
      <(ID: 53) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 68) INVOKE (int) 
      <(ID: 67) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 8)
         <(ID: 66) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 8)
            <(ID: 65) PARAMETER (int) 
               <(ID: 60) CONST_JAVA_NUMERIC32 (int)  (-2)
               <(ID: 64) PARAMETER (int) 
                  <(ID: 61) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 63) NULL_PARAMETER (NONE) 
      <(ID: 62) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 77) INVOKE (int) 
      <(ID: 76) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 8)
         <(ID: 75) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 8)
            <(ID: 74) PARAMETER (int) 
               <(ID: 69) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 73) PARAMETER (int) 
                  <(ID: 70) CONST_JAVA_NUMERIC32 (int)  (-16)
                  <(ID: 72) NULL_PARAMETER (NONE) 
      <(ID: 71) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 78) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 458
ESTIMATED BUFFER SIZE = 564
CODE BUFFER ADDRESS = 0x2bcbe2f8
PC MAP TABLE ADDRESS = 0x2bcbe300
CODE ENTRY ADDRESS = 0x2bcbe328
          		@ Method prologue
0x2bcbe328	0:	addiu	a1, JSP, 48	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbe32c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbe330	8:	sltu	t7, a1, CHUNKEND
0x2bcbe334	12:	bne	t7, zero, PC=0x2bcbe328	@ goto .skip
0x2bcbe338	16:	nop
0x2bcbe33c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbe340	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbe334) >>>>>>>>
0x2bcbe334	12:	bne	t7, zero, PC=0x2bcbe344	@ goto .skip
0x2bcbe338	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbe344) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbe344	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbe348	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbe34c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbe350	40:	addiu	a3, zero, 0
0x2bcbe354	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbe358	48:	addiu	a3, zero, -1
0x2bcbe35c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbe360	56:	move	a0, EE
0x2bcbe364	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbe368	64:	lui	t9, hi16(0x65)
0x2bcbe36c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbe370	72:	jalr	t9
0x2bcbe374	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbe378	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbe37c	84:	nop
0x2bcbe380	88:	nop
0x2bcbe384	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbe388	96:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbe38c	100:	lw	s5, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
0x2bcbe390	104:	sw	s4, 0(JSP)
0x2bcbe394	108:	sw	s5, 4(JSP)
0x2bcbe398	112:	addiu	s7, zero, 1	@ const 1
0x2bcbe39c	116:	sw	s7, 8(JSP)
0x2bcbe3a0	120:	addiu	s6, zero, -16	@ const -16
0x2bcbe3a4	124:	sw	s6, 12(JSP)
0x2bcbe3a8	128:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbe3ac	132:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbe3b0	136:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe3b4	140:	jalr	s7
0x2bcbe3b8	144:	nop
          		@ Captured a stackmap here.
0x2bcbe3bc	148:	addiu	JSP, JSP, -4
0x2bcbe3c0	152:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbe3c4	156:	sw	s7, 0(JSP)
0x2bcbe3c8	160:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbe3cc	164:	sw	s6, 4(JSP)
0x2bcbe3d0	168:	addiu	s5, zero, 2	@ const 2
0x2bcbe3d4	172:	sw	s5, 8(JSP)
0x2bcbe3d8	176:	addiu	s4, zero, -8	@ const -8
0x2bcbe3dc	180:	sw	s4, 12(JSP)
0x2bcbe3e0	184:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbe3e4	188:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbe3e8	192:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe3ec	196:	jalr	s7
0x2bcbe3f0	200:	nop
          		@ Captured a stackmap here.
0x2bcbe3f4	204:	addiu	JSP, JSP, -4
0x2bcbe3f8	208:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbe3fc	212:	sw	s7, 0(JSP)
0x2bcbe400	216:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbe404	220:	sw	s6, 4(JSP)
0x2bcbe408	224:	addiu	s5, zero, 2	@ const 2
0x2bcbe40c	228:	sw	s5, 8(JSP)
0x2bcbe410	232:	addiu	s4, zero, 8	@ const 8
0x2bcbe414	236:	sw	s4, 12(JSP)
0x2bcbe418	240:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbe41c	244:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbe420	248:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe424	252:	jalr	s7
0x2bcbe428	256:	nop
          		@ Captured a stackmap here.
0x2bcbe42c	260:	addiu	JSP, JSP, -4
0x2bcbe430	264:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbe434	268:	sw	s7, 0(JSP)
0x2bcbe438	272:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbe43c	276:	sw	s6, 4(JSP)
0x2bcbe440	280:	addiu	s5, zero, 1	@ const 1
0x2bcbe444	284:	sw	s5, 8(JSP)
0x2bcbe448	288:	addiu	s4, zero, 16	@ const 16
0x2bcbe44c	292:	sw	s4, 12(JSP)
0x2bcbe450	296:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbe454	300:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbe458	304:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe45c	308:	jalr	s7
0x2bcbe460	312:	nop
          		@ Captured a stackmap here.
0x2bcbe464	316:	addiu	JSP, JSP, -4
0x2bcbe468	320:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbe46c	324:	sw	s7, 0(JSP)
0x2bcbe470	328:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbe474	332:	sw	s6, 4(JSP)
0x2bcbe478	336:	addiu	s5, zero, -1	@ const -1
0x2bcbe47c	340:	sw	s5, 8(JSP)
0x2bcbe480	344:	addiu	s4, zero, 16	@ const 16
0x2bcbe484	348:	sw	s4, 12(JSP)
0x2bcbe488	352:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbe48c	356:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbe490	360:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe494	364:	jalr	s7
0x2bcbe498	368:	nop
          		@ Captured a stackmap here.
0x2bcbe49c	372:	addiu	JSP, JSP, -4
0x2bcbe4a0	376:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbe4a4	380:	sw	s7, 0(JSP)
0x2bcbe4a8	384:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbe4ac	388:	sw	s6, 4(JSP)
0x2bcbe4b0	392:	addiu	s5, zero, -2	@ const -2
0x2bcbe4b4	396:	sw	s5, 8(JSP)
0x2bcbe4b8	400:	addiu	s4, zero, 8	@ const 8
0x2bcbe4bc	404:	sw	s4, 12(JSP)
0x2bcbe4c0	408:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbe4c4	412:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbe4c8	416:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe4cc	420:	jalr	s7
0x2bcbe4d0	424:	nop
          		@ Captured a stackmap here.
0x2bcbe4d4	428:	addiu	JSP, JSP, -4
0x2bcbe4d8	432:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbe4dc	436:	sw	s7, 0(JSP)
0x2bcbe4e0	440:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbe4e4	444:	sw	s6, 4(JSP)
0x2bcbe4e8	448:	addiu	s5, zero, -2	@ const -2
0x2bcbe4ec	452:	sw	s5, 8(JSP)
0x2bcbe4f0	456:	addiu	s4, zero, -8	@ const -8
0x2bcbe4f4	460:	sw	s4, 12(JSP)
0x2bcbe4f8	464:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbe4fc	468:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbe500	472:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe504	476:	jalr	s7
0x2bcbe508	480:	nop
          		@ Captured a stackmap here.
0x2bcbe50c	484:	addiu	JSP, JSP, -4
0x2bcbe510	488:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbe514	492:	sw	s7, 0(JSP)
0x2bcbe518	496:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbe51c	500:	sw	s6, 4(JSP)
0x2bcbe520	504:	addiu	s5, zero, -1	@ const -1
0x2bcbe524	508:	sw	s5, 8(JSP)
0x2bcbe528	512:	addiu	s4, zero, -16	@ const -16
0x2bcbe52c	516:	sw	s4, 12(JSP)
0x2bcbe530	520:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbe534	524:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbe538	528:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe53c	532:	jalr	s7
0x2bcbe540	536:	nop
          		@ Captured a stackmap here.
0x2bcbe544	540:	addiu	JSP, JSP, -4
0x2bcbe548	544:	addiu	JSP, JFP, -8
0x2bcbe54c	548:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbe550	552:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbe554	556:	nop
0x2bcbe558	560:	.word	9757796	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
--->Fixed instruction at 520(0x2bcbe530) to reference 560
--->Fixed instruction at 464(0x2bcbe4f8) to reference 560
--->Fixed instruction at 408(0x2bcbe4c0) to reference 560
--->Fixed instruction at 352(0x2bcbe488) to reference 560
--->Fixed instruction at 296(0x2bcbe450) to reference 560
--->Fixed instruction at 240(0x2bcbe418) to reference 560
--->Fixed instruction at 184(0x2bcbe3e0) to reference 560
--->Fixed instruction at 128(0x2bcbe3a8) to reference 560
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbe328) >>>>>>>>
          		@ Capacity is 14 word(s)
0x2bcbe328	0:	addiu	a1, JSP, 48
<<<<<<<<<Pop Code Buffer to PC = 564 (0x2bcbe55c) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbe378) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbe378	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbe37c	84:	lui	CP, hi16(0x2bcb)
0x2bcbe380	88:	ori	CP, CP, lo16(0x2bcbe558)
0x2bcbe384	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 564 (0x2bcbe55c) <<<<<<<<<
JS: COMPILED: size=668 startPC=0x2bcbe328 com.sun.mep.bench.Chess.BPossMoves.BKnight_Moves(I)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;
JS: COMPILING com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;
orig bkID(11) Incoming Locals(1 0x0): 2- 
orig bkID(2) Incoming Locals(1 0x0): 3- 
o1   bkID(2) Incoming Locals(1 0x0): 3- 
s1   bkID(2) Incoming Locals(2 0x0): 3- 1- 
s1   bkID(2) Incoming Locals(2 0x0): 3- 1- 
o1   bkID(2) Incoming Locals(2 0x0): 3- 1- 
s1   bkID(2) Incoming Locals(3 0x0): 3- 1- 2- 
o1   bkID(2) Incoming Locals(3 0x0): 3- 1- 2- 
orig bkID(3) Incoming Locals(2 0x0): 1- 3- 
orig bkID(11) Incoming Locals(1 0x0): 2- 
orig bkID(2) Incoming Locals(3 0x0): 3- 1- 2- 
o1   bkID(2) Incoming Locals(1 0x0): 3- 
s1   bkID(2) Incoming Locals(2 0x0): 3- 1- 
s1   bkID(2) Incoming Locals(2 0x0): 3- 1- 
o1   bkID(2) Incoming Locals(2 0x0): 3- 1- 
s1   bkID(2) Incoming Locals(3 0x0): 3- 1- 2- 
o1   bkID(2) Incoming Locals(3 0x0): 3- 1- 2- 
orig bkID(3) Incoming Locals(2 0x0): 1- 3- 
bkID(2) local(0 #3)  not ordered
bestLocal(0) bestLocalScore(24)
-bk  bkID(2) Incoming Locals(3 0x0): 3- 1- 2- 
+bk  bkID(2) Incoming Locals(3 0x1): 3+ 1- 2- 
-gbk bkID(3) Incoming Locals(2 0x0): 1- 3- 
+gbk bkID(3) Incoming Locals(2 0x1): 3+ 1- 
bkID(2) local(0 #3)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(3 0x1): 3+ 1- 2- 
dstBk(2) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(2) Incoming Locals(3 0x1): 3+ 1- 2- 
 ordered in bk
-gbk bkID(11) Incoming Locals(1 0x0): 2- 
+gbk bkID(11) Incoming Locals(1 0x0): 2- 
-gbk bkID(3) Incoming Locals(2 0x1): 3+ 1- 
dstBk(3) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(3) Incoming Locals(2 0x1): 3+ 1- 
bkID(2) local(1 #1)  not ordered
bestLocal(1) bestLocalScore(24)
-bk  bkID(2) Incoming Locals(3 0x1): 3+ 1- 2- 
+bk  bkID(2) Incoming Locals(3 0x3): 3+ 1+ 2- 
-gbk bkID(3) Incoming Locals(2 0x1): 3+ 1- 
+gbk bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
bkID(2) local(1 #1)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(3 0x3): 3+ 1+ 2- 
dstBk(2) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(2) Incoming Locals(3 0x3): 3+ 1+ 2- 
 ordered in bk
-gbk bkID(11) Incoming Locals(1 0x0): 2- 
+gbk bkID(11) Incoming Locals(1 0x0): 2- 
-gbk bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
dstBk(3) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
bkID(2) local(2 #2)  not found in goalBk
bkID(2) local(0 #3)  not found in goalBk
bkID(2) local(1 #1)  not found in goalBk
bkID(2) local(2 #2)  not ordered
bestLocal(2) bestLocalScore(8)
-bk  bkID(2) Incoming Locals(3 0x3): 3+ 1+ 2- 
+bk  bkID(2) Incoming Locals(3 0x7): 3+ 1+ 2+ 
-gbk bkID(11) Incoming Locals(1 0x0): 2- 
+gbk bkID(11) Incoming Locals(3 0x4): <null> <null> 2+ 
bkID(2) local(2 #2)  ordered in goalBk(11)
-bk  bkID(2) Incoming Locals(3 0x7): 3+ 1+ 2+ 
dstBk(2) local(2 2) found in slot(2)
local(2 2) same slot
+bk  bkID(2) Incoming Locals(3 0x7): 3+ 1+ 2+ 
 ordered in bk
-gbk bkID(11) Incoming Locals(3 0x4): <null> <null> 2+ 
dstBk(11) local(2 2) found in slot(2)
local(2 2) same slot
+gbk bkID(11) Incoming Locals(3 0x4): <null> <null> 2+ 
bkID(11) local(2 #2)  not found in goalBk
Pushing blockID(3)
bkID(3) local(0 #3)  ordered in goalBk(3)
-bk  bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
dstBk(3) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
dstBk(3) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
bkID(3) local(1 #1)  ordered in goalBk(3)
-bk  bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
dstBk(3) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
dstBk(3) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(3) Incoming Locals(2 0x3): 3+ 1+ 
Popping blockID(3)

#################################################

The maximum node counts per root node are 16
IR block list contains 12 blocks in method
#################################################

*************************************************
*
* (block ID:1 block PC:0 )
* IR root list contains 8 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:153)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<0>  (0x94d3ec):    new_quick #68 <com.sun.mep.bench.Chess.BPossMoves>
<3>  (0x94d3ef):    dup 
<4>  (0x94d3f0):    aload_1 
<5>  (0x94d3f1):    aload_0 
<6>  (0x94d3f2):    agetfield_quick #2
<9>  (0x94d3f5):    invokenonvirtual_quick #69 <com.sun.mep.bench.Chess.BPossMoves.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V>
<12>  (0x94d3f8):    astore_2 
<13>  (0x94d3f9):    iconst_0 
<14>  (0x94d3fa):    istore_3 
<15>  (0x94d3fb):    goto <112>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Assigned Locals(2): 
	ASSIGN(20): local(2)	ID(19)	rhsID(3)
 	ASSIGN(22): local(3)	ID(21)	rhsID(18)
 
Successor Blocks(1): 
	ID(2) LocalOrder(0) AssignOrder(2) RefsOK(0) Locals(3 1 2)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 3) IDENTITY (reference)  (ref count: 3)
      <(ID: 15) NEW_OBJECT (reference) 
         <(ID: 2) CONST_CB (address field)  (com.sun.mep.bench.Chess.BPossMoves)

   <(ID: 8) IDENTITY (reference)  (ref count: 2)
      <(ID: 16) FETCH (reference) 
         <(ID: 7) FIELD_REF (reference) 
            <(ID: 5) LOCAL (reference)   0>
            <(ID: 6) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 14) INVOKE (v) 
      <(ID: 13) PARAMETER (reference) 
         <(ID: 3) IDENTITY (reference)  (ref count: 3)
         <(ID: 12) PARAMETER (reference) 
            <(ID: 4) LOCAL (reference)   1>
            <(ID: 11) PARAMETER (reference) 
               <(ID: 8) IDENTITY (reference)  (ref count: 2)
               <(ID: 10) NULL_PARAMETER (NONE) 
      <(ID: 9) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V)

   <(ID: 17) MAP_PC (NONE)   13>

   <(ID: 20) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 19) LOCAL (reference)   2>
      <(ID: 3) IDENTITY (reference)  (ref count: 3)

   <(ID: 22) ASSIGN (int)  (assignIdx: 1)
      <(ID: 21) LOCAL (int)   3>
      <(ID: 18) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 23) GOTO (NONE) 
   target: (BlockID: 2 BlockPC: 112)


*************************************************
*
* (block ID:3 block PC:18 )
* IR root list contains 4 root nodes: in block 
* flags: 0x321
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:158)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<18>  (0x94d3fe):    aload_1 
<19>  (0x94d3ff):    agetfield_quick #3
<22>  (0x94d402):    iload_3 
<23>  (0x94d403):    baload 
<24>  (0x94d404):    tableswitch 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(1)	ID(31)
 	local(3)	ID(35)
 
Incoming Locals(2): 
	local(3)	ID(35)
 	local(1)	ID(31)
 
   <(ID: 30) MAP_PC (NONE)   18>

   <(ID: 34) IDENTITY (reference)  (ref count: 3)
      <(ID: 41) FETCH (reference) 
         <(ID: 33) FIELD_REF (reference) 
            <(ID: 31) LOCAL (reference)   1>
            <(ID: 32) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 39) IDENTITY (int)  (ref count: 2)
      <(ID: 42) FETCH (int) 
         <(ID: 38) INDEX (int) 
            <(ID: 34) IDENTITY (reference)  (ref count: 3)
            <(ID: 37) BOUNDS_CHECK (int) 
               <(ID: 35) LOCAL (int)   3>
               <(ID: 36) ARRAY_LENGTH (int) 
                  <(ID: 34) IDENTITY (reference)  (ref count: 3)

   <(ID: 40) TABLESWITCH (NONE) 
   Key:
      <(ID: 39) IDENTITY (int)  (ref count: 2)
   default target: (BlockID: 4 BlockPC: 109)
   	low: 6
   	high: 11
   	nElements: 6
   	tableList blocks:
      jump offset 6: (BlockID: 5 BlockPC: 88)
      jump offset 7: (BlockID: 6 BlockPC: 80)
      jump offset 8: (BlockID: 7 BlockPC: 64)
      jump offset 9: (BlockID: 8 BlockPC: 104)
      jump offset 10: (BlockID: 9 BlockPC: 96)
      jump offset 11: (BlockID: 10 BlockPC: 72)


*************************************************
*
* (block ID:7 block PC:64 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:161)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<64>  (0x94d42c):    aload_2 
<65>  (0x94d42d):    iload_3 
<66>  (0x94d42e):    invokevirtual_quick_w #70 <com.sun.mep.bench.Chess.BPossMoves.BBishop_Moves(I)V>
<69>  (0x94d431):    goto <109>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(4) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 153) MAP_PC (NONE)   64>

   <(ID: 162) INVOKE (v) 
      <(ID: 159) PARAMETER (reference) 
         <(ID: 154) IDENTITY (reference)  (ref count: 2)
            <(ID: 163) LOCAL (reference)   2>
         <(ID: 158) PARAMETER (int) 
            <(ID: 155) LOCAL (int)   3>
            <(ID: 157) NULL_PARAMETER (NONE) 
      <(ID: 161) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 160) GET_VTBL (NONE) 
            <(ID: 154) IDENTITY (reference)  (ref count: 2)
         <(ID: 156) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 15)

   <(ID: 164) GOTO (NONE) 
   target: (BlockID: 4 BlockPC: 109)


*************************************************
*
* (block ID:10 block PC:72 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:164)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<72>  (0x94d434):    aload_2 
<73>  (0x94d435):    iload_3 
<74>  (0x94d436):    invokevirtual_quick_w #71 <com.sun.mep.bench.Chess.BPossMoves.BKing_Moves(I)V>
<77>  (0x94d439):    goto <109>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(4) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 188) MAP_PC (NONE)   72>

   <(ID: 197) INVOKE (v) 
      <(ID: 194) PARAMETER (reference) 
         <(ID: 189) IDENTITY (reference)  (ref count: 2)
            <(ID: 198) LOCAL (reference)   2>
         <(ID: 193) PARAMETER (int) 
            <(ID: 190) LOCAL (int)   3>
            <(ID: 192) NULL_PARAMETER (NONE) 
      <(ID: 196) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 195) GET_VTBL (NONE) 
            <(ID: 189) IDENTITY (reference)  (ref count: 2)
         <(ID: 191) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 199) GOTO (NONE) 
   target: (BlockID: 4 BlockPC: 109)


*************************************************
*
* (block ID:6 block PC:80 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:167)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<80>  (0x94d43c):    aload_2 
<81>  (0x94d43d):    iload_3 
<82>  (0x94d43e):    invokevirtual_quick_w #72 <com.sun.mep.bench.Chess.BPossMoves.BKnight_Moves(I)V>
<85>  (0x94d441):    goto <109>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(4) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 141) MAP_PC (NONE)   80>

   <(ID: 150) INVOKE (v) 
      <(ID: 147) PARAMETER (reference) 
         <(ID: 142) IDENTITY (reference)  (ref count: 2)
            <(ID: 151) LOCAL (reference)   2>
         <(ID: 146) PARAMETER (int) 
            <(ID: 143) LOCAL (int)   3>
            <(ID: 145) NULL_PARAMETER (NONE) 
      <(ID: 149) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 148) GET_VTBL (NONE) 
            <(ID: 142) IDENTITY (reference)  (ref count: 2)
         <(ID: 144) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 13)

   <(ID: 152) GOTO (NONE) 
   target: (BlockID: 4 BlockPC: 109)


*************************************************
*
* (block ID:5 block PC:88 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:170)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<88>  (0x94d444):    aload_2 
<89>  (0x94d445):    iload_3 
<90>  (0x94d446):    invokevirtual_quick_w #73 <com.sun.mep.bench.Chess.BPossMoves.BPawn_Moves(I)V>
<93>  (0x94d449):    goto <109>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(4) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 129) MAP_PC (NONE)   88>

   <(ID: 138) INVOKE (v) 
      <(ID: 135) PARAMETER (reference) 
         <(ID: 130) IDENTITY (reference)  (ref count: 2)
            <(ID: 139) LOCAL (reference)   2>
         <(ID: 134) PARAMETER (int) 
            <(ID: 131) LOCAL (int)   3>
            <(ID: 133) NULL_PARAMETER (NONE) 
      <(ID: 137) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 136) GET_VTBL (NONE) 
            <(ID: 130) IDENTITY (reference)  (ref count: 2)
         <(ID: 132) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 12)

   <(ID: 140) GOTO (NONE) 
   target: (BlockID: 4 BlockPC: 109)


*************************************************
*
* (block ID:9 block PC:96 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:173)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<96>  (0x94d44c):    aload_2 
<97>  (0x94d44d):    iload_3 
<98>  (0x94d44e):    invokevirtual_quick_w #74 <com.sun.mep.bench.Chess.BPossMoves.BQueen_Moves(I)V>
<101>  (0x94d451):    goto <109>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(4) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 176) MAP_PC (NONE)   96>

   <(ID: 185) INVOKE (v) 
      <(ID: 182) PARAMETER (reference) 
         <(ID: 177) IDENTITY (reference)  (ref count: 2)
            <(ID: 186) LOCAL (reference)   2>
         <(ID: 181) PARAMETER (int) 
            <(ID: 178) LOCAL (int)   3>
            <(ID: 180) NULL_PARAMETER (NONE) 
      <(ID: 184) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 183) GET_VTBL (NONE) 
            <(ID: 177) IDENTITY (reference)  (ref count: 2)
         <(ID: 179) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 16)

   <(ID: 187) GOTO (NONE) 
   target: (BlockID: 4 BlockPC: 109)


*************************************************
*
* (block ID:8 block PC:104 )
* IR root list contains 2 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:176)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<104>  (0x94d454):    aload_2 
<105>  (0x94d455):    iload_3 
<106>  (0x94d456):    invokevirtual_quick_w #75 <com.sun.mep.bench.Chess.BPossMoves.BRook_Moves(I)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(4) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 165) MAP_PC (NONE)   104>

   <(ID: 174) INVOKE (v) 
      <(ID: 171) PARAMETER (reference) 
         <(ID: 166) IDENTITY (reference)  (ref count: 2)
            <(ID: 175) LOCAL (reference)   2>
         <(ID: 170) PARAMETER (int) 
            <(ID: 167) LOCAL (int)   3>
            <(ID: 169) NULL_PARAMETER (NONE) 
      <(ID: 173) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 172) GET_VTBL (NONE) 
            <(ID: 166) IDENTITY (reference)  (ref count: 2)
         <(ID: 168) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 14)


*************************************************
*
* (block ID:4 block PC:109 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:156)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<109>  (0x94d459):    iinc 3 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(127): local(3)	ID(126)	rhsID(125)
 
Successor Blocks(1): 
	ID(2) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(3 1 2)

   <(ID: 122) MAP_PC (NONE)   109>

   <(ID: 123) IDENTITY (int)  (ref count: 2)
      <(ID: 128) LOCAL (int)   3>

   <(ID: 127) ASSIGN (int)  (assignIdx: 0)
      <(ID: 126) LOCAL (int)   3>
      <(ID: 125) ADD (int) 
         <(ID: 123) IDENTITY (int)  (ref count: 2)
         <(ID: 124) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:2 block PC:112 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x7
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:156)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<112>  (0x94d45c):    iload_3 
<113>  (0x94d45d):    bipush 64
<115>  (0x94d45f):    if_icmplt <18>
<118>  (0x94d462):    goto <169>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(3)	ID(25)
 
Incoming Locals(3): 
	local(3)	ID(25)
 	local(1)	ID(31)
 	local(2)	ID(44)
 
Successor Blocks(2): 
	ID(3) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(3 1)
	ID(11) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(<null> <null> 2)

   <(ID: 24) MAP_PC (NONE)   112>

   <(ID: 27) BCOND (int) 
   target: (BlockID: 3 BlockPC: 18)
   condition: LT
   flags: 0
      <(ID: 25) LOCAL (int)   3>
      <(ID: 26) CONST_JAVA_NUMERIC32 (int)  (64)


   <(ID: 28) MAP_PC (NONE)   118>

   <(ID: 29) GOTO (NONE) 
   target: (BlockID: 11 BlockPC: 169)


*************************************************
*
* (block ID:0 block PC:121 )
* IR root list contains 11 root nodes: in block 
* flags: 0x343
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:183)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<121>  (0x94d465):    astore_3 
<122>  (0x94d466):    aload_0 
<123>  (0x94d467):    getfield #2 <com.sun.mep.bench.Chess.CompMover.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<126>  (0x94d46a):    getfield #76 <com.sun.mep.bench.Chess.Game.debugTextManager:Lcom/sun/mep/bench/Chess/DebugTextManager;>
<129>  (0x94d46d):    new #21 <java.lang.StringBuffer>
<132>  (0x94d470):    dup 
<133>  (0x94d471):    invokespecial #22 <java.lang.StringBuffer.<init>()V>
<136>  (0x94d474):    aload_3 
<137>  (0x94d475):    invokevirtual #77 <java.lang.Throwable.toString()Ljava/lang/String;>
<140>  (0x94d478):    invokevirtual #24 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<143>  (0x94d47b):    ldc #64
<145>  (0x94d47d):    invokevirtual #24 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<148>  (0x94d480):    invokevirtual #26 <java.lang.StringBuffer.toString()Ljava/lang/String;>
<151>  (0x94d483):    invokevirtual #51 <com.sun.mep.bench.Chess.DebugTextManager.set(Ljava/lang/String;)V>
<154>  (0x94d486):    aload_0 
<155>  (0x94d487):    getfield #2 <com.sun.mep.bench.Chess.CompMover.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<158>  (0x94d48a):    getfield #78 <com.sun.mep.bench.Chess.Game.debugTextManager:Lcom/sun/mep/bench/Chess/DebugTextManager;>
<161>  (0x94d48d):    ldc #79
<163>  (0x94d48f):    invokevirtual #51 <com.sun.mep.bench.Chess.DebugTextManager.set(Ljava/lang/String;)V>
<166>  (0x94d492):    goto <169>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: -1 0

Assigned Locals(1): 
	ASSIGN(121): local(3)	ID(120)	rhsID(51)
 
Successor Blocks(1): 
	ID(11) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(<null> <null> 2)

   <(ID: 50) MAP_PC (NONE)   121>

   <(ID: 51) IDENTITY (reference)  (ref count: 4)
      <(ID: 100) EXCEPTION_OBJECT (reference) 

   <(ID: 55) IDENTITY (reference)  (ref count: 2)
      <(ID: 59) FETCH (reference) 
         <(ID: 54) FIELD_REF (reference) 
            <(ID: 52) IDENTITY (reference)  (ref count: 2)
               <(ID: 106) LOCAL (reference)   0>
            <(ID: 53) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 58) IDENTITY (reference)  (ref count: 3)
      <(ID: 99) FETCH (reference) 
         <(ID: 57) FIELD_REF (reference) 
            <(ID: 55) IDENTITY (reference)  (ref count: 2)
            <(ID: 56) CONST_FIELD_OFFSET (NONE)  (18)

   <(ID: 61) IDENTITY (reference)  (ref count: 3)
      <(ID: 66) NEW_OBJECT (reference) 
         <(ID: 60) CONST_CB (address field)  (java.lang.StringBuffer)

   <(ID: 65) INVOKE (v) 
      <(ID: 64) PARAMETER (reference) 
         <(ID: 61) IDENTITY (reference)  (ref count: 3)
         <(ID: 63) NULL_PARAMETER (NONE) 
      <(ID: 62) CONST_MB (address field)  (java.lang.StringBuffer.<init>()V)

   <(ID: 98) INVOKE (v) 
      <(ID: 95) PARAMETER (reference) 
         <(ID: 58) IDENTITY (reference)  (ref count: 3)
         <(ID: 94) PARAMETER (reference) 
            <(ID: 91) INVOKE (reference) 
               <(ID: 88) PARAMETER (reference) 
                  <(ID: 85) IDENTITY (reference)  (ref count: 2)
                     <(ID: 102) INVOKE (reference) 
                        <(ID: 82) PARAMETER (reference) 
                           <(ID: 77) IDENTITY (reference)  (ref count: 2)
                              <(ID: 101) INVOKE (reference) 
                                 <(ID: 76) PARAMETER (reference) 
                                    <(ID: 61) IDENTITY (reference)  (ref count: 3)
                                    <(ID: 75) PARAMETER (reference) 
                                       <(ID: 72) INVOKE (reference) 
                                          <(ID: 69) PARAMETER (reference) 
                                             <(ID: 51) IDENTITY (reference)  (ref count: 4)
                                             <(ID: 68) NULL_PARAMETER (NONE) 
                                          <(ID: 71) FETCH_MB_FROM_VTABLE (address field) 
                                             <(ID: 70) GET_VTBL (NONE) 
                                                <(ID: 51) IDENTITY (reference)  (ref count: 4)
                                             <(ID: 67) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 5)
                                       <(ID: 74) NULL_PARAMETER (NONE) 
                                 <(ID: 73) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                           <(ID: 81) PARAMETER (reference) 
                              <(ID: 78) CONST_STRING_ICELL (reference)  (stringICell 0x80ba40)

                              <(ID: 80) NULL_PARAMETER (NONE) 
                        <(ID: 84) SEQUENCE_R (address field) 
                           <(ID: 83) NULL_CHECK (reference) 
                              <(ID: 77) IDENTITY (reference)  (ref count: 2)
                           <(ID: 79) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                  <(ID: 87) NULL_PARAMETER (NONE) 
               <(ID: 90) SEQUENCE_R (address field) 
                  <(ID: 89) NULL_CHECK (reference) 
                     <(ID: 85) IDENTITY (reference)  (ref count: 2)
                  <(ID: 86) CONST_MB (address field)  (java.lang.StringBuffer.toString()Ljava/lang/String;)
            <(ID: 93) NULL_PARAMETER (NONE) 
      <(ID: 97) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 96) GET_VTBL (NONE) 
            <(ID: 58) IDENTITY (reference)  (ref count: 3)
         <(ID: 92) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 105) IDENTITY (reference)  (ref count: 2)
      <(ID: 110) FETCH (reference) 
         <(ID: 104) FIELD_REF (reference) 
            <(ID: 52) IDENTITY (reference)  (ref count: 2)
            <(ID: 103) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 109) IDENTITY (reference)  (ref count: 3)
      <(ID: 119) FETCH (reference) 
         <(ID: 108) FIELD_REF (reference) 
            <(ID: 105) IDENTITY (reference)  (ref count: 2)
            <(ID: 107) CONST_FIELD_OFFSET (NONE)  (18)

   <(ID: 118) INVOKE (v) 
      <(ID: 115) PARAMETER (reference) 
         <(ID: 109) IDENTITY (reference)  (ref count: 3)
         <(ID: 114) PARAMETER (reference) 
            <(ID: 111) CONST_STRING_ICELL (reference)  (stringICell 0x90dff4)

            <(ID: 113) NULL_PARAMETER (NONE) 
      <(ID: 117) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 116) GET_VTBL (NONE) 
            <(ID: 109) IDENTITY (reference)  (ref count: 3)
         <(ID: 112) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 121) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 120) LOCAL (reference)   3>
      <(ID: 51) IDENTITY (reference)  (ref count: 4)


*************************************************
*
* (block ID:11 block PC:169 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x4
* Source: com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;(CompMover.java:187)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<169>  (0x94d495):    aload_2 
<170>  (0x94d496):    agetfield_quick #2
<173>  (0x94d499):    areturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(2)	ID(44)
 
Incoming Locals(3): 
	<null>
	<null>
	local(2)	ID(44)
 
   <(ID: 43) MAP_PC (NONE)   169>

   <(ID: 47) IDENTITY (reference)  (ref count: 2)
      <(ID: 49) FETCH (reference) 
         <(ID: 46) FIELD_REF (reference) 
            <(ID: 44) LOCAL (reference)   2>
            <(ID: 45) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 48) RETURN_VALUE (reference) 
      <(ID: 47) IDENTITY (reference)  (ref count: 2)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 248
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 1052
ESTIMATED BUFFER SIZE = 1472
CODE BUFFER ADDRESS = 0x2bcbe594
PC MAP TABLE ADDRESS = 0x2bcbe59c
GC CHECK PCS ADDRESS = 0x2bcbe5d8
CODE ENTRY ADDRESS = 0x2bcbe608
          		@ Method prologue
0x2bcbe608	0:	addiu	a1, JSP, 56	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbe60c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbe610	8:	sltu	t7, a1, CHUNKEND
0x2bcbe614	12:	bne	t7, zero, PC=0x2bcbe608	@ goto .skip
0x2bcbe618	16:	nop
0x2bcbe61c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbe620	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbe614) >>>>>>>>
0x2bcbe614	12:	bne	t7, zero, PC=0x2bcbe624	@ goto .skip
0x2bcbe618	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbe624) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbe624	28:	sw	JFP, 8(JSP)	@ Store curr JFP into new frame
0x2bcbe628	32:	addiu	JFP, JSP, 8	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbe62c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbe630	40:	addiu	a3, zero, 0
0x2bcbe634	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbe638	48:	addiu	a3, zero, -1
0x2bcbe63c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbe640	56:	move	a0, EE
0x2bcbe644	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbe648	64:	lui	t9, hi16(0x65)
0x2bcbe64c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbe650	72:	jalr	t9
0x2bcbe654	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbe658	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbe65c	84:	nop
0x2bcbe660	88:	nop
0x2bcbe664	92:	nop
			@ Initial Temp REF set is 
	L1:	96:	@ entry point for first block
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=96
0x2bcbe668	96:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.BPossMoves
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.BPossMoves
0x2bcbe66c	100:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcbe670	104:	nop
          		@ Captured a stackmap here.
0x2bcbe674	108:	lw	ra, -16(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcbe678	112:	lw	s7, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbe67c	116:	sw	v0, 0(JSP)
0x2bcbe680	120:	lw	s5, -12(JFP)	@ Java local cell # 1
0x2bcbe684	124:	sw	s5, 4(JSP)
0x2bcbe688	128:	sw	s7, 8(JSP)
0x2bcbe68c	132:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V
          		@ Invoke a method w/ a void return type
0x2bcbe690	136:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbe694	140:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcbe698	144:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe69c	148:	jalr	s7
0x2bcbe6a0	152:	nop
          		@ Captured a stackmap here.
          		@ MAP_PC idepth=0 javaPc=13 compiledPc=156
0x2bcbe6a4	156:	lw	s7, 28(JFP)	@ Java temp cell # 0
0x2bcbe6a8	160:	sw	s7, -8(JFP)	@ Java local cell # 2
0x2bcbe6ac	164:	sw	zero, -4(JFP)	@ Java local cell # 3
			@ Outgoing local(3) reg(20): in wrong register
0x2bcbe6b0	168:	move	s4, zero
			@ Outgoing local(1) reg(21): not in register
0x2bcbe6b4	172:	lw	s5, -12(JFP)	@ Java local cell # 1
			@ Outgoing local(2) reg(22): in wrong register
0x2bcbe6b8	176:	move	s6, s7
0x2bcbe6bc	180:	b	PC=0x2bcbe6bc	@ branch to block L2
0x2bcbe6c0	184:	nop
			@ Initial Temp REF set is 
	L3:	188:	@ Patchable GC Check point
0x2bcbe6c4	188:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcbe6c4	188:	nop
0x2bcbe6c8	192:	nop
          		@ Captured a stackmap here.
	L3:	196:	@ entry point when locals need to be loaded
			@ Preloading incoming local(3) reg(20)
0x2bcbe6cc	196:	lw	s4, -4(JFP)	@ Java local cell # 3
			@ Preloading incoming local(1) reg(21)
0x2bcbe6d0	200:	lw	s5, -12(JFP)	@ Java local cell # 1
	L3:	204:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=18 compiledPc=196
          		@ Do getfield:
0x2bcbe6d4	204:	lw	s7, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbe6d8	208:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcbe6dc	212:	sltu	t7, s4, s6
0x2bcbe6e0	216:	bne	t7, zero, PC=0x2bcbe6dc	@ br .skip
0x2bcbe6e4	220:	nop
0x2bcbe6e8	224:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbe6ec	228:	nop
		.skip
--->Fixed instruction at 216(0x2bcbe6e0) to reference 232
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbe6f0	232:	addu	ra, s7, s4
0x2bcbe6f4	236:	lb	s6, 12(ra)
          		@ tableswitch
0x2bcbe6f8	240:	addiu	s6, s6, -6
          		@ deferred comparison: 
0x2bcbe6fc	244:	addiu	t7, zero, 5
0x2bcbe700	248:	sltu	t7, t7, s6
0x2bcbe704	252:	bne	t7, zero, PC=0x2bcbe6fc	@ branch to block L4
0x2bcbe708	256:	nop
0x2bcbe70c	260:	lw	s7, 0(CP)
0x2bcbe710	264:	sll	t9, s6, 3
0x2bcbe714	268:	addu	t9, t9, s7
0x2bcbe718	272:	jr	t9
0x2bcbe71c	276:	nop
0x2bcbe720	280:	b	PC=0x2bcbe720	@ branch to block L5
0x2bcbe724	284:	nop
0x2bcbe728	288:	b	PC=0x2bcbe728	@ branch to block L6
0x2bcbe72c	292:	nop
0x2bcbe730	296:	b	PC=0x2bcbe730	@ branch to block L7
0x2bcbe734	300:	nop
0x2bcbe738	304:	b	PC=0x2bcbe738	@ branch to block L8
0x2bcbe73c	308:	nop
0x2bcbe740	312:	b	PC=0x2bcbe740	@ branch to block L9
0x2bcbe744	316:	nop
0x2bcbe748	320:	b	PC=0x2bcbe748	@ branch to block L10
0x2bcbe74c	324:	nop
			@ Initial Temp REF set is 
	L7:	328:	@ entry point for branches
--->Fixed instruction at 296(0x2bcbe730) to reference 328
          		@ MAP_PC idepth=0 javaPc=64 compiledPc=328
0x2bcbe750	328:	lw	ra, -8(JFP)	@ Java local cell # 2
0x2bcbe754	332:	sw	ra, 0(JSP)
0x2bcbe758	336:	lw	t9, -4(JFP)	@ Java local cell # 3
0x2bcbe75c	340:	sw	t9, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbe760	344:	lw	s7, 0(ra)	@ Get object.cb
0x2bcbe764	348:	addiu	t7, zero, -4
0x2bcbe768	352:	and	s7, s7, t7
0x2bcbe76c	356:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbe770	360:	lw	a0, 60(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbe774	364:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbe778	368:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe77c	372:	jalr	s7
0x2bcbe780	376:	nop
          		@ Captured a stackmap here.
0x2bcbe784	380:	b	PC=0x2bcbe784	@ branch to block L4
0x2bcbe788	384:	nop
			@ Initial Temp REF set is 
	L10:	388:	@ entry point for branches
--->Fixed instruction at 320(0x2bcbe748) to reference 388
          		@ MAP_PC idepth=0 javaPc=72 compiledPc=388
0x2bcbe78c	388:	lw	ra, -8(JFP)	@ Java local cell # 2
0x2bcbe790	392:	sw	ra, 0(JSP)
0x2bcbe794	396:	lw	t9, -4(JFP)	@ Java local cell # 3
0x2bcbe798	400:	sw	t9, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbe79c	404:	lw	s7, 0(ra)	@ Get object.cb
0x2bcbe7a0	408:	addiu	t7, zero, -4
0x2bcbe7a4	412:	and	s7, s7, t7
0x2bcbe7a8	416:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbe7ac	420:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbe7b0	424:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbe7b4	428:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe7b8	432:	jalr	s7
0x2bcbe7bc	436:	nop
          		@ Captured a stackmap here.
0x2bcbe7c0	440:	b	PC=0x2bcbe7c0	@ branch to block L4
0x2bcbe7c4	444:	nop
			@ Initial Temp REF set is 
	L6:	448:	@ entry point for branches
--->Fixed instruction at 288(0x2bcbe728) to reference 448
          		@ MAP_PC idepth=0 javaPc=80 compiledPc=448
0x2bcbe7c8	448:	lw	ra, -8(JFP)	@ Java local cell # 2
0x2bcbe7cc	452:	sw	ra, 0(JSP)
0x2bcbe7d0	456:	lw	t9, -4(JFP)	@ Java local cell # 3
0x2bcbe7d4	460:	sw	t9, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbe7d8	464:	lw	s7, 0(ra)	@ Get object.cb
0x2bcbe7dc	468:	addiu	t7, zero, -4
0x2bcbe7e0	472:	and	s7, s7, t7
0x2bcbe7e4	476:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbe7e8	480:	lw	a0, 52(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbe7ec	484:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbe7f0	488:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe7f4	492:	jalr	s7
0x2bcbe7f8	496:	nop
          		@ Captured a stackmap here.
0x2bcbe7fc	500:	b	PC=0x2bcbe7fc	@ branch to block L4
0x2bcbe800	504:	nop
			@ Initial Temp REF set is 
	L5:	508:	@ entry point for branches
--->Fixed instruction at 280(0x2bcbe720) to reference 508
          		@ MAP_PC idepth=0 javaPc=88 compiledPc=508
0x2bcbe804	508:	lw	ra, -8(JFP)	@ Java local cell # 2
0x2bcbe808	512:	sw	ra, 0(JSP)
0x2bcbe80c	516:	lw	t9, -4(JFP)	@ Java local cell # 3
0x2bcbe810	520:	sw	t9, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbe814	524:	lw	s7, 0(ra)	@ Get object.cb
0x2bcbe818	528:	addiu	t7, zero, -4
0x2bcbe81c	532:	and	s7, s7, t7
0x2bcbe820	536:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbe824	540:	lw	a0, 48(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbe828	544:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbe82c	548:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe830	552:	jalr	s7
0x2bcbe834	556:	nop
          		@ Captured a stackmap here.
0x2bcbe838	560:	b	PC=0x2bcbe838	@ branch to block L4
0x2bcbe83c	564:	nop
			@ Initial Temp REF set is 
	L9:	568:	@ entry point for branches
--->Fixed instruction at 312(0x2bcbe740) to reference 568
          		@ MAP_PC idepth=0 javaPc=96 compiledPc=568
0x2bcbe840	568:	lw	ra, -8(JFP)	@ Java local cell # 2
0x2bcbe844	572:	sw	ra, 0(JSP)
0x2bcbe848	576:	lw	t9, -4(JFP)	@ Java local cell # 3
0x2bcbe84c	580:	sw	t9, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbe850	584:	lw	s7, 0(ra)	@ Get object.cb
0x2bcbe854	588:	addiu	t7, zero, -4
0x2bcbe858	592:	and	s7, s7, t7
0x2bcbe85c	596:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbe860	600:	lw	a0, 64(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbe864	604:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbe868	608:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe86c	612:	jalr	s7
0x2bcbe870	616:	nop
          		@ Captured a stackmap here.
0x2bcbe874	620:	b	PC=0x2bcbe874	@ branch to block L4
0x2bcbe878	624:	nop
			@ Initial Temp REF set is 
	L8:	628:	@ entry point for branches
--->Fixed instruction at 304(0x2bcbe738) to reference 628
          		@ MAP_PC idepth=0 javaPc=104 compiledPc=628
0x2bcbe87c	628:	lw	ra, -8(JFP)	@ Java local cell # 2
0x2bcbe880	632:	sw	ra, 0(JSP)
0x2bcbe884	636:	lw	t9, -4(JFP)	@ Java local cell # 3
0x2bcbe888	640:	sw	t9, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbe88c	644:	lw	s7, 0(ra)	@ Get object.cb
0x2bcbe890	648:	addiu	t7, zero, -4
0x2bcbe894	652:	and	s7, s7, t7
0x2bcbe898	656:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbe89c	660:	lw	a0, 56(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbe8a0	664:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbe8a4	668:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe8a8	672:	jalr	s7
0x2bcbe8ac	676:	nop
          		@ Captured a stackmap here.
			@ Initial Temp REF set is 
	L4:	680:	@ entry point for branches
--->Fixed instruction at 620(0x2bcbe874) to reference 680
--->Fixed instruction at 560(0x2bcbe838) to reference 680
--->Fixed instruction at 500(0x2bcbe7fc) to reference 680
--->Fixed instruction at 440(0x2bcbe7c0) to reference 680
--->Fixed instruction at 380(0x2bcbe784) to reference 680
--->Fixed instruction at 252(0x2bcbe704) to reference 680
          		@ MAP_PC idepth=0 javaPc=109 compiledPc=680
0x2bcbe8b0	680:	lw	ra, -4(JFP)	@ Java local cell # 3
0x2bcbe8b4	684:	addiu	s4, ra, 1
0x2bcbe8b8	688:	sw	s4, -4(JFP)	@ Java local cell # 3
			@ Outgoing local(3) reg(20): in correct register
			@ Outgoing local(1) reg(21): not in register
0x2bcbe8bc	692:	lw	s5, -12(JFP)	@ Java local cell # 1
			@ Outgoing local(2) reg(22): not in register
0x2bcbe8c0	696:	lw	s6, -8(JFP)	@ Java local cell # 2
			@ Initial Temp REF set is 
	L2:	700:	@ entry point for branches
			@ Binding Incoming Local(3) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
			@ Binding Incoming Local(2) to reg(22)
--->Fixed instruction at 180(0x2bcbe6bc) to reference 700
          		@ MAP_PC idepth=0 javaPc=112 compiledPc=700
			@ Outgoing local(3) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcbe8c4	700:	sltiu	t7, s4, 64
0x2bcbe8c8	704:	bne	t7, zero, PC=0x2bcbe6c4	@ branch to block L3
0x2bcbe8cc	708:	nop
0x2bcbe8c4	700:	sltiu	t7, s4, 64
0x2bcbe8c8	704:	bne	t7, zero, PC=0x2bcbe6d4	@ branch to block L3, skip GC
0x2bcbe8cc	708:	nop
          		@ MAP_PC idepth=0 javaPc=118 compiledPc=712
			@ Outgoing local(2) reg(22): in correct register
0x2bcbe8d0	712:	b	PC=0x2bcbe8d0	@ branch to block L11
0x2bcbe8d4	716:	nop
			@ Initial Temp REF set is 
	L0:	720:	@ entry point for exception handler
          		@ Captured a stackmap here.
          		@ MAP_PC idepth=0 javaPc=121 compiledPc=720
0x2bcbe8d8	720:	lw	ra, -16(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcbe8dc	724:	lw	s7, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbe8e0	728:	lw	s6, 72(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbe8e4	732:	lw	a1, 0(CP)	@ cb java.lang.StringBuffer
          		@ Do new:
0x2bcbe8e8	736:	sw	a0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcbe8ec	740:	sw	s6, 32(JFP)	@ REF spill Java temp cell # 1
          		@ cb: java.lang.StringBuffer
0x2bcbe8f0	744:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcbe8f4	748:	nop
          		@ Captured a stackmap here.
0x2bcbe8f8	752:	sw	v0, 0(JSP)
0x2bcbe8fc	756:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcbe900	760:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbe904	764:	sw	v0, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcbe908	768:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe90c	772:	jalr	s7
0x2bcbe910	776:	nop
          		@ Captured a stackmap here.
0x2bcbe914	780:	lw	s7, 32(JFP)	@ Java temp cell # 1
0x2bcbe918	784:	sw	s7, 0(JSP)
0x2bcbe91c	788:	lw	s6, 36(JFP)	@ Java temp cell # 2
0x2bcbe920	792:	sw	s6, 4(JSP)
0x2bcbe924	796:	lw	s6, 28(JFP)	@ Java temp cell # 0
0x2bcbe928	800:	sw	s6, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcbe92c	804:	lw	s5, 0(s6)	@ Get object.cb
0x2bcbe930	808:	addiu	t7, zero, -4
0x2bcbe934	812:	and	s5, s5, t7
0x2bcbe938	816:	lw	s5, 76(s5)	@ Get cb.vtbl
0x2bcbe93c	820:	lw	a0, 20(s5)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbe940	824:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbe944	828:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe948	832:	jalr	s7
0x2bcbe94c	836:	nop
          		@ Captured a stackmap here.
0x2bcbe950	840:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcbe954	844:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe958	848:	jalr	s7
0x2bcbe95c	852:	nop
          		@ Captured a stackmap here.
0x2bcbe960	856:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbe964	860:	lw	s7, 0(JSP)
0x2bcbe968	864:	sw	s7, 0(JSP)
0x2bcbe96c	868:	lw	s5, 0(CP)	@ StringICell
0x2bcbe970	872:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcbe974	876:	sw	s6, 4(JSP)
0x2bcbe978	880:	lw	s6, 0(s7)	@ NULL check
0x2bcbe97c	884:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcbe980	888:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbe984	892:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe988	896:	jalr	s7
0x2bcbe98c	900:	nop
          		@ Captured a stackmap here.
0x2bcbe990	904:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbe994	908:	lw	s7, 0(JSP)
0x2bcbe998	912:	sw	s7, 0(JSP)
0x2bcbe99c	916:	lw	s6, 0(s7)	@ NULL check
0x2bcbe9a0	920:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcbe9a4	924:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbe9a8	928:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe9ac	932:	jalr	s7
0x2bcbe9b0	936:	nop
          		@ Captured a stackmap here.
          		@ Fetch mb from vtable:
0x2bcbe9b4	940:	lw	s6, 32(JFP)	@ Java temp cell # 1
0x2bcbe9b8	944:	lw	s7, 0(s6)	@ Get object.cb
0x2bcbe9bc	948:	addiu	t7, zero, -4
0x2bcbe9c0	952:	and	s7, s7, t7
0x2bcbe9c4	956:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbe9c8	960:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbe9cc	964:	lw	s7, 0(a0)	@ call method through mb
0x2bcbe9d0	968:	jalr	s7
0x2bcbe9d4	972:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcbe9d8	976:	lw	s6, -16(JFP)	@ Java local cell # 0
0x2bcbe9dc	980:	lw	s7, 8(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbe9e0	984:	lw	s5, 72(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbe9e4	988:	sw	s5, 0(JSP)
0x2bcbe9e8	992:	lw	s4, 0(CP)	@ StringICell
0x2bcbe9ec	996:	lw	s7, 0(s4)	@ StringObject from StringICell
0x2bcbe9f0	1000:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbe9f4	1004:	lw	s7, 0(s5)	@ Get object.cb
0x2bcbe9f8	1008:	addiu	t7, zero, -4
0x2bcbe9fc	1012:	and	s7, s7, t7
0x2bcbea00	1016:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbea04	1020:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbea08	1024:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbea0c	1028:	lw	s7, 0(a0)	@ call method through mb
0x2bcbea10	1032:	jalr	s7
0x2bcbea14	1036:	nop
          		@ Captured a stackmap here.
0x2bcbea18	1040:	lw	s7, 28(JFP)	@ Java temp cell # 0
0x2bcbea1c	1044:	sw	s7, -4(JFP)	@ Java local cell # 3
			@ Outgoing local(2) reg(22): not in register
0x2bcbea20	1048:	lw	s6, -8(JFP)	@ Java local cell # 2
			@ Initial Temp REF set is 
	L11:	1052:	@ entry point for branches
			@ Binding Incoming Local(2) to reg(22)
--->Fixed instruction at 712(0x2bcbe8d0) to reference 1052
          		@ MAP_PC idepth=0 javaPc=169 compiledPc=1052
          		@ Do getfield:
0x2bcbea24	1052:	lw	s7, 8(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbea28	1056:	sw	s7, -16(JFP)	@ Java local cell # 0
0x2bcbea2c	1060:	addiu	JSP, JFP, -12
0x2bcbea30	1064:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbea34	1068:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbea38	1072:	nop
0x2bcbea3c	1076:	.word	9494516	@ StringICell
--->Fixed instruction at 992(0x2bcbe9e8) to reference 1076
0x2bcbea40	1080:	.word	9110340	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
--->Fixed instruction at 920(0x2bcbe9a0) to reference 1080
0x2bcbea44	1084:	.word	8436288	@ StringICell
--->Fixed instruction at 868(0x2bcbe96c) to reference 1084
0x2bcbea48	1088:	.word	9109444	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
--->Fixed instruction at 884(0x2bcbe97c) to reference 1088
--->Fixed instruction at 840(0x2bcbe950) to reference 1088
0x2bcbea4c	1092:	.word	9108968	@ mb java.lang.StringBuffer.<init>()V
--->Fixed instruction at 756(0x2bcbe8fc) to reference 1092
0x2bcbea50	1096:	.word	8642484	@ cb java.lang.StringBuffer
--->Fixed instruction at 732(0x2bcbe8e4) to reference 1096
0x2bcbea54	1100:	.word	734783264
--->Fixed instruction at 260(0x2bcbe70c) to reference 1100
0x2bcbea58	1104:	.word	9757768	@ mb com.sun.mep.bench.Chess.BPossMoves.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V
--->Fixed instruction at 132(0x2bcbe68c) to reference 1104
0x2bcbea5c	1108:	.word	9757304	@ cb com.sun.mep.bench.Chess.BPossMoves
--->Fixed instruction at 96(0x2bcbe668) to reference 1108
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbe608) >>>>>>>>
          		@ Capacity is 19 word(s)
0x2bcbe608	0:	addiu	a1, JSP, 68
<<<<<<<<<Pop Code Buffer to PC = 1112 (0x2bcbea60) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbe658) >>>>>>>>
          		@ spillSize is 3 word(s), add to JFP+28
0x2bcbe658	80:	addiu	JSP, JFP, 40
          		@ setup cp base register
0x2bcbe65c	84:	lui	CP, hi16(0x2bcb)
0x2bcbe660	88:	ori	CP, CP, lo16(0x2bcbea3c)
0x2bcbe664	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 1112 (0x2bcbea60) <<<<<<<<<
JS: COMPILED: size=1344 startPC=0x2bcbe608 com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;
OSR: Intr2Comp: com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.BPossMoves.BKing_Moves(I)V
JS: COMPILING com.sun.mep.bench.Chess.BPossMoves.BKing_Moves(I)V
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
CSE: Forgetting all CSE'd array index expressions
CSE: Forgetting all CSE'd array read expressions
orig bkID(9) Incoming Locals(3 0x0): 2- 0- 1- 
o1   bkID(9) Incoming Locals(1 0x0): 2- 
o1   bkID(9) Incoming Locals(3 0x0): 2- 0- 1- 
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(2) Incoming Locals(1 0x0): 0- 
o1   bkID(2) Incoming Locals(1 0x0): 0- 
s1   bkID(2) Incoming Locals(1 0x0): 0- 
s1   bkID(2) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(9) Incoming Locals(3 0x0): 2- 0- 1- 
o1   bkID(9) Incoming Locals(1 0x0): 2- 
o1   bkID(9) Incoming Locals(3 0x0): 2- 0- 1- 
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(2) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(2) Incoming Locals(1 0x0): 0- 
s1   bkID(2) Incoming Locals(1 0x0): 0- 
s1   bkID(2) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
bkID(9) local(0 #2)  not found in goalBk
bkID(9) local(1 #0)  not found in goalBk
bkID(9) local(2 #1)  not found in goalBk
bkID(2) local(0 #0)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(2) Incoming Locals(2 0x0): 0- 1- 
+bk  bkID(2) Incoming Locals(2 0x1): 0+ 1- 
-gbk bkID(1) Incoming Locals(2 0x0): 0- 1- 
+gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
bkID(2) local(0 #0)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(2 0x1): 0+ 1- 
dstBk(2) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(2) Incoming Locals(2 0x1): 0+ 1- 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
dstBk(1) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
bkID(2) local(1 #1)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(2) Incoming Locals(2 0x1): 0+ 1- 
+bk  bkID(2) Incoming Locals(2 0x3): 0+ 1+ 
-gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
+gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
bkID(2) local(1 #1)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(2) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(1) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
bkID(0) local(0 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x0): 0- 1- 
dstBk(0) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(1) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
bkID(0) local(1 #1)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
dstBk(0) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(0) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(1) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
pre  bkID(9) Incoming Locals(3 0x0): 2- 0- 1- 
local(#0) swapped with local(#0)
post bkID(9) Incoming Locals(3 0x1): 2+ 0- 1- 
pre  bkID(9) Incoming Locals(3 0x1): 2+ 0- 1- 
local(#1) swapped with local(#1)
post bkID(9) Incoming Locals(3 0x3): 2+ 0+ 1- 
pre  bkID(9) Incoming Locals(3 0x3): 2+ 0+ 1- 
local(#2) swapped with local(#2)
post bkID(9) Incoming Locals(3 0x7): 2+ 0+ 1+ 

#################################################

The maximum node counts per root node are 8
IR block list contains 11 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 29 root nodes: in block 
* flags: 0x41
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.BPossMoves.BKing_Moves(I)V(BPossMoves.java:113)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<0>  (0x94f6d4):    iconst_1 
<1>  (0x94f6d5):    istore_2 
<2>  (0x94f6d6):    iconst_1 
<3>  (0x94f6d7):    istore_3 
<4>  (0x94f6d8):    aload_0 
<5>  (0x94f6d9):    agetfield_quick #4
<8>  (0x94f6dc):    agetfield_quick #3
<11>  (0x94f6df):    iconst_4 
<12>  (0x94f6e0):    baload 
<13>  (0x94f6e1):    bipush 11
<15>  (0x94f6e3):    if_icmpne <183>
<18>  (0x94f6e6):    aload_0 
<19>  (0x94f6e7):    agetfield_quick #3
<22>  (0x94f6ea):    agetfield_quick #41
<25>  (0x94f6ed):    iconst_4 
<26>  (0x94f6ee):    baload 
<27>  (0x94f6ef):    bipush 11
<29>  (0x94f6f1):    if_icmpne <183>
<32>  (0x94f6f4):    aload_0 
<33>  (0x94f6f5):    agetfield_quick #3
<36>  (0x94f6f8):    agetfield_quick #23
<39>  (0x94f6fb):    iconst_4 
<40>  (0x94f6fc):    invokevirtual_quick_w #12 <com.sun.mep.bench.Chess.ActorManager.getPiece(I)Lcom/sun/mep/bench/Chess/ChessPiece;>
<43>  (0x94f6ff):    checkcast_quick #13 <com.sun.mep.bench.Chess.King>
<46>  (0x94f702):    astore 4
<48>  (0x94f704):    aload_0 
<49>  (0x94f705):    agetfield_quick #4
<52>  (0x94f708):    agetfield_quick #3
<55>  (0x94f70b):    iconst_0 
<56>  (0x94f70c):    baload 
<57>  (0x94f70d):    bipush 9
<59>  (0x94f70f):    if_icmpne <114>
<62>  (0x94f712):    aload_0 
<63>  (0x94f713):    agetfield_quick #3
<66>  (0x94f716):    agetfield_quick #41
<69>  (0x94f719):    iconst_0 
<70>  (0x94f71a):    baload 
<71>  (0x94f71b):    bipush 9
<73>  (0x94f71d):    if_icmpne <114>
<76>  (0x94f720):    aload_0 
<77>  (0x94f721):    agetfield_quick #3
<80>  (0x94f724):    agetfield_quick #23
<83>  (0x94f727):    iconst_0 
<84>  (0x94f728):    invokevirtual_quick_w #12 <com.sun.mep.bench.Chess.ActorManager.getPiece(I)Lcom/sun/mep/bench/Chess/ChessPiece;>
<87>  (0x94f72b):    checkcast_quick #15 <com.sun.mep.bench.Chess.Rook>
<90>  (0x94f72e):    astore 5
<92>  (0x94f730):    aload 4
<94>  (0x94f732):    getfield_quick #28
<97>  (0x94f735):    ifne <108>
<100>  (0x94f738):    aload 5
<102>  (0x94f73a):    getfield_quick #28
<105>  (0x94f73d):    ifeq <112>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(4)
 
Incoming Locals(2): 
	local(0)	ID(4)
 	local(1)	ID(122)
 
Assigned Locals(4): 
	ASSIGN(21): local(2)	ID(20)	rhsID(2)
 	ASSIGN(23): local(3)	ID(22)	rhsID(3)
 	ASSIGN(72): local(4)	ID(71)	rhsID(54)
 	ASSIGN(111): local(5)	ID(110)	rhsID(103)
 
Successor Blocks(4): 
	ID(1) LocalOrder(1) AssignOrder(2) RefsOK(1) Locals(0 1)
	ID(2) LocalOrder(1) AssignOrder(3) RefsOK(0) Locals(0 1)
	ID(3) LocalOrder(1) AssignOrder(4) RefsOK(0) Locals()
	ID(4) LocalOrder(1) AssignOrder(4) RefsOK(0) Locals()

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 7) IDENTITY (reference)  (ref count: 2)
      <(ID: 11) FETCH (reference) 
         <(ID: 6) FIELD_REF (reference) 
            <(ID: 4) IDENTITY (reference)  (ref count: 4)
               <(ID: 28) LOCAL (reference)   0>
            <(ID: 5) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 10) IDENTITY (reference)  (ref count: 3)
      <(ID: 19) FETCH (reference) 
         <(ID: 9) FIELD_REF (reference) 
            <(ID: 7) IDENTITY (reference)  (ref count: 2)
            <(ID: 8) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 16) IDENTITY (int)  (ref count: 2)
      <(ID: 24) FETCH (int) 
         <(ID: 15) INDEX (int) 
            <(ID: 10) IDENTITY (reference)  (ref count: 3)
            <(ID: 14) BOUNDS_CHECK (int) 
               <(ID: 12) CONST_JAVA_NUMERIC32 (int)  (4)
               <(ID: 13) ARRAY_LENGTH (int) 
                  <(ID: 10) IDENTITY (reference)  (ref count: 3)

   <(ID: 21) ASSIGN (int)  (assignIdx: 0)
      <(ID: 20) LOCAL (int)   2>
      <(ID: 2) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 23) ASSIGN (int)  (assignIdx: 1)
      <(ID: 22) LOCAL (int)   3>
      <(ID: 3) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 18) BCOND (int) 
   target: (BlockID: 1 BlockPC: 183)
   condition: NE
   flags: 0
      <(ID: 16) IDENTITY (int)  (ref count: 2)
      <(ID: 17) CONST_JAVA_NUMERIC32 (int)  (11)


   <(ID: 27) IDENTITY (reference)  (ref count: 3)
      <(ID: 32) FETCH (reference) 
         <(ID: 26) FIELD_REF (reference) 
            <(ID: 4) IDENTITY (reference)  (ref count: 4)
            <(ID: 25) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 31) IDENTITY (reference)  (ref count: 3)
      <(ID: 40) FETCH (reference) 
         <(ID: 30) FIELD_REF (reference) 
            <(ID: 27) IDENTITY (reference)  (ref count: 3)
            <(ID: 29) CONST_FIELD_OFFSET (NONE)  (41)

   <(ID: 37) IDENTITY (int)  (ref count: 2)
      <(ID: 41) FETCH (int) 
         <(ID: 36) INDEX (int) 
            <(ID: 31) IDENTITY (reference)  (ref count: 3)
            <(ID: 35) BOUNDS_CHECK (int) 
               <(ID: 33) CONST_JAVA_NUMERIC32 (int)  (4)
               <(ID: 34) ARRAY_LENGTH (int) 
                  <(ID: 31) IDENTITY (reference)  (ref count: 3)

   <(ID: 39) BCOND (int) 
   target: (BlockID: 1 BlockPC: 183)
   condition: NE
   flags: 0
      <(ID: 37) IDENTITY (int)  (ref count: 2)
      <(ID: 38) CONST_JAVA_NUMERIC32 (int)  (11)


   <(ID: 44) IDENTITY (reference)  (ref count: 3)
      <(ID: 55) FETCH (reference) 
         <(ID: 43) FIELD_REF (reference) 
            <(ID: 27) IDENTITY (reference)  (ref count: 3)
            <(ID: 42) CONST_FIELD_OFFSET (NONE)  (23)

   <(ID: 54) IDENTITY (reference)  (ref count: 3)
      <(ID: 73) CHECKCAST (reference) 
         <(ID: 52) INVOKE (reference) 
            <(ID: 49) PARAMETER (reference) 
               <(ID: 44) IDENTITY (reference)  (ref count: 3)
               <(ID: 48) PARAMETER (int) 
                  <(ID: 45) CONST_JAVA_NUMERIC32 (int)  (4)
                  <(ID: 47) NULL_PARAMETER (NONE) 
            <(ID: 51) FETCH_MB_FROM_VTABLE (address field) 
               <(ID: 50) GET_VTBL (NONE) 
                  <(ID: 44) IDENTITY (reference)  (ref count: 3)
               <(ID: 46) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 14)
         <(ID: 53) CONST_CB (address field)  (com.sun.mep.bench.Chess.King)

   <(ID: 58) IDENTITY (reference)  (ref count: 2)
      <(ID: 62) FETCH (reference) 
         <(ID: 57) FIELD_REF (reference) 
            <(ID: 4) IDENTITY (reference)  (ref count: 4)
            <(ID: 56) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 61) IDENTITY (reference)  (ref count: 3)
      <(ID: 70) FETCH (reference) 
         <(ID: 60) FIELD_REF (reference) 
            <(ID: 58) IDENTITY (reference)  (ref count: 2)
            <(ID: 59) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 67) IDENTITY (int)  (ref count: 2)
      <(ID: 74) FETCH (int) 
         <(ID: 66) INDEX (int) 
            <(ID: 61) IDENTITY (reference)  (ref count: 3)
            <(ID: 65) BOUNDS_CHECK (int) 
               <(ID: 63) CONST_JAVA_NUMERIC32 (int)  (0)
               <(ID: 64) ARRAY_LENGTH (int) 
                  <(ID: 61) IDENTITY (reference)  (ref count: 3)

   <(ID: 72) ASSIGN (reference)  (assignIdx: 2)
      <(ID: 71) LOCAL (reference)   4>
      <(ID: 54) IDENTITY (reference)  (ref count: 3)

   <(ID: 69) BCOND (int) 
   target: (BlockID: 2 BlockPC: 114)
   condition: NE
   flags: 0
      <(ID: 67) IDENTITY (int)  (ref count: 2)
      <(ID: 68) CONST_JAVA_NUMERIC32 (int)  (9)


   <(ID: 77) IDENTITY (reference)  (ref count: 3)
      <(ID: 81) FETCH (reference) 
         <(ID: 76) FIELD_REF (reference) 
            <(ID: 4) IDENTITY (reference)  (ref count: 4)
            <(ID: 75) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 80) IDENTITY (reference)  (ref count: 3)
      <(ID: 89) FETCH (reference) 
         <(ID: 79) FIELD_REF (reference) 
            <(ID: 77) IDENTITY (reference)  (ref count: 3)
            <(ID: 78) CONST_FIELD_OFFSET (NONE)  (41)

   <(ID: 86) IDENTITY (int)  (ref count: 2)
      <(ID: 90) FETCH (int) 
         <(ID: 85) INDEX (int) 
            <(ID: 80) IDENTITY (reference)  (ref count: 3)
            <(ID: 84) BOUNDS_CHECK (int) 
               <(ID: 82) CONST_JAVA_NUMERIC32 (int)  (0)
               <(ID: 83) ARRAY_LENGTH (int) 
                  <(ID: 80) IDENTITY (reference)  (ref count: 3)

   <(ID: 88) BCOND (int) 
   target: (BlockID: 2 BlockPC: 114)
   condition: NE
   flags: 0
      <(ID: 86) IDENTITY (int)  (ref count: 2)
      <(ID: 87) CONST_JAVA_NUMERIC32 (int)  (9)


   <(ID: 93) IDENTITY (reference)  (ref count: 3)
      <(ID: 104) FETCH (reference) 
         <(ID: 92) FIELD_REF (reference) 
            <(ID: 77) IDENTITY (reference)  (ref count: 3)
            <(ID: 91) CONST_FIELD_OFFSET (NONE)  (23)

   <(ID: 103) IDENTITY (reference)  (ref count: 3)
      <(ID: 112) CHECKCAST (reference) 
         <(ID: 101) INVOKE (reference) 
            <(ID: 98) PARAMETER (reference) 
               <(ID: 93) IDENTITY (reference)  (ref count: 3)
               <(ID: 97) PARAMETER (int) 
                  <(ID: 94) CONST_JAVA_NUMERIC32 (int)  (0)
                  <(ID: 96) NULL_PARAMETER (NONE) 
            <(ID: 100) FETCH_MB_FROM_VTABLE (address field) 
               <(ID: 99) GET_VTBL (NONE) 
                  <(ID: 93) IDENTITY (reference)  (ref count: 3)
               <(ID: 95) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 14)
         <(ID: 102) CONST_CB (address field)  (com.sun.mep.bench.Chess.Rook)

   <(ID: 107) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 113) FETCH (32-bit field) 
         <(ID: 106) FIELD_REF (32-bit field) 
            <(ID: 54) IDENTITY (reference)  (ref count: 3)
            <(ID: 105) CONST_FIELD_OFFSET (NONE)  (28)

   <(ID: 111) ASSIGN (reference)  (assignIdx: 3)
      <(ID: 110) LOCAL (reference)   5>
      <(ID: 103) IDENTITY (reference)  (ref count: 3)

   <(ID: 109) BCOND (int) 
   target: (BlockID: 3 BlockPC: 108)
   condition: NE
   flags: 0
      <(ID: 107) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 108) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 116) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 119) FETCH (32-bit field) 
         <(ID: 115) FIELD_REF (32-bit field) 
            <(ID: 103) IDENTITY (reference)  (ref count: 3)
            <(ID: 114) CONST_FIELD_OFFSET (NONE)  (28)

   <(ID: 118) BCOND (int) 
   target: (BlockID: 4 BlockPC: 112)
   condition: EQ
   flags: 0
      <(ID: 116) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 117) CONST_JAVA_NUMERIC32 (int)  (0)



*************************************************
*
* (block ID:3 block PC:108 )
* IR root list contains 5 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.BPossMoves.BKing_Moves(I)V(BPossMoves.java:125)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<108>  (0x94f740):    iconst_1 
<109>  (0x94f741):    goto <113>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 5 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(5) LocalOrder(0) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 305) MAP_PC (NONE)   108>

   <(ID: 308) DEFINE (int) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 306) CONST_JAVA_NUMERIC32 (int)  (1)


   <(ID: 309) LOAD_PHIS (NONE) 

   <(ID: 310) RELEASE_PHIS (NONE) 

   <(ID: 311) GOTO (NONE) 
   target: (BlockID: 5 BlockPC: 113)


*************************************************
*
* (block ID:4 block PC:112 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.BPossMoves.BKing_Moves(I)V(BPossMoves.java:125)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<112>  (0x94f744):    iconst_0 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 5 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(5) LocalOrder(0) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 312) MAP_PC (NONE)   112>

   <(ID: 314) DEFINE (int) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 313) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 315) LOAD_PHIS (NONE) 

   <(ID: 316) RELEASE_PHIS (NONE) 


*************************************************
*
* (block ID:5 block PC:113 )
* IR root list contains 2 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.BPossMoves.BKing_Moves(I)V(BPossMoves.java:125)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<113>  (0x94f745):    istore_3 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 5 
*************************************************

Number and size of USED nodes in phi array: 1 1

Assigned Locals(1): 
	ASSIGN(371): local(3)	ID(370)	rhsID(307)
 
Successor Blocks(1): 
	ID(2) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(0 1)

   <(ID: 369) MAP_PC (NONE)   113>

   <(ID: 371) ASSIGN (int)  (assignIdx: 0)
      <(ID: 370) LOCAL (int)   3>
      <(ID: 307) USED (int) 
      spillLocation: 0
      registerSpillOk: 1



*************************************************
*
* (block ID:2 block PC:114 )
* IR root list contains 16 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.BPossMoves.BKing_Moves(I)V(BPossMoves.java:128)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<114>  (0x94f746):    aload_0 
<115>  (0x94f747):    agetfield_quick #4
<118>  (0x94f74a):    agetfield_quick #3
<121>  (0x94f74d):    bipush 7
<123>  (0x94f74f):    baload 
<124>  (0x94f750):    bipush 9
<126>  (0x94f752):    if_icmpne <183>
<129>  (0x94f755):    aload_0 
<130>  (0x94f756):    agetfield_quick #3
<133>  (0x94f759):    agetfield_quick #41
<136>  (0x94f75c):    bipush 7
<138>  (0x94f75e):    baload 
<139>  (0x94f75f):    bipush 9
<141>  (0x94f761):    if_icmpne <183>
<144>  (0x94f764):    aload_0 
<145>  (0x94f765):    agetfield_quick #3
<148>  (0x94f768):    agetfield_quick #23
<151>  (0x94f76b):    bipush 7
<153>  (0x94f76d):    invokevirtual_quick_w #12 <com.sun.mep.bench.Chess.ActorManager.getPiece(I)Lcom/sun/mep/bench/Chess/ChessPiece;>
<156>  (0x94f770):    checkcast_quick #15 <com.sun.mep.bench.Chess.Rook>
<159>  (0x94f773):    astore 5
<161>  (0x94f775):    aload 4
<163>  (0x94f777):    getfield_quick #28
<166>  (0x94f77a):    ifne <177>
<169>  (0x94f77d):    aload 5
<171>  (0x94f77f):    getfield_quick #28
<174>  (0x94f782):    ifeq <181>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(241)
 
Incoming Locals(2): 
	local(0)	ID(241)
 	local(1)	ID(122)
 
Assigned Locals(1): 
	ASSIGN(296): local(5)	ID(295)	rhsID(287)
 
Successor Blocks(3): 
	ID(1) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(0 1)
	ID(6) LocalOrder(1) AssignOrder(1) RefsOK(0) Locals()
	ID(7) LocalOrder(1) AssignOrder(1) RefsOK(0) Locals()

   <(ID: 240) MAP_PC (NONE)   114>

   <(ID: 244) IDENTITY (reference)  (ref count: 2)
      <(ID: 248) FETCH (reference) 
         <(ID: 243) FIELD_REF (reference) 
            <(ID: 241) IDENTITY (reference)  (ref count: 2)
               <(ID: 261) LOCAL (reference)   0>
            <(ID: 242) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 247) IDENTITY (reference)  (ref count: 3)
      <(ID: 256) FETCH (reference) 
         <(ID: 246) FIELD_REF (reference) 
            <(ID: 244) IDENTITY (reference)  (ref count: 2)
            <(ID: 245) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 253) IDENTITY (int)  (ref count: 2)
      <(ID: 257) FETCH (int) 
         <(ID: 252) INDEX (int) 
            <(ID: 247) IDENTITY (reference)  (ref count: 3)
            <(ID: 251) BOUNDS_CHECK (int) 
               <(ID: 249) CONST_JAVA_NUMERIC32 (int)  (7)
               <(ID: 250) ARRAY_LENGTH (int) 
                  <(ID: 247) IDENTITY (reference)  (ref count: 3)

   <(ID: 255) BCOND (int) 
   target: (BlockID: 1 BlockPC: 183)
   condition: NE
   flags: 0
      <(ID: 253) IDENTITY (int)  (ref count: 2)
      <(ID: 254) CONST_JAVA_NUMERIC32 (int)  (9)


   <(ID: 260) IDENTITY (reference)  (ref count: 3)
      <(ID: 265) FETCH (reference) 
         <(ID: 259) FIELD_REF (reference) 
            <(ID: 241) IDENTITY (reference)  (ref count: 2)
            <(ID: 258) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 264) IDENTITY (reference)  (ref count: 3)
      <(ID: 273) FETCH (reference) 
         <(ID: 263) FIELD_REF (reference) 
            <(ID: 260) IDENTITY (reference)  (ref count: 3)
            <(ID: 262) CONST_FIELD_OFFSET (NONE)  (41)

   <(ID: 270) IDENTITY (int)  (ref count: 2)
      <(ID: 274) FETCH (int) 
         <(ID: 269) INDEX (int) 
            <(ID: 264) IDENTITY (reference)  (ref count: 3)
            <(ID: 268) BOUNDS_CHECK (int) 
               <(ID: 266) CONST_JAVA_NUMERIC32 (int)  (7)
               <(ID: 267) ARRAY_LENGTH (int) 
                  <(ID: 264) IDENTITY (reference)  (ref count: 3)

   <(ID: 272) BCOND (int) 
   target: (BlockID: 1 BlockPC: 183)
   condition: NE
   flags: 0
      <(ID: 270) IDENTITY (int)  (ref count: 2)
      <(ID: 271) CONST_JAVA_NUMERIC32 (int)  (9)


   <(ID: 277) IDENTITY (reference)  (ref count: 3)
      <(ID: 288) FETCH (reference) 
         <(ID: 276) FIELD_REF (reference) 
            <(ID: 260) IDENTITY (reference)  (ref count: 3)
            <(ID: 275) CONST_FIELD_OFFSET (NONE)  (23)

   <(ID: 287) IDENTITY (reference)  (ref count: 3)
      <(ID: 297) CHECKCAST (reference) 
         <(ID: 285) INVOKE (reference) 
            <(ID: 282) PARAMETER (reference) 
               <(ID: 277) IDENTITY (reference)  (ref count: 3)
               <(ID: 281) PARAMETER (int) 
                  <(ID: 278) CONST_JAVA_NUMERIC32 (int)  (7)
                  <(ID: 280) NULL_PARAMETER (NONE) 
            <(ID: 284) FETCH_MB_FROM_VTABLE (address field) 
               <(ID: 283) GET_VTBL (NONE) 
                  <(ID: 277) IDENTITY (reference)  (ref count: 3)
               <(ID: 279) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 14)
         <(ID: 286) CONST_CB (address field)  (com.sun.mep.bench.Chess.Rook)

   <(ID: 292) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 298) FETCH (32-bit field) 
         <(ID: 291) FIELD_REF (32-bit field) 
            <(ID: 289) LOCAL (reference)   4>
            <(ID: 290) CONST_FIELD_OFFSET (NONE)  (28)

   <(ID: 296) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 295) LOCAL (reference)   5>
      <(ID: 287) IDENTITY (reference)  (ref count: 3)

   <(ID: 294) BCOND (int) 
   target: (BlockID: 6 BlockPC: 177)
   condition: NE
   flags: 0
      <(ID: 292) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 293) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 301) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 304) FETCH (32-bit field) 
         <(ID: 300) FIELD_REF (32-bit field) 
            <(ID: 287) IDENTITY (reference)  (ref count: 3)
            <(ID: 299) CONST_FIELD_OFFSET (NONE)  (28)

   <(ID: 303) BCOND (int) 
   target: (BlockID: 7 BlockPC: 181)
   condition: EQ
   flags: 0
      <(ID: 301) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 302) CONST_JAVA_NUMERIC32 (int)  (0)



*************************************************
*
* (block ID:6 block PC:177 )
* IR root list contains 5 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.BPossMoves.BKing_Moves(I)V(BPossMoves.java:132)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<177>  (0x94f785):    iconst_1 
<178>  (0x94f786):    goto <182>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 5 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(8) LocalOrder(0) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 357) MAP_PC (NONE)   177>

   <(ID: 360) DEFINE (int) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 358) CONST_JAVA_NUMERIC32 (int)  (1)


   <(ID: 361) LOAD_PHIS (NONE) 

   <(ID: 362) RELEASE_PHIS (NONE) 

   <(ID: 363) GOTO (NONE) 
   target: (BlockID: 8 BlockPC: 182)


*************************************************
*
* (block ID:7 block PC:181 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.BPossMoves.BKing_Moves(I)V(BPossMoves.java:132)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<181>  (0x94f789):    iconst_0 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 5 
*************************************************

Number and size of USED nodes in phi array: 0 0

Successor Blocks(1): 
	ID(8) LocalOrder(0) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 364) MAP_PC (NONE)   181>

   <(ID: 366) DEFINE (int) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 365) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 367) LOAD_PHIS (NONE) 

   <(ID: 368) RELEASE_PHIS (NONE) 


*************************************************
*
* (block ID:8 block PC:182 )
* IR root list contains 2 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.BPossMoves.BKing_Moves(I)V(BPossMoves.java:132)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<182>  (0x94f78a):    istore_2 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 4 5 
*************************************************

Number and size of USED nodes in phi array: 1 1

Assigned Locals(1): 
	ASSIGN(376): local(2)	ID(375)	rhsID(359)
 
Successor Blocks(1): 
	ID(1) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(0 1)

   <(ID: 374) MAP_PC (NONE)   182>

   <(ID: 376) ASSIGN (int)  (assignIdx: 0)
      <(ID: 375) LOCAL (int)   2>
      <(ID: 359) USED (int) 
      spillLocation: 0
      registerSpillOk: 1



*************************************************
*
* (block ID:1 block PC:183 )
* IR root list contains 19 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.BPossMoves.BKing_Moves(I)V(BPossMoves.java:136)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<183>  (0x94f78b):    aload_0 
<184>  (0x94f78c):    iload_1 
<185>  (0x94f78d):    iconst_0 
<186>  (0x94f78e):    bipush 248
<188>  (0x94f790):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<191>  (0x94f793):    pop 
<192>  (0x94f794):    aload_0 
<193>  (0x94f795):    iload_1 
<194>  (0x94f796):    iconst_0 
<195>  (0x94f797):    bipush 8
<197>  (0x94f799):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<200>  (0x94f79c):    pop 
<201>  (0x94f79d):    aload_0 
<202>  (0x94f79e):    iload_1 
<203>  (0x94f79f):    iconst_m1 
<204>  (0x94f7a0):    iconst_0 
<205>  (0x94f7a1):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<208>  (0x94f7a4):    pop 
<209>  (0x94f7a5):    aload_0 
<210>  (0x94f7a6):    iload_1 
<211>  (0x94f7a7):    iconst_1 
<212>  (0x94f7a8):    iconst_0 
<213>  (0x94f7a9):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<216>  (0x94f7ac):    pop 
<217>  (0x94f7ad):    aload_0 
<218>  (0x94f7ae):    iload_1 
<219>  (0x94f7af):    iconst_1 
<220>  (0x94f7b0):    bipush 248
<222>  (0x94f7b2):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<225>  (0x94f7b5):    pop 
<226>  (0x94f7b6):    aload_0 
<227>  (0x94f7b7):    iload_1 
<228>  (0x94f7b8):    iconst_1 
<229>  (0x94f7b9):    bipush 8
<231>  (0x94f7bb):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<234>  (0x94f7be):    pop 
<235>  (0x94f7bf):    aload_0 
<236>  (0x94f7c0):    iload_1 
<237>  (0x94f7c1):    iconst_m1 
<238>  (0x94f7c2):    bipush 8
<240>  (0x94f7c4):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<243>  (0x94f7c7):    pop 
<244>  (0x94f7c8):    aload_0 
<245>  (0x94f7c9):    iload_1 
<246>  (0x94f7ca):    iconst_m1 
<247>  (0x94f7cb):    bipush 248
<249>  (0x94f7cd):    invokenonvirtual_quick #9 <com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I>
<252>  (0x94f7d0):    pop 
<253>  (0x94f7d1):    iload_3 
<254>  (0x94f7d2):    ifne <305>
<257>  (0x94f7d5):    aload_0 
<258>  (0x94f7d6):    agetfield_quick #4
<261>  (0x94f7d9):    agetfield_quick #3
<264>  (0x94f7dc):    iconst_1 
<265>  (0x94f7dd):    baload 
<266>  (0x94f7de):    bipush 99
<268>  (0x94f7e0):    if_icmpne <305>
<271>  (0x94f7e3):    aload_0 
<272>  (0x94f7e4):    agetfield_quick #4
<275>  (0x94f7e7):    agetfield_quick #3
<278>  (0x94f7ea):    iconst_2 
<279>  (0x94f7eb):    baload 
<280>  (0x94f7ec):    bipush 99
<282>  (0x94f7ee):    if_icmpne <305>
<285>  (0x94f7f1):    aload_0 
<286>  (0x94f7f2):    getfield #2 <com.sun.mep.bench.Chess.BPossMoves.gState:Lcom/sun/mep/bench/Chess/GameState;>
<289>  (0x94f7f5):    getfield #7 <com.sun.mep.bench.Chess.GameState.typeAtSquare:[B>
<292>  (0x94f7f8):    iconst_3 
<293>  (0x94f7f9):    baload 
<294>  (0x94f7fa):    bipush 99
<296>  (0x94f7fc):    if_icmpne <305>
<299>  (0x94f7ff):    aload_0 
<300>  (0x94f800):    iload_1 
<301>  (0x94f801):    iconst_2 
<302>  (0x94f802):    invokevirtual #8 <com.sun.mep.bench.Chess.BPossMoves.Store_Move(II)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(121)
 	local(1)	ID(122)
 
Incoming Locals(2): 
	local(0)	ID(121)
 	local(1)	ID(122)
 
Successor Blocks(1): 
	ID(9) LocalOrder(2) AssignOrder(0) RefsOK(0) Locals(2 0 1)

   <(ID: 120) MAP_PC (NONE)   183>

   <(ID: 131) INVOKE (int) 
      <(ID: 130) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
            <(ID: 141) LOCAL (reference)   0>
         <(ID: 129) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
               <(ID: 142) LOCAL (int)   1>
            <(ID: 128) PARAMETER (int) 
               <(ID: 123) CONST_JAVA_NUMERIC32 (int)  (0)
               <(ID: 127) PARAMETER (int) 
                  <(ID: 124) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 126) NULL_PARAMETER (NONE) 
      <(ID: 125) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 140) INVOKE (int) 
      <(ID: 139) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 138) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
            <(ID: 137) PARAMETER (int) 
               <(ID: 132) CONST_JAVA_NUMERIC32 (int)  (0)
               <(ID: 136) PARAMETER (int) 
                  <(ID: 133) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 135) NULL_PARAMETER (NONE) 
      <(ID: 134) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 151) INVOKE (int) 
      <(ID: 150) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 149) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
            <(ID: 148) PARAMETER (int) 
               <(ID: 143) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 147) PARAMETER (int) 
                  <(ID: 144) CONST_JAVA_NUMERIC32 (int)  (0)
                  <(ID: 146) NULL_PARAMETER (NONE) 
      <(ID: 145) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 160) INVOKE (int) 
      <(ID: 159) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 158) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
            <(ID: 157) PARAMETER (int) 
               <(ID: 152) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 156) PARAMETER (int) 
                  <(ID: 153) CONST_JAVA_NUMERIC32 (int)  (0)
                  <(ID: 155) NULL_PARAMETER (NONE) 
      <(ID: 154) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 169) INVOKE (int) 
      <(ID: 168) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 167) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
            <(ID: 166) PARAMETER (int) 
               <(ID: 161) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 165) PARAMETER (int) 
                  <(ID: 162) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 164) NULL_PARAMETER (NONE) 
      <(ID: 163) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 178) INVOKE (int) 
      <(ID: 177) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 176) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
            <(ID: 175) PARAMETER (int) 
               <(ID: 170) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 174) PARAMETER (int) 
                  <(ID: 171) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 173) NULL_PARAMETER (NONE) 
      <(ID: 172) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 187) INVOKE (int) 
      <(ID: 186) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 185) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
            <(ID: 184) PARAMETER (int) 
               <(ID: 179) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 183) PARAMETER (int) 
                  <(ID: 180) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 182) NULL_PARAMETER (NONE) 
      <(ID: 181) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 196) INVOKE (int) 
      <(ID: 195) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 194) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
            <(ID: 193) PARAMETER (int) 
               <(ID: 188) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 192) PARAMETER (int) 
                  <(ID: 189) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 191) NULL_PARAMETER (NONE) 
      <(ID: 190) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I)

   <(ID: 199) BCOND (int) 
   target: (BlockID: 9 BlockPC: 305)
   condition: NE
   flags: 0
      <(ID: 197) LOCAL (int)   3>
      <(ID: 198) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 202) IDENTITY (reference)  (ref count: 2)
      <(ID: 206) FETCH (reference) 
         <(ID: 201) FIELD_REF (reference) 
            <(ID: 121) IDENTITY (reference)  (ref count: 11)
            <(ID: 200) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 205) IDENTITY (reference)  (ref count: 5)
      <(ID: 214) FETCH (reference) 
         <(ID: 204) FIELD_REF (reference) 
            <(ID: 202) IDENTITY (reference)  (ref count: 2)
            <(ID: 203) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 211) IDENTITY (int)  (ref count: 2)
      <(ID: 215) FETCH (int) 
         <(ID: 210) INDEX (int) 
            <(ID: 205) IDENTITY (reference)  (ref count: 5)
            <(ID: 209) BOUNDS_CHECK (int) 
               <(ID: 207) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 208) IDENTITY (int)  (ref count: 3)
                  <(ID: 222) ARRAY_LENGTH (int) 
                     <(ID: 205) IDENTITY (reference)  (ref count: 5)

   <(ID: 213) BCOND (int) 
   target: (BlockID: 9 BlockPC: 305)
   condition: NE
   flags: 0
      <(ID: 211) IDENTITY (int)  (ref count: 2)
      <(ID: 212) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 219) IDENTITY (int)  (ref count: 2)
      <(ID: 223) FETCH (int) 
         <(ID: 218) INDEX (int) 
            <(ID: 205) IDENTITY (reference)  (ref count: 5)
            <(ID: 217) BOUNDS_CHECK (int) 
               <(ID: 216) CONST_JAVA_NUMERIC32 (int)  (2)
               <(ID: 208) IDENTITY (int)  (ref count: 3)

   <(ID: 221) BCOND (int) 
   target: (BlockID: 9 BlockPC: 305)
   condition: NE
   flags: 0
      <(ID: 219) IDENTITY (int)  (ref count: 2)
      <(ID: 220) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 227) IDENTITY (int)  (ref count: 2)
      <(ID: 230) FETCH (int) 
         <(ID: 226) INDEX (int) 
            <(ID: 205) IDENTITY (reference)  (ref count: 5)
            <(ID: 225) BOUNDS_CHECK (int) 
               <(ID: 224) CONST_JAVA_NUMERIC32 (int)  (3)
               <(ID: 208) IDENTITY (int)  (ref count: 3)

   <(ID: 229) BCOND (int) 
   target: (BlockID: 9 BlockPC: 305)
   condition: NE
   flags: 0
      <(ID: 227) IDENTITY (int)  (ref count: 2)
      <(ID: 228) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 239) INVOKE (v) 
      <(ID: 236) PARAMETER (reference) 
         <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 235) PARAMETER (int) 
            <(ID: 122) IDENTITY (int)  (ref count: 9)
            <(ID: 234) PARAMETER (int) 
               <(ID: 231) CONST_JAVA_NUMERIC32 (int)  (2)
               <(ID: 233) NULL_PARAMETER (NONE) 
      <(ID: 238) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 237) GET_VTBL (NONE) 
            <(ID: 121) IDENTITY (reference)  (ref count: 11)
         <(ID: 232) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)


*************************************************
*
* (block ID:9 block PC:305 )
* IR root list contains 9 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x7
* Source: com.sun.mep.bench.Chess.BPossMoves.BKing_Moves(I)V(BPossMoves.java:155)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<305>  (0x94f805):    iload_2 
<306>  (0x94f806):    ifne <345>
<309>  (0x94f809):    aload_0 
<310>  (0x94f80a):    agetfield_quick #4
<313>  (0x94f80d):    agetfield_quick #3
<316>  (0x94f810):    bipush 6
<318>  (0x94f812):    baload 
<319>  (0x94f813):    bipush 99
<321>  (0x94f815):    if_icmpne <345>
<324>  (0x94f818):    aload_0 
<325>  (0x94f819):    getfield #2 <com.sun.mep.bench.Chess.BPossMoves.gState:Lcom/sun/mep/bench/Chess/GameState;>
<328>  (0x94f81c):    getfield #7 <com.sun.mep.bench.Chess.GameState.typeAtSquare:[B>
<331>  (0x94f81f):    iconst_5 
<332>  (0x94f820):    baload 
<333>  (0x94f821):    bipush 99
<335>  (0x94f823):    if_icmpne <345>
<338>  (0x94f826):    aload_0 
<339>  (0x94f827):    iload_1 
<340>  (0x94f828):    bipush 6
<342>  (0x94f82a):    invokevirtual #8 <com.sun.mep.bench.Chess.BPossMoves.Store_Move(II)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(2)	ID(318)
 	local(0)	ID(321)
 	local(1)	ID(346)
 
Incoming Locals(3): 
	local(2)	ID(318)
 	local(0)	ID(321)
 	local(1)	ID(346)
 
Successor Blocks(1): 
	ID(10) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 317) MAP_PC (NONE)   305>

   <(ID: 320) BCOND (int) 
   target: (BlockID: 10 BlockPC: 345)
   condition: NE
   flags: 0
      <(ID: 318) LOCAL (int)   2>
      <(ID: 319) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 324) IDENTITY (reference)  (ref count: 2)
      <(ID: 328) FETCH (reference) 
         <(ID: 323) FIELD_REF (reference) 
            <(ID: 321) IDENTITY (reference)  (ref count: 3)
               <(ID: 356) LOCAL (reference)   0>
            <(ID: 322) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 327) IDENTITY (reference)  (ref count: 4)
      <(ID: 336) FETCH (reference) 
         <(ID: 326) FIELD_REF (reference) 
            <(ID: 324) IDENTITY (reference)  (ref count: 2)
            <(ID: 325) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 333) IDENTITY (int)  (ref count: 2)
      <(ID: 337) FETCH (int) 
         <(ID: 332) INDEX (int) 
            <(ID: 327) IDENTITY (reference)  (ref count: 4)
            <(ID: 331) BOUNDS_CHECK (int) 
               <(ID: 329) CONST_JAVA_NUMERIC32 (int)  (6)
               <(ID: 330) IDENTITY (int)  (ref count: 2)
                  <(ID: 344) ARRAY_LENGTH (int) 
                     <(ID: 327) IDENTITY (reference)  (ref count: 4)

   <(ID: 335) BCOND (int) 
   target: (BlockID: 10 BlockPC: 345)
   condition: NE
   flags: 0
      <(ID: 333) IDENTITY (int)  (ref count: 2)
      <(ID: 334) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 341) IDENTITY (int)  (ref count: 2)
      <(ID: 345) FETCH (int) 
         <(ID: 340) INDEX (int) 
            <(ID: 327) IDENTITY (reference)  (ref count: 4)
            <(ID: 339) BOUNDS_CHECK (int) 
               <(ID: 338) CONST_JAVA_NUMERIC32 (int)  (5)
               <(ID: 330) IDENTITY (int)  (ref count: 2)

   <(ID: 343) BCOND (int) 
   target: (BlockID: 10 BlockPC: 345)
   condition: NE
   flags: 0
      <(ID: 341) IDENTITY (int)  (ref count: 2)
      <(ID: 342) CONST_JAVA_NUMERIC32 (int)  (99)


   <(ID: 355) INVOKE (v) 
      <(ID: 352) PARAMETER (reference) 
         <(ID: 321) IDENTITY (reference)  (ref count: 3)
         <(ID: 351) PARAMETER (int) 
            <(ID: 346) LOCAL (int)   1>
            <(ID: 350) PARAMETER (int) 
               <(ID: 347) CONST_JAVA_NUMERIC32 (int)  (6)
               <(ID: 349) NULL_PARAMETER (NONE) 
      <(ID: 354) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 353) GET_VTBL (NONE) 
            <(ID: 321) IDENTITY (reference)  (ref count: 3)
         <(ID: 348) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)


*************************************************
*
* (block ID:10 block PC:345 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.BPossMoves.BKing_Moves(I)V(BPossMoves.java:161)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<345>  (0x94f82d):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

   <(ID: 372) MAP_PC (NONE)   345>

   <(ID: 373) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 368
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 2084
ESTIMATED BUFFER SIZE = 2596
CODE BUFFER ADDRESS = 0x2bcbead4
PC MAP TABLE ADDRESS = 0x2bcbeadc
CODE ENTRY ADDRESS = 0x2bcbeb28
          		@ Method prologue
0x2bcbeb28	0:	addiu	a1, JSP, 68	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbeb2c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbeb30	8:	sltu	t7, a1, CHUNKEND
0x2bcbeb34	12:	bne	t7, zero, PC=0x2bcbeb28	@ goto .skip
0x2bcbeb38	16:	nop
0x2bcbeb3c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbeb40	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbeb34) >>>>>>>>
0x2bcbeb34	12:	bne	t7, zero, PC=0x2bcbeb44	@ goto .skip
0x2bcbeb38	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbeb44) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbeb44	28:	sw	JFP, 16(JSP)	@ Store curr JFP into new frame
0x2bcbeb48	32:	addiu	JFP, JSP, 16	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbeb4c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbeb50	40:	addiu	a3, zero, 0
0x2bcbeb54	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbeb58	48:	addiu	a3, zero, -1
0x2bcbeb5c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbeb60	56:	move	a0, EE
0x2bcbeb64	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbeb68	64:	lui	t9, hi16(0x65)
0x2bcbeb6c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbeb70	72:	jalr	t9
0x2bcbeb74	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbeb78	80:	addiu	JSP, JFP, 32	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbeb7c	84:	nop
0x2bcbeb80	88:	nop
0x2bcbeb84	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbeb88	96:	lw	s4, -24(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbeb8c	100:	lw	s5, -20(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
          		@ Do getfield:
0x2bcbeb90	104:	lw	s7, 16(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbeb94	108:	lw	s6, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbeb98	112:	lw	s7, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcbeb9c	116:	addiu	t7, zero, 4
0x2bcbeba0	120:	sltu	t7, t7, s7
0x2bcbeba4	124:	bne	t7, zero, PC=0x2bcbeb9c	@ br .skip
0x2bcbeba8	128:	nop
0x2bcbebac	132:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbebb0	136:	nop
		.skip
--->Fixed instruction at 124(0x2bcbeba4) to reference 140
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbebb4	140:	lb	s7, 16(s6)
0x2bcbebb8	144:	addiu	s6, zero, 1	@ const 1
0x2bcbebbc	148:	sw	s6, -16(JFP)	@ Java local cell # 2
0x2bcbebc0	152:	sw	s6, -12(JFP)	@ Java local cell # 3
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbebc4	156:	addiu	t7, zero, 11
0x2bcbebc8	160:	bne	s7, t7, PC=0x2bcbebc4	@ branch to block L1
0x2bcbebcc	164:	nop
          		@ Do getfield:
0x2bcbebd0	168:	lw	s7, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbebd4	172:	lw	ra, 164(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbebd8	176:	lw	t9, 8(ra)	@ arraylength
          		@ deferred comparison: 
0x2bcbebdc	180:	addiu	t7, zero, 4
0x2bcbebe0	184:	sltu	t7, t7, t9
0x2bcbebe4	188:	bne	t7, zero, PC=0x2bcbebdc	@ br .skip
0x2bcbebe8	192:	nop
0x2bcbebec	196:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbebf0	200:	nop
		.skip
--->Fixed instruction at 188(0x2bcbebe4) to reference 204
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbebf4	204:	lb	t9, 16(ra)
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbebf8	208:	addiu	t7, zero, 11
0x2bcbebfc	212:	bne	t9, t7, PC=0x2bcbebf8	@ branch to block L1
0x2bcbec00	216:	nop
          		@ Do getfield:
0x2bcbec04	220:	lw	ra, 92(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbec08	224:	sw	ra, 0(JSP)
0x2bcbec0c	228:	addiu	s7, zero, 4	@ const 4
0x2bcbec10	232:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbec14	236:	lw	t9, 0(ra)	@ Get object.cb
0x2bcbec18	240:	addiu	t7, zero, -4
0x2bcbec1c	244:	and	t9, t9, t7
0x2bcbec20	248:	lw	t9, 76(t9)	@ Get cb.vtbl
0x2bcbec24	252:	lw	a0, 56(t9)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbec28	256:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbec2c	260:	lw	s7, 0(a0)	@ call method through mb
0x2bcbec30	264:	jalr	s7
0x2bcbec34	268:	nop
          		@ Captured a stackmap here.
0x2bcbec38	272:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbec3c	276:	lw	s7, 0(JSP)
0x2bcbec40	280:	lw	a2, 0(CP)	@ cb com.sun.mep.bench.Chess.King
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcbec44	284:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcbec48	288:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcbec4c	292:	nop
0x2bcbec50	296:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcbec54	300:	lw	s5, -24(JFP)	@ Java local cell # 0
0x2bcbec58	304:	lw	s6, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbec5c	308:	lw	s4, 12(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbec60	312:	lw	s6, 8(s4)	@ arraylength
          		@ deferred comparison: 
0x2bcbec64	316:	sltu	t7, zero, s6
0x2bcbec68	320:	bne	t7, zero, PC=0x2bcbec64	@ br .skip
0x2bcbec6c	324:	nop
0x2bcbec70	328:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbec74	332:	nop
		.skip
--->Fixed instruction at 320(0x2bcbec68) to reference 336
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbec78	336:	lb	s6, 12(s4)
0x2bcbec7c	340:	sw	s7, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(0) reg(20): in wrong register
0x2bcbec80	344:	move	s4, s5
			@ Outgoing local(1) reg(21): not in register
0x2bcbec84	348:	lw	s5, -20(JFP)	@ Java local cell # 1
          		@ deferred comparison: 
0x2bcbec88	352:	addiu	t7, zero, 9
0x2bcbec8c	356:	bne	s6, t7, PC=0x2bcbec88	@ branch to block L2
0x2bcbec90	360:	nop
          		@ Do getfield:
0x2bcbec94	364:	lw	s6, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbec98	368:	lw	ra, 164(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbec9c	372:	lw	t9, 8(ra)	@ arraylength
          		@ deferred comparison: 
0x2bcbeca0	376:	sltu	t7, zero, t9
0x2bcbeca4	380:	bne	t7, zero, PC=0x2bcbeca0	@ br .skip
0x2bcbeca8	384:	nop
0x2bcbecac	388:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbecb0	392:	nop
		.skip
--->Fixed instruction at 380(0x2bcbeca4) to reference 396
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbecb4	396:	lb	t9, 12(ra)
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbecb8	400:	addiu	t7, zero, 9
0x2bcbecbc	404:	bne	t9, t7, PC=0x2bcbecb8	@ branch to block L2
0x2bcbecc0	408:	nop
          		@ Do getfield:
0x2bcbecc4	412:	lw	ra, 92(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbecc8	416:	sw	ra, 0(JSP)
0x2bcbeccc	420:	sw	zero, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbecd0	424:	lw	s6, 0(ra)	@ Get object.cb
0x2bcbecd4	428:	addiu	t7, zero, -4
0x2bcbecd8	432:	and	s6, s6, t7
0x2bcbecdc	436:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcbece0	440:	lw	a0, 56(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbece4	444:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbece8	448:	lw	s7, 0(a0)	@ call method through mb
0x2bcbecec	452:	jalr	s7
0x2bcbecf0	456:	nop
          		@ Captured a stackmap here.
0x2bcbecf4	460:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbecf8	464:	lw	s7, 0(JSP)
0x2bcbecfc	468:	lw	a2, 0(CP)	@ cb com.sun.mep.bench.Chess.Rook
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcbed00	472:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcbed04	476:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcbed08	480:	nop
0x2bcbed0c	484:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcbed10	488:	lw	s5, -8(JFP)	@ Java local cell # 4
0x2bcbed14	492:	lw	s6, 112(s5)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbed18	496:	sw	s7, -4(JFP)	@ Java local cell # 5
          		@ deferred comparison: 
0x2bcbed1c	500:	bne	s6, zero, PC=0x2bcbed1c	@ branch to block L3
0x2bcbed20	504:	nop
          		@ Do getfield:
0x2bcbed24	508:	lw	s6, 112(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ deferred comparison: 
0x2bcbed28	512:	beq	s6, zero, PC=0x2bcbed28	@ branch to block L4
0x2bcbed2c	516:	nop
			@ Initial Temp REF set is 
	L3:	520:	@ entry point for branches
--->Fixed instruction at 500(0x2bcbed1c) to reference 520
          		@ MAP_PC idepth=0 javaPc=108 compiledPc=520
			@ Processing DEFINE(0) reg(20): not in register
			@ Loading DEFINE(0) register(20): not in register
0x2bcbed30	520:	addiu	s4, zero, 1	@ const 1
0x2bcbed34	524:	b	PC=0x2bcbed34	@ branch to block L5
0x2bcbed38	528:	nop
			@ Initial Temp REF set is 
	L4:	532:	@ entry point for branches
--->Fixed instruction at 512(0x2bcbed28) to reference 532
          		@ MAP_PC idepth=0 javaPc=112 compiledPc=532
			@ Processing DEFINE(0) reg(20): in wrong register
			@ Loading DEFINE(0) register(20): in wrong register
0x2bcbed3c	532:	move	s4, zero
			@ Initial Temp REF set is 
	L5:	536:	@ entry point for branches
--->Fixed instruction at 524(0x2bcbed34) to reference 536
          		@ MAP_PC idepth=0 javaPc=113 compiledPc=536
0x2bcbed40	536:	sw	s4, -12(JFP)	@ Java local cell # 3
			@ Outgoing local(0) reg(20): not in register
0x2bcbed44	540:	lw	s4, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(21): not in register
0x2bcbed48	544:	lw	s5, -20(JFP)	@ Java local cell # 1
			@ Initial Temp REF set is 
	L2:	548:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
--->Fixed instruction at 404(0x2bcbecbc) to reference 548
--->Fixed instruction at 356(0x2bcbec8c) to reference 548
          		@ MAP_PC idepth=0 javaPc=114 compiledPc=548
          		@ Do getfield:
0x2bcbed4c	548:	lw	s7, 16(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbed50	552:	lw	s6, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbed54	556:	lw	s7, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcbed58	560:	addiu	t7, zero, 7
0x2bcbed5c	564:	sltu	t7, t7, s7
0x2bcbed60	568:	bne	t7, zero, PC=0x2bcbed58	@ br .skip
0x2bcbed64	572:	nop
0x2bcbed68	576:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbed6c	580:	nop
		.skip
--->Fixed instruction at 568(0x2bcbed60) to reference 584
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbed70	584:	lb	s7, 19(s6)
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbed74	588:	addiu	t7, zero, 9
0x2bcbed78	592:	bne	s7, t7, PC=0x2bcbed74	@ branch to block L1
0x2bcbed7c	596:	nop
          		@ Do getfield:
0x2bcbed80	600:	lw	s7, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbed84	604:	lw	s6, 164(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbed88	608:	lw	ra, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcbed8c	612:	addiu	t7, zero, 7
0x2bcbed90	616:	sltu	t7, t7, ra
0x2bcbed94	620:	bne	t7, zero, PC=0x2bcbed8c	@ br .skip
0x2bcbed98	624:	nop
0x2bcbed9c	628:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbeda0	632:	nop
		.skip
--->Fixed instruction at 620(0x2bcbed94) to reference 636
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbeda4	636:	lb	ra, 19(s6)
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbeda8	640:	addiu	t7, zero, 9
0x2bcbedac	644:	bne	ra, t7, PC=0x2bcbeda8	@ branch to block L1
0x2bcbedb0	648:	nop
          		@ Do getfield:
0x2bcbedb4	652:	lw	s6, 92(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbedb8	656:	sw	s6, 0(JSP)
0x2bcbedbc	660:	addiu	s7, zero, 7	@ const 7
0x2bcbedc0	664:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbedc4	668:	lw	ra, 0(s6)	@ Get object.cb
0x2bcbedc8	672:	addiu	t7, zero, -4
0x2bcbedcc	676:	and	ra, ra, t7
0x2bcbedd0	680:	lw	ra, 76(ra)	@ Get cb.vtbl
0x2bcbedd4	684:	lw	a0, 56(ra)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcbedd8	688:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbeddc	692:	lw	s7, 0(a0)	@ call method through mb
0x2bcbede0	696:	jalr	s7
0x2bcbede4	700:	nop
          		@ Captured a stackmap here.
0x2bcbede8	704:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbedec	708:	lw	s7, 0(JSP)
0x2bcbedf0	712:	lw	a2, 0(CP)	@ cb com.sun.mep.bench.Chess.Rook
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcbedf4	716:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcbedf8	720:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcbedfc	724:	nop
0x2bcbee00	728:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
0x2bcbee04	732:	lw	ra, -8(JFP)	@ Java local cell # 4
          		@ Do getfield:
0x2bcbee08	736:	lw	s6, 112(ra)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbee0c	740:	sw	s7, -4(JFP)	@ Java local cell # 5
          		@ deferred comparison: 
0x2bcbee10	744:	bne	s6, zero, PC=0x2bcbee10	@ branch to block L6
0x2bcbee14	748:	nop
          		@ Do getfield:
0x2bcbee18	752:	lw	s6, 112(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ deferred comparison: 
0x2bcbee1c	756:	beq	s6, zero, PC=0x2bcbee1c	@ branch to block L7
0x2bcbee20	760:	nop
			@ Initial Temp REF set is 
	L6:	764:	@ entry point for branches
--->Fixed instruction at 744(0x2bcbee10) to reference 764
          		@ MAP_PC idepth=0 javaPc=177 compiledPc=764
			@ Processing DEFINE(0) reg(20): not in register
			@ Loading DEFINE(0) register(20): not in register
0x2bcbee24	764:	addiu	s4, zero, 1	@ const 1
0x2bcbee28	768:	b	PC=0x2bcbee28	@ branch to block L8
0x2bcbee2c	772:	nop
			@ Initial Temp REF set is 
	L7:	776:	@ entry point for branches
--->Fixed instruction at 756(0x2bcbee1c) to reference 776
          		@ MAP_PC idepth=0 javaPc=181 compiledPc=776
			@ Processing DEFINE(0) reg(20): in wrong register
			@ Loading DEFINE(0) register(20): in wrong register
0x2bcbee30	776:	move	s4, zero
			@ Initial Temp REF set is 
	L8:	780:	@ entry point for branches
--->Fixed instruction at 768(0x2bcbee28) to reference 780
          		@ MAP_PC idepth=0 javaPc=182 compiledPc=780
0x2bcbee34	780:	sw	s4, -16(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(20): not in register
0x2bcbee38	784:	lw	s4, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(21): not in register
0x2bcbee3c	788:	lw	s5, -20(JFP)	@ Java local cell # 1
			@ Initial Temp REF set is 
	L1:	792:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
--->Fixed instruction at 644(0x2bcbedac) to reference 792
--->Fixed instruction at 592(0x2bcbed78) to reference 792
--->Fixed instruction at 212(0x2bcbebfc) to reference 792
--->Fixed instruction at 160(0x2bcbebc8) to reference 792
          		@ MAP_PC idepth=0 javaPc=183 compiledPc=792
0x2bcbee40	792:	sw	s4, 0(JSP)
0x2bcbee44	796:	sw	s5, 4(JSP)
0x2bcbee48	800:	sw	zero, 8(JSP)
0x2bcbee4c	804:	addiu	s7, zero, -8	@ const -8
0x2bcbee50	808:	sw	s7, 12(JSP)
0x2bcbee54	812:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbee58	816:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbee5c	820:	lw	s7, 0(a0)	@ call method through mb
0x2bcbee60	824:	jalr	s7
0x2bcbee64	828:	nop
          		@ Captured a stackmap here.
0x2bcbee68	832:	addiu	JSP, JSP, -4
0x2bcbee6c	836:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcbee70	840:	sw	s7, 0(JSP)
0x2bcbee74	844:	lw	s6, -20(JFP)	@ Java local cell # 1
0x2bcbee78	848:	sw	s6, 4(JSP)
0x2bcbee7c	852:	sw	zero, 8(JSP)
0x2bcbee80	856:	addiu	s5, zero, 8	@ const 8
0x2bcbee84	860:	sw	s5, 12(JSP)
0x2bcbee88	864:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbee8c	868:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbee90	872:	lw	s7, 0(a0)	@ call method through mb
0x2bcbee94	876:	jalr	s7
0x2bcbee98	880:	nop
          		@ Captured a stackmap here.
0x2bcbee9c	884:	addiu	JSP, JSP, -4
0x2bcbeea0	888:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcbeea4	892:	sw	s7, 0(JSP)
0x2bcbeea8	896:	lw	s6, -20(JFP)	@ Java local cell # 1
0x2bcbeeac	900:	sw	s6, 4(JSP)
0x2bcbeeb0	904:	addiu	s5, zero, -1	@ const -1
0x2bcbeeb4	908:	sw	s5, 8(JSP)
0x2bcbeeb8	912:	sw	zero, 12(JSP)
0x2bcbeebc	916:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbeec0	920:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbeec4	924:	lw	s7, 0(a0)	@ call method through mb
0x2bcbeec8	928:	jalr	s7
0x2bcbeecc	932:	nop
          		@ Captured a stackmap here.
0x2bcbeed0	936:	addiu	JSP, JSP, -4
0x2bcbeed4	940:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcbeed8	944:	sw	s7, 0(JSP)
0x2bcbeedc	948:	lw	s6, -20(JFP)	@ Java local cell # 1
0x2bcbeee0	952:	sw	s6, 4(JSP)
0x2bcbeee4	956:	addiu	s5, zero, 1	@ const 1
0x2bcbeee8	960:	sw	s5, 8(JSP)
0x2bcbeeec	964:	sw	zero, 12(JSP)
0x2bcbeef0	968:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbeef4	972:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbeef8	976:	lw	s7, 0(a0)	@ call method through mb
0x2bcbeefc	980:	jalr	s7
0x2bcbef00	984:	nop
          		@ Captured a stackmap here.
0x2bcbef04	988:	addiu	JSP, JSP, -4
0x2bcbef08	992:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcbef0c	996:	sw	s7, 0(JSP)
0x2bcbef10	1000:	lw	s6, -20(JFP)	@ Java local cell # 1
0x2bcbef14	1004:	sw	s6, 4(JSP)
0x2bcbef18	1008:	addiu	s5, zero, 1	@ const 1
0x2bcbef1c	1012:	sw	s5, 8(JSP)
0x2bcbef20	1016:	addiu	s4, zero, -8	@ const -8
0x2bcbef24	1020:	sw	s4, 12(JSP)
0x2bcbef28	1024:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbef2c	1028:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbef30	1032:	lw	s7, 0(a0)	@ call method through mb
0x2bcbef34	1036:	jalr	s7
0x2bcbef38	1040:	nop
          		@ Captured a stackmap here.
0x2bcbef3c	1044:	addiu	JSP, JSP, -4
0x2bcbef40	1048:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcbef44	1052:	sw	s7, 0(JSP)
0x2bcbef48	1056:	lw	s6, -20(JFP)	@ Java local cell # 1
0x2bcbef4c	1060:	sw	s6, 4(JSP)
0x2bcbef50	1064:	addiu	s5, zero, 1	@ const 1
0x2bcbef54	1068:	sw	s5, 8(JSP)
0x2bcbef58	1072:	addiu	s4, zero, 8	@ const 8
0x2bcbef5c	1076:	sw	s4, 12(JSP)
0x2bcbef60	1080:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbef64	1084:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbef68	1088:	lw	s7, 0(a0)	@ call method through mb
0x2bcbef6c	1092:	jalr	s7
0x2bcbef70	1096:	nop
          		@ Captured a stackmap here.
0x2bcbef74	1100:	addiu	JSP, JSP, -4
0x2bcbef78	1104:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcbef7c	1108:	sw	s7, 0(JSP)
0x2bcbef80	1112:	lw	s6, -20(JFP)	@ Java local cell # 1
0x2bcbef84	1116:	sw	s6, 4(JSP)
0x2bcbef88	1120:	addiu	s5, zero, -1	@ const -1
0x2bcbef8c	1124:	sw	s5, 8(JSP)
0x2bcbef90	1128:	addiu	s4, zero, 8	@ const 8
0x2bcbef94	1132:	sw	s4, 12(JSP)
0x2bcbef98	1136:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbef9c	1140:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbefa0	1144:	lw	s7, 0(a0)	@ call method through mb
0x2bcbefa4	1148:	jalr	s7
0x2bcbefa8	1152:	nop
          		@ Captured a stackmap here.
0x2bcbefac	1156:	addiu	JSP, JSP, -4
0x2bcbefb0	1160:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcbefb4	1164:	sw	s7, 0(JSP)
0x2bcbefb8	1168:	lw	s6, -20(JFP)	@ Java local cell # 1
0x2bcbefbc	1172:	sw	s6, 4(JSP)
0x2bcbefc0	1176:	addiu	s5, zero, -1	@ const -1
0x2bcbefc4	1180:	sw	s5, 8(JSP)
0x2bcbefc8	1184:	addiu	s4, zero, -8	@ const -8
0x2bcbefcc	1188:	sw	s4, 12(JSP)
0x2bcbefd0	1192:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
          		@ Invoke a method w/ a 32bit return type
0x2bcbefd4	1196:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbefd8	1200:	lw	s7, 0(a0)	@ call method through mb
0x2bcbefdc	1204:	jalr	s7
0x2bcbefe0	1208:	nop
          		@ Captured a stackmap here.
0x2bcbefe4	1212:	addiu	JSP, JSP, -4
0x2bcbefe8	1216:	lw	ra, -12(JFP)	@ Java local cell # 3
			@ Outgoing local(2) reg(20): not in register
0x2bcbefec	1220:	lw	s4, -16(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(21): not in register
0x2bcbeff0	1224:	lw	s5, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(22): not in register
0x2bcbeff4	1228:	lw	s6, -20(JFP)	@ Java local cell # 1
          		@ deferred comparison: 
0x2bcbeff8	1232:	bne	ra, zero, PC=0x2bcbeff8	@ branch to block L9
0x2bcbeffc	1236:	nop
          		@ Do getfield:
0x2bcbf000	1240:	lw	s7, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbf004	1244:	lw	t9, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbf008	1248:	lw	s7, 8(t9)	@ arraylength
          		@ deferred comparison: 
0x2bcbf00c	1252:	addiu	t7, zero, 1
0x2bcbf010	1256:	sltu	t7, t7, s7
0x2bcbf014	1260:	bne	t7, zero, PC=0x2bcbf00c	@ br .skip
0x2bcbf018	1264:	nop
0x2bcbf01c	1268:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbf020	1272:	nop
		.skip
--->Fixed instruction at 1260(0x2bcbf014) to reference 1276
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbf024	1276:	lb	t8, 13(t9)
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(1) reg(22): in correct register
          		@ deferred comparison: 
0x2bcbf028	1280:	addiu	t7, zero, 99
0x2bcbf02c	1284:	bne	t8, t7, PC=0x2bcbf028	@ branch to block L9
0x2bcbf030	1288:	nop
          		@ deferred comparison: 
0x2bcbf034	1292:	addiu	t7, zero, 2
0x2bcbf038	1296:	sltu	t7, t7, s7
0x2bcbf03c	1300:	bne	t7, zero, PC=0x2bcbf034	@ br .skip
0x2bcbf040	1304:	nop
0x2bcbf044	1308:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbf048	1312:	nop
		.skip
--->Fixed instruction at 1300(0x2bcbf03c) to reference 1316
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbf04c	1316:	lb	t8, 14(t9)
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(1) reg(22): in correct register
          		@ deferred comparison: 
0x2bcbf050	1320:	addiu	t7, zero, 99
0x2bcbf054	1324:	bne	t8, t7, PC=0x2bcbf050	@ branch to block L9
0x2bcbf058	1328:	nop
          		@ deferred comparison: 
0x2bcbf05c	1332:	addiu	t7, zero, 3
0x2bcbf060	1336:	sltu	t7, t7, s7
0x2bcbf064	1340:	bne	t7, zero, PC=0x2bcbf05c	@ br .skip
0x2bcbf068	1344:	nop
0x2bcbf06c	1348:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbf070	1352:	nop
		.skip
--->Fixed instruction at 1340(0x2bcbf064) to reference 1356
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbf074	1356:	lb	s7, 15(t9)
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(1) reg(22): in correct register
          		@ deferred comparison: 
0x2bcbf078	1360:	addiu	t7, zero, 99
0x2bcbf07c	1364:	bne	s7, t7, PC=0x2bcbf078	@ branch to block L9
0x2bcbf080	1368:	nop
0x2bcbf084	1372:	sw	s5, 0(JSP)
0x2bcbf088	1376:	sw	s6, 4(JSP)
0x2bcbf08c	1380:	addiu	s7, zero, 2	@ const 2
0x2bcbf090	1384:	sw	s7, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcbf094	1388:	lw	t9, 0(s5)	@ Get object.cb
0x2bcbf098	1392:	addiu	t7, zero, -4
0x2bcbf09c	1396:	and	t9, t9, t7
0x2bcbf0a0	1400:	lw	t9, 76(t9)	@ Get cb.vtbl
0x2bcbf0a4	1404:	lw	a0, 68(t9)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbf0a8	1408:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbf0ac	1412:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf0b0	1416:	jalr	s7
0x2bcbf0b4	1420:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(2) reg(20): not in register
0x2bcbf0b8	1424:	lw	s4, -16(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(21): not in register
0x2bcbf0bc	1428:	lw	s5, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(22): not in register
0x2bcbf0c0	1432:	lw	s6, -20(JFP)	@ Java local cell # 1
			@ Initial Temp REF set is 
	L9:	1436:	@ entry point for branches
			@ Binding Incoming Local(2) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(1) to reg(22)
--->Fixed instruction at 1364(0x2bcbf07c) to reference 1436
--->Fixed instruction at 1324(0x2bcbf054) to reference 1436
--->Fixed instruction at 1284(0x2bcbf02c) to reference 1436
--->Fixed instruction at 1232(0x2bcbeff8) to reference 1436
          		@ MAP_PC idepth=0 javaPc=305 compiledPc=1436
          		@ deferred comparison: 
0x2bcbf0c4	1436:	bne	s4, zero, PC=0x2bcbf0c4	@ branch to block L10
0x2bcbf0c8	1440:	nop
          		@ Do getfield:
0x2bcbf0cc	1444:	lw	s7, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbf0d0	1448:	lw	ra, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbf0d4	1452:	lw	s7, 8(ra)	@ arraylength
          		@ deferred comparison: 
0x2bcbf0d8	1456:	addiu	t7, zero, 6
0x2bcbf0dc	1460:	sltu	t7, t7, s7
0x2bcbf0e0	1464:	bne	t7, zero, PC=0x2bcbf0d8	@ br .skip
0x2bcbf0e4	1468:	nop
0x2bcbf0e8	1472:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbf0ec	1476:	nop
		.skip
--->Fixed instruction at 1464(0x2bcbf0e0) to reference 1480
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbf0f0	1480:	lb	t9, 18(ra)
          		@ deferred comparison: 
0x2bcbf0f4	1484:	addiu	t7, zero, 99
0x2bcbf0f8	1488:	bne	t9, t7, PC=0x2bcbf0f4	@ branch to block L10
0x2bcbf0fc	1492:	nop
          		@ deferred comparison: 
0x2bcbf100	1496:	addiu	t7, zero, 5
0x2bcbf104	1500:	sltu	t7, t7, s7
0x2bcbf108	1504:	bne	t7, zero, PC=0x2bcbf100	@ br .skip
0x2bcbf10c	1508:	nop
0x2bcbf110	1512:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbf114	1516:	nop
		.skip
--->Fixed instruction at 1504(0x2bcbf108) to reference 1520
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcbf118	1520:	lb	s7, 17(ra)
          		@ deferred comparison: 
0x2bcbf11c	1524:	addiu	t7, zero, 99
0x2bcbf120	1528:	bne	s7, t7, PC=0x2bcbf11c	@ branch to block L10
0x2bcbf124	1532:	nop
0x2bcbf128	1536:	sw	s5, 0(JSP)
0x2bcbf12c	1540:	sw	s6, 4(JSP)
0x2bcbf130	1544:	addiu	s7, zero, 6	@ const 6
0x2bcbf134	1548:	sw	s7, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcbf138	1552:	lw	ra, 0(s5)	@ Get object.cb
0x2bcbf13c	1556:	addiu	t7, zero, -4
0x2bcbf140	1560:	and	ra, ra, t7
0x2bcbf144	1564:	lw	ra, 76(ra)	@ Get cb.vtbl
0x2bcbf148	1568:	lw	a0, 68(ra)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbf14c	1572:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbf150	1576:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf154	1580:	jalr	s7
0x2bcbf158	1584:	nop
          		@ Captured a stackmap here.
			@ Initial Temp REF set is 
	L10:	1588:	@ entry point for branches
--->Fixed instruction at 1528(0x2bcbf120) to reference 1588
--->Fixed instruction at 1488(0x2bcbf0f8) to reference 1588
--->Fixed instruction at 1436(0x2bcbf0c4) to reference 1588
          		@ MAP_PC idepth=0 javaPc=345 compiledPc=1588
0x2bcbf15c	1588:	addiu	JSP, JFP, -24
0x2bcbf160	1592:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbf164	1596:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbf168	1600:	nop
0x2bcbf16c	1604:	.word	9757796	@ mb com.sun.mep.bench.Chess.BPossMoves.checkMove(III)I
--->Fixed instruction at 1192(0x2bcbefd0) to reference 1604
--->Fixed instruction at 1136(0x2bcbef98) to reference 1604
--->Fixed instruction at 1080(0x2bcbef60) to reference 1604
--->Fixed instruction at 1024(0x2bcbef28) to reference 1604
--->Fixed instruction at 968(0x2bcbeef0) to reference 1604
--->Fixed instruction at 916(0x2bcbeebc) to reference 1604
--->Fixed instruction at 864(0x2bcbee88) to reference 1604
--->Fixed instruction at 812(0x2bcbee54) to reference 1604
0x2bcbf170	1608:	.word	9790344	@ cb com.sun.mep.bench.Chess.Rook
--->Fixed instruction at 712(0x2bcbedf0) to reference 1608
--->Fixed instruction at 468(0x2bcbecfc) to reference 1608
0x2bcbf174	1612:	.word	9795336	@ cb com.sun.mep.bench.Chess.King
--->Fixed instruction at 280(0x2bcbec40) to reference 1612
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbeb28) >>>>>>>>
          		@ Capacity is 19 word(s)
0x2bcbeb28	0:	addiu	a1, JSP, 68
<<<<<<<<<Pop Code Buffer to PC = 1616 (0x2bcbf178) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbeb78) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcbeb78	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcbeb7c	84:	lui	CP, hi16(0x2bcb)
0x2bcbeb80	88:	ori	CP, CP, lo16(0x2bcbf16c)
0x2bcbeb84	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 1616 (0x2bcbf178) <<<<<<<<<
JS: COMPILED: size=1804 startPC=0x2bcbeb28 com.sun.mep.bench.Chess.BPossMoves.BKing_Moves(I)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.BPossMoves.BRook_Moves(I)V
JS: COMPILING com.sun.mep.bench.Chess.BPossMoves.BRook_Moves(I)V
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 

#################################################

The maximum node counts per root node are 6
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 6 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.BPossMoves.BRook_Moves(I)V(BPossMoves.java:205)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x94f9e4):    aload_0 
<1>  (0x94f9e5):    iload_1 
<2>  (0x94f9e6):    iconst_0 
<3>  (0x94f9e7):    bipush 248
<5>  (0x94f9e9):    invokenonvirtual_quick #19 <com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V>
<8>  (0x94f9ec):    aload_0 
<9>  (0x94f9ed):    iload_1 
<10>  (0x94f9ee):    iconst_0 
<11>  (0x94f9ef):    bipush 8
<13>  (0x94f9f1):    invokenonvirtual_quick #19 <com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V>
<16>  (0x94f9f4):    aload_0 
<17>  (0x94f9f5):    iload_1 
<18>  (0x94f9f6):    iconst_m1 
<19>  (0x94f9f7):    iconst_0 
<20>  (0x94f9f8):    invokenonvirtual_quick #19 <com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V>
<23>  (0x94f9fb):    aload_0 
<24>  (0x94f9fc):    iload_1 
<25>  (0x94f9fd):    iconst_1 
<26>  (0x94f9fe):    iconst_0 
<27>  (0x94f9ff):    invokenonvirtual_quick #19 <com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V>
<30>  (0x94fa02):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 12) INVOKE (v) 
      <(ID: 11) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
            <(ID: 22) LOCAL (reference)   0>
         <(ID: 10) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 4)
               <(ID: 23) LOCAL (int)   1>
            <(ID: 9) PARAMETER (int) 
               <(ID: 4) CONST_JAVA_NUMERIC32 (int)  (0)
               <(ID: 8) PARAMETER (int) 
                  <(ID: 5) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 7) NULL_PARAMETER (NONE) 
      <(ID: 6) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V)

   <(ID: 21) INVOKE (v) 
      <(ID: 20) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 19) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 4)
            <(ID: 18) PARAMETER (int) 
               <(ID: 13) CONST_JAVA_NUMERIC32 (int)  (0)
               <(ID: 17) PARAMETER (int) 
                  <(ID: 14) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 16) NULL_PARAMETER (NONE) 
      <(ID: 15) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V)

   <(ID: 32) INVOKE (v) 
      <(ID: 31) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 30) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 4)
            <(ID: 29) PARAMETER (int) 
               <(ID: 24) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 28) PARAMETER (int) 
                  <(ID: 25) CONST_JAVA_NUMERIC32 (int)  (0)
                  <(ID: 27) NULL_PARAMETER (NONE) 
      <(ID: 26) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V)

   <(ID: 41) INVOKE (v) 
      <(ID: 40) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 39) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 4)
            <(ID: 38) PARAMETER (int) 
               <(ID: 33) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 37) PARAMETER (int) 
                  <(ID: 34) CONST_JAVA_NUMERIC32 (int)  (0)
                  <(ID: 36) NULL_PARAMETER (NONE) 
      <(ID: 35) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V)

   <(ID: 42) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 194
ESTIMATED BUFFER SIZE = 300
CODE BUFFER ADDRESS = 0x2bcbf1e0
PC MAP TABLE ADDRESS = 0x2bcbf1e8
CODE ENTRY ADDRESS = 0x2bcbf210
          		@ Method prologue
0x2bcbf210	0:	addiu	a1, JSP, 48	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbf214	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbf218	8:	sltu	t7, a1, CHUNKEND
0x2bcbf21c	12:	bne	t7, zero, PC=0x2bcbf210	@ goto .skip
0x2bcbf220	16:	nop
0x2bcbf224	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbf228	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbf21c) >>>>>>>>
0x2bcbf21c	12:	bne	t7, zero, PC=0x2bcbf22c	@ goto .skip
0x2bcbf220	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbf22c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbf22c	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbf230	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbf234	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbf238	40:	addiu	a3, zero, 0
0x2bcbf23c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbf240	48:	addiu	a3, zero, -1
0x2bcbf244	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbf248	56:	move	a0, EE
0x2bcbf24c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbf250	64:	lui	t9, hi16(0x65)
0x2bcbf254	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbf258	72:	jalr	t9
0x2bcbf25c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbf260	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbf264	84:	nop
0x2bcbf268	88:	nop
0x2bcbf26c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbf270	96:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbf274	100:	lw	s5, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
0x2bcbf278	104:	sw	s4, 0(JSP)
0x2bcbf27c	108:	sw	s5, 4(JSP)
0x2bcbf280	112:	sw	zero, 8(JSP)
0x2bcbf284	116:	addiu	s7, zero, -8	@ const -8
0x2bcbf288	120:	sw	s7, 12(JSP)
0x2bcbf28c	124:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V
          		@ Invoke a method w/ a void return type
0x2bcbf290	128:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbf294	132:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf298	136:	jalr	s7
0x2bcbf29c	140:	nop
          		@ Captured a stackmap here.
0x2bcbf2a0	144:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbf2a4	148:	sw	s7, 0(JSP)
0x2bcbf2a8	152:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbf2ac	156:	sw	s6, 4(JSP)
0x2bcbf2b0	160:	sw	zero, 8(JSP)
0x2bcbf2b4	164:	addiu	s5, zero, 8	@ const 8
0x2bcbf2b8	168:	sw	s5, 12(JSP)
0x2bcbf2bc	172:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V
          		@ Invoke a method w/ a void return type
0x2bcbf2c0	176:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbf2c4	180:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf2c8	184:	jalr	s7
0x2bcbf2cc	188:	nop
          		@ Captured a stackmap here.
0x2bcbf2d0	192:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbf2d4	196:	sw	s7, 0(JSP)
0x2bcbf2d8	200:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbf2dc	204:	sw	s6, 4(JSP)
0x2bcbf2e0	208:	addiu	s5, zero, -1	@ const -1
0x2bcbf2e4	212:	sw	s5, 8(JSP)
0x2bcbf2e8	216:	sw	zero, 12(JSP)
0x2bcbf2ec	220:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V
          		@ Invoke a method w/ a void return type
0x2bcbf2f0	224:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbf2f4	228:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf2f8	232:	jalr	s7
0x2bcbf2fc	236:	nop
          		@ Captured a stackmap here.
0x2bcbf300	240:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbf304	244:	sw	s7, 0(JSP)
0x2bcbf308	248:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbf30c	252:	sw	s6, 4(JSP)
0x2bcbf310	256:	addiu	s5, zero, 1	@ const 1
0x2bcbf314	260:	sw	s5, 8(JSP)
0x2bcbf318	264:	sw	zero, 12(JSP)
0x2bcbf31c	268:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V
          		@ Invoke a method w/ a void return type
0x2bcbf320	272:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbf324	276:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf328	280:	jalr	s7
0x2bcbf32c	284:	nop
          		@ Captured a stackmap here.
0x2bcbf330	288:	addiu	JSP, JFP, -8
0x2bcbf334	292:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbf338	296:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbf33c	300:	nop
0x2bcbf340	304:	.word	9757824	@ mb com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V
--->Fixed instruction at 268(0x2bcbf31c) to reference 304
--->Fixed instruction at 220(0x2bcbf2ec) to reference 304
--->Fixed instruction at 172(0x2bcbf2bc) to reference 304
--->Fixed instruction at 124(0x2bcbf28c) to reference 304
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbf210) >>>>>>>>
          		@ Capacity is 14 word(s)
0x2bcbf210	0:	addiu	a1, JSP, 48
<<<<<<<<<Pop Code Buffer to PC = 308 (0x2bcbf344) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbf260) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbf260	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbf264	84:	lui	CP, hi16(0x2bcb)
0x2bcbf268	88:	ori	CP, CP, lo16(0x2bcbf340)
0x2bcbf26c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 308 (0x2bcbf344) <<<<<<<<<
JS: COMPILED: size=388 startPC=0x2bcbf210 com.sun.mep.bench.Chess.BPossMoves.BRook_Moves(I)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.BPossMoves.BBishop_Moves(I)V
JS: COMPILING com.sun.mep.bench.Chess.BPossMoves.BBishop_Moves(I)V
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 

#################################################

The maximum node counts per root node are 6
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 6 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.BPossMoves.BBishop_Moves(I)V(BPossMoves.java:220)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x94fa28):    aload_0 
<1>  (0x94fa29):    iload_1 
<2>  (0x94fa2a):    iconst_1 
<3>  (0x94fa2b):    bipush 248
<5>  (0x94fa2d):    invokenonvirtual_quick #19 <com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V>
<8>  (0x94fa30):    aload_0 
<9>  (0x94fa31):    iload_1 
<10>  (0x94fa32):    iconst_1 
<11>  (0x94fa33):    bipush 8
<13>  (0x94fa35):    invokenonvirtual_quick #19 <com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V>
<16>  (0x94fa38):    aload_0 
<17>  (0x94fa39):    iload_1 
<18>  (0x94fa3a):    iconst_m1 
<19>  (0x94fa3b):    bipush 8
<21>  (0x94fa3d):    invokenonvirtual_quick #19 <com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V>
<24>  (0x94fa40):    aload_0 
<25>  (0x94fa41):    iload_1 
<26>  (0x94fa42):    iconst_m1 
<27>  (0x94fa43):    bipush 248
<29>  (0x94fa45):    invokenonvirtual_quick #19 <com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V>
<32>  (0x94fa48):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 12) INVOKE (v) 
      <(ID: 11) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
            <(ID: 22) LOCAL (reference)   0>
         <(ID: 10) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 4)
               <(ID: 23) LOCAL (int)   1>
            <(ID: 9) PARAMETER (int) 
               <(ID: 4) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 8) PARAMETER (int) 
                  <(ID: 5) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 7) NULL_PARAMETER (NONE) 
      <(ID: 6) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V)

   <(ID: 21) INVOKE (v) 
      <(ID: 20) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 19) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 4)
            <(ID: 18) PARAMETER (int) 
               <(ID: 13) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 17) PARAMETER (int) 
                  <(ID: 14) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 16) NULL_PARAMETER (NONE) 
      <(ID: 15) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V)

   <(ID: 32) INVOKE (v) 
      <(ID: 31) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 30) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 4)
            <(ID: 29) PARAMETER (int) 
               <(ID: 24) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 28) PARAMETER (int) 
                  <(ID: 25) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 27) NULL_PARAMETER (NONE) 
      <(ID: 26) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V)

   <(ID: 41) INVOKE (v) 
      <(ID: 40) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 39) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 4)
            <(ID: 38) PARAMETER (int) 
               <(ID: 33) CONST_JAVA_NUMERIC32 (int)  (-1)
               <(ID: 37) PARAMETER (int) 
                  <(ID: 34) CONST_JAVA_NUMERIC32 (int)  (-8)
                  <(ID: 36) NULL_PARAMETER (NONE) 
      <(ID: 35) CONST_MB (address field)  (com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V)

   <(ID: 42) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 206
ESTIMATED BUFFER SIZE = 312
CODE BUFFER ADDRESS = 0x2bcbf364
PC MAP TABLE ADDRESS = 0x2bcbf36c
CODE ENTRY ADDRESS = 0x2bcbf390
          		@ Method prologue
0x2bcbf390	0:	addiu	a1, JSP, 48	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbf394	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbf398	8:	sltu	t7, a1, CHUNKEND
0x2bcbf39c	12:	bne	t7, zero, PC=0x2bcbf390	@ goto .skip
0x2bcbf3a0	16:	nop
0x2bcbf3a4	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbf3a8	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbf39c) >>>>>>>>
0x2bcbf39c	12:	bne	t7, zero, PC=0x2bcbf3ac	@ goto .skip
0x2bcbf3a0	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbf3ac) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbf3ac	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbf3b0	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbf3b4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbf3b8	40:	addiu	a3, zero, 0
0x2bcbf3bc	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbf3c0	48:	addiu	a3, zero, -1
0x2bcbf3c4	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbf3c8	56:	move	a0, EE
0x2bcbf3cc	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbf3d0	64:	lui	t9, hi16(0x65)
0x2bcbf3d4	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbf3d8	72:	jalr	t9
0x2bcbf3dc	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbf3e0	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbf3e4	84:	nop
0x2bcbf3e8	88:	nop
0x2bcbf3ec	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbf3f0	96:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbf3f4	100:	lw	s5, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
0x2bcbf3f8	104:	sw	s4, 0(JSP)
0x2bcbf3fc	108:	sw	s5, 4(JSP)
0x2bcbf400	112:	addiu	s7, zero, 1	@ const 1
0x2bcbf404	116:	sw	s7, 8(JSP)
0x2bcbf408	120:	addiu	s6, zero, -8	@ const -8
0x2bcbf40c	124:	sw	s6, 12(JSP)
0x2bcbf410	128:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V
          		@ Invoke a method w/ a void return type
0x2bcbf414	132:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbf418	136:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf41c	140:	jalr	s7
0x2bcbf420	144:	nop
          		@ Captured a stackmap here.
0x2bcbf424	148:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbf428	152:	sw	s7, 0(JSP)
0x2bcbf42c	156:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbf430	160:	sw	s6, 4(JSP)
0x2bcbf434	164:	addiu	s5, zero, 1	@ const 1
0x2bcbf438	168:	sw	s5, 8(JSP)
0x2bcbf43c	172:	addiu	s4, zero, 8	@ const 8
0x2bcbf440	176:	sw	s4, 12(JSP)
0x2bcbf444	180:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V
          		@ Invoke a method w/ a void return type
0x2bcbf448	184:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbf44c	188:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf450	192:	jalr	s7
0x2bcbf454	196:	nop
          		@ Captured a stackmap here.
0x2bcbf458	200:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbf45c	204:	sw	s7, 0(JSP)
0x2bcbf460	208:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbf464	212:	sw	s6, 4(JSP)
0x2bcbf468	216:	addiu	s5, zero, -1	@ const -1
0x2bcbf46c	220:	sw	s5, 8(JSP)
0x2bcbf470	224:	addiu	s4, zero, 8	@ const 8
0x2bcbf474	228:	sw	s4, 12(JSP)
0x2bcbf478	232:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V
          		@ Invoke a method w/ a void return type
0x2bcbf47c	236:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbf480	240:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf484	244:	jalr	s7
0x2bcbf488	248:	nop
          		@ Captured a stackmap here.
0x2bcbf48c	252:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbf490	256:	sw	s7, 0(JSP)
0x2bcbf494	260:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbf498	264:	sw	s6, 4(JSP)
0x2bcbf49c	268:	addiu	s5, zero, -1	@ const -1
0x2bcbf4a0	272:	sw	s5, 8(JSP)
0x2bcbf4a4	276:	addiu	s4, zero, -8	@ const -8
0x2bcbf4a8	280:	sw	s4, 12(JSP)
0x2bcbf4ac	284:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V
          		@ Invoke a method w/ a void return type
0x2bcbf4b0	288:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcbf4b4	292:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf4b8	296:	jalr	s7
0x2bcbf4bc	300:	nop
          		@ Captured a stackmap here.
0x2bcbf4c0	304:	addiu	JSP, JFP, -8
0x2bcbf4c4	308:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbf4c8	312:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbf4cc	316:	nop
0x2bcbf4d0	320:	.word	9757824	@ mb com.sun.mep.bench.Chess.BPossMoves.checkRunOfMoves(III)V
--->Fixed instruction at 284(0x2bcbf4ac) to reference 320
--->Fixed instruction at 232(0x2bcbf478) to reference 320
--->Fixed instruction at 180(0x2bcbf444) to reference 320
--->Fixed instruction at 128(0x2bcbf410) to reference 320
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbf390) >>>>>>>>
          		@ Capacity is 14 word(s)
0x2bcbf390	0:	addiu	a1, JSP, 48
<<<<<<<<<Pop Code Buffer to PC = 324 (0x2bcbf4d4) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbf3e0) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbf3e0	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbf3e4	84:	lui	CP, hi16(0x2bcb)
0x2bcbf3e8	88:	ori	CP, CP, lo16(0x2bcbf4d0)
0x2bcbf3ec	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 324 (0x2bcbf4d4) <<<<<<<<<
JS: COMPILED: size=400 startPC=0x2bcbf390 com.sun.mep.bench.Chess.BPossMoves.BBishop_Moves(I)V
JS: ATTEMPTING TO COMPILE java.util.AbstractCollection.<init>()V
JS: COMPILING java.util.AbstractCollection.<init>()V
orig bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(1 0x0): 0- 

#################################################

The maximum node counts per root node are 3
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 3 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.util.AbstractCollection.<init>()V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x794544):    aload_0 
<1>  (0x794545):    invokenonvirtual_quick #8606 <java.lang.Object.<init>()V>
<4>  (0x794548):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(1): 
	local(0)	ID(2)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 6) INVOKE (v) 
      <(ID: 5) PARAMETER (reference) 
         <(ID: 2) LOCAL (reference)   0>
         <(ID: 4) NULL_PARAMETER (NONE) 
      <(ID: 3) CONST_MB (address field)  (java.lang.Object.<init>()V)

   <(ID: 7) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 38
ESTIMATED BUFFER SIZE = 144
CODE BUFFER ADDRESS = 0x2bcbf4f4
PC MAP TABLE ADDRESS = 0x2bcbf4fc
CODE ENTRY ADDRESS = 0x2bcbf520
          		@ Method prologue
0x2bcbf520	0:	addiu	a1, JSP, 40	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbf524	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbf528	8:	sltu	t7, a1, CHUNKEND
0x2bcbf52c	12:	bne	t7, zero, PC=0x2bcbf520	@ goto .skip
0x2bcbf530	16:	nop
0x2bcbf534	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbf538	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbf52c) >>>>>>>>
0x2bcbf52c	12:	bne	t7, zero, PC=0x2bcbf53c	@ goto .skip
0x2bcbf530	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbf53c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbf53c	28:	sw	JFP, 4(JSP)	@ Store curr JFP into new frame
0x2bcbf540	32:	addiu	JFP, JSP, 4	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbf544	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbf548	40:	addiu	a3, zero, 0
0x2bcbf54c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbf550	48:	addiu	a3, zero, -1
0x2bcbf554	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbf558	56:	move	a0, EE
0x2bcbf55c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbf560	64:	lui	t9, hi16(0x65)
0x2bcbf564	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbf568	72:	jalr	t9
0x2bcbf56c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbf570	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbf574	84:	nop
0x2bcbf578	88:	nop
0x2bcbf57c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbf580	96:	lw	s4, -8(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
0x2bcbf584	100:	sw	s4, 0(JSP)
0x2bcbf588	104:	lw	a0, 0(CP)	@ mb java.lang.Object.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcbf58c	108:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbf590	112:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf594	116:	jalr	s7
0x2bcbf598	120:	nop
          		@ Captured a stackmap here.
0x2bcbf59c	124:	addiu	JSP, JFP, -8
0x2bcbf5a0	128:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbf5a4	132:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbf5a8	136:	nop
0x2bcbf5ac	140:	.word	9064388	@ mb java.lang.Object.<init>()V
--->Fixed instruction at 104(0x2bcbf588) to reference 140
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbf520) >>>>>>>>
          		@ Capacity is 11 word(s)
0x2bcbf520	0:	addiu	a1, JSP, 40
<<<<<<<<<Pop Code Buffer to PC = 144 (0x2bcbf5b0) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbf570) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbf570	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbf574	84:	lui	CP, hi16(0x2bcb)
0x2bcbf578	88:	ori	CP, CP, lo16(0x2bcbf5ac)
0x2bcbf57c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 144 (0x2bcbf5b0) <<<<<<<<<
JS: COMPILED: size=204 startPC=0x2bcbf520 java.util.AbstractCollection.<init>()V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.GameState.<init>(Lcom/sun/mep/bench/Chess/ChessGame;)V
JS: COMPILING com.sun.mep.bench.Chess.GameState.<init>(Lcom/sun/mep/bench/Chess/ChessGame;)V
orig bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(1 0x0): 0- 

#################################################

The maximum node counts per root node are 3
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 5 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.GameState.<init>(Lcom/sun/mep/bench/Chess/ChessGame;)V(GameState.java:44)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x9535f8):    aload_0 
<1>  (0x9535f9):    invokeignored_quick 
<4>  (0x9535fc):    aload_0 
<5>  (0x9535fd):    bipush 64
<7>  (0x9535ff):    newarray byte
<9>  (0x953601):    aputfield_quick #3
<12>  (0x953604):    aload_0 
<13>  (0x953605):    aload_1 
<14>  (0x953606):    aputfield_quick #2
<17>  (0x953609):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(1): 
	local(0)	ID(2)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 4) IDENTITY (reference)  (ref count: 2)
      <(ID: 8) NEW_ARRAY_BYTE (reference) 
         <(ID: 3) CONST_JAVA_NUMERIC32 (int)  (64)

   <(ID: 7) ASSIGN (reference) 
      <(ID: 6) FIELD_REF (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 2)
            <(ID: 13) LOCAL (reference)   0>
         <(ID: 5) CONST_FIELD_OFFSET (NONE)  (3)
      <(ID: 4) IDENTITY (reference)  (ref count: 2)

   <(ID: 12) ASSIGN (reference) 
      <(ID: 11) FIELD_REF (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 2)
         <(ID: 10) CONST_FIELD_OFFSET (NONE)  (2)
      <(ID: 9) LOCAL (reference)   1>

   <(ID: 14) RETURN (v) 


NUM BARRIER BYTES = 32
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 116
ESTIMATED BUFFER SIZE = 252
CODE BUFFER ADDRESS = 0x2bcbf5c0
PC MAP TABLE ADDRESS = 0x2bcbf5c8
CODE ENTRY ADDRESS = 0x2bcbf5f0
          		@ Method prologue
0x2bcbf5f0	0:	addiu	a1, JSP, 40	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbf5f4	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbf5f8	8:	sltu	t7, a1, CHUNKEND
0x2bcbf5fc	12:	bne	t7, zero, PC=0x2bcbf5f0	@ goto .skip
0x2bcbf600	16:	nop
0x2bcbf604	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbf608	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbf5fc) >>>>>>>>
0x2bcbf5fc	12:	bne	t7, zero, PC=0x2bcbf60c	@ goto .skip
0x2bcbf600	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbf60c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbf60c	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbf610	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbf614	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbf618	40:	addiu	a3, zero, 0
0x2bcbf61c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbf620	48:	addiu	a3, zero, -1
0x2bcbf624	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbf628	56:	move	a0, EE
0x2bcbf62c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbf630	64:	lui	t9, hi16(0x65)
0x2bcbf634	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbf638	72:	jalr	t9
0x2bcbf63c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbf640	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbf644	84:	nop
0x2bcbf648	88:	nop
0x2bcbf64c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbf650	96:	lw	s4, -8(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
          		@ Do newarray:
0x2bcbf654	100:	addiu	a1, zero, 64	@ const 64
0x2bcbf658	104:	lw	a2, 0(CP)	@ [B
0x2bcbf65c	108:	addiu	a0, zero, 1	@ array element size
0x2bcbf660	112:	jal	PC=(0x2bcb88f8)	@ call CVMCCMruntimeNewArrayGlue
0x2bcbf664	116:	nop
          		@ Captured a stackmap here.
0x2bcbf668	120:	lw	s4, -8(JFP)	@ Java local cell # 0
          		@ Do putfield:
0x2bcbf66c	124:	addiu	s7, s4, 12	@ fieldAddr = obj + fieldOffset;
0x2bcbf670	128:	sw	v0, 0(s7)	@ putfield(fieldAddr, valueObj);
0x2bcbf674	132:	lw	s6, 0(CP)	@ cardTableVirtualBase
0x2bcbf678	136:	addiu	s5, zero, 1	@ CARD_DIRTY_BYTE
0x2bcbf67c	140:	srl	t7, s7, 9	@ mark card table
0x2bcbf680	144:	addu	t7, s6, t7	@ add indexReg and baseReg
0x2bcbf684	148:	sb	s5, 0(t7)
0x2bcbf688	152:	lw	ra, -4(JFP)	@ Java local cell # 1
          		@ Do putfield:
0x2bcbf68c	156:	addiu	s7, s4, 8	@ fieldAddr = obj + fieldOffset;
0x2bcbf690	160:	sw	ra, 0(s7)	@ putfield(fieldAddr, valueObj);
0x2bcbf694	164:	srl	t7, s7, 9	@ mark card table
0x2bcbf698	168:	addu	t7, s6, t7	@ add indexReg and baseReg
0x2bcbf69c	172:	sb	s5, 0(t7)
0x2bcbf6a0	176:	addiu	JSP, JFP, -8
0x2bcbf6a4	180:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbf6a8	184:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbf6ac	188:	nop
0x2bcbf6b0	192:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 132(0x2bcbf674) to reference 192
0x2bcbf6b4	196:	.word	8897740	@ cb [B
--->Fixed instruction at 104(0x2bcbf658) to reference 196
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbf5f0) >>>>>>>>
          		@ Capacity is 12 word(s)
0x2bcbf5f0	0:	addiu	a1, JSP, 40
<<<<<<<<<Pop Code Buffer to PC = 200 (0x2bcbf6b8) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbf640) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbf640	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbf644	84:	lui	CP, hi16(0x2bcb)
0x2bcbf648	88:	ori	CP, CP, lo16(0x2bcbf6b0)
0x2bcbf64c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 200 (0x2bcbf6b8) <<<<<<<<<
JS: COMPILED: size=264 startPC=0x2bcbf5f0 com.sun.mep.bench.Chess.GameState.<init>(Lcom/sun/mep/bench/Chess/ChessGame;)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.Move.setValue(I)V
JS: COMPILING com.sun.mep.bench.Chess.Move.setValue(I)V
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 

#################################################

The maximum node counts per root node are 3
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 3 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Move.setValue(I)V(Move.java:50)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x95669c):    aload_0 
<1>  (0x95669d):    iload_1 
<2>  (0x95669e):    putfield_quick #2
<5>  (0x9566a1):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 6) ASSIGN (32-bit field) 
      <(ID: 5) FIELD_REF (32-bit field) 
         <(ID: 2) LOCAL (reference)   0>
         <(ID: 4) CONST_FIELD_OFFSET (NONE)  (2)
      <(ID: 3) LOCAL (int)   1>

   <(ID: 7) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 44
ESTIMATED BUFFER SIZE = 148
CODE BUFFER ADDRESS = 0x2bcbf6c8
PC MAP TABLE ADDRESS = 0x2bcbf6d0
CODE ENTRY ADDRESS = 0x2bcbf6f8
          		@ Method prologue
0x2bcbf6f8	0:	addiu	a1, JSP, 40	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbf6fc	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbf700	8:	sltu	t7, a1, CHUNKEND
0x2bcbf704	12:	bne	t7, zero, PC=0x2bcbf6f8	@ goto .skip
0x2bcbf708	16:	nop
0x2bcbf70c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbf710	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbf704) >>>>>>>>
0x2bcbf704	12:	bne	t7, zero, PC=0x2bcbf714	@ goto .skip
0x2bcbf708	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbf714) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbf714	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbf718	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbf71c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbf720	40:	addiu	a3, zero, 0
0x2bcbf724	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbf728	48:	addiu	a3, zero, -1
0x2bcbf72c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbf730	56:	move	a0, EE
0x2bcbf734	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbf738	64:	lui	t9, hi16(0x65)
0x2bcbf73c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbf740	72:	jalr	t9
0x2bcbf744	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbf748	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbf74c	84:	nop
0x2bcbf750	88:	nop
0x2bcbf754	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbf758	96:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbf75c	100:	lw	s5, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
          		@ Do putfield:
0x2bcbf760	104:	sw	s5, 8(s4)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcbf764	108:	addiu	JSP, JFP, -8
0x2bcbf768	112:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbf76c	116:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbf770	120:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbf6f8) >>>>>>>>
          		@ Capacity is 12 word(s)
0x2bcbf6f8	0:	addiu	a1, JSP, 40
<<<<<<<<<Pop Code Buffer to PC = 124 (0x2bcbf774) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbf748) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbf748	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbf74c	84:	lui	CP, hi16(0x2bcb)
0x2bcbf750	88:	ori	CP, CP, lo16(0x2bcbf774)
0x2bcbf754	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 124 (0x2bcbf774) <<<<<<<<<
JS: COMPILED: size=176 startPC=0x2bcbf6f8 com.sun.mep.bench.Chess.Move.setValue(I)V
JS: ATTEMPTING TO COMPILE java.util.AbstractList.<init>()V
JS: COMPILING java.util.AbstractList.<init>()V
orig bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(1 0x0): 0- 

#################################################

The maximum node counts per root node are 3
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 4 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.util.AbstractList.<init>()V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x7347b8):    aload_0 
<1>  (0x7347b9):    invokenonvirtual_quick #6556 <java.util.AbstractCollection.<init>()V>
<4>  (0x7347bc):    aload_0 
<5>  (0x7347bd):    iconst_0 
<6>  (0x7347be):    putfield_quick #2
<9>  (0x7347c1):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(1): 
	local(0)	ID(2)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 6) INVOKE (v) 
      <(ID: 5) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 2)
            <(ID: 11) LOCAL (reference)   0>
         <(ID: 4) NULL_PARAMETER (NONE) 
      <(ID: 3) CONST_MB (address field)  (java.util.AbstractCollection.<init>()V)

   <(ID: 10) ASSIGN (32-bit field) 
      <(ID: 9) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 2)
         <(ID: 8) CONST_FIELD_OFFSET (NONE)  (2)
      <(ID: 7) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 12) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 68
ESTIMATED BUFFER SIZE = 172
CODE BUFFER ADDRESS = 0x2bcbf778
PC MAP TABLE ADDRESS = 0x2bcbf780
CODE ENTRY ADDRESS = 0x2bcbf7a8
          		@ Method prologue
0x2bcbf7a8	0:	addiu	a1, JSP, 44	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbf7ac	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbf7b0	8:	sltu	t7, a1, CHUNKEND
0x2bcbf7b4	12:	bne	t7, zero, PC=0x2bcbf7a8	@ goto .skip
0x2bcbf7b8	16:	nop
0x2bcbf7bc	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbf7c0	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbf7b4) >>>>>>>>
0x2bcbf7b4	12:	bne	t7, zero, PC=0x2bcbf7c4	@ goto .skip
0x2bcbf7b8	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbf7c4) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbf7c4	28:	sw	JFP, 4(JSP)	@ Store curr JFP into new frame
0x2bcbf7c8	32:	addiu	JFP, JSP, 4	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbf7cc	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbf7d0	40:	addiu	a3, zero, 0
0x2bcbf7d4	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbf7d8	48:	addiu	a3, zero, -1
0x2bcbf7dc	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbf7e0	56:	move	a0, EE
0x2bcbf7e4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbf7e8	64:	lui	t9, hi16(0x65)
0x2bcbf7ec	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbf7f0	72:	jalr	t9
0x2bcbf7f4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbf7f8	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbf7fc	84:	nop
0x2bcbf800	88:	nop
0x2bcbf804	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbf808	96:	lw	s4, -8(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
0x2bcbf80c	100:	sw	s4, 0(JSP)
0x2bcbf810	104:	lw	a0, 0(CP)	@ mb java.util.AbstractCollection.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcbf814	108:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbf818	112:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf81c	116:	jalr	s7
0x2bcbf820	120:	nop
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcbf824	124:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbf828	128:	sw	zero, 8(s7)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcbf82c	132:	addiu	JSP, JFP, -8
0x2bcbf830	136:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbf834	140:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbf838	144:	nop
0x2bcbf83c	148:	.word	9258020	@ mb java.util.AbstractCollection.<init>()V
--->Fixed instruction at 104(0x2bcbf810) to reference 148
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbf7a8) >>>>>>>>
          		@ Capacity is 12 word(s)
0x2bcbf7a8	0:	addiu	a1, JSP, 44
<<<<<<<<<Pop Code Buffer to PC = 152 (0x2bcbf840) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbf7f8) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbf7f8	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbf7fc	84:	lui	CP, hi16(0x2bcb)
0x2bcbf800	88:	ori	CP, CP, lo16(0x2bcbf83c)
0x2bcbf804	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 152 (0x2bcbf840) <<<<<<<<<
JS: COMPILED: size=216 startPC=0x2bcbf7a8 java.util.AbstractList.<init>()V
JS: ATTEMPTING TO COMPILE java.util.Vector.<init>(II)V
JS: COMPILING java.util.Vector.<init>(II)V
orig bkID(1) Incoming Locals(3 0x0): 0- 1- 2- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(1) Incoming Locals(3 0x0): 0- 1- 2- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
pre  bkID(0) Incoming Locals(1 0x0): 0- 
local(#0) swapped with local(#0)
post bkID(0) Incoming Locals(1 0x1): 0+ 
pre2  bkID(1) Incoming Locals(3 0x0): 0- 1- 2- 
local(#3) swapped with local(#0)
post2 bkID(1) Incoming Locals(4 0x1): <null> 1- 2- 0- 

#################################################

The maximum node counts per root node are 13
IR block list contains 2 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 8 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1
* Source: java.util.Vector.<init>(II)V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<0>  (0x6e60e8):    aload_0 
<1>  (0x6e60e9):    invokenonvirtual_quick #7598 <java.util.AbstractList.<init>()V>
<4>  (0x6e60ec):    iload_1 
<5>  (0x6e60ed):    ifge <36>
<8>  (0x6e60f0):    new_quick #8766 <java.lang.IllegalArgumentException>
<11>  (0x6e60f3):    dup 
<12>  (0x6e60f4):    new_checkinit_quick #10641 <java.lang.StringBuffer>
<15>  (0x6e60f7):    dup 
<16>  (0x6e60f8):    invokenonvirtual_quick #4389 <java.lang.StringBuffer.<init>()V>
<19>  (0x6e60fb):    aldc_w_quick #381
<22>  (0x6e60fe):    invokenonvirtual_quick #9239 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<25>  (0x6e6101):    iload_1 
<26>  (0x6e6102):    invokenonvirtual_quick #6735 <java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;>
<29>  (0x6e6105):    invokenonvirtual_quick #6697 <java.lang.StringBuffer.toString()Ljava/lang/String;>
<32>  (0x6e6108):    invokenonvirtual_quick #4139 <java.lang.IllegalArgumentException.<init>(Ljava/lang/String;)V>
<35>  (0x6e610b):    athrow 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(1): 
	local(0)	ID(2)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(0) RefsOK(0) Locals(<null> 1 2 0)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 6) INVOKE (v) 
      <(ID: 5) PARAMETER (reference) 
         <(ID: 2) LOCAL (reference)   0>
         <(ID: 4) NULL_PARAMETER (NONE) 
      <(ID: 3) CONST_MB (address field)  (java.util.AbstractList.<init>()V)

   <(ID: 9) BCOND (int) 
   target: (BlockID: 1 BlockPC: 36)
   condition: GE
   flags: 0
      <(ID: 7) IDENTITY (int)  (ref count: 2)
         <(ID: 44) LOCAL (int)   1>
      <(ID: 8) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 11) IDENTITY (reference)  (ref count: 3)
      <(ID: 43) NEW_OBJECT (reference) 
         <(ID: 10) CONST_CB (address field)  (java.lang.IllegalArgumentException)

   <(ID: 13) IDENTITY (reference)  (ref count: 3)
      <(ID: 18) NEW_OBJECT (reference) 
         <(ID: 12) CONST_CB (address field)  (java.lang.StringBuffer)

   <(ID: 17) INVOKE (v) 
      <(ID: 16) PARAMETER (reference) 
         <(ID: 13) IDENTITY (reference)  (ref count: 3)
         <(ID: 15) NULL_PARAMETER (NONE) 
      <(ID: 14) CONST_MB (address field)  (java.lang.StringBuffer.<init>()V)

   <(ID: 42) INVOKE (v) 
      <(ID: 41) PARAMETER (reference) 
         <(ID: 11) IDENTITY (reference)  (ref count: 3)
         <(ID: 40) PARAMETER (reference) 
            <(ID: 37) INVOKE (reference) 
               <(ID: 34) PARAMETER (reference) 
                  <(ID: 31) IDENTITY (reference)  (ref count: 2)
                     <(ID: 46) INVOKE (reference) 
                        <(ID: 28) PARAMETER (reference) 
                           <(ID: 24) IDENTITY (reference)  (ref count: 2)
                              <(ID: 45) INVOKE (reference) 
                                 <(ID: 23) PARAMETER (reference) 
                                    <(ID: 13) IDENTITY (reference)  (ref count: 3)
                                    <(ID: 22) PARAMETER (reference) 
                                       <(ID: 19) CONST_STRING_OBJECT (reference)  (stringObject 0x89a888)

                                       <(ID: 21) NULL_PARAMETER (NONE) 
                                 <(ID: 20) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                           <(ID: 27) PARAMETER (int) 
                              <(ID: 7) IDENTITY (int)  (ref count: 2)
                              <(ID: 26) NULL_PARAMETER (NONE) 
                        <(ID: 30) SEQUENCE_R (address field) 
                           <(ID: 29) NULL_CHECK (reference) 
                              <(ID: 24) IDENTITY (reference)  (ref count: 2)
                           <(ID: 25) CONST_MB (address field)  (java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;)
                  <(ID: 33) NULL_PARAMETER (NONE) 
               <(ID: 36) SEQUENCE_R (address field) 
                  <(ID: 35) NULL_CHECK (reference) 
                     <(ID: 31) IDENTITY (reference)  (ref count: 2)
                  <(ID: 32) CONST_MB (address field)  (java.lang.StringBuffer.toString()Ljava/lang/String;)
            <(ID: 39) NULL_PARAMETER (NONE) 
      <(ID: 38) CONST_MB (address field)  (java.lang.IllegalArgumentException.<init>(Ljava/lang/String;)V)

   <(ID: 47) THROW (NONE) 
      <(ID: 11) IDENTITY (reference)  (ref count: 3)


*************************************************
*
* (block ID:1 block PC:36 )
* IR root list contains 5 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1
* Source: java.util.Vector.<init>(II)V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<36>  (0x6e610c):    aload_0 
<37>  (0x6e610d):    iload_1 
<38>  (0x6e610e):    anewarray_quick class #7406
<41>  (0x6e6111):    aputfield_quick #3
<44>  (0x6e6114):    aload_0 
<45>  (0x6e6115):    iload_2 
<46>  (0x6e6116):    putfield_quick #5
<49>  (0x6e6119):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(0)	ID(49)
 	local(1)	ID(50)
 	local(2)	ID(57)
 
Incoming Locals(4): 
	<null>
	local(1)	ID(50)
 	local(2)	ID(57)
 	local(0)	ID(49)
 
   <(ID: 48) MAP_PC (NONE)   36>

   <(ID: 52) IDENTITY (reference)  (ref count: 2)
      <(ID: 56) NEW_ARRAY_REF (reference) 
         <(ID: 51) CONST_CB (address field)  ([Ljava.lang.Object;)
         <(ID: 50) LOCAL (int)   1>

   <(ID: 55) ASSIGN (reference) 
      <(ID: 54) FIELD_REF (reference) 
         <(ID: 49) IDENTITY (reference)  (ref count: 2)
            <(ID: 61) LOCAL (reference)   0>
         <(ID: 53) CONST_FIELD_OFFSET (NONE)  (3)
      <(ID: 52) IDENTITY (reference)  (ref count: 2)

   <(ID: 60) ASSIGN (32-bit field) 
      <(ID: 59) FIELD_REF (32-bit field) 
         <(ID: 49) IDENTITY (reference)  (ref count: 2)
         <(ID: 58) CONST_FIELD_OFFSET (NONE)  (5)
      <(ID: 57) LOCAL (int)   2>

   <(ID: 62) RETURN (v) 


NUM BARRIER BYTES = 16
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 308
ESTIMATED BUFFER SIZE = 432
CODE BUFFER ADDRESS = 0x2bcbf850
PC MAP TABLE ADDRESS = 0x2bcbf858
CODE ENTRY ADDRESS = 0x2bcbf880
          		@ Method prologue
0x2bcbf880	0:	addiu	a1, JSP, 48	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbf884	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbf888	8:	sltu	t7, a1, CHUNKEND
0x2bcbf88c	12:	bne	t7, zero, PC=0x2bcbf880	@ goto .skip
0x2bcbf890	16:	nop
0x2bcbf894	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbf898	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbf88c) >>>>>>>>
0x2bcbf88c	12:	bne	t7, zero, PC=0x2bcbf89c	@ goto .skip
0x2bcbf890	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbf89c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbf89c	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbf8a0	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbf8a4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbf8a8	40:	addiu	a3, zero, 0
0x2bcbf8ac	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbf8b0	48:	addiu	a3, zero, -1
0x2bcbf8b4	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbf8b8	56:	move	a0, EE
0x2bcbf8bc	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbf8c0	64:	lui	t9, hi16(0x65)
0x2bcbf8c4	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbf8c8	72:	jalr	t9
0x2bcbf8cc	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbf8d0	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbf8d4	84:	nop
0x2bcbf8d8	88:	nop
0x2bcbf8dc	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbf8e0	96:	lw	s4, -12(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
0x2bcbf8e4	100:	sw	s4, 0(JSP)
0x2bcbf8e8	104:	lw	a0, 0(CP)	@ mb java.util.AbstractList.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcbf8ec	108:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbf8f0	112:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf8f4	116:	jalr	s7
0x2bcbf8f8	120:	nop
          		@ Captured a stackmap here.
0x2bcbf8fc	124:	lw	ra, -8(JFP)	@ Java local cell # 1
			@ Outgoing local(1) reg(21): in wrong register
0x2bcbf900	128:	move	s5, ra
			@ Outgoing local(2) reg(22): not in register
0x2bcbf904	132:	lw	s6, -4(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(23): not in register
0x2bcbf908	136:	lw	s7, -12(JFP)	@ Java local cell # 0
          		@ deferred comparison: 
0x2bcbf90c	140:	sltiu	t7, s5, 0
0x2bcbf910	144:	beq	t7, zero, PC=0x2bcbf90c	@ branch to block L1
0x2bcbf914	148:	nop
0x2bcbf918	152:	lw	a1, 0(CP)	@ cb java.lang.IllegalArgumentException
          		@ Do new:
          		@ cb: java.lang.IllegalArgumentException
0x2bcbf91c	156:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcbf920	160:	nop
          		@ Captured a stackmap here.
0x2bcbf924	164:	lw	a1, 0(CP)	@ cb java.lang.StringBuffer
          		@ Do new:
0x2bcbf928	168:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
          		@ cb: java.lang.StringBuffer
0x2bcbf92c	172:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcbf930	176:	nop
          		@ Captured a stackmap here.
0x2bcbf934	180:	sw	v0, 0(JSP)
0x2bcbf938	184:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcbf93c	188:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbf940	192:	sw	v0, 32(JFP)	@ REF spill Java temp cell # 1
0x2bcbf944	196:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf948	200:	jalr	s7
0x2bcbf94c	204:	nop
          		@ Captured a stackmap here.
0x2bcbf950	208:	lw	s7, 28(JFP)	@ Java temp cell # 0
0x2bcbf954	212:	sw	s7, 0(JSP)
0x2bcbf958	216:	lw	s6, 32(JFP)	@ Java temp cell # 1
0x2bcbf95c	220:	sw	s6, 4(JSP)
0x2bcbf960	224:	lw	ra, 0(CP)	@ const 9021576
0x2bcbf964	228:	sw	ra, 8(JSP)
0x2bcbf968	232:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcbf96c	236:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbf970	240:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf974	244:	jalr	s7
0x2bcbf978	248:	nop
          		@ Captured a stackmap here.
0x2bcbf97c	252:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbf980	256:	lw	s7, 0(JSP)
0x2bcbf984	260:	sw	s7, 0(JSP)
0x2bcbf988	264:	lw	s6, -8(JFP)	@ Java local cell # 1
0x2bcbf98c	268:	sw	s6, 4(JSP)
0x2bcbf990	272:	lw	s5, 0(s7)	@ NULL check
0x2bcbf994	276:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcbf998	280:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbf99c	284:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf9a0	288:	jalr	s7
0x2bcbf9a4	292:	nop
          		@ Captured a stackmap here.
0x2bcbf9a8	296:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcbf9ac	300:	lw	s7, 0(JSP)
0x2bcbf9b0	304:	sw	s7, 0(JSP)
0x2bcbf9b4	308:	lw	s6, 0(s7)	@ NULL check
0x2bcbf9b8	312:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcbf9bc	316:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbf9c0	320:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf9c4	324:	jalr	s7
0x2bcbf9c8	328:	nop
          		@ Captured a stackmap here.
0x2bcbf9cc	332:	lw	a0, 0(CP)	@ mb java.lang.IllegalArgumentException.<init>(Ljava/lang/String;)V
          		@ Invoke a method w/ a void return type
0x2bcbf9d0	336:	lw	s7, 0(a0)	@ call method through mb
0x2bcbf9d4	340:	jalr	s7
0x2bcbf9d8	344:	nop
          		@ Captured a stackmap here.
0x2bcbf9dc	348:	lw	a2, 28(JFP)	@ Java temp cell # 0
0x2bcbf9e0	352:	jal	PC=(0x2bcb8138)	@ goto CVMCCMruntimeThrowObjectGlue
0x2bcbf9e4	356:	nop
			@ Initial Temp REF set is 
	L1:	360:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(21)
			@ Binding Incoming Local(2) to reg(22)
			@ Binding Incoming Local(0) to reg(23)
--->Fixed instruction at 144(0x2bcbf910) to reference 360
          		@ MAP_PC idepth=0 javaPc=36 compiledPc=360
0x2bcbf9e8	360:	lw	a2, 0(CP)	@ cb [Ljava.lang.Object;
          		@ Do anewarray:
0x2bcbf9ec	364:	move	a1, s5
0x2bcbf9f0	368:	jal	PC=(0x2bcb8acc)	@ call CVMCCMruntimeANewArrayGlue
0x2bcbf9f4	372:	nop
          		@ Captured a stackmap here.
0x2bcbf9f8	376:	lw	s7, -12(JFP)	@ Java local cell # 0
          		@ Do putfield:
0x2bcbf9fc	380:	addiu	s5, s7, 12	@ fieldAddr = obj + fieldOffset;
0x2bcbfa00	384:	sw	v0, 0(s5)	@ putfield(fieldAddr, valueObj);
0x2bcbfa04	388:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcbfa08	392:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcbfa0c	396:	srl	t7, s5, 9	@ mark card table
0x2bcbfa10	400:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcbfa14	404:	sb	ra, 0(t7)
          		@ Do putfield:
0x2bcbfa18	408:	sw	s6, 20(s7)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcbfa1c	412:	addiu	JSP, JFP, -12
0x2bcbfa20	416:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbfa24	420:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbfa28	424:	nop
0x2bcbfa2c	428:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 388(0x2bcbfa04) to reference 428
0x2bcbfa30	432:	.word	8898260	@ cb [Ljava.lang.Object;
--->Fixed instruction at 360(0x2bcbf9e8) to reference 432
0x2bcbfa34	436:	.word	9219372	@ mb java.lang.IllegalArgumentException.<init>(Ljava/lang/String;)V
--->Fixed instruction at 332(0x2bcbf9cc) to reference 436
0x2bcbfa38	440:	.word	9110340	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
--->Fixed instruction at 312(0x2bcbf9b8) to reference 440
0x2bcbfa3c	444:	.word	9109640	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
--->Fixed instruction at 276(0x2bcbf994) to reference 444
0x2bcbfa40	448:	.word	9109444	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
--->Fixed instruction at 232(0x2bcbf968) to reference 448
0x2bcbfa44	452:	.word	9021576
--->Fixed instruction at 224(0x2bcbf960) to reference 452
0x2bcbfa48	456:	.word	9108968	@ mb java.lang.StringBuffer.<init>()V
--->Fixed instruction at 184(0x2bcbf938) to reference 456
0x2bcbfa4c	460:	.word	8642484	@ cb java.lang.StringBuffer
--->Fixed instruction at 164(0x2bcbf924) to reference 460
0x2bcbfa50	464:	.word	8755376	@ cb java.lang.IllegalArgumentException
--->Fixed instruction at 152(0x2bcbf918) to reference 464
0x2bcbfa54	468:	.word	9171636	@ mb java.util.AbstractList.<init>()V
--->Fixed instruction at 104(0x2bcbf8e8) to reference 468
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbf880) >>>>>>>>
          		@ Capacity is 17 word(s)
0x2bcbf880	0:	addiu	a1, JSP, 56
<<<<<<<<<Pop Code Buffer to PC = 472 (0x2bcbfa58) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbf8d0) >>>>>>>>
          		@ spillSize is 2 word(s), add to JFP+28
0x2bcbf8d0	80:	addiu	JSP, JFP, 36
          		@ setup cp base register
0x2bcbf8d4	84:	lui	CP, hi16(0x2bcb)
0x2bcbf8d8	88:	ori	CP, CP, lo16(0x2bcbfa2c)
0x2bcbf8dc	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 472 (0x2bcbfa58) <<<<<<<<<
JS: COMPILED: size=584 startPC=0x2bcbf880 java.util.Vector.<init>(II)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.BPossMoves.BQueen_Moves(I)V
JS: COMPILING com.sun.mep.bench.Chess.BPossMoves.BQueen_Moves(I)V
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 

#################################################

The maximum node counts per root node are 4
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 4 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.BPossMoves.BQueen_Moves(I)V(BPossMoves.java:234)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x94fa70):    aload_0 
<1>  (0x94fa71):    iload_1 
<2>  (0x94fa72):    invokevirtual_quick_w #20 <com.sun.mep.bench.Chess.BPossMoves.BRook_Moves(I)V>
<5>  (0x94fa75):    aload_0 
<6>  (0x94fa76):    iload_1 
<7>  (0x94fa77):    invokevirtual_quick_w #21 <com.sun.mep.bench.Chess.BPossMoves.BBishop_Moves(I)V>
<10>  (0x94fa7a):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 10) INVOKE (v) 
      <(ID: 7) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
            <(ID: 11) LOCAL (reference)   0>
         <(ID: 6) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 2)
               <(ID: 19) LOCAL (int)   1>
            <(ID: 5) NULL_PARAMETER (NONE) 
      <(ID: 9) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 8) GET_VTBL (NONE) 
            <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 4) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 14)

   <(ID: 18) INVOKE (v) 
      <(ID: 15) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 14) PARAMETER (int) 
            <(ID: 3) IDENTITY (int)  (ref count: 2)
            <(ID: 13) NULL_PARAMETER (NONE) 
      <(ID: 17) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 16) GET_VTBL (NONE) 
            <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 12) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 15)

   <(ID: 20) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 40
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 74
ESTIMATED BUFFER SIZE = 220
CODE BUFFER ADDRESS = 0x2bcbfa98
PC MAP TABLE ADDRESS = 0x2bcbfaa0
CODE ENTRY ADDRESS = 0x2bcbfac8
          		@ Method prologue
0x2bcbfac8	0:	addiu	a1, JSP, 40	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbfacc	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbfad0	8:	sltu	t7, a1, CHUNKEND
0x2bcbfad4	12:	bne	t7, zero, PC=0x2bcbfac8	@ goto .skip
0x2bcbfad8	16:	nop
0x2bcbfadc	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbfae0	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbfad4) >>>>>>>>
0x2bcbfad4	12:	bne	t7, zero, PC=0x2bcbfae4	@ goto .skip
0x2bcbfad8	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbfae4) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbfae4	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbfae8	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbfaec	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbfaf0	40:	addiu	a3, zero, 0
0x2bcbfaf4	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbfaf8	48:	addiu	a3, zero, -1
0x2bcbfafc	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbfb00	56:	move	a0, EE
0x2bcbfb04	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbfb08	64:	lui	t9, hi16(0x65)
0x2bcbfb0c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbfb10	72:	jalr	t9
0x2bcbfb14	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbfb18	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbfb1c	84:	nop
0x2bcbfb20	88:	nop
0x2bcbfb24	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbfb28	96:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbfb2c	100:	lw	s5, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
0x2bcbfb30	104:	sw	s4, 0(JSP)
0x2bcbfb34	108:	sw	s5, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbfb38	112:	lw	s7, 0(s4)	@ Get object.cb
0x2bcbfb3c	116:	addiu	t7, zero, -4
0x2bcbfb40	120:	and	s7, s7, t7
0x2bcbfb44	124:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcbfb48	128:	lw	a0, 56(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbfb4c	132:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbfb50	136:	lw	s7, 0(a0)	@ call method through mb
0x2bcbfb54	140:	jalr	s7
0x2bcbfb58	144:	nop
          		@ Captured a stackmap here.
0x2bcbfb5c	148:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcbfb60	152:	sw	s7, 0(JSP)
0x2bcbfb64	156:	lw	s6, -4(JFP)	@ Java local cell # 1
0x2bcbfb68	160:	sw	s6, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcbfb6c	164:	lw	s5, 0(s7)	@ Get object.cb
0x2bcbfb70	168:	addiu	t7, zero, -4
0x2bcbfb74	172:	and	s5, s5, t7
0x2bcbfb78	176:	lw	s5, 76(s5)	@ Get cb.vtbl
0x2bcbfb7c	180:	lw	a0, 60(s5)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcbfb80	184:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbfb84	188:	lw	s7, 0(a0)	@ call method through mb
0x2bcbfb88	192:	jalr	s7
0x2bcbfb8c	196:	nop
          		@ Captured a stackmap here.
0x2bcbfb90	200:	addiu	JSP, JFP, -8
0x2bcbfb94	204:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbfb98	208:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbfb9c	212:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbfac8) >>>>>>>>
          		@ Capacity is 12 word(s)
0x2bcbfac8	0:	addiu	a1, JSP, 40
<<<<<<<<<Pop Code Buffer to PC = 216 (0x2bcbfba0) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbfb18) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbfb18	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbfb1c	84:	lui	CP, hi16(0x2bcb)
0x2bcbfb20	88:	ori	CP, CP, lo16(0x2bcbfba0)
0x2bcbfb24	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 216 (0x2bcbfba0) <<<<<<<<<
JS: COMPILED: size=284 startPC=0x2bcbfac8 com.sun.mep.bench.Chess.BPossMoves.BQueen_Moves(I)V
JS: ATTEMPTING TO COMPILE java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;
JS: COMPILING java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
bkID(0) local(0 #0)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(2 0x0): 0- 1- 
+bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
-gbk bkID(1) Incoming Locals(2 0x0): 0- 1- 
+gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
bkID(0) local(0 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
dstBk(0) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
dstBk(1) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
bkID(0) local(1 #1)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
+bk  bkID(0) Incoming Locals(2 0x3): 0+ 1+ 
-gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
+gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
bkID(0) local(1 #1)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(0) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(0) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(1) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 

#################################################

The maximum node counts per root node are 7
IR block list contains 2 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 7 root nodes: in block 
* flags: 0x41
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<0>  (0x6f68dc):    aload_0 
<1>  (0x6f68dd):    getfield_quick #3
<4>  (0x6f68e0):    iconst_1 
<5>  (0x6f68e1):    iadd 
<6>  (0x6f68e2):    istore_2 
<7>  (0x6f68e3):    iload_2 
<8>  (0x6f68e4):    aload_0 
<9>  (0x6f68e5):    agetfield_quick #2
<12>  (0x6f68e8):    arraylength 
<13>  (0x6f68e9):    if_icmple <21>
<16>  (0x6f68ec):    aload_0 
<17>  (0x6f68ed):    iload_2 
<18>  (0x6f68ee):    invokenonvirtual_quick #11073 <java.lang.StringBuffer.expandCapacity(I)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(40)
 
Assigned Locals(1): 
	ASSIGN(16): local(2)	ID(15)	rhsID(7)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(0 1)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 17) FETCH (32-bit field) 
         <(ID: 4) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 3)
               <(ID: 11) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 10) IDENTITY (reference)  (ref count: 2)
      <(ID: 14) FETCH (reference) 
         <(ID: 9) FIELD_REF (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 3)
            <(ID: 8) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 12) IDENTITY (int)  (ref count: 2)
      <(ID: 19) ARRAY_LENGTH (int) 
         <(ID: 10) IDENTITY (reference)  (ref count: 2)

   <(ID: 16) ASSIGN (int)  (assignIdx: 0)
      <(ID: 15) LOCAL (int)   2>
      <(ID: 7) IDENTITY (int)  (ref count: 3)
         <(ID: 18) ADD (int) 
            <(ID: 5) IDENTITY (32-bit field)  (ref count: 2)
            <(ID: 6) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 13) BCOND (int) 
   target: (BlockID: 1 BlockPC: 21)
   condition: LE
   flags: 0
      <(ID: 7) IDENTITY (int)  (ref count: 3)
      <(ID: 12) IDENTITY (int)  (ref count: 2)


   <(ID: 24) INVOKE (v) 
      <(ID: 23) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 3)
         <(ID: 22) PARAMETER (int) 
            <(ID: 7) IDENTITY (int)  (ref count: 3)
            <(ID: 21) NULL_PARAMETER (NONE) 
      <(ID: 20) CONST_MB (address field)  (java.lang.StringBuffer.expandCapacity(I)V)


*************************************************
*
* (block ID:1 block PC:21 )
* IR root list contains 6 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<21>  (0x6f68f1):    aload_0 
<22>  (0x6f68f2):    agetfield_quick #2
<25>  (0x6f68f5):    aload_0 
<26>  (0x6f68f6):    dup 
<27>  (0x6f68f7):    getfield_quick #3
<30>  (0x6f68fa):    dup_x1 
<31>  (0x6f68fb):    iconst_1 
<32>  (0x6f68fc):    iadd 
<33>  (0x6f68fd):    putfield_quick #3
<36>  (0x6f6900):    iload_1 
<37>  (0x6f6901):    castore 
<38>  (0x6f6902):    aload_0 
<39>  (0x6f6903):    areturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(26)
 	local(1)	ID(40)
 
Incoming Locals(2): 
	local(0)	ID(26)
 	local(1)	ID(40)
 
   <(ID: 25) MAP_PC (NONE)   21>

   <(ID: 29) IDENTITY (reference)  (ref count: 3)
      <(ID: 45) FETCH (reference) 
         <(ID: 28) FIELD_REF (reference) 
            <(ID: 26) IDENTITY (reference)  (ref count: 4)
               <(ID: 33) LOCAL (reference)   0>
            <(ID: 27) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 32) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 39) FETCH (32-bit field) 
         <(ID: 31) FIELD_REF (32-bit field) 
            <(ID: 26) IDENTITY (reference)  (ref count: 4)
            <(ID: 30) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 38) ASSIGN (32-bit field) 
      <(ID: 37) FIELD_REF (32-bit field) 
         <(ID: 26) IDENTITY (reference)  (ref count: 4)
         <(ID: 36) CONST_FIELD_OFFSET (NONE)  (3)
      <(ID: 35) ADD (int) 
         <(ID: 32) IDENTITY (32-bit field)  (ref count: 3)
         <(ID: 34) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 44) ASSIGN (char) 
      <(ID: 43) INDEX (int) 
         <(ID: 29) IDENTITY (reference)  (ref count: 3)
         <(ID: 42) BOUNDS_CHECK (int) 
            <(ID: 32) IDENTITY (32-bit field)  (ref count: 3)
            <(ID: 41) ARRAY_LENGTH (int) 
               <(ID: 29) IDENTITY (reference)  (ref count: 3)
      <(ID: 40) LOCAL (int)   1>

   <(ID: 46) RETURN_VALUE (reference) 
      <(ID: 26) IDENTITY (reference)  (ref count: 4)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 8
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 248
ESTIMATED BUFFER SIZE = 364
CODE BUFFER ADDRESS = 0x2bcbfbb4
PC MAP TABLE ADDRESS = 0x2bcbfbbc
CODE ENTRY ADDRESS = 0x2bcbfbe8
          		@ Method prologue
0x2bcbfbe8	0:	addiu	a1, JSP, 56	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbfbec	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbfbf0	8:	sltu	t7, a1, CHUNKEND
0x2bcbfbf4	12:	bne	t7, zero, PC=0x2bcbfbe8	@ goto .skip
0x2bcbfbf8	16:	nop
0x2bcbfbfc	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbfc00	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbfbf4) >>>>>>>>
0x2bcbfbf4	12:	bne	t7, zero, PC=0x2bcbfc04	@ goto .skip
0x2bcbfbf8	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbfc04) <<<<<<<<<
		.skip
          		@ Set up frame for synchronized method
0x2bcbfc04	28:	addiu	a1, JSP, -8	@ ARG2 = JSP - argsSize * 4
0x2bcbfc08	32:	addiu	a2, JSP, 4	@ NEW_JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbfc0c	36:	lui	t9, hi16(0x65)
0x2bcbfc10	40:	ori	t9, t9, lo16(0x65a430)	@ call CVMCCMinvokeNonstaticSyncMethodHelper CVMCCMinvokeNonstaticSyncMethodHelper
0x2bcbfc14	44:	jalr	t9
0x2bcbfc18	48:	nop
          		@ Interpreted -> compiled entry point
0x2bcbfc1c	52:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbfc20	56:	nop
0x2bcbfc24	60:	nop
0x2bcbfc28	64:	nop
			@ Initial Temp REF set is 
	L0:	68:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbfc2c	68:	lw	s4, -12(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbfc30	72:	lw	s5, -8(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=76
          		@ Do getfield:
0x2bcbfc34	76:	lw	s7, 12(s4)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbfc38	80:	lw	s6, 8(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcbfc3c	84:	lw	ra, 8(s6)	@ arraylength
0x2bcbfc40	88:	addiu	s6, s7, 1
0x2bcbfc44	92:	sw	s6, -4(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcbfc48	96:	slt	t7, ra, s6
0x2bcbfc4c	100:	beq	t7, zero, PC=0x2bcbfc48	@ branch to block L1
0x2bcbfc50	104:	nop
0x2bcbfc54	108:	sw	s4, 0(JSP)
0x2bcbfc58	112:	sw	s6, 4(JSP)
0x2bcbfc5c	116:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.expandCapacity(I)V
          		@ Invoke a method w/ a void return type
0x2bcbfc60	120:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbfc64	124:	jal	PC=(0x2bcb8f14)	@ call CVMCCMinvokeCNIMethod() for java.lang.StringBuffer.expandCapacity(I)V
0x2bcbfc68	128:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(0) reg(20): not in register
0x2bcbfc6c	132:	lw	s4, -12(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(21): not in register
0x2bcbfc70	136:	lw	s5, -8(JFP)	@ Java local cell # 1
			@ Initial Temp REF set is 
	L1:	140:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
--->Fixed instruction at 100(0x2bcbfc4c) to reference 140
          		@ MAP_PC idepth=0 javaPc=21 compiledPc=140
          		@ Do getfield:
0x2bcbfc74	140:	lw	s7, 8(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcbfc78	144:	lw	s6, 12(s4)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcbfc7c	148:	addiu	ra, s6, 1
          		@ Do putfield:
0x2bcbfc80	152:	sw	ra, 12(s4)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcbfc84	156:	lw	ra, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcbfc88	160:	sltu	t7, s6, ra
0x2bcbfc8c	164:	bne	t7, zero, PC=0x2bcbfc88	@ br .skip
0x2bcbfc90	168:	nop
0x2bcbfc94	172:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcbfc98	176:	nop
		.skip
--->Fixed instruction at 164(0x2bcbfc8c) to reference 180
          		@ Do store(arrayObj, index) (elem type=C):
0x2bcbfc9c	180:	sll	ra, s6, 1
0x2bcbfca0	184:	addu	ra, s7, ra
0x2bcbfca4	188:	sh	s5, 12(ra)
0x2bcbfca8	192:	sw	s4, -12(JFP)	@ Java local cell # 0
0x2bcbfcac	196:	addiu	JSP, JFP, -8
0x2bcbfcb0	200:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbfcb4	204:	b	PC=0x2bcb91ac	@ goto CVMCCMreturnFromSyncMethod
0x2bcbfcb8	208:	nop
0x2bcbfcbc	212:	.word	9109248	@ mb java.lang.StringBuffer.expandCapacity(I)V
--->Fixed instruction at 116(0x2bcbfc5c) to reference 212
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbfbe8) >>>>>>>>
          		@ Capacity is 16 word(s)
0x2bcbfbe8	0:	addiu	a1, JSP, 56
<<<<<<<<<Pop Code Buffer to PC = 216 (0x2bcbfcc0) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 52 (0x2bcbfc1c) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbfc1c	52:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbfc20	56:	lui	CP, hi16(0x2bcb)
0x2bcbfc24	60:	ori	CP, CP, lo16(0x2bcbfcbc)
0x2bcbfc28	64:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 216 (0x2bcbfcc0) <<<<<<<<<
JS: COMPILED: size=284 startPC=0x2bcbfbe8 java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.WPossMoves.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V
JS: COMPILING com.sun.mep.bench.Chess.WPossMoves.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V
orig bkID(0) Incoming Locals(3 0x0): 0- 1- 2- 
orig bkID(0) Incoming Locals(3 0x0): 0- 1- 2- 

#################################################

The maximum node counts per root node are 4
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 7 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.WPossMoves.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V(WPossMoves.java:46)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<0>  (0x94dca0):    aload_0 
<1>  (0x94dca1):    invokeignored_quick 
<4>  (0x94dca4):    aload_0 
<5>  (0x94dca5):    aload_1 
<6>  (0x94dca6):    aputfield_quick #4
<9>  (0x94dca9):    aload_0 
<10>  (0x94dcaa):    aload_2 
<11>  (0x94dcab):    aputfield_quick #3
<14>  (0x94dcae):    aload_0 
<15>  (0x94dcaf):    new_quick #4 <java.util.Vector>
<18>  (0x94dcb2):    dup 
<19>  (0x94dcb3):    invokenonvirtual_quick #5 <java.util.Vector.<init>()V>
<22>  (0x94dcb6):    aputfield_quick #2
<25>  (0x94dcb9):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(3): 
	local(0)	ID(2)
 	local(1)	ID(3)
 	local(2)	ID(7)
 
Incoming Locals(3): 
	local(0)	ID(2)
 	local(1)	ID(3)
 	local(2)	ID(7)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 6) ASSIGN (reference) 
      <(ID: 5) FIELD_REF (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 3)
            <(ID: 11) LOCAL (reference)   0>
         <(ID: 4) CONST_FIELD_OFFSET (NONE)  (4)
      <(ID: 3) LOCAL (reference)   1>

   <(ID: 10) ASSIGN (reference) 
      <(ID: 9) FIELD_REF (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 3)
         <(ID: 8) CONST_FIELD_OFFSET (NONE)  (3)
      <(ID: 7) LOCAL (reference)   2>

   <(ID: 13) IDENTITY (reference)  (ref count: 3)
      <(ID: 18) NEW_OBJECT (reference) 
         <(ID: 12) CONST_CB (address field)  (java.util.Vector)

   <(ID: 17) INVOKE (v) 
      <(ID: 16) PARAMETER (reference) 
         <(ID: 13) IDENTITY (reference)  (ref count: 3)
         <(ID: 15) NULL_PARAMETER (NONE) 
      <(ID: 14) CONST_MB (address field)  (java.util.Vector.<init>()V)

   <(ID: 21) ASSIGN (reference) 
      <(ID: 20) FIELD_REF (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 3)
         <(ID: 19) CONST_FIELD_OFFSET (NONE)  (2)
      <(ID: 13) IDENTITY (reference)  (ref count: 3)

   <(ID: 22) RETURN (v) 


NUM BARRIER BYTES = 48
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 164
ESTIMATED BUFFER SIZE = 316
CODE BUFFER ADDRESS = 0x2bcbfcd0
PC MAP TABLE ADDRESS = 0x2bcbfcd8
CODE ENTRY ADDRESS = 0x2bcbfd00
          		@ Method prologue
0x2bcbfd00	0:	addiu	a1, JSP, 44	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbfd04	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbfd08	8:	sltu	t7, a1, CHUNKEND
0x2bcbfd0c	12:	bne	t7, zero, PC=0x2bcbfd00	@ goto .skip
0x2bcbfd10	16:	nop
0x2bcbfd14	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbfd18	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbfd0c) >>>>>>>>
0x2bcbfd0c	12:	bne	t7, zero, PC=0x2bcbfd1c	@ goto .skip
0x2bcbfd10	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbfd1c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbfd1c	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbfd20	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbfd24	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbfd28	40:	addiu	a3, zero, 0
0x2bcbfd2c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbfd30	48:	addiu	a3, zero, -1
0x2bcbfd34	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbfd38	56:	move	a0, EE
0x2bcbfd3c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbfd40	64:	lui	t9, hi16(0x65)
0x2bcbfd44	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbfd48	72:	jalr	t9
0x2bcbfd4c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbfd50	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbfd54	84:	nop
0x2bcbfd58	88:	nop
0x2bcbfd5c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbfd60	96:	lw	s4, -12(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbfd64	100:	lw	s5, -8(JFP)	@ Java local cell # 1
			@ Preloading incoming local(2) reg(22)
0x2bcbfd68	104:	lw	s6, -4(JFP)	@ Java local cell # 2
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=108
          		@ Do putfield:
0x2bcbfd6c	108:	addiu	s7, s4, 16	@ fieldAddr = obj + fieldOffset;
0x2bcbfd70	112:	sw	s5, 0(s7)	@ putfield(fieldAddr, valueObj);
0x2bcbfd74	116:	lw	ra, 0(CP)	@ cardTableVirtualBase
0x2bcbfd78	120:	addiu	t9, zero, 1	@ CARD_DIRTY_BYTE
0x2bcbfd7c	124:	srl	t7, s7, 9	@ mark card table
0x2bcbfd80	128:	addu	t7, ra, t7	@ add indexReg and baseReg
0x2bcbfd84	132:	sb	t9, 0(t7)
          		@ Do putfield:
0x2bcbfd88	136:	addiu	s7, s4, 12	@ fieldAddr = obj + fieldOffset;
0x2bcbfd8c	140:	sw	s6, 0(s7)	@ putfield(fieldAddr, valueObj);
0x2bcbfd90	144:	srl	t7, s7, 9	@ mark card table
0x2bcbfd94	148:	addu	t7, ra, t7	@ add indexReg and baseReg
0x2bcbfd98	152:	sb	t9, 0(t7)
0x2bcbfd9c	156:	lw	a1, 0(CP)	@ cb java.util.Vector
          		@ Do new:
          		@ cb: java.util.Vector
0x2bcbfda0	160:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcbfda4	164:	nop
          		@ Captured a stackmap here.
0x2bcbfda8	168:	sw	v0, 0(JSP)
0x2bcbfdac	172:	lw	a0, 0(CP)	@ mb java.util.Vector.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcbfdb0	176:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcbfdb4	180:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcbfdb8	184:	lw	s7, 0(a0)	@ call method through mb
0x2bcbfdbc	188:	jalr	s7
0x2bcbfdc0	192:	nop
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcbfdc4	196:	lw	s7, -12(JFP)	@ Java local cell # 0
0x2bcbfdc8	200:	addiu	s6, s7, 8	@ fieldAddr = obj + fieldOffset;
0x2bcbfdcc	204:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcbfdd0	208:	sw	s5, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcbfdd4	212:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcbfdd8	216:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcbfddc	220:	srl	t7, s6, 9	@ mark card table
0x2bcbfde0	224:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcbfde4	228:	sb	ra, 0(t7)
0x2bcbfde8	232:	addiu	JSP, JFP, -12
0x2bcbfdec	236:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbfdf0	240:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbfdf4	244:	nop
0x2bcbfdf8	248:	.word	9094284	@ mb java.util.Vector.<init>()V
--->Fixed instruction at 172(0x2bcbfdac) to reference 248
0x2bcbfdfc	252:	.word	8629924	@ cb java.util.Vector
--->Fixed instruction at 156(0x2bcbfd9c) to reference 252
0x2bcbfe00	256:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 212(0x2bcbfdd4) to reference 256
--->Fixed instruction at 116(0x2bcbfd74) to reference 256
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbfd00) >>>>>>>>
          		@ Capacity is 15 word(s)
0x2bcbfd00	0:	addiu	a1, JSP, 48
<<<<<<<<<Pop Code Buffer to PC = 260 (0x2bcbfe04) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbfd50) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcbfd50	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcbfd54	84:	lui	CP, hi16(0x2bcb)
0x2bcbfd58	88:	ori	CP, CP, lo16(0x2bcbfdf8)
0x2bcbfd5c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 260 (0x2bcbfe04) <<<<<<<<<
JS: COMPILED: size=328 startPC=0x2bcbfd00 com.sun.mep.bench.Chess.WPossMoves.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V
JS: ATTEMPTING TO COMPILE java.util.Vector.<init>(I)V
JS: COMPILING java.util.Vector.<init>(I)V
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 

#################################################

The maximum node counts per root node are 5
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 3 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.util.Vector.<init>(I)V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x6e6164):    aload_0 
<1>  (0x6e6165):    iload_1 
<2>  (0x6e6166):    iconst_0 
<3>  (0x6e6167):    invokenonvirtual_quick #7111 <java.util.Vector.<init>(II)V>
<6>  (0x6e616a):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 10) INVOKE (v) 
      <(ID: 9) PARAMETER (reference) 
         <(ID: 2) LOCAL (reference)   0>
         <(ID: 8) PARAMETER (int) 
            <(ID: 3) LOCAL (int)   1>
            <(ID: 7) PARAMETER (int) 
               <(ID: 4) CONST_JAVA_NUMERIC32 (int)  (0)
               <(ID: 6) NULL_PARAMETER (NONE) 
      <(ID: 5) CONST_MB (address field)  (java.util.Vector.<init>(II)V)

   <(ID: 11) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 50
ESTIMATED BUFFER SIZE = 156
CODE BUFFER ADDRESS = 0x2bcbfe18
PC MAP TABLE ADDRESS = 0x2bcbfe20
CODE ENTRY ADDRESS = 0x2bcbfe48
          		@ Method prologue
0x2bcbfe48	0:	addiu	a1, JSP, 44	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbfe4c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbfe50	8:	sltu	t7, a1, CHUNKEND
0x2bcbfe54	12:	bne	t7, zero, PC=0x2bcbfe48	@ goto .skip
0x2bcbfe58	16:	nop
0x2bcbfe5c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbfe60	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbfe54) >>>>>>>>
0x2bcbfe54	12:	bne	t7, zero, PC=0x2bcbfe64	@ goto .skip
0x2bcbfe58	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbfe64) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbfe64	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcbfe68	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbfe6c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbfe70	40:	addiu	a3, zero, 0
0x2bcbfe74	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbfe78	48:	addiu	a3, zero, -1
0x2bcbfe7c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbfe80	56:	move	a0, EE
0x2bcbfe84	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbfe88	64:	lui	t9, hi16(0x65)
0x2bcbfe8c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbfe90	72:	jalr	t9
0x2bcbfe94	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbfe98	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbfe9c	84:	nop
0x2bcbfea0	88:	nop
0x2bcbfea4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbfea8	96:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcbfeac	100:	lw	s5, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
0x2bcbfeb0	104:	sw	s4, 0(JSP)
0x2bcbfeb4	108:	sw	s5, 4(JSP)
0x2bcbfeb8	112:	sw	zero, 8(JSP)
0x2bcbfebc	116:	lw	a0, 0(CP)	@ mb java.util.Vector.<init>(II)V
          		@ Invoke a method w/ a void return type
0x2bcbfec0	120:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcbfec4	124:	lw	s7, 0(a0)	@ call method through mb
0x2bcbfec8	128:	jalr	s7
0x2bcbfecc	132:	nop
          		@ Captured a stackmap here.
0x2bcbfed0	136:	addiu	JSP, JFP, -8
0x2bcbfed4	140:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbfed8	144:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbfedc	148:	nop
0x2bcbfee0	152:	.word	9094228	@ mb java.util.Vector.<init>(II)V
--->Fixed instruction at 116(0x2bcbfebc) to reference 152
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbfe48) >>>>>>>>
          		@ Capacity is 13 word(s)
0x2bcbfe48	0:	addiu	a1, JSP, 44
<<<<<<<<<Pop Code Buffer to PC = 156 (0x2bcbfee4) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbfe98) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbfe98	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbfe9c	84:	lui	CP, hi16(0x2bcb)
0x2bcbfea0	88:	ori	CP, CP, lo16(0x2bcbfee0)
0x2bcbfea4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 156 (0x2bcbfee4) <<<<<<<<<
JS: COMPILED: size=220 startPC=0x2bcbfe48 java.util.Vector.<init>(I)V
JS: ATTEMPTING TO COMPILE java.util.Vector.<init>()V
JS: COMPILING java.util.Vector.<init>()V
orig bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(1 0x0): 0- 

#################################################

The maximum node counts per root node are 4
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 3 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.util.Vector.<init>()V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x6e6198):    aload_0 
<1>  (0x6e6199):    bipush 10
<3>  (0x6e619b):    invokenonvirtual_quick #4630 <java.util.Vector.<init>(I)V>
<6>  (0x6e619e):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(1): 
	local(0)	ID(2)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 8) INVOKE (v) 
      <(ID: 7) PARAMETER (reference) 
         <(ID: 2) LOCAL (reference)   0>
         <(ID: 6) PARAMETER (int) 
            <(ID: 3) CONST_JAVA_NUMERIC32 (int)  (10)
            <(ID: 5) NULL_PARAMETER (NONE) 
      <(ID: 4) CONST_MB (address field)  (java.util.Vector.<init>(I)V)

   <(ID: 9) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 50
ESTIMATED BUFFER SIZE = 156
CODE BUFFER ADDRESS = 0x2bcbfef4
PC MAP TABLE ADDRESS = 0x2bcbfefc
CODE ENTRY ADDRESS = 0x2bcbff20
          		@ Method prologue
0x2bcbff20	0:	addiu	a1, JSP, 44	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcbff24	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcbff28	8:	sltu	t7, a1, CHUNKEND
0x2bcbff2c	12:	bne	t7, zero, PC=0x2bcbff20	@ goto .skip
0x2bcbff30	16:	nop
0x2bcbff34	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcbff38	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcbff2c) >>>>>>>>
0x2bcbff2c	12:	bne	t7, zero, PC=0x2bcbff3c	@ goto .skip
0x2bcbff30	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcbff3c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcbff3c	28:	sw	JFP, 4(JSP)	@ Store curr JFP into new frame
0x2bcbff40	32:	addiu	JFP, JSP, 4	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcbff44	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcbff48	40:	addiu	a3, zero, 0
0x2bcbff4c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcbff50	48:	addiu	a3, zero, -1
0x2bcbff54	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcbff58	56:	move	a0, EE
0x2bcbff5c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcbff60	64:	lui	t9, hi16(0x65)
0x2bcbff64	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcbff68	72:	jalr	t9
0x2bcbff6c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcbff70	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcbff74	84:	nop
0x2bcbff78	88:	nop
0x2bcbff7c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcbff80	96:	lw	s4, -8(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
0x2bcbff84	100:	sw	s4, 0(JSP)
0x2bcbff88	104:	addiu	s7, zero, 10	@ const 10
0x2bcbff8c	108:	sw	s7, 4(JSP)
0x2bcbff90	112:	lw	a0, 0(CP)	@ mb java.util.Vector.<init>(I)V
          		@ Invoke a method w/ a void return type
0x2bcbff94	116:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcbff98	120:	lw	s7, 0(a0)	@ call method through mb
0x2bcbff9c	124:	jalr	s7
0x2bcbffa0	128:	nop
          		@ Captured a stackmap here.
0x2bcbffa4	132:	addiu	JSP, JFP, -8
0x2bcbffa8	136:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcbffac	140:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcbffb0	144:	nop
0x2bcbffb4	148:	.word	9094256	@ mb java.util.Vector.<init>(I)V
--->Fixed instruction at 112(0x2bcbff90) to reference 148
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcbff20) >>>>>>>>
          		@ Capacity is 12 word(s)
0x2bcbff20	0:	addiu	a1, JSP, 44
<<<<<<<<<Pop Code Buffer to PC = 152 (0x2bcbffb8) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcbff70) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcbff70	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcbff74	84:	lui	CP, hi16(0x2bcb)
0x2bcbff78	88:	ori	CP, CP, lo16(0x2bcbffb4)
0x2bcbff7c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 152 (0x2bcbffb8) <<<<<<<<<
JS: COMPILED: size=212 startPC=0x2bcbff20 java.util.Vector.<init>()V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.ActorManager.actorsOverlapped(Lcom/sun/mep/bench/Chess/Rectangle;)Ljava/util/Vector;
JS: COMPILING com.sun.mep.bench.Chess.ActorManager.actorsOverlapped(Lcom/sun/mep/bench/Chess/Rectangle;)Ljava/util/Vector;
orig bkID(1) Incoming Locals(2 0x0): 3- 0- 
o1   bkID(1) Incoming Locals(2 0x0): 3- 0- 
orig bkID(3) Incoming Locals(1 0x0): 3- 
o1   bkID(3) Incoming Locals(1 0x0): 3- 
s1   bkID(3) Incoming Locals(2 0x0): 3- 0- 
o1   bkID(3) Incoming Locals(2 0x0): 3- 0- 
orig bkID(2) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 3- 
orig bkID(1) Incoming Locals(2 0x0): 3- 0- 
o1   bkID(1) Incoming Locals(2 0x0): 3- 0- 
orig bkID(3) Incoming Locals(2 0x0): 3- 0- 
o1   bkID(3) Incoming Locals(1 0x0): 3- 
s1   bkID(3) Incoming Locals(2 0x0): 3- 0- 
o1   bkID(3) Incoming Locals(2 0x0): 3- 0- 
orig bkID(2) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 3- 
Pushing blockID(2)
bkID(3) local(0 #3)  not ordered
bestLocal(0) bestLocalScore(24)
-bk  bkID(3) Incoming Locals(2 0x0): 3- 0- 
+bk  bkID(3) Incoming Locals(2 0x1): 3+ 0- 
-gbk bkID(2) Incoming Locals(2 0x0): 0- 3- 
+gbk bkID(2) Incoming Locals(2 0x1): 3+ 0- 
-gbk bkID(1) Incoming Locals(2 0x0): 3- 0- 
+gbk bkID(1) Incoming Locals(2 0x1): 3+ 0- 
bkID(3) local(0 #3)  ordered in goalBk(1)
-bk  bkID(3) Incoming Locals(2 0x1): 3+ 0- 
dstBk(3) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(3) Incoming Locals(2 0x1): 3+ 0- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x1): 3+ 0- 
dstBk(2) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(2) Incoming Locals(2 0x1): 3+ 0- 
-gbk bkID(1) Incoming Locals(2 0x1): 3+ 0- 
dstBk(1) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(1) Incoming Locals(2 0x1): 3+ 0- 
bkID(3) local(1 #0)  not ordered
bestLocal(1) bestLocalScore(24)
-bk  bkID(3) Incoming Locals(2 0x1): 3+ 0- 
+bk  bkID(3) Incoming Locals(2 0x3): 3+ 0+ 
-gbk bkID(2) Incoming Locals(2 0x1): 3+ 0- 
+gbk bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
-gbk bkID(1) Incoming Locals(2 0x1): 3+ 0- 
+gbk bkID(1) Incoming Locals(2 0x3): 3+ 0+ 
bkID(3) local(1 #0)  ordered in goalBk(1)
-bk  bkID(3) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(3) Incoming Locals(2 0x3): 3+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
-gbk bkID(1) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 3+ 0+ 
bkID(3) local(0 #3)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(3) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(3) Incoming Locals(2 0x3): 3+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(2) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
bkID(3) local(1 #0)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(3) Incoming Locals(2 0x3): 3+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
bkID(2) local(0 #3)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(2) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(1) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 3+ 0+ 
bkID(2) local(1 #0)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 3+ 0+ 
bkID(2) local(0 #3)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(2) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(2) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
bkID(2) local(1 #0)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 3+ 0+ 
Popping blockID(2)

#################################################

The maximum node counts per root node are 12
IR block list contains 4 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 6 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.ActorManager.actorsOverlapped(Lcom/sun/mep/bench/Chess/Rectangle;)Ljava/util/Vector;(ActorManager.java:214)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<0>  (0x93a29c):    new_quick #2 <java.util.Vector>
<3>  (0x93a29f):    dup 
<4>  (0x93a2a0):    invokenonvirtual_quick #3 <java.util.Vector.<init>()V>
<7>  (0x93a2a3):    astore_2 
<8>  (0x93a2a4):    iconst_0 
<9>  (0x93a2a5):    istore_3 
<10>  (0x93a2a6):    goto <47>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Assigned Locals(2): 
	ASSIGN(11): local(2)	ID(10)	rhsID(3)
 	ASSIGN(13): local(3)	ID(12)	rhsID(9)
 
Successor Blocks(1): 
	ID(1) LocalOrder(0) AssignOrder(2) RefsOK(0) Locals(3 0)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 3) IDENTITY (reference)  (ref count: 3)
      <(ID: 8) NEW_OBJECT (reference) 
         <(ID: 2) CONST_CB (address field)  (java.util.Vector)

   <(ID: 7) INVOKE (v) 
      <(ID: 6) PARAMETER (reference) 
         <(ID: 3) IDENTITY (reference)  (ref count: 3)
         <(ID: 5) NULL_PARAMETER (NONE) 
      <(ID: 4) CONST_MB (address field)  (java.util.Vector.<init>()V)

   <(ID: 11) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 10) LOCAL (reference)   2>
      <(ID: 3) IDENTITY (reference)  (ref count: 3)

   <(ID: 13) ASSIGN (int)  (assignIdx: 1)
      <(ID: 12) LOCAL (int)   3>
      <(ID: 9) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 14) GOTO (NONE) 
   target: (BlockID: 1 BlockPC: 47)


*************************************************
*
* (block ID:2 block PC:13 )
* IR root list contains 7 root nodes: in block 
* flags: 0x361
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.ActorManager.actorsOverlapped(Lcom/sun/mep/bench/Chess/Rectangle;)Ljava/util/Vector;(ActorManager.java:217)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<13>  (0x93a2a9):    aload_0 
<14>  (0x93a2aa):    agetfield_quick #3
<17>  (0x93a2ad):    iload_3 
<18>  (0x93a2ae):    invokevirtual_quick_w #12 <java.util.Vector.elementAt(I)Ljava/lang/Object;>
<21>  (0x93a2b1):    checkcast_quick #13 <com.sun.mep.bench.Chess.Actor>
<24>  (0x93a2b4):    astore 4
<26>  (0x93a2b6):    aload_1 
<27>  (0x93a2b7):    aload 4
<29>  (0x93a2b9):    invokevirtual_quick_w #23 <com.sun.mep.bench.Chess.Actor.getBoundingBox()Lcom/sun/mep/bench/Chess/Rectangle;>
<32>  (0x93a2bc):    invokevirtual_quick_w #24 <com.sun.mep.bench.Chess.Rectangle.intersects(Lcom/sun/mep/bench/Chess/Rectangle;)Z>
<35>  (0x93a2bf):    ifeq <44>
<38>  (0x93a2c2):    aload_2 
<39>  (0x93a2c3):    aload 4
<41>  (0x93a2c5):    invokevirtual #10 <java.util.Vector.addElement(Ljava/lang/Object;)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(33)
 	local(3)	ID(37)
 
Incoming Locals(2): 
	local(3)	ID(37)
 	local(0)	ID(33)
 
Assigned Locals(1): 
	ASSIGN(67): local(4)	ID(66)	rhsID(46)
 
Successor Blocks(1): 
	ID(3) LocalOrder(2) AssignOrder(1) RefsOK(0) Locals(3 0)

   <(ID: 32) MAP_PC (NONE)   13>

   <(ID: 36) IDENTITY (reference)  (ref count: 3)
      <(ID: 47) FETCH (reference) 
         <(ID: 35) FIELD_REF (reference) 
            <(ID: 33) LOCAL (reference)   0>
            <(ID: 34) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 46) IDENTITY (reference)  (ref count: 5)
      <(ID: 64) CHECKCAST (reference) 
         <(ID: 44) INVOKE (reference) 
            <(ID: 41) PARAMETER (reference) 
               <(ID: 36) IDENTITY (reference)  (ref count: 3)
               <(ID: 40) PARAMETER (int) 
                  <(ID: 37) LOCAL (int)   3>
                  <(ID: 39) NULL_PARAMETER (NONE) 
            <(ID: 43) FETCH_MB_FROM_VTABLE (address field) 
               <(ID: 42) GET_VTBL (NONE) 
                  <(ID: 36) IDENTITY (reference)  (ref count: 3)
               <(ID: 38) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 43)
         <(ID: 45) CONST_CB (address field)  (com.sun.mep.bench.Chess.Actor)

   <(ID: 61) IDENTITY (int)  (ref count: 2)
      <(ID: 68) INVOKE (int) 
         <(ID: 58) PARAMETER (reference) 
            <(ID: 48) IDENTITY (reference)  (ref count: 2)
               <(ID: 65) LOCAL (reference)   1>
            <(ID: 57) PARAMETER (reference) 
               <(ID: 54) INVOKE (reference) 
                  <(ID: 51) PARAMETER (reference) 
                     <(ID: 46) IDENTITY (reference)  (ref count: 5)
                     <(ID: 50) NULL_PARAMETER (NONE) 
                  <(ID: 53) FETCH_MB_FROM_VTABLE (address field) 
                     <(ID: 52) GET_VTBL (NONE) 
                        <(ID: 46) IDENTITY (reference)  (ref count: 5)
                     <(ID: 49) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)
               <(ID: 56) NULL_PARAMETER (NONE) 
         <(ID: 60) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 59) GET_VTBL (NONE) 
               <(ID: 48) IDENTITY (reference)  (ref count: 2)
            <(ID: 55) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 12)

   <(ID: 67) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 66) LOCAL (reference)   4>
      <(ID: 46) IDENTITY (reference)  (ref count: 5)

   <(ID: 63) BCOND (int) 
   target: (BlockID: 3 BlockPC: 44)
   condition: EQ
   flags: 0
      <(ID: 61) IDENTITY (int)  (ref count: 2)
      <(ID: 62) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 76) INVOKE (v) 
      <(ID: 73) PARAMETER (reference) 
         <(ID: 69) IDENTITY (reference)  (ref count: 2)
            <(ID: 77) LOCAL (reference)   2>
         <(ID: 72) PARAMETER (reference) 
            <(ID: 46) IDENTITY (reference)  (ref count: 5)
            <(ID: 71) NULL_PARAMETER (NONE) 
      <(ID: 75) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 74) GET_VTBL (NONE) 
            <(ID: 69) IDENTITY (reference)  (ref count: 2)
         <(ID: 70) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 49)


*************************************************
*
* (block ID:3 block PC:44 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.ActorManager.actorsOverlapped(Lcom/sun/mep/bench/Chess/Rectangle;)Ljava/util/Vector;(ActorManager.java:216)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<44>  (0x93a2c8):    iinc 3 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 4 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(3)	ID(79)
 
Incoming Locals(2): 
	local(3)	ID(79)
 	local(0)	ID(17)
 
Assigned Locals(1): 
	ASSIGN(83): local(3)	ID(82)	rhsID(81)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(3 0)

   <(ID: 78) MAP_PC (NONE)   44>

   <(ID: 79) IDENTITY (int)  (ref count: 2)
      <(ID: 84) LOCAL (int)   3>

   <(ID: 83) ASSIGN (int)  (assignIdx: 0)
      <(ID: 82) LOCAL (int)   3>
      <(ID: 81) ADD (int) 
         <(ID: 79) IDENTITY (int)  (ref count: 2)
         <(ID: 80) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:1 block PC:47 )
* IR root list contains 5 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.ActorManager.actorsOverlapped(Lcom/sun/mep/bench/Chess/Rectangle;)Ljava/util/Vector;(ActorManager.java:216)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<47>  (0x93a2cb):    iload_3 
<48>  (0x93a2cc):    aload_0 
<49>  (0x93a2cd):    agetfield_quick #3
<52>  (0x93a2d0):    invokevirtual_quick_w #16 <java.util.Vector.size()I>
<55>  (0x93a2d3):    if_icmplt <13>
<58>  (0x93a2d6):    aload_2 
<59>  (0x93a2d7):    areturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(3)	ID(16)
 	local(0)	ID(17)
 
Incoming Locals(2): 
	local(3)	ID(16)
 	local(0)	ID(17)
 
Successor Blocks(1): 
	ID(2) LocalOrder(2) AssignOrder(0) RefsOK(0) Locals(3 0)

   <(ID: 15) MAP_PC (NONE)   47>

   <(ID: 20) IDENTITY (reference)  (ref count: 3)
      <(ID: 28) FETCH (reference) 
         <(ID: 19) FIELD_REF (reference) 
            <(ID: 17) LOCAL (reference)   0>
            <(ID: 18) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 26) IDENTITY (int)  (ref count: 2)
      <(ID: 29) INVOKE (int) 
         <(ID: 23) PARAMETER (reference) 
            <(ID: 20) IDENTITY (reference)  (ref count: 3)
            <(ID: 22) NULL_PARAMETER (NONE) 
         <(ID: 25) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 24) GET_VTBL (NONE) 
               <(ID: 20) IDENTITY (reference)  (ref count: 3)
            <(ID: 21) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 12)

   <(ID: 27) BCOND (int) 
   target: (BlockID: 2 BlockPC: 13)
   condition: LT
   flags: 0
      <(ID: 16) LOCAL (int)   3>
      <(ID: 26) IDENTITY (int)  (ref count: 2)


   <(ID: 31) RETURN_VALUE (reference) 
      <(ID: 30) LOCAL (reference)   2>


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 160
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 368
ESTIMATED BUFFER SIZE = 660
CODE BUFFER ADDRESS = 0x2bcbffc8
PC MAP TABLE ADDRESS = 0x2bcbffd0
GC CHECK PCS ADDRESS = 0x2bcbffe4
CODE ENTRY ADDRESS = 0x2bcc0010
          		@ Method prologue
0x2bcc0010	0:	addiu	a1, JSP, 52	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc0014	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc0018	8:	sltu	t7, a1, CHUNKEND
0x2bcc001c	12:	bne	t7, zero, PC=0x2bcc0010	@ goto .skip
0x2bcc0020	16:	nop
0x2bcc0024	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc0028	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc001c) >>>>>>>>
0x2bcc001c	12:	bne	t7, zero, PC=0x2bcc002c	@ goto .skip
0x2bcc0020	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc002c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc002c	28:	sw	JFP, 12(JSP)	@ Store curr JFP into new frame
0x2bcc0030	32:	addiu	JFP, JSP, 12	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc0034	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc0038	40:	addiu	a3, zero, 0
0x2bcc003c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc0040	48:	addiu	a3, zero, -1
0x2bcc0044	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc0048	56:	move	a0, EE
0x2bcc004c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc0050	64:	lui	t9, hi16(0x65)
0x2bcc0054	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc0058	72:	jalr	t9
0x2bcc005c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc0060	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc0064	84:	nop
0x2bcc0068	88:	nop
0x2bcc006c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=96
0x2bcc0070	96:	lw	a1, 0(CP)	@ cb java.util.Vector
          		@ Do new:
          		@ cb: java.util.Vector
0x2bcc0074	100:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc0078	104:	nop
          		@ Captured a stackmap here.
0x2bcc007c	108:	sw	v0, 0(JSP)
0x2bcc0080	112:	lw	a0, 0(CP)	@ mb java.util.Vector.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc0084	116:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc0088	120:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc008c	124:	lw	s7, 0(a0)	@ call method through mb
0x2bcc0090	128:	jalr	s7
0x2bcc0094	132:	nop
          		@ Captured a stackmap here.
0x2bcc0098	136:	lw	s7, 28(JFP)	@ Java temp cell # 0
0x2bcc009c	140:	sw	s7, -12(JFP)	@ Java local cell # 2
0x2bcc00a0	144:	sw	zero, -8(JFP)	@ Java local cell # 3
			@ Outgoing local(3) reg(20): in wrong register
0x2bcc00a4	148:	move	s4, zero
			@ Outgoing local(0) reg(21): not in register
0x2bcc00a8	152:	lw	s5, -20(JFP)	@ Java local cell # 0
0x2bcc00ac	156:	b	PC=0x2bcc00ac	@ branch to block L1
0x2bcc00b0	160:	nop
			@ Initial Temp REF set is 
	L2:	164:	@ Patchable GC Check point
0x2bcc00b4	164:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcc00b4	164:	nop
0x2bcc00b8	168:	nop
          		@ Captured a stackmap here.
	L2:	172:	@ entry point when locals need to be loaded
			@ Preloading incoming local(3) reg(20)
0x2bcc00bc	172:	lw	s4, -8(JFP)	@ Java local cell # 3
			@ Preloading incoming local(0) reg(21)
0x2bcc00c0	176:	lw	s5, -20(JFP)	@ Java local cell # 0
	L2:	180:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=13 compiledPc=172
          		@ Do getfield:
0x2bcc00c4	180:	lw	s7, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc00c8	184:	sw	s7, 0(JSP)
0x2bcc00cc	188:	sw	s4, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc00d0	192:	lw	s6, 0(s7)	@ Get object.cb
0x2bcc00d4	196:	addiu	t7, zero, -4
0x2bcc00d8	200:	and	s6, s6, t7
0x2bcc00dc	204:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc00e0	208:	lw	a0, 172(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc00e4	212:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc00e8	216:	lw	s7, 0(a0)	@ call method through mb
0x2bcc00ec	220:	jalr	s7
0x2bcc00f0	224:	nop
          		@ Captured a stackmap here.
0x2bcc00f4	228:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc00f8	232:	lw	s7, 0(JSP)
0x2bcc00fc	236:	lw	a2, 0(CP)	@ cb com.sun.mep.bench.Chess.Actor
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcc0100	240:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcc0104	244:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcc0108	248:	nop
0x2bcc010c	252:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
0x2bcc0110	256:	lw	s6, -16(JFP)	@ Java local cell # 1
0x2bcc0114	260:	sw	s6, 0(JSP)
0x2bcc0118	264:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc011c	268:	lw	s5, 0(s7)	@ Get object.cb
0x2bcc0120	272:	addiu	t7, zero, -4
0x2bcc0124	276:	and	s5, s5, t7
0x2bcc0128	280:	lw	s5, 76(s5)	@ Get cb.vtbl
0x2bcc012c	284:	lw	a0, 68(s5)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc0130	288:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc0134	292:	sw	s7, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc0138	296:	lw	s7, 0(a0)	@ call method through mb
0x2bcc013c	300:	jalr	s7
0x2bcc0140	304:	nop
          		@ Captured a stackmap here.
          		@ Fetch mb from vtable:
0x2bcc0144	308:	lw	s6, -16(JFP)	@ Java local cell # 1
0x2bcc0148	312:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc014c	316:	addiu	t7, zero, -4
0x2bcc0150	320:	and	s7, s7, t7
0x2bcc0154	324:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc0158	328:	lw	a0, 48(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc015c	332:	lw	s7, 0(a0)	@ call method through mb
0x2bcc0160	336:	jalr	s7
0x2bcc0164	340:	nop
          		@ Captured a stackmap here.
0x2bcc0168	344:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc016c	348:	lw	s7, 0(JSP)
0x2bcc0170	352:	lw	s6, 28(JFP)	@ Java temp cell # 0
0x2bcc0174	356:	sw	s6, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(3) reg(20): not in register
0x2bcc0178	360:	lw	s4, -8(JFP)	@ Java local cell # 3
			@ Outgoing local(0) reg(21): not in register
0x2bcc017c	364:	lw	s5, -20(JFP)	@ Java local cell # 0
          		@ deferred comparison: 
0x2bcc0180	368:	beq	s7, zero, PC=0x2bcc0180	@ branch to block L3
0x2bcc0184	372:	nop
0x2bcc0188	376:	lw	s7, -12(JFP)	@ Java local cell # 2
0x2bcc018c	380:	sw	s7, 0(JSP)
0x2bcc0190	384:	sw	s6, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc0194	388:	lw	ra, 0(s7)	@ Get object.cb
0x2bcc0198	392:	addiu	t7, zero, -4
0x2bcc019c	396:	and	ra, ra, t7
0x2bcc01a0	400:	lw	ra, 76(ra)	@ Get cb.vtbl
0x2bcc01a4	404:	lw	a0, 196(ra)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc01a8	408:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc01ac	412:	lw	s7, 0(a0)	@ call method through mb
0x2bcc01b0	416:	jalr	s7
0x2bcc01b4	420:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(3) reg(20): not in register
0x2bcc01b8	424:	lw	s4, -8(JFP)	@ Java local cell # 3
			@ Outgoing local(0) reg(21): not in register
0x2bcc01bc	428:	lw	s5, -20(JFP)	@ Java local cell # 0
			@ Initial Temp REF set is 
	L3:	432:	@ entry point for branches
			@ Binding Incoming Local(3) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 368(0x2bcc0180) to reference 432
          		@ MAP_PC idepth=0 javaPc=44 compiledPc=432
0x2bcc01c0	432:	addiu	s4, s4, 1
0x2bcc01c4	436:	sw	s4, -8(JFP)	@ Java local cell # 3
			@ Outgoing local(3) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Initial Temp REF set is 
	L1:	440:	@ entry point for branches
			@ Binding Incoming Local(3) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 156(0x2bcc00ac) to reference 440
          		@ MAP_PC idepth=0 javaPc=47 compiledPc=440
          		@ Do getfield:
0x2bcc01c8	440:	lw	s7, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc01cc	444:	sw	s7, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc01d0	448:	lw	s6, 0(s7)	@ Get object.cb
0x2bcc01d4	452:	addiu	t7, zero, -4
0x2bcc01d8	456:	and	s6, s6, t7
0x2bcc01dc	460:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc01e0	464:	lw	a0, 48(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc01e4	468:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc01e8	472:	lw	s7, 0(a0)	@ call method through mb
0x2bcc01ec	476:	jalr	s7
0x2bcc01f0	480:	nop
          		@ Captured a stackmap here.
0x2bcc01f4	484:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc01f8	488:	lw	s7, 0(JSP)
			@ Outgoing local(3) reg(20): not in register
0x2bcc01fc	492:	lw	s4, -8(JFP)	@ Java local cell # 3
			@ Outgoing local(0) reg(21): not in register
0x2bcc0200	496:	lw	s5, -20(JFP)	@ Java local cell # 0
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcc0204	500:	slt	t7, s4, s7
0x2bcc0208	504:	bne	t7, zero, PC=0x2bcc00b4	@ branch to block L2
0x2bcc020c	508:	nop
0x2bcc0204	500:	slt	t7, s4, s7
0x2bcc0208	504:	bne	t7, zero, PC=0x2bcc00c4	@ branch to block L2, skip GC
0x2bcc020c	508:	nop
0x2bcc0210	512:	lw	ra, -12(JFP)	@ Java local cell # 2
0x2bcc0214	516:	sw	ra, -20(JFP)	@ Java local cell # 0
0x2bcc0218	520:	addiu	JSP, JFP, -16
0x2bcc021c	524:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc0220	528:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc0224	532:	nop
0x2bcc0228	536:	.word	9786824	@ cb com.sun.mep.bench.Chess.Actor
--->Fixed instruction at 236(0x2bcc00fc) to reference 536
0x2bcc022c	540:	.word	9094284	@ mb java.util.Vector.<init>()V
--->Fixed instruction at 112(0x2bcc0080) to reference 540
0x2bcc0230	544:	.word	8629924	@ cb java.util.Vector
--->Fixed instruction at 96(0x2bcc0070) to reference 544
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc0010) >>>>>>>>
          		@ Capacity is 16 word(s)
0x2bcc0010	0:	addiu	a1, JSP, 56
<<<<<<<<<Pop Code Buffer to PC = 548 (0x2bcc0234) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc0060) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcc0060	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcc0064	84:	lui	CP, hi16(0x2bcc)
0x2bcc0068	88:	ori	CP, CP, lo16(0x2bcc0228)
0x2bcc006c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 548 (0x2bcc0234) <<<<<<<<<
JS: COMPILED: size=684 startPC=0x2bcc0010 com.sun.mep.bench.Chess.ActorManager.actorsOverlapped(Lcom/sun/mep/bench/Chess/Rectangle;)Ljava/util/Vector;
OSR: Intr2Comp: com.sun.mep.bench.Chess.ActorManager.actorsOverlapped(Lcom/sun/mep/bench/Chess/Rectangle;)Ljava/util/Vector;
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.ActorManager.sortByZOrder()V
JS: COMPILING com.sun.mep.bench.Chess.ActorManager.sortByZOrder()V
orig bkID(1) Incoming Locals(2 0x0): 2- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 2- 1- 
s1   bkID(1) Incoming Locals(3 0x0): 2- 1- 0- 
s1   bkID(1) Incoming Locals(3 0x0): 2- 1- 0- 
o1   bkID(1) Incoming Locals(3 0x0): 2- 1- 0- 
orig bkID(6) Incoming Locals(1 0x0): 2- 
o1   bkID(6) Incoming Locals(1 0x0): 2- 
s1   bkID(6) Incoming Locals(2 0x0): 2- 1- 
s1   bkID(6) Incoming Locals(3 0x0): 2- 1- 0- 
o1   bkID(6) Incoming Locals(3 0x0): 2- 1- 0- 
orig bkID(5) Incoming Locals(4 0x0): 2- 4- 0- 3- 
o1   bkID(5) Incoming Locals(2 0x0): 2- 4- 
s1   bkID(5) Incoming Locals(2 0x0): 2- 4- 
s1   bkID(5) Incoming Locals(3 0x0): 2- 4- 1- 
s1   bkID(5) Incoming Locals(4 0x0): 2- 4- 1- 0- 
o1   bkID(5) Incoming Locals(5 0x0): 2- 4- 1- 0- 3- 
orig bkID(3) Incoming Locals(1 0x0): 4- 
o1   bkID(3) Incoming Locals(1 0x0): 4- 
s1   bkID(3) Incoming Locals(2 0x0): 4- 0- 
s1   bkID(3) Incoming Locals(2 0x0): 4- 0- 
o1   bkID(3) Incoming Locals(2 0x0): 4- 0- 
s1   bkID(3) Incoming Locals(3 0x0): 4- 0- 2- 
s1   bkID(3) Incoming Locals(3 0x0): 4- 0- 2- 
s1   bkID(3) Incoming Locals(4 0x0): 4- 0- 2- 1- 
s1   bkID(3) Incoming Locals(4 0x0): 4- 0- 2- 1- 
s1   bkID(3) Incoming Locals(5 0x0): 4- 0- 2- 1- 3- 
o1   bkID(3) Incoming Locals(5 0x0): 4- 0- 2- 1- 3- 
orig bkID(4) Incoming Locals(2 0x0): 0- 4- 
o1   bkID(4) Incoming Locals(2 0x0): 0- 4- 
orig bkID(2) Incoming Locals(2 0x0): 0- 2- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 2- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(1) Incoming Locals(3 0x0): 2- 1- 0- 
o1   bkID(1) Incoming Locals(2 0x0): 2- 1- 
s1   bkID(1) Incoming Locals(3 0x0): 2- 1- 0- 
s1   bkID(1) Incoming Locals(3 0x0): 2- 1- 0- 
o1   bkID(1) Incoming Locals(3 0x0): 2- 1- 0- 
orig bkID(6) Incoming Locals(3 0x0): 2- 1- 0- 
o1   bkID(6) Incoming Locals(1 0x0): 2- 
s1   bkID(6) Incoming Locals(2 0x0): 2- 1- 
s1   bkID(6) Incoming Locals(3 0x0): 2- 1- 0- 
o1   bkID(6) Incoming Locals(3 0x0): 2- 1- 0- 
orig bkID(5) Incoming Locals(5 0x0): 2- 4- 1- 0- 3- 
o1   bkID(5) Incoming Locals(2 0x0): 2- 4- 
s1   bkID(5) Incoming Locals(2 0x0): 2- 4- 
s1   bkID(5) Incoming Locals(3 0x0): 2- 4- 1- 
s1   bkID(5) Incoming Locals(4 0x0): 2- 4- 1- 0- 
o1   bkID(5) Incoming Locals(5 0x0): 2- 4- 1- 0- 3- 
orig bkID(3) Incoming Locals(5 0x0): 4- 0- 2- 1- 3- 
o1   bkID(3) Incoming Locals(1 0x0): 4- 
s1   bkID(3) Incoming Locals(2 0x0): 4- 0- 
s1   bkID(3) Incoming Locals(2 0x0): 4- 0- 
o1   bkID(3) Incoming Locals(2 0x0): 4- 0- 
s1   bkID(3) Incoming Locals(3 0x0): 4- 0- 2- 
s1   bkID(3) Incoming Locals(3 0x0): 4- 0- 2- 
s1   bkID(3) Incoming Locals(4 0x0): 4- 0- 2- 1- 
s1   bkID(3) Incoming Locals(4 0x0): 4- 0- 2- 1- 
s1   bkID(3) Incoming Locals(5 0x0): 4- 0- 2- 1- 3- 
o1   bkID(3) Incoming Locals(5 0x0): 4- 0- 2- 1- 3- 
orig bkID(4) Incoming Locals(2 0x0): 0- 4- 
o1   bkID(4) Incoming Locals(2 0x0): 0- 4- 
orig bkID(2) Incoming Locals(2 0x0): 0- 2- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 2- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
bkID(1) local(0 #2)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(1) Incoming Locals(3 0x0): 2- 1- 0- 
+bk  bkID(1) Incoming Locals(3 0x1): 2+ 1- 0- 
-gbk bkID(2) Incoming Locals(2 0x0): 0- 2- 
+gbk bkID(2) Incoming Locals(2 0x1): 2+ 0- 
bkID(1) local(0 #2)  ordered in goalBk(2)
-bk  bkID(1) Incoming Locals(3 0x1): 2+ 1- 0- 
dstBk(1) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(1) Incoming Locals(3 0x1): 2+ 1- 0- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x1): 2+ 0- 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(2) Incoming Locals(2 0x1): 2+ 0- 
bkID(1) local(1 #1)  not found in goalBk
bkID(1) local(2 #0)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(1) Incoming Locals(3 0x1): 2+ 1- 0- 
+bk  bkID(1) Incoming Locals(3 0x3): 2+ 0+ 1- 
-gbk bkID(2) Incoming Locals(2 0x1): 2+ 0- 
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
bkID(1) local(2 #1)  not found in goalBk
Pushing blockID(2)
bkID(6) local(0 #2)  ordered in goalBk(1)
-bk  bkID(6) Incoming Locals(3 0x0): 2- 1- 0- 
dstBk(6) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(6) Incoming Locals(3 0x1): 2+ 1- 0- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(1) Incoming Locals(3 0x3): 2+ 0+ 1- 
dstBk(1) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(1) Incoming Locals(3 0x3): 2+ 0+ 1- 
bkID(6) local(1 #1)  not ordered
bestLocal(2) bestLocalScore(24)
-bk  bkID(6) Incoming Locals(3 0x1): 2+ 1- 0- 
+bk  bkID(6) Incoming Locals(3 0x5): 2+ 0- 1+ 
-gbk bkID(1) Incoming Locals(3 0x3): 2+ 0+ 1- 
+gbk bkID(1) Incoming Locals(3 0x7): 2+ 0+ 1+ 
bkID(6) local(1 #0)  ordered in goalBk(1)
-bk  bkID(6) Incoming Locals(3 0x5): 2+ 0- 1+ 
dstBk(6) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(6) Incoming Locals(3 0x7): 2+ 0+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(1) Incoming Locals(3 0x7): 2+ 0+ 1+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(3 0x7): 2+ 0+ 1+ 
bkID(6) local(2 #1)  ordered in goalBk(1)
-bk  bkID(6) Incoming Locals(3 0x7): 2+ 0+ 1+ 
dstBk(6) local(2 1) found in slot(2)
local(2 1) same slot
+bk  bkID(6) Incoming Locals(3 0x7): 2+ 0+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(1) Incoming Locals(3 0x7): 2+ 0+ 1+ 
dstBk(1) local(2 1) found in slot(2)
local(2 1) same slot
+gbk bkID(1) Incoming Locals(3 0x7): 2+ 0+ 1+ 
bkID(6) local(0 #2)  ordered in goalBk(2)
-bk  bkID(6) Incoming Locals(3 0x7): 2+ 0+ 1+ 
dstBk(6) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(6) Incoming Locals(3 0x7): 2+ 0+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
bkID(6) local(1 #0)  ordered in goalBk(2)
-bk  bkID(6) Incoming Locals(3 0x7): 2+ 0+ 1+ 
dstBk(6) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(6) Incoming Locals(3 0x7): 2+ 0+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
bkID(6) local(2 #1)  not found in goalBk
bkID(2) local(0 #2)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(3 0x7): 2+ 0+ 1+ 
dstBk(1) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(1) Incoming Locals(3 0x7): 2+ 0+ 1+ 
bkID(2) local(1 #0)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(3 0x7): 2+ 0+ 1+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(3 0x7): 2+ 0+ 1+ 
bkID(5) local(0 #2)  ordered in goalBk(6)
-bk  bkID(5) Incoming Locals(5 0x0): 2- 4- 1- 0- 3- 
dstBk(5) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(5) Incoming Locals(5 0x1): 2+ 4- 1- 0- 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(6) Incoming Locals(3 0x7): 2+ 0+ 1+ 
dstBk(6) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(6) Incoming Locals(3 0x7): 2+ 0+ 1+ 
bkID(5) local(1 #4)  not found in goalBk
bkID(5) local(2 #1)  ordered in goalBk(6)
-bk  bkID(5) Incoming Locals(5 0x1): 2+ 4- 1- 0- 3- 
dstBk(5) local(2 1) found in slot(2)
local(2 1) same slot
+bk  bkID(5) Incoming Locals(5 0x5): 2+ 4- 1+ 0- 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(6) Incoming Locals(3 0x7): 2+ 0+ 1+ 
dstBk(6) local(2 1) found in slot(2)
local(2 1) same slot
+gbk bkID(6) Incoming Locals(3 0x7): 2+ 0+ 1+ 
bkID(5) local(3 #0)  ordered in goalBk(6)
-bk  bkID(5) Incoming Locals(5 0x5): 2+ 4- 1+ 0- 3- 
dstBk(5) local(1 0) found in slot(3)
local(#1) swapped with local(#3)
+bk  bkID(5) Incoming Locals(5 0x7): 2+ 0+ 1+ 4- 3- 
bkID(5) local(4 #3)  not found in goalBk
bkID(5) local(0 #2)  ordered in goalBk(2)
-bk  bkID(5) Incoming Locals(5 0x7): 2+ 0+ 1+ 4- 3- 
dstBk(5) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(5) Incoming Locals(5 0x7): 2+ 0+ 1+ 4- 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
bkID(5) local(1 #0)  ordered in goalBk(2)
-bk  bkID(5) Incoming Locals(5 0x7): 2+ 0+ 1+ 4- 3- 
dstBk(5) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(5) Incoming Locals(5 0x7): 2+ 0+ 1+ 4- 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
bkID(5) local(2 #1)  not found in goalBk
bkID(5) local(3 #4)  not found in goalBk
bkID(5) local(4 #3)  not found in goalBk
bkID(2) local(0 #2)  ordered in goalBk(6)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(3 0x7): 2+ 0+ 1+ 
dstBk(6) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(6) Incoming Locals(3 0x7): 2+ 0+ 1+ 
bkID(2) local(1 #0)  ordered in goalBk(6)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(3 0x7): 2+ 0+ 1+ 
dstBk(6) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(6) Incoming Locals(3 0x7): 2+ 0+ 1+ 
bkID(3) local(0 #4)  not ordered
bestLocal(3) bestLocalScore(48)
-bk  bkID(3) Incoming Locals(5 0x0): 4- 0- 2- 1- 3- 
+bk  bkID(3) Incoming Locals(5 0x8): 1- 0- 2- 4+ 3- 
-gbk bkID(5) Incoming Locals(5 0x7): 2+ 0+ 1+ 4- 3- 
+gbk bkID(5) Incoming Locals(5 0xf): 2+ 0+ 1+ 4+ 3- 
-gbk bkID(4) Incoming Locals(2 0x0): 0- 4- 
+gbk bkID(4) Incoming Locals(4 0x8): 0- <null> <null> 4+ 
bkID(3) local(0 #1)  not found in goalBk
bkID(3) local(1 #0)  not ordered
bestLocal(1) bestLocalScore(48)
-bk  bkID(3) Incoming Locals(5 0x8): 1- 0- 2- 4+ 3- 
+bk  bkID(3) Incoming Locals(5 0xa): 1- 0+ 2- 4+ 3- 
-gbk bkID(4) Incoming Locals(4 0x8): 0- <null> <null> 4+ 
+gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
bkID(3) local(1 #0)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(5 0xa): 1- 0+ 2- 4+ 3- 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(3) Incoming Locals(5 0xa): 1- 0+ 2- 4+ 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(5) Incoming Locals(5 0xf): 2+ 0+ 1+ 4+ 3- 
dstBk(5) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(5) Incoming Locals(5 0xf): 2+ 0+ 1+ 4+ 3- 
-gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
bkID(3) local(2 #2)  not found in goalBk
bkID(3) local(3 #4)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(5 0xa): 1- 0+ 2- 4+ 3- 
dstBk(3) local(3 4) found in slot(3)
local(3 4) same slot
+bk  bkID(3) Incoming Locals(5 0xa): 1- 0+ 2- 4+ 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(5) Incoming Locals(5 0xf): 2+ 0+ 1+ 4+ 3- 
dstBk(5) local(3 4) found in slot(3)
local(3 4) same slot
+gbk bkID(5) Incoming Locals(5 0xf): 2+ 0+ 1+ 4+ 3- 
-gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
dstBk(4) local(3 4) found in slot(3)
local(3 4) same slot
+gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
bkID(3) local(4 #3)  not found in goalBk
bkID(3) local(0 #1)  ordered in goalBk(5)
-bk  bkID(3) Incoming Locals(5 0xa): 1- 0+ 2- 4+ 3- 
dstBk(3) local(2 1) found in slot(0)
local(#2) swapped with local(#0)
+bk  bkID(3) Incoming Locals(5 0xe): 2- 0+ 1+ 4+ 3- 
bkID(3) local(1 #0)  ordered in goalBk(5)
-bk  bkID(3) Incoming Locals(5 0xe): 2- 0+ 1+ 4+ 3- 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(3) Incoming Locals(5 0xe): 2- 0+ 1+ 4+ 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(5) Incoming Locals(5 0xf): 2+ 0+ 1+ 4+ 3- 
dstBk(5) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(5) Incoming Locals(5 0xf): 2+ 0+ 1+ 4+ 3- 
bkID(3) local(2 #1)  ordered in goalBk(5)
-bk  bkID(3) Incoming Locals(5 0xe): 2- 0+ 1+ 4+ 3- 
dstBk(3) local(2 1) found in slot(2)
local(2 1) same slot
+bk  bkID(3) Incoming Locals(5 0xe): 2- 0+ 1+ 4+ 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(5) Incoming Locals(5 0xf): 2+ 0+ 1+ 4+ 3- 
dstBk(5) local(2 1) found in slot(2)
local(2 1) same slot
+gbk bkID(5) Incoming Locals(5 0xf): 2+ 0+ 1+ 4+ 3- 
bkID(3) local(3 #4)  ordered in goalBk(5)
-bk  bkID(3) Incoming Locals(5 0xe): 2- 0+ 1+ 4+ 3- 
dstBk(3) local(3 4) found in slot(3)
local(3 4) same slot
+bk  bkID(3) Incoming Locals(5 0xe): 2- 0+ 1+ 4+ 3- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(5) Incoming Locals(5 0xf): 2+ 0+ 1+ 4+ 3- 
dstBk(5) local(3 4) found in slot(3)
local(3 4) same slot
+gbk bkID(5) Incoming Locals(5 0xf): 2+ 0+ 1+ 4+ 3- 
bkID(3) local(4 #3)  not ordered
bestLocal(4) bestLocalScore(24)
-bk  bkID(3) Incoming Locals(5 0xe): 2- 0+ 1+ 4+ 3- 
+bk  bkID(3) Incoming Locals(5 0x1e): 2- 0+ 1+ 4+ 3+ 
-gbk bkID(5) Incoming Locals(5 0xf): 2+ 0+ 1+ 4+ 3- 
+gbk bkID(5) Incoming Locals(5 0x1f): 2+ 0+ 1+ 4+ 3+ 
bkID(3) local(4 #3)  ordered in goalBk(5)
-bk  bkID(3) Incoming Locals(5 0x1e): 2- 0+ 1+ 4+ 3+ 
dstBk(3) local(4 3) found in slot(4)
local(4 3) same slot
+bk  bkID(3) Incoming Locals(5 0x1e): 2- 0+ 1+ 4+ 3+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(5) Incoming Locals(5 0x1f): 2+ 0+ 1+ 4+ 3+ 
dstBk(5) local(4 3) found in slot(4)
local(4 3) same slot
+gbk bkID(5) Incoming Locals(5 0x1f): 2+ 0+ 1+ 4+ 3+ 
bkID(3) local(0 #2)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(5 0x1e): 2- 0+ 1+ 4+ 3+ 
dstBk(3) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(3) Incoming Locals(5 0x1f): 2+ 0+ 1+ 4+ 3+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
bkID(3) local(1 #0)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(5 0x1f): 2+ 0+ 1+ 4+ 3+ 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(3) Incoming Locals(5 0x1f): 2+ 0+ 1+ 4+ 3+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
bkID(3) local(2 #1)  not found in goalBk
bkID(3) local(3 #4)  not found in goalBk
bkID(3) local(4 #3)  not found in goalBk
bkID(2) local(0 #2)  not found in goalBk
bkID(2) local(1 #0)  ordered in goalBk(4)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1f): 2+ 0+ 1+ 4+ 3+ 
dstBk(5) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(5) Incoming Locals(5 0x1f): 2+ 0+ 1+ 4+ 3+ 
-gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
bkID(2) local(0 #2)  ordered in goalBk(5)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1f): 2+ 0+ 1+ 4+ 3+ 
dstBk(5) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(5) Incoming Locals(5 0x1f): 2+ 0+ 1+ 4+ 3+ 
bkID(2) local(1 #0)  ordered in goalBk(5)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(5) Incoming Locals(5 0x1f): 2+ 0+ 1+ 4+ 3+ 
dstBk(5) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(5) Incoming Locals(5 0x1f): 2+ 0+ 1+ 4+ 3+ 
bkID(5) local(0 #2)  not found in goalBk
bkID(5) local(1 #0)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(5 0x1f): 2+ 0+ 1+ 4+ 3+ 
dstBk(5) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 2+ 0+ 1+ 4+ 3+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
bkID(5) local(2 #1)  not found in goalBk
bkID(5) local(3 #4)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(5 0x1f): 2+ 0+ 1+ 4+ 3+ 
dstBk(5) local(3 4) found in slot(3)
local(3 4) same slot
+bk  bkID(5) Incoming Locals(5 0x1f): 2+ 0+ 1+ 4+ 3+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
dstBk(4) local(3 4) found in slot(3)
local(3 4) same slot
+gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
bkID(5) local(4 #3)  not found in goalBk
Pushing blockID(4)
bkID(4) local(1 #0)  ordered in goalBk(4)
-bk  bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
bkID(4) local(3 #4)  ordered in goalBk(4)
-bk  bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
dstBk(4) local(3 4) found in slot(3)
local(3 4) same slot
+bk  bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
dstBk(4) local(3 4) found in slot(3)
local(3 4) same slot
+gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
bkID(4) local(1 #0)  ordered in goalBk(2)
-bk  bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
bkID(4) local(3 #4)  not found in goalBk
bkID(2) local(0 #2)  not found in goalBk
bkID(2) local(1 #0)  ordered in goalBk(4)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(4) Incoming Locals(4 0xa): <null> 0+ <null> 4+ 
Popping blockID(4)
bkID(2) local(0 #2)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
bkID(2) local(1 #0)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
Popping blockID(2)
pre  bkID(0) Incoming Locals(1 0x0): 0- 
local(#0) swapped with local(#3)
post bkID(0) Incoming Locals(4 0x8): <null> <null> <null> 0+ 

#################################################

The maximum node counts per root node are 7
IR block list contains 7 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 6 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x8
* Source: com.sun.mep.bench.Chess.ActorManager.sortByZOrder()V(ActorManager.java:229)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<0>  (0x93a304):    aload_0 
<1>  (0x93a305):    agetfield_quick #3
<4>  (0x93a308):    invokevirtual_quick_w #16 <java.util.Vector.size()I>
<7>  (0x93a30b):    istore_1 
<8>  (0x93a30c):    iconst_1 
<9>  (0x93a30d):    istore_2 
<10>  (0x93a30e):    goto <103>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(4): 
	<null>
	<null>
	<null>
	local(0)	ID(2)
 
Assigned Locals(2): 
	ASSIGN(15): local(1)	ID(14)	rhsID(11)
 	ASSIGN(18): local(2)	ID(17)	rhsID(13)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(2) RefsOK(0) Locals(2 0 1 <null>)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (reference)  (ref count: 3)
      <(ID: 12) FETCH (reference) 
         <(ID: 4) FIELD_REF (reference) 
            <(ID: 2) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 11) IDENTITY (int)  (ref count: 2)
      <(ID: 16) INVOKE (int) 
         <(ID: 8) PARAMETER (reference) 
            <(ID: 5) IDENTITY (reference)  (ref count: 3)
            <(ID: 7) NULL_PARAMETER (NONE) 
         <(ID: 10) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 9) GET_VTBL (NONE) 
               <(ID: 5) IDENTITY (reference)  (ref count: 3)
            <(ID: 6) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 12)

   <(ID: 15) ASSIGN (int)  (assignIdx: 0)
      <(ID: 14) LOCAL (int)   1>
      <(ID: 11) IDENTITY (int)  (ref count: 2)

   <(ID: 18) ASSIGN (int)  (assignIdx: 1)
      <(ID: 17) LOCAL (int)   2>
      <(ID: 13) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 19) GOTO (NONE) 
   target: (BlockID: 1 BlockPC: 103)


*************************************************
*
* (block ID:2 block PC:13 )
* IR root list contains 6 root nodes: in block 
* flags: 0x321
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.ActorManager.sortByZOrder()V(ActorManager.java:231)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<13>  (0x93a311):    aload_0 
<14>  (0x93a312):    agetfield_quick #3
<17>  (0x93a315):    iload_2 
<18>  (0x93a316):    invokevirtual_quick_w #12 <java.util.Vector.elementAt(I)Ljava/lang/Object;>
<21>  (0x93a319):    checkcast_quick #13 <com.sun.mep.bench.Chess.Actor>
<24>  (0x93a31c):    astore_3 
<25>  (0x93a31d):    iload_2 
<26>  (0x93a31e):    iconst_1 
<27>  (0x93a31f):    isub 
<28>  (0x93a320):    istore 4
<30>  (0x93a322):    goto <75>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(26)
 	local(2)	ID(30)
 
Incoming Locals(2): 
	local(2)	ID(30)
 	local(0)	ID(26)
 
Assigned Locals(2): 
	ASSIGN(44): local(3)	ID(43)	rhsID(39)
 	ASSIGN(47): local(4)	ID(46)	rhsID(42)
 
Successor Blocks(1): 
	ID(3) LocalOrder(2) AssignOrder(2) RefsOK(0) Locals(2 0 1 4 3)

   <(ID: 25) MAP_PC (NONE)   13>

   <(ID: 29) IDENTITY (reference)  (ref count: 3)
      <(ID: 40) FETCH (reference) 
         <(ID: 28) FIELD_REF (reference) 
            <(ID: 26) LOCAL (reference)   0>
            <(ID: 27) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 39) IDENTITY (reference)  (ref count: 2)
      <(ID: 45) CHECKCAST (reference) 
         <(ID: 37) INVOKE (reference) 
            <(ID: 34) PARAMETER (reference) 
               <(ID: 29) IDENTITY (reference)  (ref count: 3)
               <(ID: 33) PARAMETER (int) 
                  <(ID: 30) IDENTITY (int)  (ref count: 2)
                     <(ID: 48) LOCAL (int)   2>
                  <(ID: 32) NULL_PARAMETER (NONE) 
            <(ID: 36) FETCH_MB_FROM_VTABLE (address field) 
               <(ID: 35) GET_VTBL (NONE) 
                  <(ID: 29) IDENTITY (reference)  (ref count: 3)
               <(ID: 31) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 43)
         <(ID: 38) CONST_CB (address field)  (com.sun.mep.bench.Chess.Actor)

   <(ID: 44) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 43) LOCAL (reference)   3>
      <(ID: 39) IDENTITY (reference)  (ref count: 2)

   <(ID: 47) ASSIGN (int)  (assignIdx: 1)
      <(ID: 46) LOCAL (int)   4>
      <(ID: 42) SUB (int) 
         <(ID: 30) IDENTITY (int)  (ref count: 2)
         <(ID: 41) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 49) GOTO (NONE) 
   target: (BlockID: 3 BlockPC: 75)


*************************************************
*
* (block ID:4 block PC:33 )
* IR root list contains 10 root nodes: in block 
* flags: 0x361
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0xa
* Source: com.sun.mep.bench.Chess.ActorManager.sortByZOrder()V(ActorManager.java:234)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<33>  (0x93a325):    aload_0 
<34>  (0x93a326):    agetfield_quick #3
<37>  (0x93a329):    iload 4
<39>  (0x93a32b):    invokevirtual_quick_w #12 <java.util.Vector.elementAt(I)Ljava/lang/Object;>
<42>  (0x93a32e):    checkcast_quick #13 <com.sun.mep.bench.Chess.Actor>
<45>  (0x93a331):    astore 5
<47>  (0x93a333):    aload_3 
<48>  (0x93a334):    getfield_quick #14
<51>  (0x93a337):    aload 5
<53>  (0x93a339):    getfield_quick #14
<56>  (0x93a33c):    if_icmpge <80>
<59>  (0x93a33f):    aload_0 
<60>  (0x93a340):    getfield #4 <com.sun.mep.bench.Chess.ActorManager.actors:Ljava/util/Vector;>
<63>  (0x93a343):    aload 5
<65>  (0x93a345):    iload 4
<67>  (0x93a347):    iconst_1 
<68>  (0x93a348):    iadd 
<69>  (0x93a349):    invokevirtual #26 <java.util.Vector.setElementAt(Ljava/lang/Object;I)V>
<72>  (0x93a34c):    iinc 4 255
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(55)
 	local(4)	ID(59)
 
Incoming Locals(4): 
	<null>
	local(0)	ID(55)
 	<null>
	local(4)	ID(59)
 
Assigned Locals(2): 
	ASSIGN(80): local(5)	ID(79)	rhsID(68)
 	ASSIGN(102): local(4)	ID(101)	rhsID(100)
 
Successor Blocks(2): 
	ID(5) LocalOrder(2) AssignOrder(1) RefsOK(0) Locals(2 0 1 4 3)
	ID(3) LocalOrder(2) AssignOrder(2) RefsOK(0) Locals(2 0 1 4 3)

   <(ID: 54) MAP_PC (NONE)   33>

   <(ID: 58) IDENTITY (reference)  (ref count: 3)
      <(ID: 69) FETCH (reference) 
         <(ID: 57) FIELD_REF (reference) 
            <(ID: 55) IDENTITY (reference)  (ref count: 2)
               <(ID: 86) LOCAL (reference)   0>
            <(ID: 56) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 68) IDENTITY (reference)  (ref count: 4)
      <(ID: 77) CHECKCAST (reference) 
         <(ID: 66) INVOKE (reference) 
            <(ID: 63) PARAMETER (reference) 
               <(ID: 58) IDENTITY (reference)  (ref count: 3)
               <(ID: 62) PARAMETER (int) 
                  <(ID: 59) IDENTITY (int)  (ref count: 3)
                     <(ID: 98) LOCAL (int)   4>
                  <(ID: 61) NULL_PARAMETER (NONE) 
            <(ID: 65) FETCH_MB_FROM_VTABLE (address field) 
               <(ID: 64) GET_VTBL (NONE) 
                  <(ID: 58) IDENTITY (reference)  (ref count: 3)
               <(ID: 60) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 43)
         <(ID: 67) CONST_CB (address field)  (com.sun.mep.bench.Chess.Actor)

   <(ID: 73) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 81) FETCH (32-bit field) 
         <(ID: 72) FIELD_REF (32-bit field) 
            <(ID: 70) LOCAL (reference)   3>
            <(ID: 71) CONST_FIELD_OFFSET (NONE)  (14)

   <(ID: 76) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 82) FETCH (32-bit field) 
         <(ID: 75) FIELD_REF (32-bit field) 
            <(ID: 68) IDENTITY (reference)  (ref count: 4)
            <(ID: 74) CONST_FIELD_OFFSET (NONE)  (14)

   <(ID: 80) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 79) LOCAL (reference)   5>
      <(ID: 68) IDENTITY (reference)  (ref count: 4)

   <(ID: 78) BCOND (int) 
   target: (BlockID: 5 BlockPC: 80)
   condition: GE
   flags: 0
      <(ID: 73) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 76) IDENTITY (32-bit field)  (ref count: 2)


   <(ID: 85) IDENTITY (reference)  (ref count: 3)
      <(ID: 97) FETCH (reference) 
         <(ID: 84) FIELD_REF (reference) 
            <(ID: 55) IDENTITY (reference)  (ref count: 2)
            <(ID: 83) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 96) INVOKE (v) 
      <(ID: 93) PARAMETER (reference) 
         <(ID: 85) IDENTITY (reference)  (ref count: 3)
         <(ID: 92) PARAMETER (reference) 
            <(ID: 68) IDENTITY (reference)  (ref count: 4)
            <(ID: 91) PARAMETER (int) 
               <(ID: 88) ADD (int) 
                  <(ID: 59) IDENTITY (int)  (ref count: 3)
                  <(ID: 87) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 90) NULL_PARAMETER (NONE) 
      <(ID: 95) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 94) GET_VTBL (NONE) 
            <(ID: 85) IDENTITY (reference)  (ref count: 3)
         <(ID: 89) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 46)

   <(ID: 102) ASSIGN (int)  (assignIdx: 1)
      <(ID: 101) LOCAL (int)   4>
      <(ID: 100) SUB (int) 
         <(ID: 59) IDENTITY (int)  (ref count: 3)
         <(ID: 99) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:3 block PC:75 )
* IR root list contains 2 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1f
* Source: com.sun.mep.bench.Chess.ActorManager.sortByZOrder()V(ActorManager.java:233)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<75>  (0x93a34f):    iload 4
<77>  (0x93a351):    ifge <33>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(4)	ID(51)
 
Incoming Locals(5): 
	local(2)	ID(104)
 	local(0)	ID(55)
 	local(1)	ID(22)
 	local(4)	ID(51)
 	local(3)	ID(113)
 
Successor Blocks(2): 
	ID(4) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(<null> 0 <null> 4)
	ID(5) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(2 0 1 4 3)

   <(ID: 50) MAP_PC (NONE)   75>

   <(ID: 53) BCOND (int) 
   target: (BlockID: 4 BlockPC: 33)
   condition: GE
   flags: 0
      <(ID: 51) LOCAL (int)   4>
      <(ID: 52) CONST_JAVA_NUMERIC32 (int)  (0)



*************************************************
*
* (block ID:5 block PC:80 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1f
* Source: com.sun.mep.bench.Chess.ActorManager.sortByZOrder()V(ActorManager.java:240)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<80>  (0x93a354):    iload_2 
<81>  (0x93a355):    iload 4
<83>  (0x93a357):    iconst_1 
<84>  (0x93a358):    iadd 
<85>  (0x93a359):    if_icmpeq <100>
<88>  (0x93a35c):    aload_0 
<89>  (0x93a35d):    getfield #4 <com.sun.mep.bench.Chess.ActorManager.actors:Ljava/util/Vector;>
<92>  (0x93a360):    aload_3 
<93>  (0x93a361):    iload 4
<95>  (0x93a363):    iconst_1 
<96>  (0x93a364):    iadd 
<97>  (0x93a365):    invokevirtual #26 <java.util.Vector.setElementAt(Ljava/lang/Object;I)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(4): 
	local(2)	ID(104)
 	local(4)	ID(105)
 	local(0)	ID(109)
 	local(3)	ID(113)
 
Incoming Locals(5): 
	local(2)	ID(104)
 	local(0)	ID(26)
 	local(1)	ID(22)
 	local(4)	ID(105)
 	local(3)	ID(113)
 
Successor Blocks(1): 
	ID(6) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(2 0 1)

   <(ID: 103) MAP_PC (NONE)   80>

   <(ID: 108) BCOND (int) 
   target: (BlockID: 6 BlockPC: 100)
   condition: EQ
   flags: 0
      <(ID: 104) LOCAL (int)   2>
      <(ID: 107) ADD (int) 
         <(ID: 105) IDENTITY (int)  (ref count: 2)
            <(ID: 125) LOCAL (int)   4>
         <(ID: 106) CONST_JAVA_NUMERIC32 (int)  (1)


   <(ID: 112) IDENTITY (reference)  (ref count: 3)
      <(ID: 124) FETCH (reference) 
         <(ID: 111) FIELD_REF (reference) 
            <(ID: 109) LOCAL (reference)   0>
            <(ID: 110) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 123) INVOKE (v) 
      <(ID: 120) PARAMETER (reference) 
         <(ID: 112) IDENTITY (reference)  (ref count: 3)
         <(ID: 119) PARAMETER (reference) 
            <(ID: 113) LOCAL (reference)   3>
            <(ID: 118) PARAMETER (int) 
               <(ID: 115) ADD (int) 
                  <(ID: 105) IDENTITY (int)  (ref count: 2)
                  <(ID: 114) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 117) NULL_PARAMETER (NONE) 
      <(ID: 122) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 121) GET_VTBL (NONE) 
            <(ID: 112) IDENTITY (reference)  (ref count: 3)
         <(ID: 116) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 46)


*************************************************
*
* (block ID:6 block PC:100 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x7
* Source: com.sun.mep.bench.Chess.ActorManager.sortByZOrder()V(ActorManager.java:230)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<100>  (0x93a368):    iinc 2 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(2)	ID(127)
 
Incoming Locals(3): 
	local(2)	ID(127)
 	local(0)	ID(26)
 	local(1)	ID(22)
 
Assigned Locals(1): 
	ASSIGN(131): local(2)	ID(130)	rhsID(129)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(2 0 1 <null>)

   <(ID: 126) MAP_PC (NONE)   100>

   <(ID: 127) IDENTITY (int)  (ref count: 2)
      <(ID: 132) LOCAL (int)   2>

   <(ID: 131) ASSIGN (int)  (assignIdx: 0)
      <(ID: 130) LOCAL (int)   2>
      <(ID: 129) ADD (int) 
         <(ID: 127) IDENTITY (int)  (ref count: 2)
         <(ID: 128) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:1 block PC:103 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0xf
* Source: com.sun.mep.bench.Chess.ActorManager.sortByZOrder()V(ActorManager.java:230)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<103>  (0x93a36b):    iload_2 
<104>  (0x93a36c):    iload_1 
<105>  (0x93a36d):    if_icmplt <13>
<108>  (0x93a370):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(2)	ID(21)
 	local(1)	ID(22)
 
Incoming Locals(4): 
	local(2)	ID(21)
 	local(0)	ID(26)
 	local(1)	ID(22)
 	<null>

Successor Blocks(1): 
	ID(2) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(2 0)

   <(ID: 20) MAP_PC (NONE)   103>

   <(ID: 23) BCOND (int) 
   target: (BlockID: 2 BlockPC: 13)
   condition: LT
   flags: 0
      <(ID: 21) LOCAL (int)   2>
      <(ID: 22) LOCAL (int)   1>


   <(ID: 24) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 220
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 662
ESTIMATED BUFFER SIZE = 1040
CODE BUFFER ADDRESS = 0x2bcc0274
PC MAP TABLE ADDRESS = 0x2bcc027c
GC CHECK PCS ADDRESS = 0x2bcc029c
CODE ENTRY ADDRESS = 0x2bcc02d8
          		@ Method prologue
0x2bcc02d8	0:	addiu	a1, JSP, 68	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc02dc	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc02e0	8:	sltu	t7, a1, CHUNKEND
0x2bcc02e4	12:	bne	t7, zero, PC=0x2bcc02d8	@ goto .skip
0x2bcc02e8	16:	nop
0x2bcc02ec	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc02f0	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc02e4) >>>>>>>>
0x2bcc02e4	12:	bne	t7, zero, PC=0x2bcc02f4	@ goto .skip
0x2bcc02e8	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc02f4) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc02f4	28:	sw	JFP, 20(JSP)	@ Store curr JFP into new frame
0x2bcc02f8	32:	addiu	JFP, JSP, 20	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc02fc	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc0300	40:	addiu	a3, zero, 0
0x2bcc0304	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc0308	48:	addiu	a3, zero, -1
0x2bcc030c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc0310	56:	move	a0, EE
0x2bcc0314	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc0318	64:	lui	t9, hi16(0x65)
0x2bcc031c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc0320	72:	jalr	t9
0x2bcc0324	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc0328	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc032c	84:	nop
0x2bcc0330	88:	nop
0x2bcc0334	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(23)
0x2bcc0338	96:	lw	s7, -24(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
          		@ Do getfield:
0x2bcc033c	100:	lw	s6, 12(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc0340	104:	sw	s6, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc0344	108:	lw	s5, 0(s6)	@ Get object.cb
0x2bcc0348	112:	addiu	t7, zero, -4
0x2bcc034c	116:	and	s5, s5, t7
0x2bcc0350	120:	lw	s5, 76(s5)	@ Get cb.vtbl
0x2bcc0354	124:	lw	a0, 48(s5)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc0358	128:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc035c	132:	lw	s7, 0(a0)	@ call method through mb
0x2bcc0360	136:	jalr	s7
0x2bcc0364	140:	nop
          		@ Captured a stackmap here.
0x2bcc0368	144:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc036c	148:	lw	s6, 0(JSP)
0x2bcc0370	152:	sw	s6, -20(JFP)	@ Java local cell # 1
0x2bcc0374	156:	addiu	s4, zero, 1	@ const 1
0x2bcc0378	160:	sw	s4, -16(JFP)	@ Java local cell # 2
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): not in register
0x2bcc037c	164:	lw	s5, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(22): in correct register
0x2bcc0380	168:	b	PC=0x2bcc0380	@ branch to block L1
0x2bcc0384	172:	nop
			@ Initial Temp REF set is 
	L2:	176:	@ Patchable GC Check point
0x2bcc0388	176:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcc0388	176:	nop
0x2bcc038c	180:	nop
          		@ Captured a stackmap here.
	L2:	184:	@ entry point when locals need to be loaded
			@ Preloading incoming local(2) reg(20)
0x2bcc0390	184:	lw	s4, -16(JFP)	@ Java local cell # 2
			@ Preloading incoming local(0) reg(21)
0x2bcc0394	188:	lw	s5, -24(JFP)	@ Java local cell # 0
	L2:	192:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=13 compiledPc=184
          		@ Do getfield:
0x2bcc0398	192:	lw	s7, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc039c	196:	sw	s7, 0(JSP)
0x2bcc03a0	200:	sw	s4, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc03a4	204:	lw	s6, 0(s7)	@ Get object.cb
0x2bcc03a8	208:	addiu	t7, zero, -4
0x2bcc03ac	212:	and	s6, s6, t7
0x2bcc03b0	216:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc03b4	220:	lw	a0, 172(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc03b8	224:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc03bc	228:	lw	s7, 0(a0)	@ call method through mb
0x2bcc03c0	232:	jalr	s7
0x2bcc03c4	236:	nop
          		@ Captured a stackmap here.
0x2bcc03c8	240:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc03cc	244:	lw	s7, 0(JSP)
0x2bcc03d0	248:	lw	a2, 0(CP)	@ cb com.sun.mep.bench.Chess.Actor
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcc03d4	252:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcc03d8	256:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcc03dc	260:	nop
0x2bcc03e0	264:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
0x2bcc03e4	268:	sw	s7, -12(JFP)	@ Java local cell # 3
0x2bcc03e8	272:	lw	s6, -16(JFP)	@ Java local cell # 2
0x2bcc03ec	276:	addiu	s7, s6, -1
0x2bcc03f0	280:	sw	s7, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(2) reg(20): in wrong register
0x2bcc03f4	284:	move	s4, s6
			@ Outgoing local(0) reg(21): not in register
0x2bcc03f8	288:	lw	s5, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(22): not in register
0x2bcc03fc	292:	lw	s6, -20(JFP)	@ Java local cell # 1
			@ Outgoing local(4) reg(23): in correct register
0x2bcc0400	296:	b	PC=0x2bcc0400	@ branch to block L3
0x2bcc0404	300:	nop
			@ Initial Temp REF set is 
	L4:	304:	@ Patchable GC Check point
0x2bcc0408	304:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcc0408	304:	nop
0x2bcc040c	308:	nop
          		@ Captured a stackmap here.
	L4:	312:	@ entry point when locals need to be loaded
			@ Preloading incoming local(0) reg(21)
0x2bcc0410	312:	lw	s5, -24(JFP)	@ Java local cell # 0
			@ Preloading incoming local(4) reg(23)
0x2bcc0414	316:	lw	s7, -8(JFP)	@ Java local cell # 4
	L4:	320:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=33 compiledPc=312
          		@ Do getfield:
0x2bcc0418	320:	lw	s6, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc041c	324:	sw	s6, 0(JSP)
0x2bcc0420	328:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc0424	332:	lw	s4, 0(s6)	@ Get object.cb
0x2bcc0428	336:	addiu	t7, zero, -4
0x2bcc042c	340:	and	s4, s4, t7
0x2bcc0430	344:	lw	s4, 76(s4)	@ Get cb.vtbl
0x2bcc0434	348:	lw	a0, 172(s4)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc0438	352:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc043c	356:	lw	s7, 0(a0)	@ call method through mb
0x2bcc0440	360:	jalr	s7
0x2bcc0444	364:	nop
          		@ Captured a stackmap here.
0x2bcc0448	368:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc044c	372:	lw	s7, 0(JSP)
0x2bcc0450	376:	lw	a2, 0(CP)	@ cb com.sun.mep.bench.Chess.Actor
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcc0454	380:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcc0458	384:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcc045c	388:	nop
0x2bcc0460	392:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
0x2bcc0464	396:	lw	ra, -12(JFP)	@ Java local cell # 3
          		@ Do getfield:
0x2bcc0468	400:	lw	s6, 56(ra)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc046c	404:	lw	s5, 56(s7)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc0470	408:	sw	s7, -4(JFP)	@ Java local cell # 5
			@ Outgoing local(2) reg(20): not in register
0x2bcc0474	412:	lw	s4, -16(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(21): not in register
0x2bcc0478	416:	sw	s5, 28(JFP)	@ spill Java temp cell # 0
0x2bcc047c	420:	lw	s5, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(22): not in register
0x2bcc0480	424:	sw	s6, 32(JFP)	@ spill Java temp cell # 1
0x2bcc0484	428:	lw	s6, -20(JFP)	@ Java local cell # 1
			@ Outgoing local(4) reg(23): not in register
0x2bcc0488	432:	lw	s7, -8(JFP)	@ Java local cell # 4
0x2bcc048c	436:	lw	t9, 32(JFP)	@ Java temp cell # 1
0x2bcc0490	440:	lw	t8, 28(JFP)	@ Java temp cell # 0
          		@ deferred comparison: 
0x2bcc0494	444:	slt	t7, t9, t8
0x2bcc0498	448:	beq	t7, zero, PC=0x2bcc0494	@ branch to block L5
0x2bcc049c	452:	nop
          		@ Do getfield:
0x2bcc04a0	456:	lw	t9, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc04a4	460:	sw	t9, 0(JSP)
0x2bcc04a8	464:	lw	t8, -4(JFP)	@ Java local cell # 5
0x2bcc04ac	468:	sw	t8, 4(JSP)
0x2bcc04b0	472:	addiu	t6, s7, 1
0x2bcc04b4	476:	sw	t6, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcc04b8	480:	lw	t6, 0(t9)	@ Get object.cb
0x2bcc04bc	484:	addiu	t7, zero, -4
0x2bcc04c0	488:	and	t6, t6, t7
0x2bcc04c4	492:	lw	t6, 76(t6)	@ Get cb.vtbl
0x2bcc04c8	496:	lw	a0, 184(t6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc04cc	500:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcc04d0	504:	lw	s7, 0(a0)	@ call method through mb
0x2bcc04d4	508:	jalr	s7
0x2bcc04d8	512:	nop
          		@ Captured a stackmap here.
0x2bcc04dc	516:	lw	s6, -8(JFP)	@ Java local cell # 4
0x2bcc04e0	520:	addiu	s7, s6, -1
0x2bcc04e4	524:	sw	s7, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(2) reg(20): not in register
0x2bcc04e8	528:	lw	s4, -16(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(21): not in register
0x2bcc04ec	532:	lw	s5, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(22): not in register
0x2bcc04f0	536:	lw	s6, -20(JFP)	@ Java local cell # 1
			@ Outgoing local(4) reg(23): in correct register
			@ Initial Temp REF set is 
	L3:	540:	@ entry point for branches
			@ Binding Incoming Local(2) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(1) to reg(22)
			@ Binding Incoming Local(4) to reg(23)
--->Fixed instruction at 296(0x2bcc0400) to reference 540
          		@ MAP_PC idepth=0 javaPc=75 compiledPc=540
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(4) reg(23): in correct register
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcc04f4	540:	sltiu	t7, s7, 0
0x2bcc04f8	544:	beq	t7, zero, PC=0x2bcc0408	@ branch to block L4
0x2bcc04fc	548:	nop
0x2bcc04f4	540:	sltiu	t7, s7, 0
0x2bcc04f8	544:	beq	t7, zero, PC=0x2bcc0418	@ branch to block L4, skip GC
0x2bcc04fc	548:	nop
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(1) reg(22): in correct register
			@ Outgoing local(4) reg(23): in correct register
			@ Initial Temp REF set is 
	L5:	552:	@ entry point for branches
			@ Binding Incoming Local(2) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(1) to reg(22)
			@ Binding Incoming Local(4) to reg(23)
--->Fixed instruction at 448(0x2bcc0498) to reference 552
          		@ MAP_PC idepth=0 javaPc=80 compiledPc=552
0x2bcc0500	552:	addiu	ra, s7, 1
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(1) reg(22): in correct register
          		@ deferred comparison: 
0x2bcc0504	556:	beq	s4, ra, PC=0x2bcc0504	@ branch to block L6
0x2bcc0508	560:	nop
          		@ Do getfield:
0x2bcc050c	564:	lw	ra, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc0510	568:	sw	ra, 0(JSP)
0x2bcc0514	572:	lw	t9, -12(JFP)	@ Java local cell # 3
0x2bcc0518	576:	sw	t9, 4(JSP)
0x2bcc051c	580:	addiu	t8, s7, 1
0x2bcc0520	584:	sw	t8, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcc0524	588:	lw	t8, 0(ra)	@ Get object.cb
0x2bcc0528	592:	addiu	t7, zero, -4
0x2bcc052c	596:	and	t8, t8, t7
0x2bcc0530	600:	lw	t8, 76(t8)	@ Get cb.vtbl
0x2bcc0534	604:	lw	a0, 184(t8)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc0538	608:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcc053c	612:	lw	s7, 0(a0)	@ call method through mb
0x2bcc0540	616:	jalr	s7
0x2bcc0544	620:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(2) reg(20): not in register
0x2bcc0548	624:	lw	s4, -16(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(21): not in register
0x2bcc054c	628:	lw	s5, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(22): not in register
0x2bcc0550	632:	lw	s6, -20(JFP)	@ Java local cell # 1
			@ Initial Temp REF set is 
	L6:	636:	@ entry point for branches
			@ Binding Incoming Local(2) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(1) to reg(22)
--->Fixed instruction at 556(0x2bcc0504) to reference 636
          		@ MAP_PC idepth=0 javaPc=100 compiledPc=636
0x2bcc0554	636:	addiu	s4, s4, 1
0x2bcc0558	640:	sw	s4, -16(JFP)	@ Java local cell # 2
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(1) reg(22): in correct register
			@ Initial Temp REF set is 
	L1:	644:	@ entry point for branches
			@ Binding Incoming Local(2) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(1) to reg(22)
--->Fixed instruction at 168(0x2bcc0380) to reference 644
          		@ MAP_PC idepth=0 javaPc=103 compiledPc=644
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcc055c	644:	slt	t7, s4, s6
0x2bcc0560	648:	bne	t7, zero, PC=0x2bcc0388	@ branch to block L2
0x2bcc0564	652:	nop
0x2bcc055c	644:	slt	t7, s4, s6
0x2bcc0560	648:	bne	t7, zero, PC=0x2bcc0398	@ branch to block L2, skip GC
0x2bcc0564	652:	nop
0x2bcc0568	656:	addiu	JSP, JFP, -24
0x2bcc056c	660:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc0570	664:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc0574	668:	nop
0x2bcc0578	672:	.word	9786824	@ cb com.sun.mep.bench.Chess.Actor
--->Fixed instruction at 376(0x2bcc0450) to reference 672
--->Fixed instruction at 248(0x2bcc03d0) to reference 672
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc02d8) >>>>>>>>
          		@ Capacity is 20 word(s)
0x2bcc02d8	0:	addiu	a1, JSP, 76
<<<<<<<<<Pop Code Buffer to PC = 676 (0x2bcc057c) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc0328) >>>>>>>>
          		@ spillSize is 2 word(s), add to JFP+28
0x2bcc0328	80:	addiu	JSP, JFP, 36
          		@ setup cp base register
0x2bcc032c	84:	lui	CP, hi16(0x2bcc)
0x2bcc0330	88:	ori	CP, CP, lo16(0x2bcc0578)
0x2bcc0334	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 676 (0x2bcc057c) <<<<<<<<<
JS: COMPILED: size=840 startPC=0x2bcc02d8 com.sun.mep.bench.Chess.ActorManager.sortByZOrder()V
OSR: Intr2Comp: com.sun.mep.bench.Chess.ActorManager.sortByZOrder()V
JS: ATTEMPTING TO COMPILE java.lang.String.length()I
JS: COMPILING java.lang.String.length()I
orig bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(1 0x0): 0- 

#################################################

The maximum node counts per root node are 4
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 3 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: java.lang.String.length()I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x6cc890):    aload_0 
<1>  (0x6cc891):    getfield_quick #4
<4>  (0x6cc894):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(1): 
	local(0)	ID(2)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 7) FETCH (32-bit field) 
         <(ID: 4) FIELD_REF (32-bit field) 
            <(ID: 2) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 6) RETURN_VALUE (int) 
      <(ID: 5) IDENTITY (32-bit field)  (ref count: 2)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 38
ESTIMATED BUFFER SIZE = 144
CODE BUFFER ADDRESS = 0x2bcc05bc
PC MAP TABLE ADDRESS = 0x2bcc05c4
CODE ENTRY ADDRESS = 0x2bcc05e8
          		@ Method prologue
0x2bcc05e8	0:	addiu	a1, JSP, 40	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc05ec	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc05f0	8:	sltu	t7, a1, CHUNKEND
0x2bcc05f4	12:	bne	t7, zero, PC=0x2bcc05e8	@ goto .skip
0x2bcc05f8	16:	nop
0x2bcc05fc	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc0600	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc05f4) >>>>>>>>
0x2bcc05f4	12:	bne	t7, zero, PC=0x2bcc0604	@ goto .skip
0x2bcc05f8	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc0604) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc0604	28:	sw	JFP, 4(JSP)	@ Store curr JFP into new frame
0x2bcc0608	32:	addiu	JFP, JSP, 4	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc060c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc0610	40:	addiu	a3, zero, 0
0x2bcc0614	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc0618	48:	addiu	a3, zero, -1
0x2bcc061c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc0620	56:	move	a0, EE
0x2bcc0624	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc0628	64:	lui	t9, hi16(0x65)
0x2bcc062c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc0630	72:	jalr	t9
0x2bcc0634	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc0638	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc063c	84:	nop
0x2bcc0640	88:	nop
0x2bcc0644	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc0648	96:	lw	s4, -8(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
          		@ Do getfield:
0x2bcc064c	100:	lw	s7, 16(s4)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc0650	104:	sw	s7, -8(JFP)	@ Java local cell # 0
0x2bcc0654	108:	addiu	JSP, JFP, -4
0x2bcc0658	112:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc065c	116:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc0660	120:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc05e8) >>>>>>>>
          		@ Capacity is 11 word(s)
0x2bcc05e8	0:	addiu	a1, JSP, 40
<<<<<<<<<Pop Code Buffer to PC = 124 (0x2bcc0664) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc0638) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc0638	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc063c	84:	lui	CP, hi16(0x2bcc)
0x2bcc0640	88:	ori	CP, CP, lo16(0x2bcc0664)
0x2bcc0644	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 124 (0x2bcc0664) <<<<<<<<<
JS: COMPILED: size=172 startPC=0x2bcc05e8 java.lang.String.length()I
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V
JS: COMPILING com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V
JO: Intrinsic java.lang.String.charAt(I)C inlined in com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V
orig bkID(1) Incoming Locals(2 0x0): 3- 1- 
o1   bkID(1) Incoming Locals(1 0x0): 3- 
s1   bkID(1) Incoming Locals(1 0x0): 3- 
s1   bkID(1) Incoming Locals(2 0x0): 3- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 3- 1- 
orig bkID(17) Incoming Locals(2 0x0): 1- 4- 
o1   bkID(17) Incoming Locals(2 0x0): 1- 4- 
orig bkID(3) Incoming Locals(2 0x0): 0- 3- 
orig bkID(2) Incoming Locals(2 0x0): 3- 1- 
o1   bkID(2) Incoming Locals(1 0x0): 3- 
s1   bkID(2) Incoming Locals(2 0x0): 3- 0- 
s1   bkID(2) Incoming Locals(2 0x0): 3- 0- 
o1   bkID(2) Incoming Locals(3 0x0): 3- 0- 1- 
s1   bkID(0) Incoming Locals(1 0x0): 1- 
o1   bkID(0) Incoming Locals(1 0x0): 1- 
orig bkID(1) Incoming Locals(2 0x0): 3- 1- 
o1   bkID(1) Incoming Locals(1 0x0): 3- 
s1   bkID(1) Incoming Locals(1 0x0): 3- 
s1   bkID(1) Incoming Locals(2 0x0): 3- 0- 
s1   bkID(1) Incoming Locals(3 0x0): 3- 0- 1- 
o1   bkID(1) Incoming Locals(3 0x0): 3- 0- 1- 
orig bkID(17) Incoming Locals(2 0x0): 1- 4- 
o1   bkID(17) Incoming Locals(2 0x0): 1- 4- 
orig bkID(3) Incoming Locals(2 0x0): 0- 3- 
orig bkID(2) Incoming Locals(3 0x0): 3- 0- 1- 
o1   bkID(2) Incoming Locals(1 0x0): 3- 
s1   bkID(2) Incoming Locals(2 0x0): 3- 0- 
s1   bkID(2) Incoming Locals(2 0x0): 3- 0- 
o1   bkID(2) Incoming Locals(3 0x0): 3- 0- 1- 
orig bkID(0) Incoming Locals(1 0x0): 1- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
bkID(1) local(0 #3)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(1) Incoming Locals(3 0x0): 3- 0- 1- 
+bk  bkID(1) Incoming Locals(3 0x1): 3+ 0- 1- 
-gbk bkID(2) Incoming Locals(3 0x0): 3- 0- 1- 
+gbk bkID(2) Incoming Locals(3 0x1): 3+ 0- 1- 
bkID(1) local(0 #3)  ordered in goalBk(2)
-bk  bkID(1) Incoming Locals(3 0x1): 3+ 0- 1- 
dstBk(1) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(1) Incoming Locals(3 0x1): 3+ 0- 1- 
 ordered in bk
-gbk bkID(2) Incoming Locals(3 0x1): 3+ 0- 1- 
dstBk(2) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(2) Incoming Locals(3 0x1): 3+ 0- 1- 
bkID(1) local(1 #0)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(1) Incoming Locals(3 0x1): 3+ 0- 1- 
+bk  bkID(1) Incoming Locals(3 0x3): 3+ 0+ 1- 
-gbk bkID(2) Incoming Locals(3 0x1): 3+ 0- 1- 
+gbk bkID(2) Incoming Locals(3 0x3): 3+ 0+ 1- 
bkID(1) local(1 #0)  ordered in goalBk(2)
-bk  bkID(1) Incoming Locals(3 0x3): 3+ 0+ 1- 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(1) Incoming Locals(3 0x3): 3+ 0+ 1- 
 ordered in bk
-gbk bkID(2) Incoming Locals(3 0x3): 3+ 0+ 1- 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(3 0x3): 3+ 0+ 1- 
bkID(1) local(2 #1)  not ordered
bestLocal(2) bestLocalScore(8)
-bk  bkID(1) Incoming Locals(3 0x3): 3+ 0+ 1- 
+bk  bkID(1) Incoming Locals(3 0x7): 3+ 0+ 1+ 
-gbk bkID(2) Incoming Locals(3 0x3): 3+ 0+ 1- 
+gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
bkID(1) local(2 #1)  ordered in goalBk(2)
-bk  bkID(1) Incoming Locals(3 0x7): 3+ 0+ 1+ 
dstBk(1) local(2 1) found in slot(2)
local(2 1) same slot
+bk  bkID(1) Incoming Locals(3 0x7): 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
dstBk(2) local(2 1) found in slot(2)
local(2 1) same slot
+gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
Pushing blockID(2)
bkID(17) local(0 #1)  ordered in goalBk(2)
-bk  bkID(17) Incoming Locals(2 0x0): 1- 4- 
dstBk(17) local(2 1) found in slot(0)
local(#2) swapped with local(#0)
+bk  bkID(17) Incoming Locals(3 0x4): <null> 4- 1+ 
bkID(17) local(1 #4)  not found in goalBk
bkID(17) local(2 #1)  ordered in goalBk(2)
-bk  bkID(17) Incoming Locals(3 0x4): <null> 4- 1+ 
dstBk(17) local(2 1) found in slot(2)
local(2 1) same slot
+bk  bkID(17) Incoming Locals(3 0x4): <null> 4- 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
dstBk(2) local(2 1) found in slot(2)
local(2 1) same slot
+gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
bkID(3) local(0 #0)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(2 0x0): 0- 3- 
dstBk(3) local(1 0) found in slot(0)
local(#1) swapped with local(#0)
+bk  bkID(3) Incoming Locals(2 0x2): 3- 0+ 
bkID(3) local(1 #0)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(2 0x2): 3- 0+ 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(3) Incoming Locals(2 0x2): 3- 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
bkID(2) local(0 #3)  ordered in bk
-gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
dstBk(2) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
-gbk bkID(3) Incoming Locals(2 0x2): 3- 0+ 
dstBk(3) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(3) Incoming Locals(2 0x3): 3+ 0+ 
bkID(2) local(1 #0)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
-gbk bkID(3) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(3) Incoming Locals(2 0x3): 3+ 0+ 
bkID(2) local(2 #1)  not found in goalBk
bkID(2) local(0 #3)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
dstBk(2) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
dstBk(2) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
bkID(2) local(1 #0)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
bkID(2) local(2 #1)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
dstBk(2) local(2 1) found in slot(2)
local(2 1) same slot
+bk  bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
dstBk(2) local(2 1) found in slot(2)
local(2 1) same slot
+gbk bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
bkID(2) local(0 #3)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
dstBk(2) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(3) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(3) Incoming Locals(2 0x3): 3+ 0+ 
bkID(2) local(1 #0)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(3 0x7): 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(3) Incoming Locals(2 0x3): 3+ 0+ 
bkID(2) local(2 #1)  not found in goalBk
Popping blockID(2)
bkID(0) local(0 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x0): 0- 1- 
dstBk(0) local(1 0) found in slot(0)
local(#1) swapped with local(#0)
+bk  bkID(0) Incoming Locals(2 0x2): 1- 0+ 
bkID(0) local(1 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x2): 1- 0+ 
dstBk(0) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(0) Incoming Locals(2 0x2): 1- 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(3 0x7): 3+ 0+ 1+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(3 0x7): 3+ 0+ 1+ 
pre  bkID(0) Incoming Locals(2 0x2): 1- 0+ 
local(#0) swapped with local(#3)
post bkID(0) Incoming Locals(4 0xa): <null> 0+ <null> 1+ 
pre  bkID(17) Incoming Locals(3 0x4): <null> 4- 1+ 
local(#1) swapped with local(#4)
post bkID(17) Incoming Locals(5 0x14): <null> <null> 1+ <null> 4+ 

#################################################

The maximum node counts per root node are 8
IR block list contains 18 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 4 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0xa
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:75)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<0>  (0x9536b8):    aldc_ind_quick #5
<2>  (0x9536ba):    astore_2 
<3>  (0x9536bb):    iconst_0 
<4>  (0x9536bc):    istore_3 
<5>  (0x9536bd):    goto <199>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Incoming Locals(4): 
	<null>
	local(0)	ID(41)
 	<null>
	local(1)	ID(30)
 
Assigned Locals(2): 
	ASSIGN(5): local(2)	ID(4)	rhsID(2)
 	ASSIGN(7): local(3)	ID(6)	rhsID(3)
 
Successor Blocks(1): 
	ID(1) LocalOrder(0) AssignOrder(2) RefsOK(1) Locals(3 0 1 <null> <null>)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 4) LOCAL (reference)   2>
      <(ID: 2) CONST_STRING_ICELL (reference)  (stringICell 0x90e08c)


   <(ID: 7) ASSIGN (int)  (assignIdx: 1)
      <(ID: 6) LOCAL (int)   3>
      <(ID: 3) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 8) GOTO (NONE) 
   target: (BlockID: 1 BlockPC: 199)


*************************************************
*
* (block ID:2 block PC:8 )
* IR root list contains 3 root nodes: in block 
* flags: 0x361
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x7
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:80)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<8>  (0x9536c0):    iload_3 
<9>  (0x9536c1):    bipush 7
<11>  (0x9536c3):    iand 
<12>  (0x9536c4):    ifne <22>
<15>  (0x9536c7):    aload_1 
<16>  (0x9536c8):    bipush 10
<18>  (0x9536ca):    invokenonvirtual_quick #6 <java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;>
<21>  (0x9536cd):    pop 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(3)	ID(25)
 	local(1)	ID(30)
 
Incoming Locals(3): 
	local(3)	ID(25)
 	local(0)	ID(41)
 	local(1)	ID(30)
 
Successor Blocks(1): 
	ID(3) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(3 0)

   <(ID: 24) MAP_PC (NONE)   8>

   <(ID: 29) BCOND (int) 
   target: (BlockID: 3 BlockPC: 22)
   condition: NE
   flags: 0
      <(ID: 27) AND (int) 
         <(ID: 25) LOCAL (int)   3>
         <(ID: 26) CONST_JAVA_NUMERIC32 (int)  (7)
      <(ID: 28) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 38) INVOKE (reference) 
      <(ID: 35) PARAMETER (reference) 
         <(ID: 30) IDENTITY (reference)  (ref count: 2)
            <(ID: 39) LOCAL (reference)   1>
         <(ID: 34) PARAMETER (int) 
            <(ID: 31) CONST_JAVA_NUMERIC32 (int)  (10)
            <(ID: 33) NULL_PARAMETER (NONE) 
      <(ID: 37) SEQUENCE_R (address field) 
         <(ID: 36) NULL_CHECK (reference) 
            <(ID: 30) IDENTITY (reference)  (ref count: 2)
         <(ID: 32) CONST_MB (address field)  (java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;)


*************************************************
*
* (block ID:3 block PC:22 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:82)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<22>  (0x9536ce):    aload_0 
<23>  (0x9536cf):    agetfield_quick #3
<26>  (0x9536d2):    iload_3 
<27>  (0x9536d3):    baload 
<28>  (0x9536d4):    tableswitch 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(41)
 	local(3)	ID(45)
 
Incoming Locals(2): 
	local(3)	ID(45)
 	local(0)	ID(41)
 
   <(ID: 40) MAP_PC (NONE)   22>

   <(ID: 44) IDENTITY (reference)  (ref count: 3)
      <(ID: 51) FETCH (reference) 
         <(ID: 43) FIELD_REF (reference) 
            <(ID: 41) LOCAL (reference)   0>
            <(ID: 42) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 49) IDENTITY (int)  (ref count: 2)
      <(ID: 52) FETCH (int) 
         <(ID: 48) INDEX (int) 
            <(ID: 44) IDENTITY (reference)  (ref count: 3)
            <(ID: 47) BOUNDS_CHECK (int) 
               <(ID: 45) LOCAL (int)   3>
               <(ID: 46) ARRAY_LENGTH (int) 
                  <(ID: 44) IDENTITY (reference)  (ref count: 3)

   <(ID: 50) TABLESWITCH (NONE) 
   Key:
      <(ID: 49) IDENTITY (int)  (ref count: 2)
   default target: (BlockID: 4 BlockPC: 176)
   	low: 0
   	high: 11
   	nElements: 12
   	tableList blocks:
      jump offset 0: (BlockID: 5 BlockPC: 92)
      jump offset 1: (BlockID: 6 BlockPC: 99)
      jump offset 2: (BlockID: 7 BlockPC: 106)
      jump offset 3: (BlockID: 8 BlockPC: 113)
      jump offset 4: (BlockID: 9 BlockPC: 120)
      jump offset 5: (BlockID: 10 BlockPC: 127)
      jump offset 6: (BlockID: 11 BlockPC: 134)
      jump offset 7: (BlockID: 12 BlockPC: 141)
      jump offset 8: (BlockID: 13 BlockPC: 148)
      jump offset 9: (BlockID: 14 BlockPC: 155)
      jump offset 10: (BlockID: 15 BlockPC: 162)
      jump offset 11: (BlockID: 16 BlockPC: 169)


*************************************************
*
* (block ID:5 block PC:92 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:83)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<92>  (0x953714):    bipush 112
<94>  (0x953716):    istore 4
<96>  (0x953718):    goto <189>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(76): local(4)	ID(75)	rhsID(74)
 
Successor Blocks(1): 
	ID(17) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(<null> <null> 1 <null> 4)

   <(ID: 73) MAP_PC (NONE)   92>

   <(ID: 76) ASSIGN (int)  (assignIdx: 0)
      <(ID: 75) LOCAL (int)   4>
      <(ID: 74) CONST_JAVA_NUMERIC32 (int)  (112)

   <(ID: 77) GOTO (NONE) 
   target: (BlockID: 17 BlockPC: 189)


*************************************************
*
* (block ID:6 block PC:99 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:84)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<99>  (0x95371b):    bipush 107
<101>  (0x95371d):    istore 4
<103>  (0x95371f):    goto <189>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(81): local(4)	ID(80)	rhsID(79)
 
Successor Blocks(1): 
	ID(17) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(<null> <null> 1 <null> 4)

   <(ID: 78) MAP_PC (NONE)   99>

   <(ID: 81) ASSIGN (int)  (assignIdx: 0)
      <(ID: 80) LOCAL (int)   4>
      <(ID: 79) CONST_JAVA_NUMERIC32 (int)  (107)

   <(ID: 82) GOTO (NONE) 
   target: (BlockID: 17 BlockPC: 189)


*************************************************
*
* (block ID:7 block PC:106 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:85)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<106>  (0x953722):    bipush 98
<108>  (0x953724):    istore 4
<110>  (0x953726):    goto <189>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(86): local(4)	ID(85)	rhsID(84)
 
Successor Blocks(1): 
	ID(17) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(<null> <null> 1 <null> 4)

   <(ID: 83) MAP_PC (NONE)   106>

   <(ID: 86) ASSIGN (int)  (assignIdx: 0)
      <(ID: 85) LOCAL (int)   4>
      <(ID: 84) CONST_JAVA_NUMERIC32 (int)  (98)

   <(ID: 87) GOTO (NONE) 
   target: (BlockID: 17 BlockPC: 189)


*************************************************
*
* (block ID:8 block PC:113 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:86)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<113>  (0x953729):    bipush 114
<115>  (0x95372b):    istore 4
<117>  (0x95372d):    goto <189>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(91): local(4)	ID(90)	rhsID(89)
 
Successor Blocks(1): 
	ID(17) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(<null> <null> 1 <null> 4)

   <(ID: 88) MAP_PC (NONE)   113>

   <(ID: 91) ASSIGN (int)  (assignIdx: 0)
      <(ID: 90) LOCAL (int)   4>
      <(ID: 89) CONST_JAVA_NUMERIC32 (int)  (114)

   <(ID: 92) GOTO (NONE) 
   target: (BlockID: 17 BlockPC: 189)


*************************************************
*
* (block ID:9 block PC:120 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:87)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<120>  (0x953730):    bipush 113
<122>  (0x953732):    istore 4
<124>  (0x953734):    goto <189>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(96): local(4)	ID(95)	rhsID(94)
 
Successor Blocks(1): 
	ID(17) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(<null> <null> 1 <null> 4)

   <(ID: 93) MAP_PC (NONE)   120>

   <(ID: 96) ASSIGN (int)  (assignIdx: 0)
      <(ID: 95) LOCAL (int)   4>
      <(ID: 94) CONST_JAVA_NUMERIC32 (int)  (113)

   <(ID: 97) GOTO (NONE) 
   target: (BlockID: 17 BlockPC: 189)


*************************************************
*
* (block ID:10 block PC:127 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:88)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<127>  (0x953737):    bipush 120
<129>  (0x953739):    istore 4
<131>  (0x95373b):    goto <189>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(101): local(4)	ID(100)	rhsID(99)
 
Successor Blocks(1): 
	ID(17) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(<null> <null> 1 <null> 4)

   <(ID: 98) MAP_PC (NONE)   127>

   <(ID: 101) ASSIGN (int)  (assignIdx: 0)
      <(ID: 100) LOCAL (int)   4>
      <(ID: 99) CONST_JAVA_NUMERIC32 (int)  (120)

   <(ID: 102) GOTO (NONE) 
   target: (BlockID: 17 BlockPC: 189)


*************************************************
*
* (block ID:11 block PC:134 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:89)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<134>  (0x95373e):    bipush 80
<136>  (0x953740):    istore 4
<138>  (0x953742):    goto <189>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(106): local(4)	ID(105)	rhsID(104)
 
Successor Blocks(1): 
	ID(17) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(<null> <null> 1 <null> 4)

   <(ID: 103) MAP_PC (NONE)   134>

   <(ID: 106) ASSIGN (int)  (assignIdx: 0)
      <(ID: 105) LOCAL (int)   4>
      <(ID: 104) CONST_JAVA_NUMERIC32 (int)  (80)

   <(ID: 107) GOTO (NONE) 
   target: (BlockID: 17 BlockPC: 189)


*************************************************
*
* (block ID:12 block PC:141 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:90)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<141>  (0x953745):    bipush 75
<143>  (0x953747):    istore 4
<145>  (0x953749):    goto <189>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(111): local(4)	ID(110)	rhsID(109)
 
Successor Blocks(1): 
	ID(17) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(<null> <null> 1 <null> 4)

   <(ID: 108) MAP_PC (NONE)   141>

   <(ID: 111) ASSIGN (int)  (assignIdx: 0)
      <(ID: 110) LOCAL (int)   4>
      <(ID: 109) CONST_JAVA_NUMERIC32 (int)  (75)

   <(ID: 112) GOTO (NONE) 
   target: (BlockID: 17 BlockPC: 189)


*************************************************
*
* (block ID:13 block PC:148 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:91)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<148>  (0x95374c):    bipush 66
<150>  (0x95374e):    istore 4
<152>  (0x953750):    goto <189>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(116): local(4)	ID(115)	rhsID(114)
 
Successor Blocks(1): 
	ID(17) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(<null> <null> 1 <null> 4)

   <(ID: 113) MAP_PC (NONE)   148>

   <(ID: 116) ASSIGN (int)  (assignIdx: 0)
      <(ID: 115) LOCAL (int)   4>
      <(ID: 114) CONST_JAVA_NUMERIC32 (int)  (66)

   <(ID: 117) GOTO (NONE) 
   target: (BlockID: 17 BlockPC: 189)


*************************************************
*
* (block ID:14 block PC:155 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:92)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<155>  (0x953753):    bipush 82
<157>  (0x953755):    istore 4
<159>  (0x953757):    goto <189>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(121): local(4)	ID(120)	rhsID(119)
 
Successor Blocks(1): 
	ID(17) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(<null> <null> 1 <null> 4)

   <(ID: 118) MAP_PC (NONE)   155>

   <(ID: 121) ASSIGN (int)  (assignIdx: 0)
      <(ID: 120) LOCAL (int)   4>
      <(ID: 119) CONST_JAVA_NUMERIC32 (int)  (82)

   <(ID: 122) GOTO (NONE) 
   target: (BlockID: 17 BlockPC: 189)


*************************************************
*
* (block ID:15 block PC:162 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:93)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<162>  (0x95375a):    bipush 81
<164>  (0x95375c):    istore 4
<166>  (0x95375e):    goto <189>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(126): local(4)	ID(125)	rhsID(124)
 
Successor Blocks(1): 
	ID(17) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(<null> <null> 1 <null> 4)

   <(ID: 123) MAP_PC (NONE)   162>

   <(ID: 126) ASSIGN (int)  (assignIdx: 0)
      <(ID: 125) LOCAL (int)   4>
      <(ID: 124) CONST_JAVA_NUMERIC32 (int)  (81)

   <(ID: 127) GOTO (NONE) 
   target: (BlockID: 17 BlockPC: 189)


*************************************************
*
* (block ID:16 block PC:169 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:94)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<169>  (0x953761):    bipush 88
<171>  (0x953763):    istore 4
<173>  (0x953765):    goto <189>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(131): local(4)	ID(130)	rhsID(129)
 
Successor Blocks(1): 
	ID(17) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(<null> <null> 1 <null> 4)

   <(ID: 128) MAP_PC (NONE)   169>

   <(ID: 131) ASSIGN (int)  (assignIdx: 0)
      <(ID: 130) LOCAL (int)   4>
      <(ID: 129) CONST_JAVA_NUMERIC32 (int)  (88)

   <(ID: 132) GOTO (NONE) 
   target: (BlockID: 17 BlockPC: 189)


*************************************************
*
* (block ID:4 block PC:176 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:95)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<176>  (0x953768):    aload_2 
<177>  (0x953769):    iload_3 
<178>  (0x95376a):    iconst_3 
<179>  (0x95376b):    ishr 
<180>  (0x95376c):    iload_3 
<181>  (0x95376d):    iadd 
<182>  (0x95376e):    iconst_1 
<183>  (0x95376f):    iand 
<184>  (0x953770):    invokenonvirtual_quick #7 <java.lang.String.charAt(I)C>
<187>  (0x953773):    istore 4
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(71): local(4)	ID(70)	rhsID(67)
 
Successor Blocks(1): 
	ID(17) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(<null> <null> 1 <null> 4)

   <(ID: 53) MAP_PC (NONE)   176>

   <(ID: 67) IDENTITY (int)  (ref count: 2)
      <(ID: 72) INTRINSIC (int) 
         <(ID: 64) IARG (reference) 
            <(ID: 54) IDENTITY (reference)  (ref count: 2)
               <(ID: 69) LOCAL (reference)   2>
            <(ID: 63) IARG (int) 
               <(ID: 60) AND (int) 
                  <(ID: 58) ADD (int) 
                     <(ID: 57) SHR (int) 
                        <(ID: 55) IDENTITY (int)  (ref count: 2)
                           <(ID: 68) LOCAL (int)   3>
                        <(ID: 56) CONST_JAVA_NUMERIC32 (int)  (3)
                     <(ID: 55) IDENTITY (int)  (ref count: 2)
                  <(ID: 59) CONST_JAVA_NUMERIC32 (int)  (1)
               <(ID: 62) NULL_IARG (NONE) 
         <(ID: 66) SEQUENCE_R (address field) 
            <(ID: 65) NULL_CHECK (reference) 
               <(ID: 54) IDENTITY (reference)  (ref count: 2)
            <(ID: 61) CONST_MB (address field)  (java.lang.String.charAt(I)C)

   <(ID: 71) ASSIGN (int)  (assignIdx: 0)
      <(ID: 70) LOCAL (int)   4>
      <(ID: 67) IDENTITY (int)  (ref count: 2)


*************************************************
*
* (block ID:17 block PC:189 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x14
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:98)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<189>  (0x953775):    aload_1 
<190>  (0x953776):    iload 4
<192>  (0x953778):    invokenonvirtual_quick #6 <java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;>
<195>  (0x95377b):    pop 
<196>  (0x95377c):    iinc 3 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(1)	ID(134)
 	local(4)	ID(135)
 
Incoming Locals(5): 
	<null>
	<null>
	local(1)	ID(134)
 	<null>
	local(4)	ID(135)
 
Assigned Locals(1): 
	ASSIGN(148): local(3)	ID(147)	rhsID(146)
 
Successor Blocks(1): 
	ID(1) LocalOrder(2) AssignOrder(1) RefsOK(0) Locals(3 0 1 <null> <null>)

   <(ID: 133) MAP_PC (NONE)   189>

   <(ID: 142) INVOKE (reference) 
      <(ID: 139) PARAMETER (reference) 
         <(ID: 134) IDENTITY (reference)  (ref count: 2)
            <(ID: 143) LOCAL (reference)   1>
         <(ID: 138) PARAMETER (int) 
            <(ID: 135) LOCAL (int)   4>
            <(ID: 137) NULL_PARAMETER (NONE) 
      <(ID: 141) SEQUENCE_R (address field) 
         <(ID: 140) NULL_CHECK (reference) 
            <(ID: 134) IDENTITY (reference)  (ref count: 2)
         <(ID: 136) CONST_MB (address field)  (java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;)

   <(ID: 144) IDENTITY (int)  (ref count: 2)
      <(ID: 149) LOCAL (int)   3>

   <(ID: 148) ASSIGN (int)  (assignIdx: 0)
      <(ID: 147) LOCAL (int)   3>
      <(ID: 146) ADD (int) 
         <(ID: 144) IDENTITY (int)  (ref count: 2)
         <(ID: 145) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:1 block PC:199 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1f
* Source: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V(GameState.java:77)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<199>  (0x95377f):    iload_3 
<200>  (0x953780):    bipush 64
<202>  (0x953782):    if_icmplt <8>
<205>  (0x953785):    aload_1 
<206>  (0x953786):    bipush 10
<208>  (0x953788):    invokenonvirtual_quick #6 <java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;>
<211>  (0x95378b):    pop 
<212>  (0x95378c):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(3)	ID(10)
 	local(1)	ID(13)
 
Incoming Locals(5): 
	local(3)	ID(10)
 	local(0)	ID(41)
 	local(1)	ID(30)
 	<null>
	<null>

Successor Blocks(1): 
	ID(2) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(3 0 1)

   <(ID: 9) MAP_PC (NONE)   199>

   <(ID: 12) BCOND (int) 
   target: (BlockID: 2 BlockPC: 8)
   condition: LT
   flags: 0
      <(ID: 10) LOCAL (int)   3>
      <(ID: 11) CONST_JAVA_NUMERIC32 (int)  (64)


   <(ID: 21) INVOKE (reference) 
      <(ID: 18) PARAMETER (reference) 
         <(ID: 13) IDENTITY (reference)  (ref count: 2)
            <(ID: 22) LOCAL (reference)   1>
         <(ID: 17) PARAMETER (int) 
            <(ID: 14) CONST_JAVA_NUMERIC32 (int)  (10)
            <(ID: 16) NULL_PARAMETER (NONE) 
      <(ID: 20) SEQUENCE_R (address field) 
         <(ID: 19) NULL_CHECK (reference) 
            <(ID: 13) IDENTITY (reference)  (ref count: 2)
         <(ID: 15) CONST_MB (address field)  (java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;)

   <(ID: 23) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 8
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 1286
ESTIMATED BUFFER SIZE = 1484
CODE BUFFER ADDRESS = 0x2bcc0668
PC MAP TABLE ADDRESS = 0x2bcc0670
GC CHECK PCS ADDRESS = 0x2bcc06bc
CODE ENTRY ADDRESS = 0x2bcc06e8
          		@ Method prologue
0x2bcc06e8	0:	addiu	a1, JSP, 56	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc06ec	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc06f0	8:	sltu	t7, a1, CHUNKEND
0x2bcc06f4	12:	bne	t7, zero, PC=0x2bcc06e8	@ goto .skip
0x2bcc06f8	16:	nop
0x2bcc06fc	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc0700	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc06f4) >>>>>>>>
0x2bcc06f4	12:	bne	t7, zero, PC=0x2bcc0704	@ goto .skip
0x2bcc06f8	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc0704) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc0704	28:	sw	JFP, 12(JSP)	@ Store curr JFP into new frame
0x2bcc0708	32:	addiu	JFP, JSP, 12	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc070c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc0710	40:	addiu	a3, zero, 0
0x2bcc0714	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc0718	48:	addiu	a3, zero, -1
0x2bcc071c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc0720	56:	move	a0, EE
0x2bcc0724	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc0728	64:	lui	t9, hi16(0x65)
0x2bcc072c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc0730	72:	jalr	t9
0x2bcc0734	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc0738	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc073c	84:	nop
0x2bcc0740	88:	nop
0x2bcc0744	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(21)
0x2bcc0748	96:	lw	s5, -20(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(23)
0x2bcc074c	100:	lw	s7, -16(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
0x2bcc0750	104:	lw	s4, 0(CP)	@ StringICell
0x2bcc0754	108:	lw	s6, 0(s4)	@ StringObject from StringICell
0x2bcc0758	112:	sw	s6, -12(JFP)	@ Java local cell # 2
0x2bcc075c	116:	sw	zero, -8(JFP)	@ Java local cell # 3
			@ Outgoing local(3) reg(20): in wrong register
0x2bcc0760	120:	move	s4, zero
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(1) reg(22): in wrong register
0x2bcc0764	124:	move	s6, s7
0x2bcc0768	128:	b	PC=0x2bcc0768	@ branch to block L1
0x2bcc076c	132:	nop
			@ Initial Temp REF set is 
	L2:	136:	@ Patchable GC Check point
0x2bcc0770	136:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcc0770	136:	nop
0x2bcc0774	140:	nop
          		@ Captured a stackmap here.
	L2:	144:	@ entry point when locals need to be loaded
			@ Preloading incoming local(3) reg(20)
0x2bcc0778	144:	lw	s4, -8(JFP)	@ Java local cell # 3
			@ Preloading incoming local(0) reg(21)
0x2bcc077c	148:	lw	s5, -20(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(22)
0x2bcc0780	152:	lw	s6, -16(JFP)	@ Java local cell # 1
	L2:	156:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=8 compiledPc=144
0x2bcc0784	156:	andi	s7, s4, 7
			@ Outgoing local(3) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
0x2bcc0788	160:	bne	s7, zero, PC=0x2bcc0788	@ branch to block L3
0x2bcc078c	164:	nop
0x2bcc0790	168:	sw	s6, 0(JSP)
0x2bcc0794	172:	addiu	s7, zero, 10	@ const 10
0x2bcc0798	176:	sw	s7, 4(JSP)
0x2bcc079c	180:	lw	ra, 0(s6)	@ NULL check
0x2bcc07a0	184:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc07a4	188:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc07a8	192:	lw	s7, 0(a0)	@ call method through mb
0x2bcc07ac	196:	jalr	s7
0x2bcc07b0	200:	nop
          		@ Captured a stackmap here.
0x2bcc07b4	204:	addiu	JSP, JSP, -4
			@ Outgoing local(3) reg(20): not in register
0x2bcc07b8	208:	lw	s4, -8(JFP)	@ Java local cell # 3
			@ Outgoing local(0) reg(21): not in register
0x2bcc07bc	212:	lw	s5, -20(JFP)	@ Java local cell # 0
			@ Initial Temp REF set is 
	L3:	216:	@ entry point for branches
			@ Binding Incoming Local(3) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 160(0x2bcc0788) to reference 216
          		@ MAP_PC idepth=0 javaPc=22 compiledPc=216
          		@ Do getfield:
0x2bcc07c0	216:	lw	s7, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc07c4	220:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcc07c8	224:	sltu	t7, s4, s6
0x2bcc07cc	228:	bne	t7, zero, PC=0x2bcc07c8	@ br .skip
0x2bcc07d0	232:	nop
0x2bcc07d4	236:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcc07d8	240:	nop
		.skip
--->Fixed instruction at 228(0x2bcc07cc) to reference 244
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcc07dc	244:	addu	ra, s7, s4
0x2bcc07e0	248:	lb	s6, 12(ra)
          		@ tableswitch
          		@ deferred comparison: 
0x2bcc07e4	252:	addiu	t7, zero, 11
0x2bcc07e8	256:	sltu	t7, t7, s6
0x2bcc07ec	260:	bne	t7, zero, PC=0x2bcc07e4	@ branch to block L4
0x2bcc07f0	264:	nop
0x2bcc07f4	268:	lw	s7, 0(CP)
0x2bcc07f8	272:	sll	t9, s6, 3
0x2bcc07fc	276:	addu	t9, t9, s7
0x2bcc0800	280:	jr	t9
0x2bcc0804	284:	nop
0x2bcc0808	288:	b	PC=0x2bcc0808	@ branch to block L5
0x2bcc080c	292:	nop
0x2bcc0810	296:	b	PC=0x2bcc0810	@ branch to block L6
0x2bcc0814	300:	nop
0x2bcc0818	304:	b	PC=0x2bcc0818	@ branch to block L7
0x2bcc081c	308:	nop
0x2bcc0820	312:	b	PC=0x2bcc0820	@ branch to block L8
0x2bcc0824	316:	nop
0x2bcc0828	320:	b	PC=0x2bcc0828	@ branch to block L9
0x2bcc082c	324:	nop
0x2bcc0830	328:	b	PC=0x2bcc0830	@ branch to block L10
0x2bcc0834	332:	nop
0x2bcc0838	336:	b	PC=0x2bcc0838	@ branch to block L11
0x2bcc083c	340:	nop
0x2bcc0840	344:	b	PC=0x2bcc0840	@ branch to block L12
0x2bcc0844	348:	nop
0x2bcc0848	352:	b	PC=0x2bcc0848	@ branch to block L13
0x2bcc084c	356:	nop
0x2bcc0850	360:	b	PC=0x2bcc0850	@ branch to block L14
0x2bcc0854	364:	nop
0x2bcc0858	368:	b	PC=0x2bcc0858	@ branch to block L15
0x2bcc085c	372:	nop
0x2bcc0860	376:	b	PC=0x2bcc0860	@ branch to block L16
0x2bcc0864	380:	nop
			@ Initial Temp REF set is 
	L5:	384:	@ entry point for branches
--->Fixed instruction at 288(0x2bcc0808) to reference 384
          		@ MAP_PC idepth=0 javaPc=92 compiledPc=384
0x2bcc0868	384:	addiu	ra, zero, 112	@ const 112
0x2bcc086c	388:	sw	ra, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(1) reg(22): not in register
0x2bcc0870	392:	lw	s6, -16(JFP)	@ Java local cell # 1
0x2bcc0874	396:	b	PC=0x2bcc0874	@ branch to block L17
0x2bcc0878	400:	nop
			@ Initial Temp REF set is 
	L6:	404:	@ entry point for branches
--->Fixed instruction at 296(0x2bcc0810) to reference 404
          		@ MAP_PC idepth=0 javaPc=99 compiledPc=404
0x2bcc087c	404:	addiu	ra, zero, 107	@ const 107
0x2bcc0880	408:	sw	ra, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(1) reg(22): not in register
0x2bcc0884	412:	lw	s6, -16(JFP)	@ Java local cell # 1
0x2bcc0888	416:	b	PC=0x2bcc0888	@ branch to block L17
0x2bcc088c	420:	nop
			@ Initial Temp REF set is 
	L7:	424:	@ entry point for branches
--->Fixed instruction at 304(0x2bcc0818) to reference 424
          		@ MAP_PC idepth=0 javaPc=106 compiledPc=424
0x2bcc0890	424:	addiu	ra, zero, 98	@ const 98
0x2bcc0894	428:	sw	ra, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(1) reg(22): not in register
0x2bcc0898	432:	lw	s6, -16(JFP)	@ Java local cell # 1
0x2bcc089c	436:	b	PC=0x2bcc089c	@ branch to block L17
0x2bcc08a0	440:	nop
			@ Initial Temp REF set is 
	L8:	444:	@ entry point for branches
--->Fixed instruction at 312(0x2bcc0820) to reference 444
          		@ MAP_PC idepth=0 javaPc=113 compiledPc=444
0x2bcc08a4	444:	addiu	ra, zero, 114	@ const 114
0x2bcc08a8	448:	sw	ra, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(1) reg(22): not in register
0x2bcc08ac	452:	lw	s6, -16(JFP)	@ Java local cell # 1
0x2bcc08b0	456:	b	PC=0x2bcc08b0	@ branch to block L17
0x2bcc08b4	460:	nop
			@ Initial Temp REF set is 
	L9:	464:	@ entry point for branches
--->Fixed instruction at 320(0x2bcc0828) to reference 464
          		@ MAP_PC idepth=0 javaPc=120 compiledPc=464
0x2bcc08b8	464:	addiu	ra, zero, 113	@ const 113
0x2bcc08bc	468:	sw	ra, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(1) reg(22): not in register
0x2bcc08c0	472:	lw	s6, -16(JFP)	@ Java local cell # 1
0x2bcc08c4	476:	b	PC=0x2bcc08c4	@ branch to block L17
0x2bcc08c8	480:	nop
			@ Initial Temp REF set is 
	L10:	484:	@ entry point for branches
--->Fixed instruction at 328(0x2bcc0830) to reference 484
          		@ MAP_PC idepth=0 javaPc=127 compiledPc=484
0x2bcc08cc	484:	addiu	ra, zero, 120	@ const 120
0x2bcc08d0	488:	sw	ra, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(1) reg(22): not in register
0x2bcc08d4	492:	lw	s6, -16(JFP)	@ Java local cell # 1
0x2bcc08d8	496:	b	PC=0x2bcc08d8	@ branch to block L17
0x2bcc08dc	500:	nop
			@ Initial Temp REF set is 
	L11:	504:	@ entry point for branches
--->Fixed instruction at 336(0x2bcc0838) to reference 504
          		@ MAP_PC idepth=0 javaPc=134 compiledPc=504
0x2bcc08e0	504:	addiu	ra, zero, 80	@ const 80
0x2bcc08e4	508:	sw	ra, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(1) reg(22): not in register
0x2bcc08e8	512:	lw	s6, -16(JFP)	@ Java local cell # 1
0x2bcc08ec	516:	b	PC=0x2bcc08ec	@ branch to block L17
0x2bcc08f0	520:	nop
			@ Initial Temp REF set is 
	L12:	524:	@ entry point for branches
--->Fixed instruction at 344(0x2bcc0840) to reference 524
          		@ MAP_PC idepth=0 javaPc=141 compiledPc=524
0x2bcc08f4	524:	addiu	ra, zero, 75	@ const 75
0x2bcc08f8	528:	sw	ra, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(1) reg(22): not in register
0x2bcc08fc	532:	lw	s6, -16(JFP)	@ Java local cell # 1
0x2bcc0900	536:	b	PC=0x2bcc0900	@ branch to block L17
0x2bcc0904	540:	nop
			@ Initial Temp REF set is 
	L13:	544:	@ entry point for branches
--->Fixed instruction at 352(0x2bcc0848) to reference 544
          		@ MAP_PC idepth=0 javaPc=148 compiledPc=544
0x2bcc0908	544:	addiu	ra, zero, 66	@ const 66
0x2bcc090c	548:	sw	ra, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(1) reg(22): not in register
0x2bcc0910	552:	lw	s6, -16(JFP)	@ Java local cell # 1
0x2bcc0914	556:	b	PC=0x2bcc0914	@ branch to block L17
0x2bcc0918	560:	nop
			@ Initial Temp REF set is 
	L14:	564:	@ entry point for branches
--->Fixed instruction at 360(0x2bcc0850) to reference 564
          		@ MAP_PC idepth=0 javaPc=155 compiledPc=564
0x2bcc091c	564:	addiu	ra, zero, 82	@ const 82
0x2bcc0920	568:	sw	ra, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(1) reg(22): not in register
0x2bcc0924	572:	lw	s6, -16(JFP)	@ Java local cell # 1
0x2bcc0928	576:	b	PC=0x2bcc0928	@ branch to block L17
0x2bcc092c	580:	nop
			@ Initial Temp REF set is 
	L15:	584:	@ entry point for branches
--->Fixed instruction at 368(0x2bcc0858) to reference 584
          		@ MAP_PC idepth=0 javaPc=162 compiledPc=584
0x2bcc0930	584:	addiu	ra, zero, 81	@ const 81
0x2bcc0934	588:	sw	ra, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(1) reg(22): not in register
0x2bcc0938	592:	lw	s6, -16(JFP)	@ Java local cell # 1
0x2bcc093c	596:	b	PC=0x2bcc093c	@ branch to block L17
0x2bcc0940	600:	nop
			@ Initial Temp REF set is 
	L16:	604:	@ entry point for branches
--->Fixed instruction at 376(0x2bcc0860) to reference 604
          		@ MAP_PC idepth=0 javaPc=169 compiledPc=604
0x2bcc0944	604:	addiu	ra, zero, 88	@ const 88
0x2bcc0948	608:	sw	ra, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(1) reg(22): not in register
0x2bcc094c	612:	lw	s6, -16(JFP)	@ Java local cell # 1
0x2bcc0950	616:	b	PC=0x2bcc0950	@ branch to block L17
0x2bcc0954	620:	nop
			@ Initial Temp REF set is 
	L4:	624:	@ entry point for branches
--->Fixed instruction at 260(0x2bcc07ec) to reference 624
          		@ MAP_PC idepth=0 javaPc=176 compiledPc=624
0x2bcc0958	624:	lw	a1, -12(JFP)	@ Java local cell # 2
0x2bcc095c	628:	lw	ra, -8(JFP)	@ Java local cell # 3
0x2bcc0960	632:	sra	s7, ra, 3
0x2bcc0964	636:	addu	s6, s7, ra
0x2bcc0968	640:	andi	a2, s6, 1
0x2bcc096c	644:	lw	s7, 0(a1)	@ NULL check
0x2bcc0970	648:	lw	t9, 0(CP)	@ mb java.lang.String.charAt(I)C
          		@ Invoke INTRINSIC java.lang.String.charAt(I)C:
0x2bcc0974	652:	sw	JFP, 76(EE)	@ flush JFP to stack
0x2bcc0978	656:	addiu	a0, SP, 64	@ load CCEE into register
0x2bcc097c	660:	lw	t9, 0(CP)
0x2bcc0980	664:	lui	ra, hi16(0x2bcc)
0x2bcc0984	668:	ori	ra, ra, lo16(0x2bcc0980)	@ return address
0x2bcc0988	672:	sw	JSP, 8(JFP)	@ Store JSP into the compiled frame
0x2bcc098c	676:	jalr	t9	@ java.lang.String.charAt(I)C helper
0x2bcc0990	680:	sw	ra, 16(JFP)	@ flush return address to frame
>>>>>>>>>Push Code Buffer to PC = 664 (0x2bcc0980) >>>>>>>>
0x2bcc0980	664:	lui	ra, hi16(0x2bcc)
0x2bcc0984	668:	ori	ra, ra, lo16(0x2bcc0994)	@ fix return address
<<<<<<<<<Pop Code Buffer to PC = 684 (0x2bcc0994) <<<<<<<<<
          		@ Captured a stackmap here.
0x2bcc0994	684:	sw	v0, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(1) reg(22): not in register
0x2bcc0998	688:	lw	s6, -16(JFP)	@ Java local cell # 1
			@ Initial Temp REF set is 
	L17:	692:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(22)
--->Fixed instruction at 616(0x2bcc0950) to reference 692
--->Fixed instruction at 596(0x2bcc093c) to reference 692
--->Fixed instruction at 576(0x2bcc0928) to reference 692
--->Fixed instruction at 556(0x2bcc0914) to reference 692
--->Fixed instruction at 536(0x2bcc0900) to reference 692
--->Fixed instruction at 516(0x2bcc08ec) to reference 692
--->Fixed instruction at 496(0x2bcc08d8) to reference 692
--->Fixed instruction at 476(0x2bcc08c4) to reference 692
--->Fixed instruction at 456(0x2bcc08b0) to reference 692
--->Fixed instruction at 436(0x2bcc089c) to reference 692
--->Fixed instruction at 416(0x2bcc0888) to reference 692
--->Fixed instruction at 396(0x2bcc0874) to reference 692
          		@ MAP_PC idepth=0 javaPc=189 compiledPc=692
0x2bcc099c	692:	sw	s6, 0(JSP)
0x2bcc09a0	696:	lw	ra, -4(JFP)	@ Java local cell # 4
0x2bcc09a4	700:	sw	ra, 4(JSP)
0x2bcc09a8	704:	lw	s7, 0(s6)	@ NULL check
0x2bcc09ac	708:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc09b0	712:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc09b4	716:	lw	s7, 0(a0)	@ call method through mb
0x2bcc09b8	720:	jalr	s7
0x2bcc09bc	724:	nop
          		@ Captured a stackmap here.
0x2bcc09c0	728:	addiu	JSP, JSP, -4
0x2bcc09c4	732:	lw	ra, -8(JFP)	@ Java local cell # 3
0x2bcc09c8	736:	addiu	s4, ra, 1
0x2bcc09cc	740:	sw	s4, -8(JFP)	@ Java local cell # 3
			@ Outgoing local(3) reg(20): in correct register
			@ Outgoing local(0) reg(21): not in register
0x2bcc09d0	744:	lw	s5, -20(JFP)	@ Java local cell # 0
			@ Outgoing local(1) reg(22): not in register
0x2bcc09d4	748:	lw	s6, -16(JFP)	@ Java local cell # 1
			@ Initial Temp REF set is 
	L1:	752:	@ entry point for branches
			@ Binding Incoming Local(3) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(1) to reg(22)
--->Fixed instruction at 128(0x2bcc0768) to reference 752
          		@ MAP_PC idepth=0 javaPc=199 compiledPc=752
			@ Outgoing local(3) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(1) reg(22): in correct register
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcc09d8	752:	sltiu	t7, s4, 64
0x2bcc09dc	756:	bne	t7, zero, PC=0x2bcc0770	@ branch to block L2
0x2bcc09e0	760:	nop
0x2bcc09d8	752:	sltiu	t7, s4, 64
0x2bcc09dc	756:	bne	t7, zero, PC=0x2bcc0784	@ branch to block L2, skip GC
0x2bcc09e0	760:	nop
0x2bcc09e4	764:	sw	s6, 0(JSP)
0x2bcc09e8	768:	addiu	s7, zero, 10	@ const 10
0x2bcc09ec	772:	sw	s7, 4(JSP)
0x2bcc09f0	776:	lw	ra, 0(s6)	@ NULL check
0x2bcc09f4	780:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc09f8	784:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc09fc	788:	lw	s7, 0(a0)	@ call method through mb
0x2bcc0a00	792:	jalr	s7
0x2bcc0a04	796:	nop
          		@ Captured a stackmap here.
0x2bcc0a08	800:	addiu	JSP, JSP, -4
0x2bcc0a0c	804:	addiu	JSP, JFP, -20
0x2bcc0a10	808:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc0a14	812:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc0a18	816:	nop
0x2bcc0a1c	820:	.word	4741984	@ target address
--->Fixed instruction at 660(0x2bcc097c) to reference 820
0x2bcc0a20	824:	.word	9065148	@ mb java.lang.String.charAt(I)C
--->Fixed instruction at 648(0x2bcc0970) to reference 824
0x2bcc0a24	828:	.word	734791688
--->Fixed instruction at 268(0x2bcc07f4) to reference 828
0x2bcc0a28	832:	.word	9109584	@ mb java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;
--->Fixed instruction at 780(0x2bcc09f4) to reference 832
--->Fixed instruction at 708(0x2bcc09ac) to reference 832
--->Fixed instruction at 184(0x2bcc07a0) to reference 832
0x2bcc0a2c	836:	.word	9494668	@ StringICell
--->Fixed instruction at 104(0x2bcc0750) to reference 836
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc06e8) >>>>>>>>
          		@ Capacity is 16 word(s)
0x2bcc06e8	0:	addiu	a1, JSP, 56
<<<<<<<<<Pop Code Buffer to PC = 840 (0x2bcc0a30) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc0738) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc0738	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc073c	84:	lui	CP, hi16(0x2bcc)
0x2bcc0740	88:	ori	CP, CP, lo16(0x2bcc0a1c)
0x2bcc0744	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 840 (0x2bcc0a30) <<<<<<<<<
JS: COMPILED: size=1008 startPC=0x2bcc06e8 com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V
OSR: Intr2Comp: com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.BPossMoves.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V
JS: COMPILING com.sun.mep.bench.Chess.BPossMoves.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V
orig bkID(0) Incoming Locals(3 0x0): 0- 1- 2- 
orig bkID(0) Incoming Locals(3 0x0): 0- 1- 2- 

#################################################

The maximum node counts per root node are 4
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 7 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.BPossMoves.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V(BPossMoves.java:46)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<0>  (0x94f5c0):    aload_0 
<1>  (0x94f5c1):    invokeignored_quick 
<4>  (0x94f5c4):    aload_0 
<5>  (0x94f5c5):    aload_1 
<6>  (0x94f5c6):    aputfield_quick #4
<9>  (0x94f5c9):    aload_0 
<10>  (0x94f5ca):    aload_2 
<11>  (0x94f5cb):    aputfield_quick #3
<14>  (0x94f5ce):    aload_0 
<15>  (0x94f5cf):    new_quick #4 <java.util.Vector>
<18>  (0x94f5d2):    dup 
<19>  (0x94f5d3):    invokenonvirtual_quick #5 <java.util.Vector.<init>()V>
<22>  (0x94f5d6):    aputfield_quick #2
<25>  (0x94f5d9):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(3): 
	local(0)	ID(2)
 	local(1)	ID(3)
 	local(2)	ID(7)
 
Incoming Locals(3): 
	local(0)	ID(2)
 	local(1)	ID(3)
 	local(2)	ID(7)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 6) ASSIGN (reference) 
      <(ID: 5) FIELD_REF (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 3)
            <(ID: 11) LOCAL (reference)   0>
         <(ID: 4) CONST_FIELD_OFFSET (NONE)  (4)
      <(ID: 3) LOCAL (reference)   1>

   <(ID: 10) ASSIGN (reference) 
      <(ID: 9) FIELD_REF (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 3)
         <(ID: 8) CONST_FIELD_OFFSET (NONE)  (3)
      <(ID: 7) LOCAL (reference)   2>

   <(ID: 13) IDENTITY (reference)  (ref count: 3)
      <(ID: 18) NEW_OBJECT (reference) 
         <(ID: 12) CONST_CB (address field)  (java.util.Vector)

   <(ID: 17) INVOKE (v) 
      <(ID: 16) PARAMETER (reference) 
         <(ID: 13) IDENTITY (reference)  (ref count: 3)
         <(ID: 15) NULL_PARAMETER (NONE) 
      <(ID: 14) CONST_MB (address field)  (java.util.Vector.<init>()V)

   <(ID: 21) ASSIGN (reference) 
      <(ID: 20) FIELD_REF (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 3)
         <(ID: 19) CONST_FIELD_OFFSET (NONE)  (2)
      <(ID: 13) IDENTITY (reference)  (ref count: 3)

   <(ID: 22) RETURN (v) 


NUM BARRIER BYTES = 48
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 164
ESTIMATED BUFFER SIZE = 316
CODE BUFFER ADDRESS = 0x2bcc0a58
PC MAP TABLE ADDRESS = 0x2bcc0a60
CODE ENTRY ADDRESS = 0x2bcc0a88
          		@ Method prologue
0x2bcc0a88	0:	addiu	a1, JSP, 44	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc0a8c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc0a90	8:	sltu	t7, a1, CHUNKEND
0x2bcc0a94	12:	bne	t7, zero, PC=0x2bcc0a88	@ goto .skip
0x2bcc0a98	16:	nop
0x2bcc0a9c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc0aa0	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc0a94) >>>>>>>>
0x2bcc0a94	12:	bne	t7, zero, PC=0x2bcc0aa4	@ goto .skip
0x2bcc0a98	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc0aa4) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc0aa4	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcc0aa8	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc0aac	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc0ab0	40:	addiu	a3, zero, 0
0x2bcc0ab4	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc0ab8	48:	addiu	a3, zero, -1
0x2bcc0abc	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc0ac0	56:	move	a0, EE
0x2bcc0ac4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc0ac8	64:	lui	t9, hi16(0x65)
0x2bcc0acc	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc0ad0	72:	jalr	t9
0x2bcc0ad4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc0ad8	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc0adc	84:	nop
0x2bcc0ae0	88:	nop
0x2bcc0ae4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc0ae8	96:	lw	s4, -12(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcc0aec	100:	lw	s5, -8(JFP)	@ Java local cell # 1
			@ Preloading incoming local(2) reg(22)
0x2bcc0af0	104:	lw	s6, -4(JFP)	@ Java local cell # 2
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=108
          		@ Do putfield:
0x2bcc0af4	108:	addiu	s7, s4, 16	@ fieldAddr = obj + fieldOffset;
0x2bcc0af8	112:	sw	s5, 0(s7)	@ putfield(fieldAddr, valueObj);
0x2bcc0afc	116:	lw	ra, 0(CP)	@ cardTableVirtualBase
0x2bcc0b00	120:	addiu	t9, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc0b04	124:	srl	t7, s7, 9	@ mark card table
0x2bcc0b08	128:	addu	t7, ra, t7	@ add indexReg and baseReg
0x2bcc0b0c	132:	sb	t9, 0(t7)
          		@ Do putfield:
0x2bcc0b10	136:	addiu	s7, s4, 12	@ fieldAddr = obj + fieldOffset;
0x2bcc0b14	140:	sw	s6, 0(s7)	@ putfield(fieldAddr, valueObj);
0x2bcc0b18	144:	srl	t7, s7, 9	@ mark card table
0x2bcc0b1c	148:	addu	t7, ra, t7	@ add indexReg and baseReg
0x2bcc0b20	152:	sb	t9, 0(t7)
0x2bcc0b24	156:	lw	a1, 0(CP)	@ cb java.util.Vector
          		@ Do new:
          		@ cb: java.util.Vector
0x2bcc0b28	160:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc0b2c	164:	nop
          		@ Captured a stackmap here.
0x2bcc0b30	168:	sw	v0, 0(JSP)
0x2bcc0b34	172:	lw	a0, 0(CP)	@ mb java.util.Vector.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc0b38	176:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc0b3c	180:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc0b40	184:	lw	s7, 0(a0)	@ call method through mb
0x2bcc0b44	188:	jalr	s7
0x2bcc0b48	192:	nop
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcc0b4c	196:	lw	s7, -12(JFP)	@ Java local cell # 0
0x2bcc0b50	200:	addiu	s6, s7, 8	@ fieldAddr = obj + fieldOffset;
0x2bcc0b54	204:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcc0b58	208:	sw	s5, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcc0b5c	212:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc0b60	216:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc0b64	220:	srl	t7, s6, 9	@ mark card table
0x2bcc0b68	224:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc0b6c	228:	sb	ra, 0(t7)
0x2bcc0b70	232:	addiu	JSP, JFP, -12
0x2bcc0b74	236:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc0b78	240:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc0b7c	244:	nop
0x2bcc0b80	248:	.word	9094284	@ mb java.util.Vector.<init>()V
--->Fixed instruction at 172(0x2bcc0b34) to reference 248
0x2bcc0b84	252:	.word	8629924	@ cb java.util.Vector
--->Fixed instruction at 156(0x2bcc0b24) to reference 252
0x2bcc0b88	256:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 212(0x2bcc0b5c) to reference 256
--->Fixed instruction at 116(0x2bcc0afc) to reference 256
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc0a88) >>>>>>>>
          		@ Capacity is 15 word(s)
0x2bcc0a88	0:	addiu	a1, JSP, 48
<<<<<<<<<Pop Code Buffer to PC = 260 (0x2bcc0b8c) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc0ad8) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcc0ad8	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcc0adc	84:	lui	CP, hi16(0x2bcc)
0x2bcc0ae0	88:	ori	CP, CP, lo16(0x2bcc0b80)
0x2bcc0ae4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 260 (0x2bcc0b8c) <<<<<<<<<
JS: COMPILED: size=328 startPC=0x2bcc0a88 com.sun.mep.bench.Chess.BPossMoves.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.Actor.getBoundingBox()Lcom/sun/mep/bench/Chess/Rectangle;
JS: COMPILING com.sun.mep.bench.Chess.Actor.getBoundingBox()Lcom/sun/mep/bench/Chess/Rectangle;
orig bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(1 0x0): 0- 

#################################################

The maximum node counts per root node are 5
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 20 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Actor.getBoundingBox()Lcom/sun/mep/bench/Chess/Rectangle;(Actor.java:219)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<0>  (0x955e74):    aload_0 
<1>  (0x955e75):    agetfield_quick #5
<4>  (0x955e78):    aload_0 
<5>  (0x955e79):    getfield_quick #6
<8>  (0x955e7c):    aload_0 
<9>  (0x955e7d):    agetfield_quick #2
<12>  (0x955e80):    getfield_quick #4
<15>  (0x955e83):    bipush 10
<17>  (0x955e85):    idiv 
<18>  (0x955e86):    iadd 
<19>  (0x955e87):    putfield_quick #2
<22>  (0x955e8a):    aload_0 
<23>  (0x955e8b):    agetfield_quick #5
<26>  (0x955e8e):    aload_0 
<27>  (0x955e8f):    getfield_quick #7
<30>  (0x955e92):    aload_0 
<31>  (0x955e93):    agetfield_quick #2
<34>  (0x955e96):    getfield_quick #4
<37>  (0x955e99):    bipush 10
<39>  (0x955e9b):    idiv 
<40>  (0x955e9c):    iadd 
<41>  (0x955e9d):    putfield_quick #3
<44>  (0x955ea0):    aload_0 
<45>  (0x955ea1):    getfield_quick #8
<48>  (0x955ea4):    bipush 7
<50>  (0x955ea6):    imul 
<51>  (0x955ea7):    bipush 10
<53>  (0x955ea9):    idiv 
<54>  (0x955eaa):    istore_1 
<55>  (0x955eab):    aload_0 
<56>  (0x955eac):    getfield_quick #9
<59>  (0x955eaf):    bipush 7
<61>  (0x955eb1):    imul 
<62>  (0x955eb2):    bipush 10
<64>  (0x955eb4):    idiv 
<65>  (0x955eb5):    istore_2 
<66>  (0x955eb6):    aload_0 
<67>  (0x955eb7):    agetfield_quick #5
<70>  (0x955eba):    iload_1 
<71>  (0x955ebb):    putfield_quick #4
<74>  (0x955ebe):    aload_0 
<75>  (0x955ebf):    agetfield_quick #5
<78>  (0x955ec2):    iload_2 
<79>  (0x955ec3):    putfield_quick #5
<82>  (0x955ec6):    aload_0 
<83>  (0x955ec7):    agetfield_quick #5
<86>  (0x955eca):    areturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(1): 
	local(0)	ID(2)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (reference)  (ref count: 5)
      <(ID: 25) FETCH (reference) 
         <(ID: 4) FIELD_REF (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 8)
               <(ID: 9) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (5)

   <(ID: 8) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 20) FETCH (32-bit field) 
         <(ID: 7) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 8)
            <(ID: 6) CONST_FIELD_OFFSET (NONE)  (6)

   <(ID: 12) IDENTITY (reference)  (ref count: 2)
      <(ID: 16) FETCH (reference) 
         <(ID: 11) FIELD_REF (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 8)
            <(ID: 10) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 15) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 21) FETCH (32-bit field) 
         <(ID: 14) FIELD_REF (32-bit field) 
            <(ID: 12) IDENTITY (reference)  (ref count: 2)
            <(ID: 13) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 19) IDENTITY (int)  (ref count: 2)
      <(ID: 26) ADD (int) 
         <(ID: 8) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 18) DIV (int) 
            <(ID: 15) IDENTITY (32-bit field)  (ref count: 2)
            <(ID: 17) CONST_JAVA_NUMERIC32 (int)  (10)

   <(ID: 24) ASSIGN (32-bit field) 
      <(ID: 23) FIELD_REF (32-bit field) 
         <(ID: 5) IDENTITY (reference)  (ref count: 5)
         <(ID: 22) CONST_FIELD_OFFSET (NONE)  (2)
      <(ID: 19) IDENTITY (int)  (ref count: 2)

   <(ID: 29) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 40) FETCH (32-bit field) 
         <(ID: 28) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 8)
            <(ID: 27) CONST_FIELD_OFFSET (NONE)  (7)

   <(ID: 32) IDENTITY (reference)  (ref count: 2)
      <(ID: 36) FETCH (reference) 
         <(ID: 31) FIELD_REF (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 8)
            <(ID: 30) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 35) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 41) FETCH (32-bit field) 
         <(ID: 34) FIELD_REF (32-bit field) 
            <(ID: 32) IDENTITY (reference)  (ref count: 2)
            <(ID: 33) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 39) IDENTITY (int)  (ref count: 2)
      <(ID: 45) ADD (int) 
         <(ID: 29) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 38) DIV (int) 
            <(ID: 35) IDENTITY (32-bit field)  (ref count: 2)
            <(ID: 37) CONST_JAVA_NUMERIC32 (int)  (10)

   <(ID: 44) ASSIGN (32-bit field) 
      <(ID: 43) FIELD_REF (32-bit field) 
         <(ID: 5) IDENTITY (reference)  (ref count: 5)
         <(ID: 42) CONST_FIELD_OFFSET (NONE)  (3)
      <(ID: 39) IDENTITY (int)  (ref count: 2)

   <(ID: 48) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 53) FETCH (32-bit field) 
         <(ID: 47) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 8)
            <(ID: 46) CONST_FIELD_OFFSET (NONE)  (8)

   <(ID: 52) IDENTITY (int)  (ref count: 2)
      <(ID: 65) DIV (int) 
         <(ID: 50) MUL (int) 
            <(ID: 48) IDENTITY (32-bit field)  (ref count: 2)
            <(ID: 49) CONST_JAVA_NUMERIC32 (int)  (7)
         <(ID: 51) CONST_JAVA_NUMERIC32 (int)  (10)

   <(ID: 56) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 61) FETCH (32-bit field) 
         <(ID: 55) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 8)
            <(ID: 54) CONST_FIELD_OFFSET (NONE)  (9)

   <(ID: 60) IDENTITY (int)  (ref count: 2)
      <(ID: 69) DIV (int) 
         <(ID: 58) MUL (int) 
            <(ID: 56) IDENTITY (32-bit field)  (ref count: 2)
            <(ID: 57) CONST_JAVA_NUMERIC32 (int)  (7)
         <(ID: 59) CONST_JAVA_NUMERIC32 (int)  (10)

   <(ID: 64) ASSIGN (32-bit field) 
      <(ID: 63) FIELD_REF (32-bit field) 
         <(ID: 5) IDENTITY (reference)  (ref count: 5)
         <(ID: 62) CONST_FIELD_OFFSET (NONE)  (4)
      <(ID: 52) IDENTITY (int)  (ref count: 2)

   <(ID: 68) ASSIGN (32-bit field) 
      <(ID: 67) FIELD_REF (32-bit field) 
         <(ID: 5) IDENTITY (reference)  (ref count: 5)
         <(ID: 66) CONST_FIELD_OFFSET (NONE)  (5)
      <(ID: 60) IDENTITY (int)  (ref count: 2)

   <(ID: 72) IDENTITY (reference)  (ref count: 2)
      <(ID: 74) FETCH (reference) 
         <(ID: 71) FIELD_REF (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 8)
            <(ID: 70) CONST_FIELD_OFFSET (NONE)  (5)

   <(ID: 73) RETURN_VALUE (reference) 
      <(ID: 72) IDENTITY (reference)  (ref count: 2)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 530
ESTIMATED BUFFER SIZE = 636
CODE BUFFER ADDRESS = 0x2bcc0ba0
PC MAP TABLE ADDRESS = 0x2bcc0ba8
CODE ENTRY ADDRESS = 0x2bcc0bd0
          		@ Method prologue
0x2bcc0bd0	0:	addiu	a1, JSP, 56	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc0bd4	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc0bd8	8:	sltu	t7, a1, CHUNKEND
0x2bcc0bdc	12:	bne	t7, zero, PC=0x2bcc0bd0	@ goto .skip
0x2bcc0be0	16:	nop
0x2bcc0be4	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc0be8	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc0bdc) >>>>>>>>
0x2bcc0bdc	12:	bne	t7, zero, PC=0x2bcc0bec	@ goto .skip
0x2bcc0be0	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc0bec) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc0bec	28:	sw	JFP, 8(JSP)	@ Store curr JFP into new frame
0x2bcc0bf0	32:	addiu	JFP, JSP, 8	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc0bf4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc0bf8	40:	addiu	a3, zero, 0
0x2bcc0bfc	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc0c00	48:	addiu	a3, zero, -1
0x2bcc0c04	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc0c08	56:	move	a0, EE
0x2bcc0c0c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc0c10	64:	lui	t9, hi16(0x65)
0x2bcc0c14	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc0c18	72:	jalr	t9
0x2bcc0c1c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc0c20	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc0c24	84:	nop
0x2bcc0c28	88:	nop
0x2bcc0c2c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc0c30	96:	lw	s4, -12(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
          		@ Do getfield:
0x2bcc0c34	100:	lw	s7, 20(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc0c38	104:	lw	s6, 24(s4)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc0c3c	108:	lw	s5, 8(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc0c40	112:	lw	ra, 16(s5)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ do idiv by 10:
0x2bcc0c44	116:	lw	t8, 0(CP)	@ const -858993459
0x2bcc0c48	120:	sra	s5, ra, 31
0x2bcc0c4c	124:	mult	ra, t8
0x2bcc0c50	128:	mfhi	t9
0x2bcc0c54	132:	nop
0x2bcc0c58	136:	nop
0x2bcc0c5c	140:	addu	t9, t9, ra
0x2bcc0c60	144:	sra	t9, t9, 3
0x2bcc0c64	148:	subu	s5, t9, s5
0x2bcc0c68	152:	addu	ra, s6, s5
          		@ Do putfield:
0x2bcc0c6c	156:	sw	ra, 8(s7)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do getfield:
0x2bcc0c70	160:	lw	s6, 28(s4)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc0c74	164:	lw	s5, 8(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc0c78	168:	lw	ra, 16(s5)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ do idiv by 10:
0x2bcc0c7c	172:	sra	s5, ra, 31
0x2bcc0c80	176:	mult	ra, t8
0x2bcc0c84	180:	mfhi	t9
0x2bcc0c88	184:	nop
0x2bcc0c8c	188:	nop
0x2bcc0c90	192:	addu	t9, t9, ra
0x2bcc0c94	196:	sra	t9, t9, 3
0x2bcc0c98	200:	subu	s5, t9, s5
0x2bcc0c9c	204:	addu	ra, s6, s5
          		@ Do putfield:
0x2bcc0ca0	208:	sw	ra, 12(s7)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do getfield:
0x2bcc0ca4	212:	lw	s6, 32(s4)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc0ca8	216:	addiu	ra, zero, 7	@ const 7
0x2bcc0cac	220:	mult	s6, ra
0x2bcc0cb0	224:	mflo	s5
0x2bcc0cb4	228:	nop
0x2bcc0cb8	232:	nop
          		@ do idiv by 10:
0x2bcc0cbc	236:	sra	s6, s5, 31
0x2bcc0cc0	240:	mult	s5, t8
0x2bcc0cc4	244:	mfhi	t9
0x2bcc0cc8	248:	nop
0x2bcc0ccc	252:	nop
0x2bcc0cd0	256:	addu	t9, t9, s5
0x2bcc0cd4	260:	sra	t9, t9, 3
0x2bcc0cd8	264:	subu	s6, t9, s6
          		@ Do getfield:
0x2bcc0cdc	268:	lw	s5, 36(s4)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc0ce0	272:	mult	s5, ra
0x2bcc0ce4	276:	mflo	t9
0x2bcc0ce8	280:	nop
0x2bcc0cec	284:	nop
          		@ do idiv by 10:
0x2bcc0cf0	288:	sra	s5, t9, 31
0x2bcc0cf4	292:	mult	t9, t8
0x2bcc0cf8	296:	mfhi	t6
0x2bcc0cfc	300:	nop
0x2bcc0d00	304:	nop
0x2bcc0d04	308:	addu	t6, t6, t9
0x2bcc0d08	312:	sra	t6, t6, 3
0x2bcc0d0c	316:	subu	s5, t6, s5
          		@ Do putfield:
0x2bcc0d10	320:	sw	s6, 16(s7)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do putfield:
0x2bcc0d14	324:	sw	s5, 20(s7)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do getfield:
0x2bcc0d18	328:	lw	s7, 20(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc0d1c	332:	sw	s7, -12(JFP)	@ Java local cell # 0
0x2bcc0d20	336:	addiu	JSP, JFP, -8
0x2bcc0d24	340:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc0d28	344:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc0d2c	348:	nop
0x2bcc0d30	352:	.word	-858993459
--->Fixed instruction at 116(0x2bcc0c44) to reference 352
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc0bd0) >>>>>>>>
          		@ Capacity is 15 word(s)
0x2bcc0bd0	0:	addiu	a1, JSP, 56
<<<<<<<<<Pop Code Buffer to PC = 356 (0x2bcc0d34) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc0c20) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc0c20	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc0c24	84:	lui	CP, hi16(0x2bcc)
0x2bcc0c28	88:	ori	CP, CP, lo16(0x2bcc0d30)
0x2bcc0c2c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 356 (0x2bcc0d34) <<<<<<<<<
JS: COMPILED: size=408 startPC=0x2bcc0bd0 com.sun.mep.bench.Chess.Actor.getBoundingBox()Lcom/sun/mep/bench/Chess/Rectangle;
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.ActorManager.actor(I)Lcom/sun/mep/bench/Chess/Actor;
JS: COMPILING com.sun.mep.bench.Chess.ActorManager.actor(I)Lcom/sun/mep/bench/Chess/Actor;
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 

#################################################

The maximum node counts per root node are 8
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 3 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.ActorManager.actor(I)Lcom/sun/mep/bench/Chess/Actor;(ActorManager.java:156)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x93a134):    aload_0 
<1>  (0x93a135):    agetfield_quick #3
<4>  (0x93a138):    iload_1 
<5>  (0x93a139):    invokevirtual_quick_w #12 <java.util.Vector.elementAt(I)Ljava/lang/Object;>
<8>  (0x93a13c):    checkcast_quick #13 <com.sun.mep.bench.Chess.Actor>
<11>  (0x93a13f):    areturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(6)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(6)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (reference)  (ref count: 3)
      <(ID: 17) FETCH (reference) 
         <(ID: 4) FIELD_REF (reference) 
            <(ID: 2) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 16) RETURN_VALUE (reference) 
      <(ID: 15) CHECKCAST (reference) 
         <(ID: 13) INVOKE (reference) 
            <(ID: 10) PARAMETER (reference) 
               <(ID: 5) IDENTITY (reference)  (ref count: 3)
               <(ID: 9) PARAMETER (int) 
                  <(ID: 6) LOCAL (int)   1>
                  <(ID: 8) NULL_PARAMETER (NONE) 
            <(ID: 12) FETCH_MB_FROM_VTABLE (address field) 
               <(ID: 11) GET_VTBL (NONE) 
                  <(ID: 5) IDENTITY (reference)  (ref count: 3)
               <(ID: 7) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 43)
         <(ID: 14) CONST_CB (address field)  (com.sun.mep.bench.Chess.Actor)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 80
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 80
ESTIMATED BUFFER SIZE = 264
CODE BUFFER ADDRESS = 0x2bcc0d38
PC MAP TABLE ADDRESS = 0x2bcc0d40
CODE ENTRY ADDRESS = 0x2bcc0d68
          		@ Method prologue
0x2bcc0d68	0:	addiu	a1, JSP, 40	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc0d6c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc0d70	8:	sltu	t7, a1, CHUNKEND
0x2bcc0d74	12:	bne	t7, zero, PC=0x2bcc0d68	@ goto .skip
0x2bcc0d78	16:	nop
0x2bcc0d7c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc0d80	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc0d74) >>>>>>>>
0x2bcc0d74	12:	bne	t7, zero, PC=0x2bcc0d84	@ goto .skip
0x2bcc0d78	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc0d84) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc0d84	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcc0d88	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc0d8c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc0d90	40:	addiu	a3, zero, 0
0x2bcc0d94	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc0d98	48:	addiu	a3, zero, -1
0x2bcc0d9c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc0da0	56:	move	a0, EE
0x2bcc0da4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc0da8	64:	lui	t9, hi16(0x65)
0x2bcc0dac	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc0db0	72:	jalr	t9
0x2bcc0db4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc0db8	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc0dbc	84:	nop
0x2bcc0dc0	88:	nop
0x2bcc0dc4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc0dc8	96:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcc0dcc	100:	lw	s5, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
          		@ Do getfield:
0x2bcc0dd0	104:	lw	s7, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc0dd4	108:	sw	s7, 0(JSP)
0x2bcc0dd8	112:	sw	s5, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc0ddc	116:	lw	s6, 0(s7)	@ Get object.cb
0x2bcc0de0	120:	addiu	t7, zero, -4
0x2bcc0de4	124:	and	s6, s6, t7
0x2bcc0de8	128:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc0dec	132:	lw	a0, 172(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc0df0	136:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc0df4	140:	lw	s7, 0(a0)	@ call method through mb
0x2bcc0df8	144:	jalr	s7
0x2bcc0dfc	148:	nop
          		@ Captured a stackmap here.
0x2bcc0e00	152:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc0e04	156:	lw	s7, 0(JSP)
0x2bcc0e08	160:	lw	a2, 0(CP)	@ cb com.sun.mep.bench.Chess.Actor
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcc0e0c	164:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcc0e10	168:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcc0e14	172:	nop
0x2bcc0e18	176:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
0x2bcc0e1c	180:	sw	s7, -8(JFP)	@ Java local cell # 0
0x2bcc0e20	184:	addiu	JSP, JFP, -4
0x2bcc0e24	188:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc0e28	192:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc0e2c	196:	nop
0x2bcc0e30	200:	.word	9786824	@ cb com.sun.mep.bench.Chess.Actor
--->Fixed instruction at 160(0x2bcc0e08) to reference 200
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc0d68) >>>>>>>>
          		@ Capacity is 12 word(s)
0x2bcc0d68	0:	addiu	a1, JSP, 40
<<<<<<<<<Pop Code Buffer to PC = 204 (0x2bcc0e34) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc0db8) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc0db8	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc0dbc	84:	lui	CP, hi16(0x2bcc)
0x2bcc0dc0	88:	ori	CP, CP, lo16(0x2bcc0e30)
0x2bcc0dc4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 204 (0x2bcc0e34) <<<<<<<<<
JS: COMPILED: size=272 startPC=0x2bcc0d68 com.sun.mep.bench.Chess.ActorManager.actor(I)Lcom/sun/mep/bench/Chess/Actor;
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.GameState.setToBoard()V
JS: COMPILING com.sun.mep.bench.Chess.GameState.setToBoard()V
CSE: Local 1 changed: Forgetting CSE'd array expressions referring to it
orig bkID(1) Incoming Locals(1 0x0): 1- 
o1   bkID(1) Incoming Locals(1 0x0): 1- 
s1   bkID(1) Incoming Locals(2 0x0): 1- 0- 
s1   bkID(1) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(1) Incoming Locals(2 0x0): 1- 0- 
orig bkID(4) Incoming Locals(3 0x0): 0- 1- 2- 
o1   bkID(4) Incoming Locals(3 0x0): 0- 1- 2- 
s1   bkID(4) Incoming Locals(3 0x0): 0- 1- 2- 
o1   bkID(4) Incoming Locals(3 0x0): 0- 1- 2- 
orig bkID(3) Incoming Locals(2 0x0): 2- 1- 
o1   bkID(3) Incoming Locals(1 0x0): 2- 
s1   bkID(3) Incoming Locals(2 0x0): 2- 0- 
s1   bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
s1   bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
o1   bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
orig bkID(2) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(2) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(2) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(1) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(1) Incoming Locals(1 0x0): 1- 
s1   bkID(1) Incoming Locals(2 0x0): 1- 0- 
s1   bkID(1) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(1) Incoming Locals(2 0x0): 1- 0- 
orig bkID(4) Incoming Locals(3 0x0): 0- 1- 2- 
o1   bkID(4) Incoming Locals(3 0x0): 0- 1- 2- 
s1   bkID(4) Incoming Locals(3 0x0): 0- 1- 2- 
o1   bkID(4) Incoming Locals(3 0x0): 0- 1- 2- 
orig bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
o1   bkID(3) Incoming Locals(1 0x0): 2- 
s1   bkID(3) Incoming Locals(2 0x0): 2- 0- 
s1   bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
s1   bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
o1   bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
orig bkID(2) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(2) Incoming Locals(2 0x0): 0- 1- 
s1   bkID(2) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
bkID(1) local(0 #1)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(1) Incoming Locals(2 0x0): 1- 0- 
+bk  bkID(1) Incoming Locals(2 0x1): 1+ 0- 
-gbk bkID(2) Incoming Locals(2 0x0): 0- 1- 
+gbk bkID(2) Incoming Locals(2 0x1): 1+ 0- 
bkID(1) local(0 #1)  ordered in goalBk(2)
-bk  bkID(1) Incoming Locals(2 0x1): 1+ 0- 
dstBk(1) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(1) Incoming Locals(2 0x1): 1+ 0- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x1): 1+ 0- 
dstBk(2) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(2) Incoming Locals(2 0x1): 1+ 0- 
bkID(1) local(1 #0)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(1) Incoming Locals(2 0x1): 1+ 0- 
+bk  bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
-gbk bkID(2) Incoming Locals(2 0x1): 1+ 0- 
+gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
bkID(1) local(1 #0)  ordered in goalBk(2)
-bk  bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
Pushing blockID(2)
bkID(4) local(0 #0)  ordered in goalBk(1)
-bk  bkID(4) Incoming Locals(3 0x0): 0- 1- 2- 
dstBk(4) local(1 0) found in slot(0)
local(#1) swapped with local(#0)
+bk  bkID(4) Incoming Locals(3 0x2): 1- 0+ 2- 
bkID(4) local(1 #0)  ordered in goalBk(1)
-bk  bkID(4) Incoming Locals(3 0x2): 1- 0+ 2- 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(4) Incoming Locals(3 0x2): 1- 0+ 2- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
-gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
bkID(4) local(2 #2)  not found in goalBk
bkID(4) local(0 #1)  ordered in goalBk(2)
-bk  bkID(4) Incoming Locals(3 0x2): 1- 0+ 2- 
dstBk(4) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(4) Incoming Locals(3 0x3): 1+ 0+ 2- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
bkID(4) local(1 #0)  ordered in goalBk(2)
-bk  bkID(4) Incoming Locals(3 0x3): 1+ 0+ 2- 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(4) Incoming Locals(3 0x3): 1+ 0+ 2- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
bkID(4) local(2 #2)  not found in goalBk
bkID(2) local(0 #1)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(1) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
bkID(2) local(1 #0)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
bkID(3) local(0 #2)  not ordered
bestLocal(2) bestLocalScore(24)
-bk  bkID(3) Incoming Locals(3 0x0): 2- 0- 1- 
+bk  bkID(3) Incoming Locals(3 0x4): 1- 0- 2+ 
-gbk bkID(4) Incoming Locals(3 0x3): 1+ 0+ 2- 
+gbk bkID(4) Incoming Locals(3 0x7): 1+ 0+ 2+ 
bkID(3) local(0 #1)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(3 0x4): 1- 0- 2+ 
dstBk(3) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(3) Incoming Locals(3 0x5): 1+ 0- 2+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
-gbk bkID(4) Incoming Locals(3 0x7): 1+ 0+ 2+ 
dstBk(4) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(4) Incoming Locals(3 0x7): 1+ 0+ 2+ 
bkID(3) local(1 #0)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(3 0x5): 1+ 0- 2+ 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
-gbk bkID(4) Incoming Locals(3 0x7): 1+ 0+ 2+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(4) Incoming Locals(3 0x7): 1+ 0+ 2+ 
bkID(3) local(2 #2)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 
dstBk(3) local(2 2) found in slot(2)
local(2 2) same slot
+bk  bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
+gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
-gbk bkID(4) Incoming Locals(3 0x7): 1+ 0+ 2+ 
dstBk(4) local(2 2) found in slot(2)
local(2 2) same slot
+gbk bkID(4) Incoming Locals(3 0x7): 1+ 0+ 2+ 
bkID(3) local(0 #1)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 
dstBk(3) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
bkID(3) local(1 #0)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
bkID(3) local(2 #2)  not found in goalBk
bkID(2) local(0 #1)  ordered in goalBk(4)
-bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(3 0x7): 1+ 0+ 2+ 
dstBk(4) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(4) Incoming Locals(3 0x7): 1+ 0+ 2+ 
bkID(2) local(1 #0)  ordered in goalBk(4)
-bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(3 0x7): 1+ 0+ 2+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(4) Incoming Locals(3 0x7): 1+ 0+ 2+ 
bkID(2) local(0 #1)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
-gbk bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 
dstBk(3) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 
bkID(2) local(1 #0)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
-gbk bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 
bkID(2) local(0 #1)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
bkID(2) local(1 #0)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
bkID(2) local(0 #1)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 
dstBk(3) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 
bkID(2) local(1 #0)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 1+ 0+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(3) Incoming Locals(3 0x7): 1+ 0+ 2+ 
Popping blockID(2)
bkID(0) local(0 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(1 0x0): 0- 
dstBk(0) local(1 0) found in slot(0)
local(#1) swapped with local(#0)
+bk  bkID(0) Incoming Locals(2 0x2): <null> 0+ 
bkID(0) local(1 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x2): <null> 0+ 
dstBk(0) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(0) Incoming Locals(2 0x2): <null> 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 1+ 0+ 

#################################################

The maximum node counts per root node are 7
IR block list contains 5 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 3 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x2
* Source: com.sun.mep.bench.Chess.GameState.setToBoard()V(GameState.java:51)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<0>  (0x95362c):    iconst_0 
<1>  (0x95362d):    istore_1 
<2>  (0x95362e):    goto <52>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Incoming Locals(2): 
	<null>
	local(0)	ID(12)
 
Assigned Locals(1): 
	ASSIGN(4): local(1)	ID(3)	rhsID(2)
 
Successor Blocks(1): 
	ID(1) LocalOrder(0) AssignOrder(1) RefsOK(1) Locals(1 0)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 4) ASSIGN (int)  (assignIdx: 0)
      <(ID: 3) LOCAL (int)   1>
      <(ID: 2) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 5) GOTO (NONE) 
   target: (BlockID: 1 BlockPC: 52)


*************************************************
*
* (block ID:2 block PC:5 )
* IR root list contains 8 root nodes: in block 
* flags: 0x361
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.GameState.setToBoard()V(GameState.java:53)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<5>  (0x953631):    aload_0 
<6>  (0x953632):    agetfield_quick #2
<9>  (0x953635):    agetfield_quick #41
<12>  (0x953638):    iload_1 
<13>  (0x953639):    baload 
<14>  (0x95363a):    istore_2 
<15>  (0x95363b):    iload_2 
<16>  (0x95363c):    ifne <27>
<19>  (0x95363f):    iload_1 
<20>  (0x953640):    bipush 8
<22>  (0x953642):    if_icmpge <27>
<25>  (0x953645):    iconst_4 
<26>  (0x953646):    istore_2 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(12)
 	local(1)	ID(20)
 
Incoming Locals(2): 
	local(1)	ID(20)
 	local(0)	ID(12)
 
Assigned Locals(2): 
	ASSIGN(29): local(2)	ID(28)	rhsID(24)
 	ASSIGN(36): local(2)	ID(35)	rhsID(34)
 
Successor Blocks(1): 
	ID(3) LocalOrder(2) AssignOrder(1) RefsOK(1) Locals(1 0 2)

   <(ID: 11) MAP_PC (NONE)   5>

   <(ID: 15) IDENTITY (reference)  (ref count: 2)
      <(ID: 19) FETCH (reference) 
         <(ID: 14) FIELD_REF (reference) 
            <(ID: 12) LOCAL (reference)   0>
            <(ID: 13) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 18) IDENTITY (reference)  (ref count: 3)
      <(ID: 25) FETCH (reference) 
         <(ID: 17) FIELD_REF (reference) 
            <(ID: 15) IDENTITY (reference)  (ref count: 2)
            <(ID: 16) CONST_FIELD_OFFSET (NONE)  (41)

   <(ID: 24) IDENTITY (int)  (ref count: 3)
      <(ID: 30) FETCH (int) 
         <(ID: 23) INDEX (int) 
            <(ID: 18) IDENTITY (reference)  (ref count: 3)
            <(ID: 22) BOUNDS_CHECK (int) 
               <(ID: 20) IDENTITY (int)  (ref count: 2)
                  <(ID: 33) LOCAL (int)   1>
               <(ID: 21) ARRAY_LENGTH (int) 
                  <(ID: 18) IDENTITY (reference)  (ref count: 3)

   <(ID: 29) ASSIGN (int)  (assignIdx: 0)
      <(ID: 28) LOCAL (int)   2>
      <(ID: 24) IDENTITY (int)  (ref count: 3)

   <(ID: 27) BCOND (int) 
   target: (BlockID: 3 BlockPC: 27)
   condition: NE
   flags: 0
      <(ID: 24) IDENTITY (int)  (ref count: 3)
      <(ID: 26) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 32) BCOND (int) 
   target: (BlockID: 3 BlockPC: 27)
   condition: GE
   flags: 0
      <(ID: 20) IDENTITY (int)  (ref count: 2)
      <(ID: 31) CONST_JAVA_NUMERIC32 (int)  (8)


   <(ID: 36) ASSIGN (int)  (assignIdx: 1)
      <(ID: 35) LOCAL (int)   2>
      <(ID: 34) CONST_JAVA_NUMERIC32 (int)  (4)


*************************************************
*
* (block ID:3 block PC:27 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x7
* Source: com.sun.mep.bench.Chess.GameState.setToBoard()V(GameState.java:61)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<27>  (0x953647):    iload_2 
<28>  (0x953648):    bipush 6
<30>  (0x95364a):    if_icmpne <42>
<33>  (0x95364d):    iload_1 
<34>  (0x95364e):    bipush 55
<36>  (0x953650):    if_icmple <42>
<39>  (0x953653):    bipush 10
<41>  (0x953655):    istore_2 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(2)	ID(38)
 	local(1)	ID(41)
 
Incoming Locals(3): 
	local(1)	ID(52)
 	local(0)	ID(48)
 	local(2)	ID(38)
 
Assigned Locals(1): 
	ASSIGN(46): local(2)	ID(45)	rhsID(44)
 
Successor Blocks(1): 
	ID(4) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(1 0 2)

   <(ID: 37) MAP_PC (NONE)   27>

   <(ID: 40) BCOND (int) 
   target: (BlockID: 4 BlockPC: 42)
   condition: NE
   flags: 0
      <(ID: 38) LOCAL (int)   2>
      <(ID: 39) CONST_JAVA_NUMERIC32 (int)  (6)


   <(ID: 43) BCOND (int) 
   target: (BlockID: 4 BlockPC: 42)
   condition: LE
   flags: 0
      <(ID: 41) LOCAL (int)   1>
      <(ID: 42) CONST_JAVA_NUMERIC32 (int)  (55)


   <(ID: 46) ASSIGN (int)  (assignIdx: 0)
      <(ID: 45) LOCAL (int)   2>
      <(ID: 44) CONST_JAVA_NUMERIC32 (int)  (10)


*************************************************
*
* (block ID:4 block PC:42 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x7
* Source: com.sun.mep.bench.Chess.GameState.setToBoard()V(GameState.java:65)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<42>  (0x953656):    aload_0 
<43>  (0x953657):    agetfield_quick #3
<46>  (0x95365a):    iload_1 
<47>  (0x95365b):    iload_2 
<48>  (0x95365c):    bastore 
<49>  (0x95365d):    iinc 1 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(0)	ID(48)
 	local(1)	ID(52)
 	local(2)	ID(53)
 
Incoming Locals(3): 
	local(1)	ID(52)
 	local(0)	ID(48)
 	local(2)	ID(53)
 
Assigned Locals(1): 
	ASSIGN(62): local(1)	ID(61)	rhsID(60)
 
Successor Blocks(1): 
	ID(1) LocalOrder(3) AssignOrder(1) RefsOK(1) Locals(1 0)

   <(ID: 47) MAP_PC (NONE)   42>

   <(ID: 51) IDENTITY (reference)  (ref count: 3)
      <(ID: 58) FETCH (reference) 
         <(ID: 50) FIELD_REF (reference) 
            <(ID: 48) LOCAL (reference)   0>
            <(ID: 49) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 57) ASSIGN (byte) 
      <(ID: 56) INDEX (int) 
         <(ID: 51) IDENTITY (reference)  (ref count: 3)
         <(ID: 55) BOUNDS_CHECK (int) 
            <(ID: 52) IDENTITY (int)  (ref count: 2)
               <(ID: 63) LOCAL (int)   1>
            <(ID: 54) ARRAY_LENGTH (int) 
               <(ID: 51) IDENTITY (reference)  (ref count: 3)
      <(ID: 53) LOCAL (int)   2>

   <(ID: 62) ASSIGN (int)  (assignIdx: 0)
      <(ID: 61) LOCAL (int)   1>
      <(ID: 60) ADD (int) 
         <(ID: 52) IDENTITY (int)  (ref count: 2)
         <(ID: 59) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:1 block PC:52 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.GameState.setToBoard()V(GameState.java:51)
* Compilation depth: 0 locals : 0 .. 2
* Byte-codes for block:
<52>  (0x953660):    iload_1 
<53>  (0x953661):    bipush 64
<55>  (0x953663):    if_icmplt <5>
<58>  (0x953666):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(1)	ID(7)
 
Incoming Locals(2): 
	local(1)	ID(7)
 	local(0)	ID(12)
 
Successor Blocks(1): 
	ID(2) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(1 0)

   <(ID: 6) MAP_PC (NONE)   52>

   <(ID: 9) BCOND (int) 
   target: (BlockID: 2 BlockPC: 5)
   condition: LT
   flags: 0
      <(ID: 7) LOCAL (int)   1>
      <(ID: 8) CONST_JAVA_NUMERIC32 (int)  (64)


   <(ID: 10) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 16
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 362
ESTIMATED BUFFER SIZE = 516
CODE BUFFER ADDRESS = 0x2bcc0e48
PC MAP TABLE ADDRESS = 0x2bcc0e50
GC CHECK PCS ADDRESS = 0x2bcc0e68
CODE ENTRY ADDRESS = 0x2bcc0e98
          		@ Method prologue
0x2bcc0e98	0:	addiu	a1, JSP, 52	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc0e9c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc0ea0	8:	sltu	t7, a1, CHUNKEND
0x2bcc0ea4	12:	bne	t7, zero, PC=0x2bcc0e98	@ goto .skip
0x2bcc0ea8	16:	nop
0x2bcc0eac	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc0eb0	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc0ea4) >>>>>>>>
0x2bcc0ea4	12:	bne	t7, zero, PC=0x2bcc0eb4	@ goto .skip
0x2bcc0ea8	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc0eb4) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc0eb4	28:	sw	JFP, 8(JSP)	@ Store curr JFP into new frame
0x2bcc0eb8	32:	addiu	JFP, JSP, 8	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc0ebc	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc0ec0	40:	addiu	a3, zero, 0
0x2bcc0ec4	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc0ec8	48:	addiu	a3, zero, -1
0x2bcc0ecc	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc0ed0	56:	move	a0, EE
0x2bcc0ed4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc0ed8	64:	lui	t9, hi16(0x65)
0x2bcc0edc	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc0ee0	72:	jalr	t9
0x2bcc0ee4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc0ee8	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc0eec	84:	nop
0x2bcc0ef0	88:	nop
0x2bcc0ef4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(21)
0x2bcc0ef8	96:	lw	s5, -12(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
0x2bcc0efc	100:	sw	zero, -8(JFP)	@ Java local cell # 1
			@ Outgoing local(1) reg(20): in wrong register
0x2bcc0f00	104:	move	s4, zero
			@ Outgoing local(0) reg(21): in correct register
0x2bcc0f04	108:	b	PC=0x2bcc0f04	@ branch to block L1
0x2bcc0f08	112:	nop
			@ Initial Temp REF set is 
	L2:	116:	@ Patchable GC Check point
0x2bcc0f0c	116:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcc0f0c	116:	nop
0x2bcc0f10	120:	nop
          		@ Captured a stackmap here.
	L2:	124:	@ entry point when locals need to be loaded
			@ Preloading incoming local(1) reg(20)
0x2bcc0f14	124:	lw	s4, -8(JFP)	@ Java local cell # 1
			@ Preloading incoming local(0) reg(21)
0x2bcc0f18	128:	lw	s5, -12(JFP)	@ Java local cell # 0
	L2:	132:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=5 compiledPc=124
          		@ Do getfield:
0x2bcc0f1c	132:	lw	s7, 8(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc0f20	136:	lw	s6, 164(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc0f24	140:	lw	s7, 8(s6)	@ arraylength
          		@ deferred comparison: 
0x2bcc0f28	144:	sltu	t7, s4, s7
0x2bcc0f2c	148:	bne	t7, zero, PC=0x2bcc0f28	@ br .skip
0x2bcc0f30	152:	nop
0x2bcc0f34	156:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcc0f38	160:	nop
		.skip
--->Fixed instruction at 148(0x2bcc0f2c) to reference 164
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcc0f3c	164:	sw	s6, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc0f40	168:	lw	s7, 28(JFP)	@ Java temp cell # 0
0x2bcc0f44	172:	addu	ra, s7, s4
0x2bcc0f48	176:	lb	s6, 12(ra)
0x2bcc0f4c	180:	sw	s6, -4(JFP)	@ Java local cell # 2
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(2) reg(22): in correct register
          		@ deferred comparison: 
0x2bcc0f50	184:	bne	s6, zero, PC=0x2bcc0f50	@ branch to block L3
0x2bcc0f54	188:	nop
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(2) reg(22): in correct register
          		@ deferred comparison: 
0x2bcc0f58	192:	sltiu	t7, s4, 8
0x2bcc0f5c	196:	beq	t7, zero, PC=0x2bcc0f58	@ branch to block L3
0x2bcc0f60	200:	nop
0x2bcc0f64	204:	addiu	s6, zero, 4	@ const 4
0x2bcc0f68	208:	sw	s6, -4(JFP)	@ Java local cell # 2
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(2) reg(22): in correct register
			@ Initial Temp REF set is 
	L3:	212:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(2) to reg(22)
--->Fixed instruction at 196(0x2bcc0f5c) to reference 212
--->Fixed instruction at 184(0x2bcc0f50) to reference 212
          		@ MAP_PC idepth=0 javaPc=27 compiledPc=212
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(2) reg(22): in correct register
          		@ deferred comparison: 
0x2bcc0f6c	212:	addiu	t7, zero, 6
0x2bcc0f70	216:	bne	s6, t7, PC=0x2bcc0f6c	@ branch to block L4
0x2bcc0f74	220:	nop
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(2) reg(22): in correct register
          		@ deferred comparison: 
0x2bcc0f78	224:	addiu	t7, zero, 55
0x2bcc0f7c	228:	slt	t7, t7, s4
0x2bcc0f80	232:	beq	t7, zero, PC=0x2bcc0f78	@ branch to block L4
0x2bcc0f84	236:	nop
0x2bcc0f88	240:	addiu	s6, zero, 10	@ const 10
0x2bcc0f8c	244:	sw	s6, -4(JFP)	@ Java local cell # 2
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(2) reg(22): in correct register
			@ Initial Temp REF set is 
	L4:	248:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(2) to reg(22)
--->Fixed instruction at 232(0x2bcc0f80) to reference 248
--->Fixed instruction at 216(0x2bcc0f70) to reference 248
          		@ MAP_PC idepth=0 javaPc=42 compiledPc=248
          		@ Do getfield:
0x2bcc0f90	248:	lw	s7, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc0f94	252:	lw	ra, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcc0f98	256:	sltu	t7, s4, ra
0x2bcc0f9c	260:	bne	t7, zero, PC=0x2bcc0f98	@ br .skip
0x2bcc0fa0	264:	nop
0x2bcc0fa4	268:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcc0fa8	272:	nop
		.skip
--->Fixed instruction at 260(0x2bcc0f9c) to reference 276
          		@ Do store(arrayObj, index) (elem type=B):
0x2bcc0fac	276:	addu	ra, s7, s4
0x2bcc0fb0	280:	sb	s6, 12(ra)
0x2bcc0fb4	284:	addiu	s4, s4, 1
0x2bcc0fb8	288:	sw	s4, -8(JFP)	@ Java local cell # 1
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Initial Temp REF set is 
	L1:	292:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 108(0x2bcc0f04) to reference 292
          		@ MAP_PC idepth=0 javaPc=52 compiledPc=292
			@ Outgoing local(1) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcc0fbc	292:	sltiu	t7, s4, 64
0x2bcc0fc0	296:	bne	t7, zero, PC=0x2bcc0f0c	@ branch to block L2
0x2bcc0fc4	300:	nop
0x2bcc0fbc	292:	sltiu	t7, s4, 64
0x2bcc0fc0	296:	bne	t7, zero, PC=0x2bcc0f1c	@ branch to block L2, skip GC
0x2bcc0fc4	300:	nop
0x2bcc0fc8	304:	addiu	JSP, JFP, -12
0x2bcc0fcc	308:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc0fd0	312:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc0fd4	316:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc0e98) >>>>>>>>
          		@ Capacity is 15 word(s)
0x2bcc0e98	0:	addiu	a1, JSP, 56
<<<<<<<<<Pop Code Buffer to PC = 320 (0x2bcc0fd8) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc0ee8) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcc0ee8	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcc0eec	84:	lui	CP, hi16(0x2bcc)
0x2bcc0ef0	88:	ori	CP, CP, lo16(0x2bcc0fd8)
0x2bcc0ef4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 320 (0x2bcc0fd8) <<<<<<<<<
JS: COMPILED: size=416 startPC=0x2bcc0e98 com.sun.mep.bench.Chess.GameState.setToBoard()V
OSR: Intr2Comp: com.sun.mep.bench.Chess.GameState.setToBoard()V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.Rectangle.intersects(Lcom/sun/mep/bench/Chess/Rectangle;)Z
JS: COMPILING com.sun.mep.bench.Chess.Rectangle.intersects(Lcom/sun/mep/bench/Chess/Rectangle;)Z

#################################################

The maximum node counts per root node are 2
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 2 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Rectangle.intersects(Lcom/sun/mep/bench/Chess/Rectangle;)Z(Rectangle.java:52)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x94b374):    iconst_0 
<1>  (0x94b375):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 3) RETURN_VALUE (int) 
      <(ID: 2) CONST_JAVA_NUMERIC32 (int)  (0)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 20
ESTIMATED BUFFER SIZE = 124
CODE BUFFER ADDRESS = 0x2bcc0fe8
PC MAP TABLE ADDRESS = 0x2bcc0ff0
CODE ENTRY ADDRESS = 0x2bcc1018
          		@ Method prologue
0x2bcc1018	0:	addiu	a1, JSP, 36	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc101c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc1020	8:	sltu	t7, a1, CHUNKEND
0x2bcc1024	12:	bne	t7, zero, PC=0x2bcc1018	@ goto .skip
0x2bcc1028	16:	nop
0x2bcc102c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc1030	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc1024) >>>>>>>>
0x2bcc1024	12:	bne	t7, zero, PC=0x2bcc1034	@ goto .skip
0x2bcc1028	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc1034) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc1034	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcc1038	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc103c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc1040	40:	addiu	a3, zero, 0
0x2bcc1044	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc1048	48:	addiu	a3, zero, -1
0x2bcc104c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc1050	56:	move	a0, EE
0x2bcc1054	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc1058	64:	lui	t9, hi16(0x65)
0x2bcc105c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc1060	72:	jalr	t9
0x2bcc1064	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc1068	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc106c	84:	nop
0x2bcc1070	88:	nop
0x2bcc1074	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=96
0x2bcc1078	96:	sw	zero, -8(JFP)	@ Java local cell # 0
0x2bcc107c	100:	addiu	JSP, JFP, -4
0x2bcc1080	104:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc1084	108:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc1088	112:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc1018) >>>>>>>>
          		@ Capacity is 11 word(s)
0x2bcc1018	0:	addiu	a1, JSP, 36
<<<<<<<<<Pop Code Buffer to PC = 116 (0x2bcc108c) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc1068) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc1068	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc106c	84:	lui	CP, hi16(0x2bcc)
0x2bcc1070	88:	ori	CP, CP, lo16(0x2bcc108c)
0x2bcc1074	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 116 (0x2bcc108c) <<<<<<<<<
JS: COMPILED: size=168 startPC=0x2bcc1018 com.sun.mep.bench.Chess.Rectangle.intersects(Lcom/sun/mep/bench/Chess/Rectangle;)Z
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.ChessBBCollisionDetector.detectCollisions(Lcom/sun/mep/bench/Chess/Actor;)V
JS: COMPILING com.sun.mep.bench.Chess.ChessBBCollisionDetector.detectCollisions(Lcom/sun/mep/bench/Chess/Actor;)V
orig bkID(3) Incoming Locals(3 0x0): 4- 2- 3- 
o1   bkID(3) Incoming Locals(2 0x0): 4- 2- 
o1   bkID(3) Incoming Locals(3 0x0): 4- 2- 3- 
s1   bkID(3) Incoming Locals(4 0x0): 4- 2- 3- 0- 
s1   bkID(3) Incoming Locals(4 0x0): 4- 2- 3- 0- 
o1   bkID(3) Incoming Locals(4 0x0): 4- 2- 3- 0- 
orig bkID(7) Incoming Locals(1 0x0): 4- 
o1   bkID(7) Incoming Locals(1 0x0): 4- 
s1   bkID(7) Incoming Locals(2 0x0): 4- 2- 
s1   bkID(7) Incoming Locals(3 0x0): 4- 2- 3- 
s1   bkID(7) Incoming Locals(4 0x0): 4- 2- 3- 0- 
o1   bkID(7) Incoming Locals(4 0x0): 4- 2- 3- 0- 
s1   bkID(6) Incoming Locals(1 0x0): 4- 
s1   bkID(6) Incoming Locals(2 0x0): 4- 2- 
s1   bkID(6) Incoming Locals(3 0x0): 4- 2- 3- 
s1   bkID(6) Incoming Locals(4 0x0): 4- 2- 3- 0- 
o1   bkID(6) Incoming Locals(4 0x0): 4- 2- 3- 0- 
orig bkID(5) Incoming Locals(1 0x0): 0- 
o1   bkID(5) Incoming Locals(1 0x0): 0- 
orig bkID(4) Incoming Locals(2 0x0): 0- 4- 
o1   bkID(4) Incoming Locals(2 0x0): 0- 4- 
orig bkID(2) Incoming Locals(1 0x0): 0- 
o1   bkID(2) Incoming Locals(1 0x0): 0- 
orig bkID(3) Incoming Locals(4 0x0): 4- 2- 3- 0- 
o1   bkID(3) Incoming Locals(2 0x0): 4- 2- 
o1   bkID(3) Incoming Locals(3 0x0): 4- 2- 3- 
s1   bkID(3) Incoming Locals(4 0x0): 4- 2- 3- 0- 
s1   bkID(3) Incoming Locals(4 0x0): 4- 2- 3- 0- 
o1   bkID(3) Incoming Locals(4 0x0): 4- 2- 3- 0- 
orig bkID(7) Incoming Locals(4 0x0): 4- 2- 3- 0- 
o1   bkID(7) Incoming Locals(1 0x0): 4- 
s1   bkID(7) Incoming Locals(2 0x0): 4- 2- 
s1   bkID(7) Incoming Locals(3 0x0): 4- 2- 3- 
s1   bkID(7) Incoming Locals(4 0x0): 4- 2- 3- 0- 
o1   bkID(7) Incoming Locals(4 0x0): 4- 2- 3- 0- 
orig bkID(6) Incoming Locals(4 0x0): 4- 2- 3- 0- 
s1   bkID(6) Incoming Locals(1 0x0): 4- 
s1   bkID(6) Incoming Locals(2 0x0): 4- 2- 
s1   bkID(6) Incoming Locals(3 0x0): 4- 2- 3- 
s1   bkID(6) Incoming Locals(4 0x0): 4- 2- 3- 0- 
o1   bkID(6) Incoming Locals(4 0x0): 4- 2- 3- 0- 
orig bkID(5) Incoming Locals(1 0x0): 0- 
o1   bkID(5) Incoming Locals(1 0x0): 0- 
orig bkID(4) Incoming Locals(2 0x0): 0- 4- 
o1   bkID(4) Incoming Locals(2 0x0): 0- 4- 
orig bkID(2) Incoming Locals(1 0x0): 0- 
o1   bkID(2) Incoming Locals(1 0x0): 0- 
bkID(3) local(0 #4)  not found in goalBk
bkID(3) local(1 #2)  not found in goalBk
bkID(3) local(2 #3)  not found in goalBk
bkID(3) local(3 #0)  not found in goalBk
bkID(3) local(0 #4)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(3) Incoming Locals(4 0x0): 4- 2- 3- 0- 
+bk  bkID(3) Incoming Locals(4 0x1): 4+ 2- 3- 0- 
-gbk bkID(4) Incoming Locals(2 0x0): 0- 4- 
+gbk bkID(4) Incoming Locals(2 0x1): 4+ 0- 
bkID(3) local(0 #4)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(4 0x1): 4+ 2- 3- 0- 
dstBk(3) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(3) Incoming Locals(4 0x1): 4+ 2- 3- 0- 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x1): 4+ 0- 
dstBk(4) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(4) Incoming Locals(2 0x1): 4+ 0- 
bkID(3) local(1 #2)  not found in goalBk
bkID(3) local(2 #3)  not found in goalBk
bkID(3) local(3 #0)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(3) Incoming Locals(4 0x1): 4+ 2- 3- 0- 
+bk  bkID(3) Incoming Locals(4 0x3): 4+ 0+ 3- 2- 
-gbk bkID(4) Incoming Locals(2 0x1): 4+ 0- 
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
bkID(3) local(3 #2)  not found in goalBk
bkID(4) local(0 #4)  not found in goalBk
bkID(4) local(1 #0)  not found in goalBk
Pushing blockID(4)
bkID(7) local(0 #4)  ordered in goalBk(3)
-bk  bkID(7) Incoming Locals(4 0x0): 4- 2- 3- 0- 
dstBk(7) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(7) Incoming Locals(4 0x1): 4+ 2- 3- 0- 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
dstBk(4) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
-gbk bkID(3) Incoming Locals(4 0x3): 4+ 0+ 3- 2- 
dstBk(3) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(3) Incoming Locals(4 0x3): 4+ 0+ 3- 2- 
bkID(7) local(1 #2)  not ordered
bestLocal(2) bestLocalScore(24)
-bk  bkID(7) Incoming Locals(4 0x1): 4+ 2- 3- 0- 
+bk  bkID(7) Incoming Locals(4 0x5): 4+ 3- 2+ 0- 
-gbk bkID(3) Incoming Locals(4 0x3): 4+ 0+ 3- 2- 
+gbk bkID(3) Incoming Locals(4 0x7): 4+ 0+ 2+ 3- 
bkID(7) local(1 #3)  not ordered
bestLocal(3) bestLocalScore(24)
-bk  bkID(7) Incoming Locals(4 0x5): 4+ 3- 2+ 0- 
+bk  bkID(7) Incoming Locals(4 0xd): 4+ 0- 2+ 3+ 
-gbk bkID(3) Incoming Locals(4 0x7): 4+ 0+ 2+ 3- 
+gbk bkID(3) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
bkID(7) local(1 #0)  ordered in goalBk(3)
-bk  bkID(7) Incoming Locals(4 0xd): 4+ 0- 2+ 3+ 
dstBk(7) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
-gbk bkID(3) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(3) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
bkID(7) local(2 #2)  ordered in goalBk(3)
-bk  bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
dstBk(7) local(2 2) found in slot(2)
local(2 2) same slot
+bk  bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
-gbk bkID(3) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
dstBk(3) local(2 2) found in slot(2)
local(2 2) same slot
+gbk bkID(3) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
bkID(7) local(3 #3)  ordered in goalBk(3)
-bk  bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
dstBk(7) local(3 3) found in slot(3)
local(3 3) same slot
+bk  bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
-gbk bkID(3) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
dstBk(3) local(3 3) found in slot(3)
local(3 3) same slot
+gbk bkID(3) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
bkID(7) local(0 #4)  ordered in goalBk(4)
-bk  bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
dstBk(7) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
dstBk(4) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
bkID(7) local(1 #0)  ordered in goalBk(4)
-bk  bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
dstBk(7) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
bkID(7) local(2 #2)  not found in goalBk
bkID(7) local(3 #3)  not found in goalBk
bkID(4) local(0 #4)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
dstBk(4) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
dstBk(3) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(3) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
bkID(4) local(1 #0)  ordered in goalBk(3)
-bk  bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(3) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
bkID(6) local(0 #4)  ordered in goalBk(7)
-bk  bkID(6) Incoming Locals(4 0x0): 4- 2- 3- 0- 
dstBk(6) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(6) Incoming Locals(4 0x1): 4+ 2- 3- 0- 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
dstBk(4) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
-gbk bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
dstBk(7) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
bkID(6) local(1 #2)  ordered in goalBk(7)
-bk  bkID(6) Incoming Locals(4 0x1): 4+ 2- 3- 0- 
dstBk(6) local(2 2) found in slot(1)
local(#2) swapped with local(#1)
+bk  bkID(6) Incoming Locals(4 0x5): 4+ 3- 2+ 0- 
bkID(6) local(2 #2)  ordered in goalBk(7)
-bk  bkID(6) Incoming Locals(4 0x5): 4+ 3- 2+ 0- 
dstBk(6) local(2 2) found in slot(2)
local(2 2) same slot
+bk  bkID(6) Incoming Locals(4 0x5): 4+ 3- 2+ 0- 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
-gbk bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
dstBk(7) local(2 2) found in slot(2)
local(2 2) same slot
+gbk bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
bkID(6) local(3 #0)  ordered in goalBk(7)
-bk  bkID(6) Incoming Locals(4 0x5): 4+ 3- 2+ 0- 
dstBk(6) local(1 0) found in slot(3)
local(#1) swapped with local(#3)
+bk  bkID(6) Incoming Locals(4 0x7): 4+ 0+ 2+ 3- 
bkID(6) local(0 #4)  ordered in goalBk(4)
-bk  bkID(6) Incoming Locals(4 0x7): 4+ 0+ 2+ 3- 
dstBk(6) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(6) Incoming Locals(4 0x7): 4+ 0+ 2+ 3- 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
dstBk(4) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
bkID(6) local(1 #0)  ordered in goalBk(4)
-bk  bkID(6) Incoming Locals(4 0x7): 4+ 0+ 2+ 3- 
dstBk(6) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(6) Incoming Locals(4 0x7): 4+ 0+ 2+ 3- 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
bkID(6) local(2 #2)  not found in goalBk
bkID(6) local(3 #3)  not found in goalBk
bkID(4) local(0 #4)  ordered in goalBk(7)
-bk  bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
dstBk(4) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
 ordered in bk
-gbk bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
dstBk(7) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
bkID(4) local(1 #0)  ordered in goalBk(7)
-bk  bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
 ordered in bk
-gbk bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
dstBk(7) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(7) Incoming Locals(4 0xf): 4+ 0+ 2+ 3+ 
bkID(5) local(0 #0)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(1 0x0): 0- 
dstBk(5) local(1 0) found in slot(0)
local(#1) swapped with local(#0)
+bk  bkID(5) Incoming Locals(2 0x2): <null> 0+ 
bkID(5) local(1 #0)  ordered in goalBk(4)
-bk  bkID(5) Incoming Locals(2 0x2): <null> 0+ 
dstBk(5) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(5) Incoming Locals(2 0x2): <null> 0+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
bkID(4) local(0 #4)  ordered in goalBk(4)
-bk  bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
dstBk(4) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
dstBk(4) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
bkID(4) local(1 #0)  ordered in goalBk(4)
-bk  bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 0+ 
Popping blockID(4)
pre  bkID(2) Incoming Locals(1 0x0): 0- 
local(#0) swapped with local(#4)
post bkID(2) Incoming Locals(5 0x10): <null> <null> <null> <null> 0+ 
pre  bkID(6) Incoming Locals(4 0x7): 4+ 0+ 2+ 3- 
local(#3) swapped with local(#4)
post bkID(6) Incoming Locals(5 0x17): 4+ 0+ 2+ <null> 3+ 

#################################################

The maximum node counts per root node are 22
IR block list contains 9 blocks in method
#################################################

*************************************************
*
* (block ID:2 block PC:0 )
* IR root list contains 7 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x10
* Source: com.sun.mep.bench.Chess.ChessBBCollisionDetector.detectCollisions(Lcom/sun/mep/bench/Chess/Actor;)V(ChessBBCollisionDetector.java:51)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<0>  (0x93a738):    aload_0 
<1>  (0x93a739):    agetfield_quick #3
<4>  (0x93a73c):    invokevirtual_quick_w #4 <com.sun.mep.bench.Chess.ActorManager.numActors()I>
<7>  (0x93a73f):    istore_2 
<8>  (0x93a740):    iconst_0 
<9>  (0x93a741):    istore_3 
<10>  (0x93a742):    iconst_0 
<11>  (0x93a743):    istore 4
<13>  (0x93a745):    goto <175>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(5): 
	<null>
	<null>
	<null>
	<null>
	local(0)	ID(2)
 
Assigned Locals(3): 
	ASSIGN(16): local(2)	ID(15)	rhsID(11)
 	ASSIGN(19): local(3)	ID(18)	rhsID(13)
 	ASSIGN(21): local(4)	ID(20)	rhsID(14)
 
Successor Blocks(1): 
	ID(3) LocalOrder(1) AssignOrder(3) RefsOK(0) Locals(4 0 2 3 <null>)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (reference)  (ref count: 3)
      <(ID: 12) FETCH (reference) 
         <(ID: 4) FIELD_REF (reference) 
            <(ID: 2) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 11) IDENTITY (int)  (ref count: 2)
      <(ID: 17) INVOKE (int) 
         <(ID: 8) PARAMETER (reference) 
            <(ID: 5) IDENTITY (reference)  (ref count: 3)
            <(ID: 7) NULL_PARAMETER (NONE) 
         <(ID: 10) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 9) GET_VTBL (NONE) 
               <(ID: 5) IDENTITY (reference)  (ref count: 3)
            <(ID: 6) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)

   <(ID: 16) ASSIGN (int)  (assignIdx: 0)
      <(ID: 15) LOCAL (int)   2>
      <(ID: 11) IDENTITY (int)  (ref count: 2)

   <(ID: 19) ASSIGN (int)  (assignIdx: 1)
      <(ID: 18) LOCAL (int)   3>
      <(ID: 13) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 21) ASSIGN (int)  (assignIdx: 2)
      <(ID: 20) LOCAL (int)   4>
      <(ID: 14) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 22) GOTO (NONE) 
   target: (BlockID: 3 BlockPC: 175)


*************************************************
*
* (block ID:4 block PC:16 )
* IR root list contains 6 root nodes: in block 
* flags: 0x321
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.ChessBBCollisionDetector.detectCollisions(Lcom/sun/mep/bench/Chess/Actor;)V(ChessBBCollisionDetector.java:58)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<16>  (0x93a748):    aload_0 
<17>  (0x93a749):    aload_0 
<18>  (0x93a74a):    agetfield_quick #3
<21>  (0x93a74d):    iload 4
<23>  (0x93a74f):    invokevirtual_quick_w #5 <com.sun.mep.bench.Chess.ActorManager.actor(I)Lcom/sun/mep/bench/Chess/Actor;>
<26>  (0x93a752):    aputfield_quick #4
<29>  (0x93a755):    goto <80>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(33)
 	local(4)	ID(37)
 
Incoming Locals(2): 
	local(4)	ID(37)
 	local(0)	ID(33)
 
Successor Blocks(1): 
	ID(5) LocalOrder(2) AssignOrder(0) RefsOK(0) Locals(<null> 0)

   <(ID: 32) MAP_PC (NONE)   16>

   <(ID: 36) IDENTITY (reference)  (ref count: 3)
      <(ID: 45) FETCH (reference) 
         <(ID: 35) FIELD_REF (reference) 
            <(ID: 33) IDENTITY (reference)  (ref count: 2)
               <(ID: 49) LOCAL (reference)   0>
            <(ID: 34) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 44) IDENTITY (reference)  (ref count: 2)
      <(ID: 50) INVOKE (reference) 
         <(ID: 41) PARAMETER (reference) 
            <(ID: 36) IDENTITY (reference)  (ref count: 3)
            <(ID: 40) PARAMETER (int) 
               <(ID: 37) LOCAL (int)   4>
               <(ID: 39) NULL_PARAMETER (NONE) 
         <(ID: 43) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 42) GET_VTBL (NONE) 
               <(ID: 36) IDENTITY (reference)  (ref count: 3)
            <(ID: 38) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 18)

   <(ID: 48) ASSIGN (reference) 
      <(ID: 47) FIELD_REF (reference) 
         <(ID: 33) IDENTITY (reference)  (ref count: 2)
         <(ID: 46) CONST_FIELD_OFFSET (NONE)  (4)
      <(ID: 44) IDENTITY (reference)  (ref count: 2)

   <(ID: 51) MAP_PC (NONE)   29>

   <(ID: 52) GOTO (NONE) 
   target: (BlockID: 5 BlockPC: 80)


*************************************************
*
* (block ID:0 block PC:32 )
* IR root list contains 8 root nodes: in block 
* flags: 0x343
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.ChessBBCollisionDetector.detectCollisions(Lcom/sun/mep/bench/Chess/Actor;)V(ChessBBCollisionDetector.java:61)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<32>  (0x93a758):    astore 5
<34>  (0x93a75a):    aload_0 
<35>  (0x93a75b):    getfield #2 <com.sun.mep.bench.Chess.ChessBBCollisionDetector.theGame:Lcom/sun/mep/bench/Chess/Game;>
<38>  (0x93a75e):    getfield #8 <com.sun.mep.bench.Chess.Game.debugTextManager:Lcom/sun/mep/bench/Chess/DebugTextManager;>
<41>  (0x93a761):    new #9 <java.lang.StringBuffer>
<44>  (0x93a764):    dup 
<45>  (0x93a765):    invokespecial #10 <java.lang.StringBuffer.<init>()V>
<48>  (0x93a768):    aload 5
<50>  (0x93a76a):    invokevirtual #11 <java.lang.Throwable.toString()Ljava/lang/String;>
<53>  (0x93a76d):    invokevirtual #12 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<56>  (0x93a770):    ldc #13
<58>  (0x93a772):    invokevirtual #12 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<61>  (0x93a775):    iload 4
<63>  (0x93a777):    invokevirtual #14 <java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;>
<66>  (0x93a77a):    ldc #15
<68>  (0x93a77c):    invokevirtual #12 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<71>  (0x93a77f):    invokevirtual #16 <java.lang.StringBuffer.toString()Ljava/lang/String;>
<74>  (0x93a782):    invokevirtual #17
<77>  (0x93a785):    goto <80>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Assigned Locals(1): 
	ASSIGN(126): local(5)	ID(125)	rhsID(54)
 
Successor Blocks(1): 
	ID(5) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(<null> 0)

   <(ID: 53) MAP_PC (NONE)   32>

   <(ID: 54) IDENTITY (reference)  (ref count: 4)
      <(ID: 120) EXCEPTION_OBJECT (reference) 

   <(ID: 58) IDENTITY (reference)  (ref count: 2)
      <(ID: 62) FETCH (reference) 
         <(ID: 57) FIELD_REF (reference) 
            <(ID: 55) LOCAL (reference)   0>
            <(ID: 56) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 61) IDENTITY (reference)  (ref count: 3)
      <(ID: 119) FETCH (reference) 
         <(ID: 60) FIELD_REF (reference) 
            <(ID: 58) IDENTITY (reference)  (ref count: 2)
            <(ID: 59) CONST_FIELD_OFFSET (NONE)  (18)

   <(ID: 64) IDENTITY (reference)  (ref count: 3)
      <(ID: 69) NEW_OBJECT (reference) 
         <(ID: 63) CONST_CB (address field)  (java.lang.StringBuffer)

   <(ID: 68) INVOKE (v) 
      <(ID: 67) PARAMETER (reference) 
         <(ID: 64) IDENTITY (reference)  (ref count: 3)
         <(ID: 66) NULL_PARAMETER (NONE) 
      <(ID: 65) CONST_MB (address field)  (java.lang.StringBuffer.<init>()V)

   <(ID: 118) INVOKE (v) 
      <(ID: 115) PARAMETER (reference) 
         <(ID: 61) IDENTITY (reference)  (ref count: 3)
         <(ID: 114) PARAMETER (reference) 
            <(ID: 110) INVOKE (reference) 
               <(ID: 107) PARAMETER (reference) 
                  <(ID: 104) IDENTITY (reference)  (ref count: 2)
                     <(ID: 124) INVOKE (reference) 
                        <(ID: 101) PARAMETER (reference) 
                           <(ID: 96) IDENTITY (reference)  (ref count: 2)
                              <(ID: 123) INVOKE (reference) 
                                 <(ID: 93) PARAMETER (reference) 
                                    <(ID: 88) IDENTITY (reference)  (ref count: 2)
                                       <(ID: 122) INVOKE (reference) 
                                          <(ID: 85) PARAMETER (reference) 
                                             <(ID: 80) IDENTITY (reference)  (ref count: 2)
                                                <(ID: 121) INVOKE (reference) 
                                                   <(ID: 79) PARAMETER (reference) 
                                                      <(ID: 64) IDENTITY (reference)  (ref count: 3)
                                                      <(ID: 78) PARAMETER (reference) 
                                                         <(ID: 75) INVOKE (reference) 
                                                            <(ID: 72) PARAMETER (reference) 
                                                               <(ID: 54) IDENTITY (reference)  (ref count: 4)
                                                               <(ID: 71) NULL_PARAMETER (NONE) 
                                                            <(ID: 74) FETCH_MB_FROM_VTABLE (address field) 
                                                               <(ID: 73) GET_VTBL (NONE) 
                                                                  <(ID: 54) IDENTITY (reference)  (ref count: 4)
                                                               <(ID: 70) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 5)
                                                         <(ID: 77) NULL_PARAMETER (NONE) 
                                                   <(ID: 76) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                                             <(ID: 84) PARAMETER (reference) 
                                                <(ID: 81) CONST_STRING_ICELL (reference)  (stringICell 0x90e0d0)

                                                <(ID: 83) NULL_PARAMETER (NONE) 
                                          <(ID: 87) SEQUENCE_R (address field) 
                                             <(ID: 86) NULL_CHECK (reference) 
                                                <(ID: 80) IDENTITY (reference)  (ref count: 2)
                                             <(ID: 82) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                                    <(ID: 92) PARAMETER (int) 
                                       <(ID: 89) LOCAL (int)   4>
                                       <(ID: 91) NULL_PARAMETER (NONE) 
                                 <(ID: 95) SEQUENCE_R (address field) 
                                    <(ID: 94) NULL_CHECK (reference) 
                                       <(ID: 88) IDENTITY (reference)  (ref count: 2)
                                    <(ID: 90) CONST_MB (address field)  (java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;)
                           <(ID: 100) PARAMETER (reference) 
                              <(ID: 97) CONST_STRING_ICELL (reference)  (stringICell 0x80ba40)

                              <(ID: 99) NULL_PARAMETER (NONE) 
                        <(ID: 103) SEQUENCE_R (address field) 
                           <(ID: 102) NULL_CHECK (reference) 
                              <(ID: 96) IDENTITY (reference)  (ref count: 2)
                           <(ID: 98) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                  <(ID: 106) NULL_PARAMETER (NONE) 
               <(ID: 109) SEQUENCE_R (address field) 
                  <(ID: 108) NULL_CHECK (reference) 
                     <(ID: 104) IDENTITY (reference)  (ref count: 2)
                  <(ID: 105) CONST_MB (address field)  (java.lang.StringBuffer.toString()Ljava/lang/String;)
            <(ID: 113) NULL_PARAMETER (NONE) 
      <(ID: 117) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 116) GET_VTBL (NONE) 
            <(ID: 61) IDENTITY (reference)  (ref count: 3)
         <(ID: 112) RESOLVE_REFERENCE (NONE) 
            <(ID: 111) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 17)

   <(ID: 126) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 125) LOCAL (reference)   5>
      <(ID: 54) IDENTITY (reference)  (ref count: 4)


*************************************************
*
* (block ID:5 block PC:80 )
* IR root list contains 15 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x2
* Source: com.sun.mep.bench.Chess.ChessBBCollisionDetector.detectCollisions(Lcom/sun/mep/bench/Chess/Actor;)V(ChessBBCollisionDetector.java:65)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<80>  (0x93a788):    aload_0 
<81>  (0x93a789):    agetfield_quick #4
<84>  (0x93a78c):    invokevirtual_quick_w #18 <com.sun.mep.bench.Chess.Actor.getBoundingBox()Lcom/sun/mep/bench/Chess/Rectangle;>
<87>  (0x93a78f):    aload_1 
<88>  (0x93a790):    invokevirtual_quick_w #18 <com.sun.mep.bench.Chess.Actor.getBoundingBox()Lcom/sun/mep/bench/Chess/Rectangle;>
<91>  (0x93a793):    invokevirtual_quick_w #19 <com.sun.mep.bench.Chess.Rectangle.intersects(Lcom/sun/mep/bench/Chess/Rectangle;)Z>
<94>  (0x93a796):    ifeq <131>
<97>  (0x93a799):    aload_0 
<98>  (0x93a79a):    getfield #6 <com.sun.mep.bench.Chess.ChessBBCollisionDetector.a1:Lcom/sun/mep/bench/Chess/Actor;>
<101>  (0x93a79d):    checkcast #20
<104>  (0x93a7a0):    invokevirtual #21
<107>  (0x93a7a3):    aload_1 
<108>  (0x93a7a4):    checkcast #20
<111>  (0x93a7a7):    invokevirtual #21
<114>  (0x93a7aa):    if_icmpeq <131>
<117>  (0x93a7ad):    iconst_1 
<118>  (0x93a7ae):    istore_3 
<119>  (0x93a7af):    aload_0 
<120>  (0x93a7b0):    getfield #6 <com.sun.mep.bench.Chess.ChessBBCollisionDetector.a1:Lcom/sun/mep/bench/Chess/Actor;>
<123>  (0x93a7b3):    aload_1 
<124>  (0x93a7b4):    aload_0 
<125>  (0x93a7b5):    getfield #6 <com.sun.mep.bench.Chess.ChessBBCollisionDetector.a1:Lcom/sun/mep/bench/Chess/Actor;>
<128>  (0x93a7b8):    invokevirtual #22
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(128)
 
Incoming Locals(2): 
	<null>
	local(0)	ID(128)
 
Assigned Locals(1): 
	ASSIGN(191): local(3)	ID(190)	rhsID(189)
 
Successor Blocks(1): 
	ID(6) LocalOrder(1) AssignOrder(0) RefsOK(0) Locals(4 0 2 <null> 3)

   <(ID: 127) MAP_PC (NONE)   80>

   <(ID: 131) IDENTITY (reference)  (ref count: 3)
      <(ID: 139) FETCH (reference) 
         <(ID: 130) FIELD_REF (reference) 
            <(ID: 128) IDENTITY (reference)  (ref count: 3)
               <(ID: 162) LOCAL (reference)   0>
            <(ID: 129) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 137) IDENTITY (reference)  (ref count: 3)
      <(ID: 156) INVOKE (reference) 
         <(ID: 134) PARAMETER (reference) 
            <(ID: 131) IDENTITY (reference)  (ref count: 3)
            <(ID: 133) NULL_PARAMETER (NONE) 
         <(ID: 136) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 135) GET_VTBL (NONE) 
               <(ID: 131) IDENTITY (reference)  (ref count: 3)
            <(ID: 132) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)

   <(ID: 145) IDENTITY (reference)  (ref count: 2)
      <(ID: 157) INVOKE (reference) 
         <(ID: 142) PARAMETER (reference) 
            <(ID: 138) IDENTITY (reference)  (ref count: 4)
               <(ID: 146) LOCAL (reference)   1>
            <(ID: 141) NULL_PARAMETER (NONE) 
         <(ID: 144) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 143) GET_VTBL (NONE) 
               <(ID: 138) IDENTITY (reference)  (ref count: 4)
            <(ID: 140) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)

   <(ID: 153) IDENTITY (int)  (ref count: 2)
      <(ID: 158) INVOKE (int) 
         <(ID: 150) PARAMETER (reference) 
            <(ID: 137) IDENTITY (reference)  (ref count: 3)
            <(ID: 149) PARAMETER (reference) 
               <(ID: 145) IDENTITY (reference)  (ref count: 2)
               <(ID: 148) NULL_PARAMETER (NONE) 
         <(ID: 152) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 151) GET_VTBL (NONE) 
               <(ID: 137) IDENTITY (reference)  (ref count: 3)
            <(ID: 147) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 12)

   <(ID: 155) BCOND (int) 
   target: (BlockID: 6 BlockPC: 131)
   condition: EQ
   flags: 0
      <(ID: 153) IDENTITY (int)  (ref count: 2)
      <(ID: 154) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 161) IDENTITY (reference)  (ref count: 2)
      <(ID: 166) FETCH (reference) 
         <(ID: 160) FIELD_REF (reference) 
            <(ID: 128) IDENTITY (reference)  (ref count: 3)
            <(ID: 159) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 165) IDENTITY (reference)  (ref count: 3)
      <(ID: 174) CHECKCAST (reference) 
         <(ID: 161) IDENTITY (reference)  (ref count: 2)
         <(ID: 164) RESOLVE_REFERENCE (NONE) 
            <(ID: 163) CONST_CB_UNRESOLVED (NONE)  (cpIndex 20)

   <(ID: 173) IDENTITY (int)  (ref count: 2)
      <(ID: 187) INVOKE (int) 
         <(ID: 170) PARAMETER (reference) 
            <(ID: 165) IDENTITY (reference)  (ref count: 3)
            <(ID: 169) NULL_PARAMETER (NONE) 
         <(ID: 172) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 171) GET_VTBL (NONE) 
               <(ID: 165) IDENTITY (reference)  (ref count: 3)
            <(ID: 168) RESOLVE_REFERENCE (NONE) 
               <(ID: 167) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 21)

   <(ID: 177) IDENTITY (reference)  (ref count: 3)
      <(ID: 186) CHECKCAST (reference) 
         <(ID: 138) IDENTITY (reference)  (ref count: 4)
         <(ID: 176) RESOLVE_REFERENCE (NONE) 
            <(ID: 175) CONST_CB_UNRESOLVED (NONE)  (cpIndex 20)

   <(ID: 184) IDENTITY (int)  (ref count: 2)
      <(ID: 188) INVOKE (int) 
         <(ID: 181) PARAMETER (reference) 
            <(ID: 177) IDENTITY (reference)  (ref count: 3)
            <(ID: 180) NULL_PARAMETER (NONE) 
         <(ID: 183) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 182) GET_VTBL (NONE) 
               <(ID: 177) IDENTITY (reference)  (ref count: 3)
            <(ID: 179) RESOLVE_REFERENCE (NONE) 
               <(ID: 178) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 21)

   <(ID: 185) BCOND (int) 
   target: (BlockID: 6 BlockPC: 131)
   condition: EQ
   flags: 0
      <(ID: 173) IDENTITY (int)  (ref count: 2)
      <(ID: 184) IDENTITY (int)  (ref count: 2)


   <(ID: 191) ASSIGN (int)  (assignIdx: 0)
      <(ID: 190) LOCAL (int)   3>
      <(ID: 189) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 194) IDENTITY (reference)  (ref count: 4)
      <(ID: 204) FETCH (reference) 
         <(ID: 193) FIELD_REF (reference) 
            <(ID: 128) IDENTITY (reference)  (ref count: 3)
            <(ID: 192) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 203) INVOKE (v) 
      <(ID: 200) PARAMETER (reference) 
         <(ID: 194) IDENTITY (reference)  (ref count: 4)
         <(ID: 199) PARAMETER (reference) 
            <(ID: 138) IDENTITY (reference)  (ref count: 4)
            <(ID: 198) PARAMETER (reference) 
               <(ID: 194) IDENTITY (reference)  (ref count: 4)
               <(ID: 197) NULL_PARAMETER (NONE) 
      <(ID: 202) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 201) GET_VTBL (NONE) 
            <(ID: 194) IDENTITY (reference)  (ref count: 4)
         <(ID: 196) RESOLVE_REFERENCE (NONE) 
            <(ID: 195) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 22)


*************************************************
*
* (block ID:6 block PC:131 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x17
* Source: com.sun.mep.bench.Chess.ChessBBCollisionDetector.detectCollisions(Lcom/sun/mep/bench/Chess/Actor;)V(ChessBBCollisionDetector.java:71)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<131>  (0x93a7bb):    goto <172>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Incoming Locals(5): 
	local(4)	ID(264)
 	local(0)	ID(33)
 	local(2)	ID(25)
 	<null>
	local(3)	ID(27)
 
Successor Blocks(1): 
	ID(7) LocalOrder(0) AssignOrder(0) RefsOK(1) Locals(4 0 2 3 <null>)

   <(ID: 261) MAP_PC (NONE)   131>

   <(ID: 262) GOTO (NONE) 
   target: (BlockID: 7 BlockPC: 172)


*************************************************
*
* (block ID:1 block PC:134 )
* IR root list contains 8 root nodes: in block 
* flags: 0x343
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.ChessBBCollisionDetector.detectCollisions(Lcom/sun/mep/bench/Chess/Actor;)V(ChessBBCollisionDetector.java:74)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<134>  (0x93a7be):    astore 5
<136>  (0x93a7c0):    aload_0 
<137>  (0x93a7c1):    getfield #2 <com.sun.mep.bench.Chess.ChessBBCollisionDetector.theGame:Lcom/sun/mep/bench/Chess/Game;>
<140>  (0x93a7c4):    getfield #8 <com.sun.mep.bench.Chess.Game.debugTextManager:Lcom/sun/mep/bench/Chess/DebugTextManager;>
<143>  (0x93a7c7):    new #9 <java.lang.StringBuffer>
<146>  (0x93a7ca):    dup 
<147>  (0x93a7cb):    invokespecial #10 <java.lang.StringBuffer.<init>()V>
<150>  (0x93a7ce):    aload 5
<152>  (0x93a7d0):    invokevirtual #23 <java.lang.Throwable.toString()Ljava/lang/String;>
<155>  (0x93a7d3):    invokevirtual #12 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<158>  (0x93a7d6):    ldc #24
<160>  (0x93a7d8):    invokevirtual #12 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<163>  (0x93a7db):    invokevirtual #16 <java.lang.StringBuffer.toString()Ljava/lang/String;>
<166>  (0x93a7de):    invokevirtual #17
<169>  (0x93a7e1):    goto <172>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Assigned Locals(1): 
	ASSIGN(260): local(5)	ID(259)	rhsID(206)
 
Successor Blocks(1): 
	ID(7) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(4 0 2 3 <null>)

   <(ID: 205) MAP_PC (NONE)   134>

   <(ID: 206) IDENTITY (reference)  (ref count: 4)
      <(ID: 256) EXCEPTION_OBJECT (reference) 

   <(ID: 210) IDENTITY (reference)  (ref count: 2)
      <(ID: 214) FETCH (reference) 
         <(ID: 209) FIELD_REF (reference) 
            <(ID: 207) LOCAL (reference)   0>
            <(ID: 208) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 213) IDENTITY (reference)  (ref count: 3)
      <(ID: 255) FETCH (reference) 
         <(ID: 212) FIELD_REF (reference) 
            <(ID: 210) IDENTITY (reference)  (ref count: 2)
            <(ID: 211) CONST_FIELD_OFFSET (NONE)  (18)

   <(ID: 216) IDENTITY (reference)  (ref count: 3)
      <(ID: 221) NEW_OBJECT (reference) 
         <(ID: 215) CONST_CB (address field)  (java.lang.StringBuffer)

   <(ID: 220) INVOKE (v) 
      <(ID: 219) PARAMETER (reference) 
         <(ID: 216) IDENTITY (reference)  (ref count: 3)
         <(ID: 218) NULL_PARAMETER (NONE) 
      <(ID: 217) CONST_MB (address field)  (java.lang.StringBuffer.<init>()V)

   <(ID: 254) INVOKE (v) 
      <(ID: 251) PARAMETER (reference) 
         <(ID: 213) IDENTITY (reference)  (ref count: 3)
         <(ID: 250) PARAMETER (reference) 
            <(ID: 246) INVOKE (reference) 
               <(ID: 243) PARAMETER (reference) 
                  <(ID: 240) IDENTITY (reference)  (ref count: 2)
                     <(ID: 258) INVOKE (reference) 
                        <(ID: 237) PARAMETER (reference) 
                           <(ID: 232) IDENTITY (reference)  (ref count: 2)
                              <(ID: 257) INVOKE (reference) 
                                 <(ID: 231) PARAMETER (reference) 
                                    <(ID: 216) IDENTITY (reference)  (ref count: 3)
                                    <(ID: 230) PARAMETER (reference) 
                                       <(ID: 227) INVOKE (reference) 
                                          <(ID: 224) PARAMETER (reference) 
                                             <(ID: 206) IDENTITY (reference)  (ref count: 4)
                                             <(ID: 223) NULL_PARAMETER (NONE) 
                                          <(ID: 226) FETCH_MB_FROM_VTABLE (address field) 
                                             <(ID: 225) GET_VTBL (NONE) 
                                                <(ID: 206) IDENTITY (reference)  (ref count: 4)
                                             <(ID: 222) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 5)
                                       <(ID: 229) NULL_PARAMETER (NONE) 
                                 <(ID: 228) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                           <(ID: 236) PARAMETER (reference) 
                              <(ID: 233) CONST_STRING_ICELL (reference)  (stringICell 0x90e3a0)

                              <(ID: 235) NULL_PARAMETER (NONE) 
                        <(ID: 239) SEQUENCE_R (address field) 
                           <(ID: 238) NULL_CHECK (reference) 
                              <(ID: 232) IDENTITY (reference)  (ref count: 2)
                           <(ID: 234) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                  <(ID: 242) NULL_PARAMETER (NONE) 
               <(ID: 245) SEQUENCE_R (address field) 
                  <(ID: 244) NULL_CHECK (reference) 
                     <(ID: 240) IDENTITY (reference)  (ref count: 2)
                  <(ID: 241) CONST_MB (address field)  (java.lang.StringBuffer.toString()Ljava/lang/String;)
            <(ID: 249) NULL_PARAMETER (NONE) 
      <(ID: 253) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 252) GET_VTBL (NONE) 
            <(ID: 213) IDENTITY (reference)  (ref count: 3)
         <(ID: 248) RESOLVE_REFERENCE (NONE) 
            <(ID: 247) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 17)

   <(ID: 260) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 259) LOCAL (reference)   5>
      <(ID: 206) IDENTITY (reference)  (ref count: 4)


*************************************************
*
* (block ID:7 block PC:172 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1f
* Source: com.sun.mep.bench.Chess.ChessBBCollisionDetector.detectCollisions(Lcom/sun/mep/bench/Chess/Actor;)V(ChessBBCollisionDetector.java:54)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<172>  (0x93a7e4):    iinc 4 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(4)	ID(264)
 
Incoming Locals(5): 
	local(4)	ID(264)
 	local(0)	ID(33)
 	local(2)	ID(25)
 	local(3)	ID(27)
 	<null>

Assigned Locals(1): 
	ASSIGN(268): local(4)	ID(267)	rhsID(266)
 
Successor Blocks(1): 
	ID(3) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(4 0 2 3 <null>)

   <(ID: 263) MAP_PC (NONE)   172>

   <(ID: 264) IDENTITY (int)  (ref count: 2)
      <(ID: 269) LOCAL (int)   4>

   <(ID: 268) ASSIGN (int)  (assignIdx: 0)
      <(ID: 267) LOCAL (int)   4>
      <(ID: 266) ADD (int) 
         <(ID: 264) IDENTITY (int)  (ref count: 2)
         <(ID: 265) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:3 block PC:175 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1f
* Source: com.sun.mep.bench.Chess.ChessBBCollisionDetector.detectCollisions(Lcom/sun/mep/bench/Chess/Actor;)V(ChessBBCollisionDetector.java:54)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<175>  (0x93a7e7):    iload 4
<177>  (0x93a7e9):    iload_2 
<178>  (0x93a7ea):    if_icmpge <185>
<181>  (0x93a7ed):    iload_3 
<182>  (0x93a7ee):    ifeq <16>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(4)	ID(24)
 	local(2)	ID(25)
 	local(3)	ID(27)
 
Incoming Locals(5): 
	local(4)	ID(24)
 	local(0)	ID(33)
 	local(2)	ID(25)
 	local(3)	ID(27)
 	<null>

Successor Blocks(2): 
	ID(8) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals()
	ID(4) LocalOrder(3) AssignOrder(0) RefsOK(1) Locals(4 0)

   <(ID: 23) MAP_PC (NONE)   175>

   <(ID: 26) BCOND (int) 
   target: (BlockID: 8 BlockPC: 185)
   condition: GE
   flags: 0
      <(ID: 24) LOCAL (int)   4>
      <(ID: 25) LOCAL (int)   2>


   <(ID: 29) BCOND (int) 
   target: (BlockID: 4 BlockPC: 16)
   condition: EQ
   flags: 0
      <(ID: 27) LOCAL (int)   3>
      <(ID: 28) CONST_JAVA_NUMERIC32 (int)  (0)



*************************************************
*
* (block ID:8 block PC:185 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.ChessBBCollisionDetector.detectCollisions(Lcom/sun/mep/bench/Chess/Actor;)V(ChessBBCollisionDetector.java:80)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<185>  (0x93a7f1):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

   <(ID: 30) MAP_PC (NONE)   185>

   <(ID: 31) RETURN (v) 


NUM BARRIER BYTES = 16
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 968
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 1124
ESTIMATED BUFFER SIZE = 2264
CODE BUFFER ADDRESS = 0x2bcc1090
PC MAP TABLE ADDRESS = 0x2bcc1098
GC CHECK PCS ADDRESS = 0x2bcc10c4
CODE ENTRY ADDRESS = 0x2bcc10f0
          		@ Method prologue
0x2bcc10f0	0:	addiu	a1, JSP, 60	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc10f4	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc10f8	8:	sltu	t7, a1, CHUNKEND
0x2bcc10fc	12:	bne	t7, zero, PC=0x2bcc10f0	@ goto .skip
0x2bcc1100	16:	nop
0x2bcc1104	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc1108	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc10fc) >>>>>>>>
0x2bcc10fc	12:	bne	t7, zero, PC=0x2bcc110c	@ goto .skip
0x2bcc1100	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc110c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc110c	28:	sw	JFP, 16(JSP)	@ Store curr JFP into new frame
0x2bcc1110	32:	addiu	JFP, JSP, 16	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc1114	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc1118	40:	addiu	a3, zero, 0
0x2bcc111c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc1120	48:	addiu	a3, zero, -1
0x2bcc1124	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc1128	56:	move	a0, EE
0x2bcc112c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc1130	64:	lui	t9, hi16(0x65)
0x2bcc1134	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc1138	72:	jalr	t9
0x2bcc113c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc1140	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc1144	84:	nop
0x2bcc1148	88:	nop
0x2bcc114c	92:	nop
			@ Initial Temp REF set is 
	L2:	96:	@ entry point for first block
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=96
0x2bcc1150	96:	lw	ra, -24(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcc1154	100:	lw	s7, 12(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc1158	104:	sw	s7, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc115c	108:	lw	s6, 0(s7)	@ Get object.cb
0x2bcc1160	112:	addiu	t7, zero, -4
0x2bcc1164	116:	and	s6, s6, t7
0x2bcc1168	120:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc116c	124:	lw	a0, 68(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc1170	128:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc1174	132:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1178	136:	jalr	s7
0x2bcc117c	140:	nop
          		@ Captured a stackmap here.
0x2bcc1180	144:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc1184	148:	lw	s6, 0(JSP)
0x2bcc1188	152:	sw	s6, -16(JFP)	@ Java local cell # 2
0x2bcc118c	156:	sw	zero, -12(JFP)	@ Java local cell # 3
0x2bcc1190	160:	sw	zero, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(4) reg(20): not in register
0x2bcc1194	164:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(0) reg(21): not in register
0x2bcc1198	168:	lw	s5, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(2) reg(22): in correct register
			@ Outgoing local(3) reg(23): in wrong register
0x2bcc119c	172:	move	s7, zero
0x2bcc11a0	176:	b	PC=0x2bcc11a0	@ branch to block L3
0x2bcc11a4	180:	nop
			@ Initial Temp REF set is 
	L4:	184:	@ Patchable GC Check point
0x2bcc11a8	184:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcc11a8	184:	nop
0x2bcc11ac	188:	nop
          		@ Captured a stackmap here.
	L4:	192:	@ entry point when locals need to be loaded
			@ Preloading incoming local(4) reg(20)
0x2bcc11b0	192:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Preloading incoming local(0) reg(21)
0x2bcc11b4	196:	lw	s5, -24(JFP)	@ Java local cell # 0
	L4:	200:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=16 compiledPc=192
          		@ Do getfield:
0x2bcc11b8	200:	lw	s7, 12(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc11bc	204:	sw	s7, 0(JSP)
0x2bcc11c0	208:	sw	s4, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc11c4	212:	lw	s6, 0(s7)	@ Get object.cb
0x2bcc11c8	216:	addiu	t7, zero, -4
0x2bcc11cc	220:	and	s6, s6, t7
0x2bcc11d0	224:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc11d4	228:	lw	a0, 72(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc11d8	232:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc11dc	236:	lw	s7, 0(a0)	@ call method through mb
0x2bcc11e0	240:	jalr	s7
0x2bcc11e4	244:	nop
          		@ Captured a stackmap here.
0x2bcc11e8	248:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc11ec	252:	lw	s7, 0(JSP)
          		@ Do putfield:
0x2bcc11f0	256:	lw	s6, -24(JFP)	@ Java local cell # 0
0x2bcc11f4	260:	addiu	s5, s6, 16	@ fieldAddr = obj + fieldOffset;
0x2bcc11f8	264:	sw	s7, 0(s5)	@ putfield(fieldAddr, valueObj);
0x2bcc11fc	268:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc1200	272:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc1204	276:	srl	t7, s5, 9	@ mark card table
0x2bcc1208	280:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc120c	284:	sb	ra, 0(t7)
          		@ MAP_PC idepth=0 javaPc=29 compiledPc=288
			@ Outgoing local(0) reg(21): in wrong register
0x2bcc1210	288:	move	s5, s6
0x2bcc1214	292:	b	PC=0x2bcc1214	@ branch to block L5
0x2bcc1218	296:	nop
			@ Initial Temp REF set is 
	L0:	300:	@ entry point for exception handler
          		@ Captured a stackmap here.
          		@ MAP_PC idepth=0 javaPc=32 compiledPc=300
0x2bcc121c	300:	lw	s5, -24(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcc1220	304:	lw	s7, 8(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc1224	308:	lw	s6, 72(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc1228	312:	lw	a1, 0(CP)	@ cb java.lang.StringBuffer
          		@ Do new:
0x2bcc122c	316:	sw	a0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc1230	320:	sw	s6, 32(JFP)	@ REF spill Java temp cell # 1
          		@ cb: java.lang.StringBuffer
0x2bcc1234	324:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc1238	328:	nop
          		@ Captured a stackmap here.
0x2bcc123c	332:	sw	v0, 0(JSP)
0x2bcc1240	336:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc1244	340:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc1248	344:	sw	v0, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc124c	348:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1250	352:	jalr	s7
0x2bcc1254	356:	nop
          		@ Captured a stackmap here.
0x2bcc1258	360:	lw	s7, 32(JFP)	@ Java temp cell # 1
0x2bcc125c	364:	sw	s7, 0(JSP)
0x2bcc1260	368:	lw	s6, 36(JFP)	@ Java temp cell # 2
0x2bcc1264	372:	sw	s6, 4(JSP)
0x2bcc1268	376:	lw	s6, 28(JFP)	@ Java temp cell # 0
0x2bcc126c	380:	sw	s6, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcc1270	384:	lw	s5, 0(s6)	@ Get object.cb
0x2bcc1274	388:	addiu	t7, zero, -4
0x2bcc1278	392:	and	s5, s5, t7
0x2bcc127c	396:	lw	s5, 76(s5)	@ Get cb.vtbl
0x2bcc1280	400:	lw	a0, 20(s5)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc1284	404:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcc1288	408:	lw	s7, 0(a0)	@ call method through mb
0x2bcc128c	412:	jalr	s7
0x2bcc1290	416:	nop
          		@ Captured a stackmap here.
0x2bcc1294	420:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc1298	424:	lw	s7, 0(a0)	@ call method through mb
0x2bcc129c	428:	jalr	s7
0x2bcc12a0	432:	nop
          		@ Captured a stackmap here.
0x2bcc12a4	436:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc12a8	440:	lw	s7, 0(JSP)
0x2bcc12ac	444:	sw	s7, 0(JSP)
0x2bcc12b0	448:	lw	s5, 0(CP)	@ StringICell
0x2bcc12b4	452:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcc12b8	456:	sw	s6, 4(JSP)
0x2bcc12bc	460:	lw	s6, 0(s7)	@ NULL check
0x2bcc12c0	464:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc12c4	468:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc12c8	472:	lw	s7, 0(a0)	@ call method through mb
0x2bcc12cc	476:	jalr	s7
0x2bcc12d0	480:	nop
          		@ Captured a stackmap here.
0x2bcc12d4	484:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc12d8	488:	lw	s7, 0(JSP)
0x2bcc12dc	492:	sw	s7, 0(JSP)
0x2bcc12e0	496:	lw	ra, -8(JFP)	@ Java local cell # 4
0x2bcc12e4	500:	sw	ra, 4(JSP)
0x2bcc12e8	504:	lw	s6, 0(s7)	@ NULL check
0x2bcc12ec	508:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc12f0	512:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc12f4	516:	lw	s7, 0(a0)	@ call method through mb
0x2bcc12f8	520:	jalr	s7
0x2bcc12fc	524:	nop
          		@ Captured a stackmap here.
0x2bcc1300	528:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc1304	532:	lw	s7, 0(JSP)
0x2bcc1308	536:	sw	s7, 0(JSP)
0x2bcc130c	540:	lw	s5, 0(CP)	@ StringICell
0x2bcc1310	544:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcc1314	548:	sw	s6, 4(JSP)
0x2bcc1318	552:	lw	s6, 0(s7)	@ NULL check
0x2bcc131c	556:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc1320	560:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc1324	564:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1328	568:	jalr	s7
0x2bcc132c	572:	nop
          		@ Captured a stackmap here.
0x2bcc1330	576:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc1334	580:	lw	s7, 0(JSP)
0x2bcc1338	584:	sw	s7, 0(JSP)
0x2bcc133c	588:	lw	s6, 0(s7)	@ NULL check
0x2bcc1340	592:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcc1344	596:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc1348	600:	lw	s7, 0(a0)	@ call method through mb
0x2bcc134c	604:	jalr	s7
0x2bcc1350	608:	nop
          		@ Captured a stackmap here.
          		@ Resolving a method table index:
0x2bcc1354	612:	lui	s7, hi16(0x2bcc)
0x2bcc1358	616:	lw	s7, 4948(s7)	@ load cachedConstant
0x2bcc135c	620:	addiu	a2, zero, 17	@ ARG3 = cpIndex
0x2bcc1360	624:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc1364	628:	nop
0x2bcc1368	632:	move	v0, v0	@ return MB directly
0x2bcc136c	636:	b	PC=0x2bcc136c
0x2bcc1370	640:	nop
>>>>>>>>>Push Code Buffer to PC = 612 (0x2bcc1354) >>>>>>>>
0x2bcc1354	612:	lui	s7, hi16(0x2bcc)
0x2bcc1358	616:	lw	s7, 4980(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 644 (0x2bcc1374) <<<<<<<<<
0x2bcc1374	644:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc1378	648:	lui	s7, hi16(0x2bcc)
0x2bcc137c	652:	lw	s7, 4980(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc1380	656:	lw	s5, 32(JFP)	@ Java temp cell # 1
0x2bcc1384	660:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc1388	664:	addiu	t7, zero, -4
0x2bcc138c	668:	and	s6, s6, t7
0x2bcc1390	672:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc1394	676:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc1398	680:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 632 (0x2bcc1368) >>>>>>>>
0x2bcc1368	632:	move	a0, v0
0x2bcc136c	636:	b	PC=0x2bcc139c
0x2bcc1370	640:	nop
<<<<<<<<<Pop Code Buffer to PC = 684 (0x2bcc139c) <<<<<<<<<
          		@ Invoke a method w/ a void return type
0x2bcc139c	684:	lw	s7, 0(a0)	@ call method through mb
0x2bcc13a0	688:	jalr	s7
0x2bcc13a4	692:	nop
          		@ Captured a stackmap here.
0x2bcc13a8	696:	lw	s7, 28(JFP)	@ Java temp cell # 0
0x2bcc13ac	700:	sw	s7, -4(JFP)	@ Java local cell # 5
			@ Outgoing local(0) reg(21): not in register
0x2bcc13b0	704:	lw	s5, -24(JFP)	@ Java local cell # 0
			@ Initial Temp REF set is 
	L5:	708:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 292(0x2bcc1214) to reference 708
          		@ MAP_PC idepth=0 javaPc=80 compiledPc=708
          		@ Do getfield:
0x2bcc13b4	708:	lw	s7, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc13b8	712:	sw	s7, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc13bc	716:	lw	s6, 0(s7)	@ Get object.cb
0x2bcc13c0	720:	addiu	t7, zero, -4
0x2bcc13c4	724:	and	s6, s6, t7
0x2bcc13c8	728:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc13cc	732:	lw	a0, 68(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc13d0	736:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc13d4	740:	lw	s7, 0(a0)	@ call method through mb
0x2bcc13d8	744:	jalr	s7
0x2bcc13dc	748:	nop
          		@ Captured a stackmap here.
0x2bcc13e0	752:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc13e4	756:	lw	s7, 0(JSP)
0x2bcc13e8	760:	lw	ra, -20(JFP)	@ Java local cell # 1
0x2bcc13ec	764:	sw	ra, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc13f0	768:	lw	s6, 0(ra)	@ Get object.cb
0x2bcc13f4	772:	addiu	t7, zero, -4
0x2bcc13f8	776:	and	s6, s6, t7
0x2bcc13fc	780:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc1400	784:	lw	a0, 68(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc1404	788:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc1408	792:	sw	s7, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc140c	796:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1410	800:	jalr	s7
0x2bcc1414	804:	nop
          		@ Captured a stackmap here.
0x2bcc1418	808:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc141c	812:	lw	s7, 0(JSP)
0x2bcc1420	816:	lw	s6, 28(JFP)	@ Java temp cell # 0
0x2bcc1424	820:	sw	s6, 0(JSP)
0x2bcc1428	824:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc142c	828:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc1430	832:	addiu	t7, zero, -4
0x2bcc1434	836:	and	s7, s7, t7
0x2bcc1438	840:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc143c	844:	lw	a0, 48(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc1440	848:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc1444	852:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1448	856:	jalr	s7
0x2bcc144c	860:	nop
          		@ Captured a stackmap here.
0x2bcc1450	864:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc1454	868:	lw	s7, 0(JSP)
			@ Outgoing local(4) reg(20): not in register
0x2bcc1458	872:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(0) reg(21): not in register
0x2bcc145c	876:	lw	s5, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(2) reg(22): not in register
0x2bcc1460	880:	lw	s6, -16(JFP)	@ Java local cell # 2
          		@ deferred comparison: 
0x2bcc1464	884:	beq	s7, zero, PC=0x2bcc1464	@ branch to block L6
0x2bcc1468	888:	nop
          		@ Do getfield:
0x2bcc146c	892:	lw	s7, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Resolving a class:
0x2bcc1470	896:	sw	s7, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc1474	900:	lui	a2, hi16(0x2bcc)
0x2bcc1478	904:	lw	a2, 5236(a2)	@ load cachedConstant
0x2bcc147c	908:	addiu	a2, zero, 20	@ ARG3 = cpIndex
0x2bcc1480	912:	jal	PC=(0x2bcb83d4)	@ call CVMCCMruntimeResolveClassBlock
0x2bcc1484	916:	nop
>>>>>>>>>Push Code Buffer to PC = 900 (0x2bcc1474) >>>>>>>>
0x2bcc1474	900:	lui	a2, hi16(0x2bcc)
0x2bcc1478	904:	lw	a2, 5256(a2)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 920 (0x2bcc1488) <<<<<<<<<
0x2bcc1488	920:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc148c	924:	lui	a2, hi16(0x2bcc)
0x2bcc1490	928:	lw	a2, 5256(a2)	@ load cachedConstant
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcc1494	932:	lw	s7, 28(JFP)	@ Java temp cell # 0
0x2bcc1498	936:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcc149c	940:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcc14a0	944:	nop
0x2bcc14a4	948:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
0x2bcc14a8	952:	sw	s7, 0(JSP)
0x2bcc14ac	956:	addiu	JSP, JSP, 4	@ adjust JSP before method call
          		@ Resolving a method table index:
0x2bcc14b0	960:	sw	s7, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc14b4	964:	lui	s7, hi16(0x2bcc)
0x2bcc14b8	968:	lw	s7, 5300(s7)	@ load cachedConstant
0x2bcc14bc	972:	addiu	a2, zero, 21	@ ARG3 = cpIndex
0x2bcc14c0	976:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc14c4	980:	nop
0x2bcc14c8	984:	move	v0, v0	@ return MB directly
0x2bcc14cc	988:	b	PC=0x2bcc14cc
0x2bcc14d0	992:	nop
>>>>>>>>>Push Code Buffer to PC = 964 (0x2bcc14b4) >>>>>>>>
0x2bcc14b4	964:	lui	s7, hi16(0x2bcc)
0x2bcc14b8	968:	lw	s7, 5332(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 996 (0x2bcc14d4) <<<<<<<<<
0x2bcc14d4	996:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc14d8	1000:	lui	s7, hi16(0x2bcc)
0x2bcc14dc	1004:	lw	s7, 5332(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc14e0	1008:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcc14e4	1012:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc14e8	1016:	addiu	t7, zero, -4
0x2bcc14ec	1020:	and	s6, s6, t7
0x2bcc14f0	1024:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc14f4	1028:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc14f8	1032:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 984 (0x2bcc14c8) >>>>>>>>
0x2bcc14c8	984:	move	a0, v0
0x2bcc14cc	988:	b	PC=0x2bcc14fc
0x2bcc14d0	992:	nop
<<<<<<<<<Pop Code Buffer to PC = 1036 (0x2bcc14fc) <<<<<<<<<
          		@ Invoke a method w/ a 32bit return type
0x2bcc14fc	1036:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1500	1040:	jalr	s7
0x2bcc1504	1044:	nop
          		@ Captured a stackmap here.
0x2bcc1508	1048:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc150c	1052:	lw	s7, 0(JSP)
          		@ Resolving a class:
0x2bcc1510	1056:	sw	s7, 28(JFP)	@ spill Java temp cell # 0
0x2bcc1514	1060:	lui	a2, hi16(0x2bcc)
0x2bcc1518	1064:	lw	a2, 5396(a2)	@ load cachedConstant
0x2bcc151c	1068:	addiu	a2, zero, 20	@ ARG3 = cpIndex
0x2bcc1520	1072:	jal	PC=(0x2bcb83d4)	@ call CVMCCMruntimeResolveClassBlock
0x2bcc1524	1076:	nop
>>>>>>>>>Push Code Buffer to PC = 1060 (0x2bcc1514) >>>>>>>>
0x2bcc1514	1060:	lui	a2, hi16(0x2bcc)
0x2bcc1518	1064:	lw	a2, 5416(a2)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 1080 (0x2bcc1528) <<<<<<<<<
0x2bcc1528	1080:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc152c	1084:	lui	a2, hi16(0x2bcc)
0x2bcc1530	1088:	lw	a2, 5416(a2)	@ load cachedConstant
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcc1534	1092:	lw	s7, -20(JFP)	@ Java local cell # 1
0x2bcc1538	1096:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcc153c	1100:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcc1540	1104:	nop
0x2bcc1544	1108:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
0x2bcc1548	1112:	sw	s7, 0(JSP)
0x2bcc154c	1116:	addiu	JSP, JSP, 4	@ adjust JSP before method call
          		@ Resolving a method table index:
0x2bcc1550	1120:	lui	s7, hi16(0x2bcc)
0x2bcc1554	1124:	lw	s7, 5456(s7)	@ load cachedConstant
0x2bcc1558	1128:	addiu	a2, zero, 21	@ ARG3 = cpIndex
0x2bcc155c	1132:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc1560	1136:	nop
0x2bcc1564	1140:	move	v0, v0	@ return MB directly
0x2bcc1568	1144:	b	PC=0x2bcc1568
0x2bcc156c	1148:	nop
>>>>>>>>>Push Code Buffer to PC = 1120 (0x2bcc1550) >>>>>>>>
0x2bcc1550	1120:	lui	s7, hi16(0x2bcc)
0x2bcc1554	1124:	lw	s7, 5488(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 1152 (0x2bcc1570) <<<<<<<<<
0x2bcc1570	1152:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc1574	1156:	lui	s7, hi16(0x2bcc)
0x2bcc1578	1160:	lw	s7, 5488(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc157c	1164:	lw	s5, -20(JFP)	@ Java local cell # 1
0x2bcc1580	1168:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc1584	1172:	addiu	t7, zero, -4
0x2bcc1588	1176:	and	s6, s6, t7
0x2bcc158c	1180:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc1590	1184:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc1594	1188:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 1140 (0x2bcc1564) >>>>>>>>
0x2bcc1564	1140:	move	a0, v0
0x2bcc1568	1144:	b	PC=0x2bcc1598
0x2bcc156c	1148:	nop
<<<<<<<<<Pop Code Buffer to PC = 1192 (0x2bcc1598) <<<<<<<<<
          		@ Invoke a method w/ a 32bit return type
0x2bcc1598	1192:	lw	s7, 0(a0)	@ call method through mb
0x2bcc159c	1196:	jalr	s7
0x2bcc15a0	1200:	nop
          		@ Captured a stackmap here.
0x2bcc15a4	1204:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc15a8	1208:	lw	s7, 0(JSP)
			@ Outgoing local(4) reg(20): not in register
0x2bcc15ac	1212:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(0) reg(21): not in register
0x2bcc15b0	1216:	lw	s5, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(2) reg(22): not in register
0x2bcc15b4	1220:	lw	s6, -16(JFP)	@ Java local cell # 2
0x2bcc15b8	1224:	lw	ra, 28(JFP)	@ Java temp cell # 0
          		@ deferred comparison: 
0x2bcc15bc	1228:	beq	ra, s7, PC=0x2bcc15bc	@ branch to block L6
0x2bcc15c0	1232:	nop
0x2bcc15c4	1236:	addiu	s7, zero, 1	@ const 1
0x2bcc15c8	1240:	sw	s7, -12(JFP)	@ Java local cell # 3
          		@ Do getfield:
0x2bcc15cc	1244:	lw	ra, 16(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc15d0	1248:	sw	ra, 0(JSP)
0x2bcc15d4	1252:	lw	t9, -20(JFP)	@ Java local cell # 1
0x2bcc15d8	1256:	sw	t9, 4(JSP)
0x2bcc15dc	1260:	sw	ra, 8(JSP)
0x2bcc15e0	1264:	addiu	JSP, JSP, 12	@ adjust JSP before method call
          		@ Resolving a method table index:
0x2bcc15e4	1268:	sw	ra, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc15e8	1272:	lui	s7, hi16(0x2bcc)
0x2bcc15ec	1276:	lw	s7, 5608(s7)	@ load cachedConstant
0x2bcc15f0	1280:	addiu	a2, zero, 22	@ ARG3 = cpIndex
0x2bcc15f4	1284:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc15f8	1288:	nop
0x2bcc15fc	1292:	move	v0, v0	@ return MB directly
0x2bcc1600	1296:	b	PC=0x2bcc1600
0x2bcc1604	1300:	nop
>>>>>>>>>Push Code Buffer to PC = 1272 (0x2bcc15e8) >>>>>>>>
0x2bcc15e8	1272:	lui	s7, hi16(0x2bcc)
0x2bcc15ec	1276:	lw	s7, 5640(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 1304 (0x2bcc1608) <<<<<<<<<
0x2bcc1608	1304:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc160c	1308:	lui	s7, hi16(0x2bcc)
0x2bcc1610	1312:	lw	s7, 5640(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc1614	1316:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcc1618	1320:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc161c	1324:	addiu	t7, zero, -4
0x2bcc1620	1328:	and	s6, s6, t7
0x2bcc1624	1332:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc1628	1336:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc162c	1340:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 1292 (0x2bcc15fc) >>>>>>>>
0x2bcc15fc	1292:	move	a0, v0
0x2bcc1600	1296:	b	PC=0x2bcc1630
0x2bcc1604	1300:	nop
<<<<<<<<<Pop Code Buffer to PC = 1344 (0x2bcc1630) <<<<<<<<<
          		@ Invoke a method w/ a void return type
0x2bcc1630	1344:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1634	1348:	jalr	s7
0x2bcc1638	1352:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(4) reg(20): not in register
0x2bcc163c	1356:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(0) reg(21): not in register
0x2bcc1640	1360:	lw	s5, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(2) reg(22): not in register
0x2bcc1644	1364:	lw	s6, -16(JFP)	@ Java local cell # 2
			@ Initial Temp REF set is 
	L6:	1368:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(2) to reg(22)
--->Fixed instruction at 1228(0x2bcc15bc) to reference 1368
--->Fixed instruction at 884(0x2bcc1464) to reference 1368
          		@ MAP_PC idepth=0 javaPc=131 compiledPc=1368
			@ Outgoing local(4) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(2) reg(22): in correct register
			@ Outgoing local(3) reg(23): not in register
0x2bcc1648	1368:	lw	s7, -12(JFP)	@ Java local cell # 3
0x2bcc164c	1372:	b	PC=0x2bcc164c	@ branch to block L7
0x2bcc1650	1376:	nop
			@ Initial Temp REF set is 
	L1:	1380:	@ entry point for exception handler
          		@ Captured a stackmap here.
          		@ MAP_PC idepth=0 javaPc=134 compiledPc=1380
0x2bcc1654	1380:	lw	s5, -24(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcc1658	1384:	lw	s7, 8(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc165c	1388:	lw	s6, 72(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc1660	1392:	lw	a1, 0(CP)	@ cb java.lang.StringBuffer
          		@ Do new:
0x2bcc1664	1396:	sw	a0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc1668	1400:	sw	s6, 32(JFP)	@ REF spill Java temp cell # 1
          		@ cb: java.lang.StringBuffer
0x2bcc166c	1404:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc1670	1408:	nop
          		@ Captured a stackmap here.
0x2bcc1674	1412:	sw	v0, 0(JSP)
0x2bcc1678	1416:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc167c	1420:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc1680	1424:	sw	v0, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc1684	1428:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1688	1432:	jalr	s7
0x2bcc168c	1436:	nop
          		@ Captured a stackmap here.
0x2bcc1690	1440:	lw	s7, 32(JFP)	@ Java temp cell # 1
0x2bcc1694	1444:	sw	s7, 0(JSP)
0x2bcc1698	1448:	lw	s6, 36(JFP)	@ Java temp cell # 2
0x2bcc169c	1452:	sw	s6, 4(JSP)
0x2bcc16a0	1456:	lw	s6, 28(JFP)	@ Java temp cell # 0
0x2bcc16a4	1460:	sw	s6, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcc16a8	1464:	lw	s5, 0(s6)	@ Get object.cb
0x2bcc16ac	1468:	addiu	t7, zero, -4
0x2bcc16b0	1472:	and	s5, s5, t7
0x2bcc16b4	1476:	lw	s5, 76(s5)	@ Get cb.vtbl
0x2bcc16b8	1480:	lw	a0, 20(s5)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc16bc	1484:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcc16c0	1488:	lw	s7, 0(a0)	@ call method through mb
0x2bcc16c4	1492:	jalr	s7
0x2bcc16c8	1496:	nop
          		@ Captured a stackmap here.
0x2bcc16cc	1500:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc16d0	1504:	lw	s7, 0(a0)	@ call method through mb
0x2bcc16d4	1508:	jalr	s7
0x2bcc16d8	1512:	nop
          		@ Captured a stackmap here.
0x2bcc16dc	1516:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc16e0	1520:	lw	s7, 0(JSP)
0x2bcc16e4	1524:	sw	s7, 0(JSP)
0x2bcc16e8	1528:	lw	s5, 0(CP)	@ StringICell
0x2bcc16ec	1532:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcc16f0	1536:	sw	s6, 4(JSP)
0x2bcc16f4	1540:	lw	s6, 0(s7)	@ NULL check
0x2bcc16f8	1544:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc16fc	1548:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc1700	1552:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1704	1556:	jalr	s7
0x2bcc1708	1560:	nop
          		@ Captured a stackmap here.
0x2bcc170c	1564:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc1710	1568:	lw	s7, 0(JSP)
0x2bcc1714	1572:	sw	s7, 0(JSP)
0x2bcc1718	1576:	lw	s6, 0(s7)	@ NULL check
0x2bcc171c	1580:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcc1720	1584:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc1724	1588:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1728	1592:	jalr	s7
0x2bcc172c	1596:	nop
          		@ Captured a stackmap here.
          		@ Resolving a method table index:
0x2bcc1730	1600:	lui	s7, hi16(0x2bcc)
0x2bcc1734	1604:	lw	s7, 5936(s7)	@ load cachedConstant
0x2bcc1738	1608:	addiu	a2, zero, 17	@ ARG3 = cpIndex
0x2bcc173c	1612:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc1740	1616:	nop
0x2bcc1744	1620:	move	v0, v0	@ return MB directly
0x2bcc1748	1624:	b	PC=0x2bcc1748
0x2bcc174c	1628:	nop
>>>>>>>>>Push Code Buffer to PC = 1600 (0x2bcc1730) >>>>>>>>
0x2bcc1730	1600:	lui	s7, hi16(0x2bcc)
0x2bcc1734	1604:	lw	s7, 5968(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 1632 (0x2bcc1750) <<<<<<<<<
0x2bcc1750	1632:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc1754	1636:	lui	s7, hi16(0x2bcc)
0x2bcc1758	1640:	lw	s7, 5968(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc175c	1644:	lw	s5, 32(JFP)	@ Java temp cell # 1
0x2bcc1760	1648:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc1764	1652:	addiu	t7, zero, -4
0x2bcc1768	1656:	and	s6, s6, t7
0x2bcc176c	1660:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc1770	1664:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc1774	1668:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 1620 (0x2bcc1744) >>>>>>>>
0x2bcc1744	1620:	move	a0, v0
0x2bcc1748	1624:	b	PC=0x2bcc1778
0x2bcc174c	1628:	nop
<<<<<<<<<Pop Code Buffer to PC = 1672 (0x2bcc1778) <<<<<<<<<
          		@ Invoke a method w/ a void return type
0x2bcc1778	1672:	lw	s7, 0(a0)	@ call method through mb
0x2bcc177c	1676:	jalr	s7
0x2bcc1780	1680:	nop
          		@ Captured a stackmap here.
0x2bcc1784	1684:	lw	s7, 28(JFP)	@ Java temp cell # 0
0x2bcc1788	1688:	sw	s7, -4(JFP)	@ Java local cell # 5
			@ Outgoing local(4) reg(20): not in register
0x2bcc178c	1692:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(0) reg(21): not in register
0x2bcc1790	1696:	lw	s5, -24(JFP)	@ Java local cell # 0
			@ Outgoing local(2) reg(22): not in register
0x2bcc1794	1700:	lw	s6, -16(JFP)	@ Java local cell # 2
			@ Outgoing local(3) reg(23): not in register
0x2bcc1798	1704:	lw	s7, -12(JFP)	@ Java local cell # 3
			@ Initial Temp REF set is 
	L7:	1708:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(2) to reg(22)
			@ Binding Incoming Local(3) to reg(23)
--->Fixed instruction at 1372(0x2bcc164c) to reference 1708
          		@ MAP_PC idepth=0 javaPc=172 compiledPc=1708
0x2bcc179c	1708:	addiu	s4, s4, 1
0x2bcc17a0	1712:	sw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(4) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(2) reg(22): in correct register
			@ Outgoing local(3) reg(23): in correct register
			@ Initial Temp REF set is 
	L3:	1716:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(2) to reg(22)
			@ Binding Incoming Local(3) to reg(23)
--->Fixed instruction at 176(0x2bcc11a0) to reference 1716
          		@ MAP_PC idepth=0 javaPc=175 compiledPc=1716
          		@ deferred comparison: 
0x2bcc17a4	1716:	slt	t7, s4, s6
0x2bcc17a8	1720:	beq	t7, zero, PC=0x2bcc17a4	@ branch to block L8
0x2bcc17ac	1724:	nop
			@ Outgoing local(4) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcc17b0	1728:	beq	s7, zero, PC=0x2bcc11a8	@ branch to block L4
0x2bcc17b4	1732:	nop
0x2bcc17b0	1728:	beq	s7, zero, PC=0x2bcc11b8	@ branch to block L4, skip GC
0x2bcc17b4	1732:	nop
			@ Initial Temp REF set is 
	L8:	1736:	@ entry point for branches
--->Fixed instruction at 1720(0x2bcc17a8) to reference 1736
          		@ MAP_PC idepth=0 javaPc=185 compiledPc=1736
0x2bcc17b8	1736:	addiu	JSP, JFP, -24
0x2bcc17bc	1740:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc17c0	1744:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc17c4	1748:	nop
0x2bcc17c8	1752:	.word	9495456	@ StringICell
--->Fixed instruction at 1528(0x2bcc16e8) to reference 1752
0x2bcc17cc	1756:	.word	9110340	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
--->Fixed instruction at 1580(0x2bcc171c) to reference 1756
--->Fixed instruction at 592(0x2bcc1340) to reference 1756
0x2bcc17d0	1760:	.word	8436288	@ StringICell
--->Fixed instruction at 540(0x2bcc130c) to reference 1760
0x2bcc17d4	1764:	.word	9109640	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
--->Fixed instruction at 508(0x2bcc12ec) to reference 1764
0x2bcc17d8	1768:	.word	9494736	@ StringICell
--->Fixed instruction at 448(0x2bcc12b0) to reference 1768
0x2bcc17dc	1772:	.word	9109444	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
--->Fixed instruction at 1544(0x2bcc16f8) to reference 1772
--->Fixed instruction at 1500(0x2bcc16cc) to reference 1772
--->Fixed instruction at 556(0x2bcc131c) to reference 1772
--->Fixed instruction at 464(0x2bcc12c0) to reference 1772
--->Fixed instruction at 420(0x2bcc1294) to reference 1772
0x2bcc17e0	1776:	.word	9108968	@ mb java.lang.StringBuffer.<init>()V
--->Fixed instruction at 1416(0x2bcc1678) to reference 1776
--->Fixed instruction at 336(0x2bcc1240) to reference 1776
0x2bcc17e4	1780:	.word	8642484	@ cb java.lang.StringBuffer
--->Fixed instruction at 1392(0x2bcc1660) to reference 1780
--->Fixed instruction at 312(0x2bcc1228) to reference 1780
0x2bcc17e8	1784:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 268(0x2bcc11fc) to reference 1784
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc10f0) >>>>>>>>
          		@ Capacity is 20 word(s)
0x2bcc10f0	0:	addiu	a1, JSP, 72
<<<<<<<<<Pop Code Buffer to PC = 1788 (0x2bcc17ec) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc1140) >>>>>>>>
          		@ spillSize is 3 word(s), add to JFP+28
0x2bcc1140	80:	addiu	JSP, JFP, 40
          		@ setup cp base register
0x2bcc1144	84:	lui	CP, hi16(0x2bcc)
0x2bcc1148	88:	ori	CP, CP, lo16(0x2bcc17c8)
0x2bcc114c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 1788 (0x2bcc17ec) <<<<<<<<<
JS: COMPILED: size=2108 startPC=0x2bcc10f0 com.sun.mep.bench.Chess.ChessBBCollisionDetector.detectCollisions(Lcom/sun/mep/bench/Chess/Actor;)V
OSR: Intr2Comp: com.sun.mep.bench.Chess.ChessBBCollisionDetector.detectCollisions(Lcom/sun/mep/bench/Chess/Actor;)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.Check4Mate.check4check(I)Z
JS: COMPILING com.sun.mep.bench.Chess.Check4Mate.check4check(I)Z
orig bkID(3) Incoming Locals(1 0x0): 4- 
o1   bkID(3) Incoming Locals(1 0x0): 4- 
s1   bkID(3) Incoming Locals(2 0x0): 4- 3- 
o1   bkID(3) Incoming Locals(2 0x0): 4- 3- 
orig bkID(4) Incoming Locals(2 0x0): 3- 4- 
o1   bkID(4) Incoming Locals(2 0x0): 3- 4- 
orig bkID(2) Incoming Locals(1 0x0): 3- 
o1   bkID(2) Incoming Locals(1 0x0): 3- 
orig bkID(1) Incoming Locals(1 0x0): 0- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(0) Incoming Locals(1 0x0): 1- 
s1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
orig bkID(3) Incoming Locals(2 0x0): 4- 3- 
o1   bkID(3) Incoming Locals(1 0x0): 4- 
s1   bkID(3) Incoming Locals(2 0x0): 4- 3- 
o1   bkID(3) Incoming Locals(2 0x0): 4- 3- 
orig bkID(4) Incoming Locals(2 0x0): 3- 4- 
o1   bkID(4) Incoming Locals(2 0x0): 3- 4- 
orig bkID(2) Incoming Locals(1 0x0): 3- 
o1   bkID(2) Incoming Locals(1 0x0): 3- 
orig bkID(1) Incoming Locals(1 0x0): 0- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(0) Incoming Locals(1 0x0): 1- 
s1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
o1   bkID(0) Incoming Locals(2 0x0): 1- 0- 
bkID(3) local(0 #4)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(3) Incoming Locals(2 0x0): 4- 3- 
+bk  bkID(3) Incoming Locals(2 0x1): 4+ 3- 
-gbk bkID(4) Incoming Locals(2 0x0): 3- 4- 
+gbk bkID(4) Incoming Locals(2 0x1): 4+ 3- 
bkID(3) local(0 #4)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(2 0x1): 4+ 3- 
dstBk(3) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(3) Incoming Locals(2 0x1): 4+ 3- 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x1): 4+ 3- 
dstBk(4) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(4) Incoming Locals(2 0x1): 4+ 3- 
bkID(3) local(1 #3)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(3) Incoming Locals(2 0x1): 4+ 3- 
+bk  bkID(3) Incoming Locals(2 0x3): 4+ 3+ 
-gbk bkID(4) Incoming Locals(2 0x1): 4+ 3- 
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 3+ 
bkID(3) local(1 #3)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(2 0x3): 4+ 3+ 
dstBk(3) local(1 3) found in slot(1)
local(1 3) same slot
+bk  bkID(3) Incoming Locals(2 0x3): 4+ 3+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 4+ 3+ 
dstBk(4) local(1 3) found in slot(1)
local(1 3) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 3+ 
Pushing blockID(4)
bkID(4) local(0 #4)  ordered in goalBk(4)
-bk  bkID(4) Incoming Locals(2 0x3): 4+ 3+ 
dstBk(4) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 4+ 3+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 4+ 3+ 
dstBk(4) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 3+ 
bkID(4) local(1 #3)  ordered in goalBk(4)
-bk  bkID(4) Incoming Locals(2 0x3): 4+ 3+ 
dstBk(4) local(1 3) found in slot(1)
local(1 3) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 4+ 3+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 4+ 3+ 
dstBk(4) local(1 3) found in slot(1)
local(1 3) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 4+ 3+ 
Popping blockID(4)
bkID(0) local(0 #1)  not found in goalBk
bkID(0) local(1 #0)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(2 0x0): 1- 0- 
+bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
-gbk bkID(1) Incoming Locals(1 0x0): 0- 
+gbk bkID(1) Incoming Locals(1 0x1): 0+ 
bkID(0) local(1 #1)  not found in goalBk
pre  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
local(#1) swapped with local(#1)
post bkID(0) Incoming Locals(2 0x3): 0+ 1+ 
pre  bkID(2) Incoming Locals(2 0x2): 3- <null> 
local(#0) swapped with local(#2)
post bkID(2) Incoming Locals(3 0x6): <null> <null> 3+ 

#################################################

The maximum node counts per root node are 8
IR block list contains 5 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 9 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.Check4Mate.check4check(I)Z(Check4Mate.java:61)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<0>  (0x957d08):    iload_1 
<1>  (0x957d09):    iconst_1 
<2>  (0x957d0a):    if_icmpne <26>
<5>  (0x957d0d):    bipush 11
<7>  (0x957d0f):    istore_2 
<8>  (0x957d10):    aload_0 
<9>  (0x957d11):    agetfield_quick #2
<12>  (0x957d14):    agetfield_quick #28
<15>  (0x957d17):    aload_0 
<16>  (0x957d18):    agetfield_quick #3
<19>  (0x957d1b):    invokevirtual_quick_w #5 <com.sun.mep.bench.Chess.CompMover.getPossibleWMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;>
<22>  (0x957d1e):    astore_3 
<23>  (0x957d1f):    goto <43>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(1)	ID(2)
 	local(0)	ID(6)
 
Incoming Locals(2): 
	local(0)	ID(35)
 	local(1)	ID(2)
 
Assigned Locals(2): 
	ASSIGN(28): local(2)	ID(27)	rhsID(5)
 	ASSIGN(30): local(3)	ID(29)	rhsID(24)
 
Successor Blocks(2): 
	ID(1) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(0 <null>)
	ID(2) LocalOrder(2) AssignOrder(2) RefsOK(0) Locals(<null> <null> 3)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 4) BCOND (int) 
   target: (BlockID: 1 BlockPC: 26)
   condition: NE
   flags: 0
      <(ID: 2) LOCAL (int)   1>
      <(ID: 3) CONST_JAVA_NUMERIC32 (int)  (1)


   <(ID: 9) IDENTITY (reference)  (ref count: 2)
      <(ID: 13) FETCH (reference) 
         <(ID: 8) FIELD_REF (reference) 
            <(ID: 6) IDENTITY (reference)  (ref count: 2)
               <(ID: 17) LOCAL (reference)   0>
            <(ID: 7) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 12) IDENTITY (reference)  (ref count: 3)
      <(ID: 25) FETCH (reference) 
         <(ID: 11) FIELD_REF (reference) 
            <(ID: 9) IDENTITY (reference)  (ref count: 2)
            <(ID: 10) CONST_FIELD_OFFSET (NONE)  (28)

   <(ID: 16) IDENTITY (reference)  (ref count: 2)
      <(ID: 26) FETCH (reference) 
         <(ID: 15) FIELD_REF (reference) 
            <(ID: 6) IDENTITY (reference)  (ref count: 2)
            <(ID: 14) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 24) IDENTITY (reference)  (ref count: 2)
      <(ID: 31) INVOKE (reference) 
         <(ID: 21) PARAMETER (reference) 
            <(ID: 12) IDENTITY (reference)  (ref count: 3)
            <(ID: 20) PARAMETER (reference) 
               <(ID: 16) IDENTITY (reference)  (ref count: 2)
               <(ID: 19) NULL_PARAMETER (NONE) 
         <(ID: 23) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 22) GET_VTBL (NONE) 
               <(ID: 12) IDENTITY (reference)  (ref count: 3)
            <(ID: 18) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 13)

   <(ID: 28) ASSIGN (int)  (assignIdx: 0)
      <(ID: 27) LOCAL (int)   2>
      <(ID: 5) CONST_JAVA_NUMERIC32 (int)  (11)

   <(ID: 30) ASSIGN (reference)  (assignIdx: 1)
      <(ID: 29) LOCAL (reference)   3>
      <(ID: 24) IDENTITY (reference)  (ref count: 2)

   <(ID: 32) GOTO (NONE) 
   target: (BlockID: 2 BlockPC: 43)


*************************************************
*
* (block ID:1 block PC:26 )
* IR root list contains 7 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.Check4Mate.check4check(I)Z(Check4Mate.java:68)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<26>  (0x957d22):    iconst_5 
<27>  (0x957d23):    istore_2 
<28>  (0x957d24):    aload_0 
<29>  (0x957d25):    agetfield_quick #2
<32>  (0x957d28):    agetfield_quick #28
<35>  (0x957d2b):    aload_0 
<36>  (0x957d2c):    agetfield_quick #3
<39>  (0x957d2f):    invokevirtual_quick_w #6 <com.sun.mep.bench.Chess.CompMover.getPossibleBMoves(Lcom/sun/mep/bench/Chess/GameState;)Ljava/util/Vector;>
<42>  (0x957d32):    astore_3 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(35)
 
Incoming Locals(2): 
	local(0)	ID(35)
 	<null>

Assigned Locals(2): 
	ASSIGN(57): local(2)	ID(56)	rhsID(34)
 	ASSIGN(59): local(3)	ID(58)	rhsID(53)
 
Successor Blocks(1): 
	ID(2) LocalOrder(1) AssignOrder(2) RefsOK(0) Locals(<null> <null> 3)

   <(ID: 33) MAP_PC (NONE)   26>

   <(ID: 38) IDENTITY (reference)  (ref count: 2)
      <(ID: 42) FETCH (reference) 
         <(ID: 37) FIELD_REF (reference) 
            <(ID: 35) IDENTITY (reference)  (ref count: 2)
               <(ID: 46) LOCAL (reference)   0>
            <(ID: 36) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 41) IDENTITY (reference)  (ref count: 3)
      <(ID: 54) FETCH (reference) 
         <(ID: 40) FIELD_REF (reference) 
            <(ID: 38) IDENTITY (reference)  (ref count: 2)
            <(ID: 39) CONST_FIELD_OFFSET (NONE)  (28)

   <(ID: 45) IDENTITY (reference)  (ref count: 2)
      <(ID: 55) FETCH (reference) 
         <(ID: 44) FIELD_REF (reference) 
            <(ID: 35) IDENTITY (reference)  (ref count: 2)
            <(ID: 43) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 53) IDENTITY (reference)  (ref count: 2)
      <(ID: 60) INVOKE (reference) 
         <(ID: 50) PARAMETER (reference) 
            <(ID: 41) IDENTITY (reference)  (ref count: 3)
            <(ID: 49) PARAMETER (reference) 
               <(ID: 45) IDENTITY (reference)  (ref count: 2)
               <(ID: 48) NULL_PARAMETER (NONE) 
         <(ID: 52) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 51) GET_VTBL (NONE) 
               <(ID: 41) IDENTITY (reference)  (ref count: 3)
            <(ID: 47) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 14)

   <(ID: 57) ASSIGN (int)  (assignIdx: 0)
      <(ID: 56) LOCAL (int)   2>
      <(ID: 34) CONST_JAVA_NUMERIC32 (int)  (5)

   <(ID: 59) ASSIGN (reference)  (assignIdx: 1)
      <(ID: 58) LOCAL (reference)   3>
      <(ID: 53) IDENTITY (reference)  (ref count: 2)


*************************************************
*
* (block ID:2 block PC:43 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x6
* Source: com.sun.mep.bench.Chess.Check4Mate.check4check(I)Z(Check4Mate.java:73)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<43>  (0x957d33):    aload_3 
<44>  (0x957d34):    invokevirtual_quick_w #7 <java.util.Vector.size()I>
<47>  (0x957d37):    istore 4
<49>  (0x957d39):    goto <82>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(3)	ID(62)
 
Incoming Locals(3): 
	<null>
	<null>
	local(3)	ID(62)
 
Assigned Locals(1): 
	ASSIGN(71): local(4)	ID(70)	rhsID(68)
 
Successor Blocks(1): 
	ID(3) LocalOrder(1) AssignOrder(1) RefsOK(0) Locals(4 3 <null>)

   <(ID: 61) MAP_PC (NONE)   43>

   <(ID: 68) IDENTITY (int)  (ref count: 2)
      <(ID: 72) INVOKE (int) 
         <(ID: 65) PARAMETER (reference) 
            <(ID: 62) IDENTITY (reference)  (ref count: 2)
               <(ID: 69) LOCAL (reference)   3>
            <(ID: 64) NULL_PARAMETER (NONE) 
         <(ID: 67) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 66) GET_VTBL (NONE) 
               <(ID: 62) IDENTITY (reference)  (ref count: 2)
            <(ID: 63) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 12)

   <(ID: 71) ASSIGN (int)  (assignIdx: 0)
      <(ID: 70) LOCAL (int)   4>
      <(ID: 68) IDENTITY (int)  (ref count: 2)

   <(ID: 73) GOTO (NONE) 
   target: (BlockID: 3 BlockPC: 82)


*************************************************
*
* (block ID:4 block PC:52 )
* IR root list contains 9 root nodes: in block 
* flags: 0x321
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.Check4Mate.check4check(I)Z(Check4Mate.java:75)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<52>  (0x957d3c):    aload_3 
<53>  (0x957d3d):    iload 4
<55>  (0x957d3f):    invokevirtual_quick_w #8 <java.util.Vector.elementAt(I)Ljava/lang/Object;>
<58>  (0x957d42):    checkcast_quick #9 <com.sun.mep.bench.Chess.Point>
<61>  (0x957d45):    astore 5
<63>  (0x957d47):    aload_0 
<64>  (0x957d48):    agetfield_quick #3
<67>  (0x957d4b):    agetfield_quick #3
<70>  (0x957d4e):    aload 5
<72>  (0x957d50):    getfield_quick #3
<75>  (0x957d53):    baload 
<76>  (0x957d54):    iload_2 
<77>  (0x957d55):    if_icmpne <82>
<80>  (0x957d58):    iconst_1 
<81>  (0x957d59):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(3)	ID(87)
 	local(4)	ID(88)
 
Incoming Locals(2): 
	local(4)	ID(88)
 	local(3)	ID(87)
 
Assigned Locals(1): 
	ASSIGN(120): local(5)	ID(119)	rhsID(97)
 
Successor Blocks(1): 
	ID(3) LocalOrder(2) AssignOrder(1) RefsOK(0) Locals(4 3 <null>)

   <(ID: 86) MAP_PC (NONE)   52>

   <(ID: 97) IDENTITY (reference)  (ref count: 3)
      <(ID: 110) CHECKCAST (reference) 
         <(ID: 95) INVOKE (reference) 
            <(ID: 92) PARAMETER (reference) 
               <(ID: 87) IDENTITY (reference)  (ref count: 2)
                  <(ID: 98) LOCAL (reference)   3>
               <(ID: 91) PARAMETER (int) 
                  <(ID: 88) LOCAL (int)   4>
                  <(ID: 90) NULL_PARAMETER (NONE) 
            <(ID: 94) FETCH_MB_FROM_VTABLE (address field) 
               <(ID: 93) GET_VTBL (NONE) 
                  <(ID: 87) IDENTITY (reference)  (ref count: 2)
               <(ID: 89) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 43)
         <(ID: 96) CONST_CB (address field)  (com.sun.mep.bench.Chess.Point)

   <(ID: 102) IDENTITY (reference)  (ref count: 2)
      <(ID: 106) FETCH (reference) 
         <(ID: 101) FIELD_REF (reference) 
            <(ID: 99) LOCAL (reference)   0>
            <(ID: 100) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 105) IDENTITY (reference)  (ref count: 3)
      <(ID: 117) FETCH (reference) 
         <(ID: 104) FIELD_REF (reference) 
            <(ID: 102) IDENTITY (reference)  (ref count: 2)
            <(ID: 103) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 109) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 118) FETCH (32-bit field) 
         <(ID: 108) FIELD_REF (32-bit field) 
            <(ID: 97) IDENTITY (reference)  (ref count: 3)
            <(ID: 107) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 114) IDENTITY (int)  (ref count: 2)
      <(ID: 121) FETCH (int) 
         <(ID: 113) INDEX (int) 
            <(ID: 105) IDENTITY (reference)  (ref count: 3)
            <(ID: 112) BOUNDS_CHECK (int) 
               <(ID: 109) IDENTITY (32-bit field)  (ref count: 2)
               <(ID: 111) ARRAY_LENGTH (int) 
                  <(ID: 105) IDENTITY (reference)  (ref count: 3)

   <(ID: 120) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 119) LOCAL (reference)   5>
      <(ID: 97) IDENTITY (reference)  (ref count: 3)

   <(ID: 116) BCOND (int) 
   target: (BlockID: 3 BlockPC: 82)
   condition: NE
   flags: 0
      <(ID: 114) IDENTITY (int)  (ref count: 2)
      <(ID: 115) LOCAL (int)   2>


   <(ID: 123) RETURN_VALUE (int) 
      <(ID: 122) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:3 block PC:82 )
* IR root list contains 5 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x7
* Source: com.sun.mep.bench.Chess.Check4Mate.check4check(I)Z(Check4Mate.java:73)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<82>  (0x957d5a):    iinc 4 255
<85>  (0x957d5d):    iload 4
<87>  (0x957d5f):    ifge <52>
<90>  (0x957d62):    iconst_0 
<91>  (0x957d63):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(4)	ID(75)
 
Incoming Locals(3): 
	local(4)	ID(75)
 	local(3)	ID(87)
 	<null>

Assigned Locals(1): 
	ASSIGN(81): local(4)	ID(80)	rhsID(77)
 
Successor Blocks(1): 
	ID(4) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(4 3)

   <(ID: 74) MAP_PC (NONE)   82>

   <(ID: 75) IDENTITY (int)  (ref count: 2)
      <(ID: 82) LOCAL (int)   4>

   <(ID: 81) ASSIGN (int)  (assignIdx: 0)
      <(ID: 80) LOCAL (int)   4>
      <(ID: 77) IDENTITY (int)  (ref count: 2)
         <(ID: 83) SUB (int) 
            <(ID: 75) IDENTITY (int)  (ref count: 2)
            <(ID: 76) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 79) BCOND (int) 
   target: (BlockID: 4 BlockPC: 52)
   condition: GE
   flags: 0
      <(ID: 77) IDENTITY (int)  (ref count: 2)
      <(ID: 78) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 85) RETURN_VALUE (int) 
      <(ID: 84) CONST_JAVA_NUMERIC32 (int)  (0)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 148
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 560
ESTIMATED BUFFER SIZE = 844
CODE BUFFER ADDRESS = 0x2bcc18cc
PC MAP TABLE ADDRESS = 0x2bcc18d4
GC CHECK PCS ADDRESS = 0x2bcc18ec
CODE ENTRY ADDRESS = 0x2bcc1918
          		@ Method prologue
0x2bcc1918	0:	addiu	a1, JSP, 56	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc191c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc1920	8:	sltu	t7, a1, CHUNKEND
0x2bcc1924	12:	bne	t7, zero, PC=0x2bcc1918	@ goto .skip
0x2bcc1928	16:	nop
0x2bcc192c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc1930	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc1924) >>>>>>>>
0x2bcc1924	12:	bne	t7, zero, PC=0x2bcc1934	@ goto .skip
0x2bcc1928	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc1934) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc1934	28:	sw	JFP, 16(JSP)	@ Store curr JFP into new frame
0x2bcc1938	32:	addiu	JFP, JSP, 16	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc193c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc1940	40:	addiu	a3, zero, 0
0x2bcc1944	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc1948	48:	addiu	a3, zero, -1
0x2bcc194c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc1950	56:	move	a0, EE
0x2bcc1954	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc1958	64:	lui	t9, hi16(0x65)
0x2bcc195c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc1960	72:	jalr	t9
0x2bcc1964	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc1968	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc196c	84:	nop
0x2bcc1970	88:	nop
0x2bcc1974	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc1978	96:	lw	s4, -24(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcc197c	100:	lw	s5, -20(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
			@ Outgoing local(0) reg(20): in correct register
          		@ deferred comparison: 
0x2bcc1980	104:	addiu	t7, zero, 1
0x2bcc1984	108:	bne	s5, t7, PC=0x2bcc1980	@ branch to block L1
0x2bcc1988	112:	nop
          		@ Do getfield:
0x2bcc198c	116:	lw	s7, 8(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc1990	120:	lw	s6, 112(s7)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc1994	124:	lw	s7, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc1998	128:	sw	s6, 0(JSP)
0x2bcc199c	132:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc19a0	136:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc19a4	140:	addiu	t7, zero, -4
0x2bcc19a8	144:	and	s7, s7, t7
0x2bcc19ac	148:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc19b0	152:	lw	a0, 52(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc19b4	156:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc19b8	160:	lw	s7, 0(a0)	@ call method through mb
0x2bcc19bc	164:	jalr	s7
0x2bcc19c0	168:	nop
          		@ Captured a stackmap here.
0x2bcc19c4	172:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc19c8	176:	lw	s6, 0(JSP)
0x2bcc19cc	180:	addiu	s7, zero, 11	@ const 11
0x2bcc19d0	184:	sw	s7, -16(JFP)	@ Java local cell # 2
0x2bcc19d4	188:	sw	s6, -12(JFP)	@ Java local cell # 3
			@ Outgoing local(3) reg(22): in correct register
0x2bcc19d8	192:	b	PC=0x2bcc19d8	@ branch to block L2
0x2bcc19dc	196:	nop
			@ Initial Temp REF set is 
	L1:	200:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
--->Fixed instruction at 108(0x2bcc1984) to reference 200
          		@ MAP_PC idepth=0 javaPc=26 compiledPc=200
          		@ Do getfield:
0x2bcc19e0	200:	lw	s7, 8(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc19e4	204:	lw	s6, 112(s7)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc19e8	208:	lw	s7, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc19ec	212:	sw	s6, 0(JSP)
0x2bcc19f0	216:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc19f4	220:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc19f8	224:	addiu	t7, zero, -4
0x2bcc19fc	228:	and	s7, s7, t7
0x2bcc1a00	232:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc1a04	236:	lw	a0, 56(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc1a08	240:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc1a0c	244:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1a10	248:	jalr	s7
0x2bcc1a14	252:	nop
          		@ Captured a stackmap here.
0x2bcc1a18	256:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc1a1c	260:	lw	s6, 0(JSP)
0x2bcc1a20	264:	addiu	s7, zero, 5	@ const 5
0x2bcc1a24	268:	sw	s7, -16(JFP)	@ Java local cell # 2
0x2bcc1a28	272:	sw	s6, -12(JFP)	@ Java local cell # 3
			@ Outgoing local(3) reg(22): in correct register
			@ Initial Temp REF set is 
	L2:	276:	@ entry point for branches
			@ Binding Incoming Local(3) to reg(22)
--->Fixed instruction at 192(0x2bcc19d8) to reference 276
          		@ MAP_PC idepth=0 javaPc=43 compiledPc=276
0x2bcc1a2c	276:	sw	s6, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc1a30	280:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc1a34	284:	addiu	t7, zero, -4
0x2bcc1a38	288:	and	s7, s7, t7
0x2bcc1a3c	292:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc1a40	296:	lw	a0, 48(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc1a44	300:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc1a48	304:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1a4c	308:	jalr	s7
0x2bcc1a50	312:	nop
          		@ Captured a stackmap here.
0x2bcc1a54	316:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc1a58	320:	lw	s4, 0(JSP)
0x2bcc1a5c	324:	sw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(4) reg(20): in correct register
			@ Outgoing local(3) reg(21): not in register
0x2bcc1a60	328:	lw	s5, -12(JFP)	@ Java local cell # 3
0x2bcc1a64	332:	b	PC=0x2bcc1a64	@ branch to block L3
0x2bcc1a68	336:	nop
			@ Initial Temp REF set is 
	L4:	340:	@ Patchable GC Check point
0x2bcc1a6c	340:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcc1a6c	340:	nop
0x2bcc1a70	344:	nop
          		@ Captured a stackmap here.
	L4:	348:	@ entry point when locals need to be loaded
			@ Preloading incoming local(4) reg(20)
0x2bcc1a74	348:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Preloading incoming local(3) reg(21)
0x2bcc1a78	352:	lw	s5, -12(JFP)	@ Java local cell # 3
	L4:	356:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=52 compiledPc=348
0x2bcc1a7c	356:	sw	s5, 0(JSP)
0x2bcc1a80	360:	sw	s4, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc1a84	364:	lw	s7, 0(s5)	@ Get object.cb
0x2bcc1a88	368:	addiu	t7, zero, -4
0x2bcc1a8c	372:	and	s7, s7, t7
0x2bcc1a90	376:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc1a94	380:	lw	a0, 172(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc1a98	384:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc1a9c	388:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1aa0	392:	jalr	s7
0x2bcc1aa4	396:	nop
          		@ Captured a stackmap here.
0x2bcc1aa8	400:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc1aac	404:	lw	s7, 0(JSP)
0x2bcc1ab0	408:	lw	a2, 0(CP)	@ cb com.sun.mep.bench.Chess.Point
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcc1ab4	412:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcc1ab8	416:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcc1abc	420:	nop
0x2bcc1ac0	424:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
0x2bcc1ac4	428:	lw	ra, -24(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcc1ac8	432:	lw	s6, 12(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc1acc	436:	lw	s5, 12(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc1ad0	440:	lw	s6, 12(s7)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc1ad4	444:	lw	s4, 8(s5)	@ arraylength
          		@ deferred comparison: 
0x2bcc1ad8	448:	sltu	t7, s6, s4
0x2bcc1adc	452:	bne	t7, zero, PC=0x2bcc1ad8	@ br .skip
0x2bcc1ae0	456:	nop
0x2bcc1ae4	460:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcc1ae8	464:	nop
		.skip
--->Fixed instruction at 452(0x2bcc1adc) to reference 468
          		@ Do load(arrayObj, index) (elem type=7,B):
0x2bcc1aec	468:	addu	t9, s5, s6
0x2bcc1af0	472:	lb	s4, 12(t9)
0x2bcc1af4	476:	sw	s7, -4(JFP)	@ Java local cell # 5
0x2bcc1af8	480:	lw	t9, -16(JFP)	@ Java local cell # 2
			@ Outgoing local(4) reg(20): not in register
0x2bcc1afc	484:	sw	s4, 28(JFP)	@ spill Java temp cell # 0
0x2bcc1b00	488:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(3) reg(21): not in register
0x2bcc1b04	492:	lw	s5, -12(JFP)	@ Java local cell # 3
0x2bcc1b08	496:	lw	s6, 28(JFP)	@ Java temp cell # 0
          		@ deferred comparison: 
0x2bcc1b0c	500:	bne	s6, t9, PC=0x2bcc1b0c	@ branch to block L3
0x2bcc1b10	504:	nop
0x2bcc1b14	508:	addiu	s6, zero, 1	@ const 1
0x2bcc1b18	512:	sw	s6, -24(JFP)	@ Java local cell # 0
0x2bcc1b1c	516:	addiu	JSP, JFP, -20
0x2bcc1b20	520:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc1b24	524:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc1b28	528:	nop
			@ Initial Temp REF set is 
	L3:	532:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(20)
			@ Binding Incoming Local(3) to reg(21)
--->Fixed instruction at 332(0x2bcc1a64) to reference 532
--->Fixed instruction at 500(0x2bcc1b0c) to reference 532
          		@ MAP_PC idepth=0 javaPc=82 compiledPc=532
0x2bcc1b2c	532:	addiu	s4, s4, -1
0x2bcc1b30	536:	sw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(4) reg(20): in correct register
			@ Outgoing local(3) reg(21): in correct register
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcc1b34	540:	sltiu	t7, s4, 0
0x2bcc1b38	544:	beq	t7, zero, PC=0x2bcc1a6c	@ branch to block L4
0x2bcc1b3c	548:	nop
0x2bcc1b34	540:	sltiu	t7, s4, 0
0x2bcc1b38	544:	beq	t7, zero, PC=0x2bcc1a7c	@ branch to block L4, skip GC
0x2bcc1b3c	548:	nop
0x2bcc1b40	552:	sw	zero, -24(JFP)	@ Java local cell # 0
0x2bcc1b44	556:	addiu	JSP, JFP, -20
0x2bcc1b48	560:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc1b4c	564:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc1b50	568:	nop
0x2bcc1b54	572:	.word	9791584	@ cb com.sun.mep.bench.Chess.Point
--->Fixed instruction at 408(0x2bcc1ab0) to reference 572
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc1918) >>>>>>>>
          		@ Capacity is 17 word(s)
0x2bcc1918	0:	addiu	a1, JSP, 60
<<<<<<<<<Pop Code Buffer to PC = 576 (0x2bcc1b58) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc1968) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcc1968	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcc196c	84:	lui	CP, hi16(0x2bcc)
0x2bcc1970	88:	ori	CP, CP, lo16(0x2bcc1b54)
0x2bcc1974	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 576 (0x2bcc1b58) <<<<<<<<<
JS: COMPILED: size=696 startPC=0x2bcc1918 com.sun.mep.bench.Chess.Check4Mate.check4check(I)Z
OSR: Intr2Comp: com.sun.mep.bench.Chess.Check4Mate.check4check(I)Z
JS: ATTEMPTING TO COMPILE java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
JS: COMPILING java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
orig bkID(2) Incoming Locals(3 0x0): 1- 2- 0- 
orig bkID(1) Incoming Locals(1 0x0): 1- 
o1   bkID(1) Incoming Locals(1 0x0): 1- 
orig bkID(0) Incoming Locals(1 0x0): 1- 
o1   bkID(0) Incoming Locals(1 0x0): 1- 
s1   bkID(0) Incoming Locals(1 0x0): 1- 
o1   bkID(0) Incoming Locals(1 0x0): 1- 
orig bkID(2) Incoming Locals(3 0x0): 1- 2- 0- 
orig bkID(1) Incoming Locals(1 0x0): 1- 
o1   bkID(1) Incoming Locals(1 0x0): 1- 
orig bkID(0) Incoming Locals(1 0x0): 1- 
o1   bkID(0) Incoming Locals(1 0x0): 1- 
s1   bkID(0) Incoming Locals(1 0x0): 1- 
o1   bkID(0) Incoming Locals(1 0x0): 1- 
bkID(0) local(0 #1)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(1 0x0): 1- 
+bk  bkID(0) Incoming Locals(1 0x1): 1+ 
-gbk bkID(1) Incoming Locals(1 0x0): 1- 
+gbk bkID(1) Incoming Locals(1 0x1): 1+ 
bkID(0) local(0 #1)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(1 0x1): 1+ 
dstBk(0) local(0 1) found in slot(0)
local(0 1) same slot
+bk  bkID(0) Incoming Locals(1 0x1): 1+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(1 0x1): 1+ 
dstBk(1) local(0 1) found in slot(0)
local(0 1) same slot
+gbk bkID(1) Incoming Locals(1 0x1): 1+ 

#################################################

The maximum node counts per root node are 9
IR block list contains 3 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 4 root nodes: in block 
* flags: 0x41
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1
* Source: java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<0>  (0x6f6780):    aload_1 
<1>  (0x6f6781):    ifnonnull <9>
<4>  (0x6f6784):    aload_1 
<5>  (0x6f6785):    invokestatic_checkinit_quick #6382 <java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;>
<8>  (0x6f6788):    astore_1 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(1)	ID(2)
 
Incoming Locals(1): 
	local(1)	ID(2)
 
Assigned Locals(1): 
	ASSIGN(11): local(1)	ID(10)	rhsID(8)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(1)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 4) BCOND (reference) 
   target: (BlockID: 1 BlockPC: 9)
   condition: NE
   flags: 0
      <(ID: 2) IDENTITY (reference)  (ref count: 2)
         <(ID: 9) LOCAL (reference)   1>
      <(ID: 3) CONST_STRING_OBJECT (reference)  (stringObject 0x0)



   <(ID: 8) IDENTITY (reference)  (ref count: 2)
      <(ID: 12) INVOKE (reference) 
         <(ID: 7) PARAMETER (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 2)
            <(ID: 6) NULL_PARAMETER (NONE) 
         <(ID: 5) CONST_MB (address field)  (java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;)

   <(ID: 11) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 10) LOCAL (reference)   1>
      <(ID: 8) IDENTITY (reference)  (ref count: 2)


*************************************************
*
* (block ID:1 block PC:9 )
* IR root list contains 9 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1
* Source: java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<9>  (0x6f6789):    aload_1 
<10>  (0x6f678a):    invokenonvirtual_quick #7459 <java.lang.String.length()I>
<13>  (0x6f678d):    istore_2 
<14>  (0x6f678e):    aload_0 
<15>  (0x6f678f):    getfield_quick #3
<18>  (0x6f6792):    iload_2 
<19>  (0x6f6793):    iadd 
<20>  (0x6f6794):    istore_3 
<21>  (0x6f6795):    iload_3 
<22>  (0x6f6796):    aload_0 
<23>  (0x6f6797):    agetfield_quick #2
<26>  (0x6f679a):    arraylength 
<27>  (0x6f679b):    if_icmple <35>
<30>  (0x6f679e):    aload_0 
<31>  (0x6f679f):    iload_3 
<32>  (0x6f67a0):    invokenonvirtual_quick #11073 <java.lang.StringBuffer.expandCapacity(I)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(1)	ID(14)
 
Incoming Locals(1): 
	local(1)	ID(14)
 
Assigned Locals(2): 
	ASSIGN(35): local(2)	ID(34)	rhsID(20)
 	ASSIGN(38): local(3)	ID(37)	rhsID(26)
 
Successor Blocks(1): 
	ID(2) LocalOrder(1) AssignOrder(2) RefsOK(0) Locals(1 2 0)

   <(ID: 13) MAP_PC (NONE)   9>

   <(ID: 20) IDENTITY (int)  (ref count: 3)
      <(ID: 36) INVOKE (int) 
         <(ID: 17) PARAMETER (reference) 
            <(ID: 14) IDENTITY (reference)  (ref count: 2)
               <(ID: 21) LOCAL (reference)   1>
            <(ID: 16) NULL_PARAMETER (NONE) 
         <(ID: 19) SEQUENCE_R (address field) 
            <(ID: 18) NULL_CHECK (reference) 
               <(ID: 14) IDENTITY (reference)  (ref count: 2)
            <(ID: 15) CONST_MB (address field)  (java.lang.String.length()I)

   <(ID: 25) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 39) FETCH (32-bit field) 
         <(ID: 24) FIELD_REF (32-bit field) 
            <(ID: 22) IDENTITY (reference)  (ref count: 3)
               <(ID: 30) LOCAL (reference)   0>
            <(ID: 23) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 29) IDENTITY (reference)  (ref count: 2)
      <(ID: 33) FETCH (reference) 
         <(ID: 28) FIELD_REF (reference) 
            <(ID: 22) IDENTITY (reference)  (ref count: 3)
            <(ID: 27) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 31) IDENTITY (int)  (ref count: 2)
      <(ID: 41) ARRAY_LENGTH (int) 
         <(ID: 29) IDENTITY (reference)  (ref count: 2)

   <(ID: 35) ASSIGN (int)  (assignIdx: 0)
      <(ID: 34) LOCAL (int)   2>
      <(ID: 20) IDENTITY (int)  (ref count: 3)

   <(ID: 38) ASSIGN (int)  (assignIdx: 1)
      <(ID: 37) LOCAL (int)   3>
      <(ID: 26) IDENTITY (int)  (ref count: 3)
         <(ID: 40) ADD (int) 
            <(ID: 25) IDENTITY (32-bit field)  (ref count: 2)
            <(ID: 20) IDENTITY (int)  (ref count: 3)

   <(ID: 32) BCOND (int) 
   target: (BlockID: 2 BlockPC: 35)
   condition: LE
   flags: 0
      <(ID: 26) IDENTITY (int)  (ref count: 3)
      <(ID: 31) IDENTITY (int)  (ref count: 2)


   <(ID: 46) INVOKE (v) 
      <(ID: 45) PARAMETER (reference) 
         <(ID: 22) IDENTITY (reference)  (ref count: 3)
         <(ID: 44) PARAMETER (int) 
            <(ID: 26) IDENTITY (int)  (ref count: 3)
            <(ID: 43) NULL_PARAMETER (NONE) 
      <(ID: 42) CONST_MB (address field)  (java.lang.StringBuffer.expandCapacity(I)V)


*************************************************
*
* (block ID:2 block PC:35 )
* IR root list contains 6 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<35>  (0x6f67a3):    aload_1 
<36>  (0x6f67a4):    iconst_0 
<37>  (0x6f67a5):    iload_2 
<38>  (0x6f67a6):    aload_0 
<39>  (0x6f67a7):    agetfield_quick #2
<42>  (0x6f67aa):    aload_0 
<43>  (0x6f67ab):    getfield_quick #3
<46>  (0x6f67ae):    invokenonvirtual_quick #8069 <java.lang.String.getChars(II[CI)V>
<49>  (0x6f67b1):    aload_0 
<50>  (0x6f67b2):    iload_3 
<51>  (0x6f67b3):    putfield_quick #3
<54>  (0x6f67b6):    aload_0 
<55>  (0x6f67b7):    areturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(1)	ID(48)
 	local(2)	ID(50)
 	local(0)	ID(51)
 
Incoming Locals(3): 
	local(1)	ID(48)
 	local(2)	ID(50)
 	local(0)	ID(51)
 
   <(ID: 47) MAP_PC (NONE)   35>

   <(ID: 54) IDENTITY (reference)  (ref count: 2)
      <(ID: 69) FETCH (reference) 
         <(ID: 53) FIELD_REF (reference) 
            <(ID: 51) IDENTITY (reference)  (ref count: 4)
               <(ID: 58) LOCAL (reference)   0>
            <(ID: 52) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 57) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 70) FETCH (32-bit field) 
         <(ID: 56) FIELD_REF (32-bit field) 
            <(ID: 51) IDENTITY (reference)  (ref count: 4)
            <(ID: 55) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 68) INVOKE (v) 
      <(ID: 65) PARAMETER (reference) 
         <(ID: 48) IDENTITY (reference)  (ref count: 2)
            <(ID: 71) LOCAL (reference)   1>
         <(ID: 64) PARAMETER (int) 
            <(ID: 49) CONST_JAVA_NUMERIC32 (int)  (0)
            <(ID: 63) PARAMETER (int) 
               <(ID: 50) LOCAL (int)   2>
               <(ID: 62) PARAMETER (reference) 
                  <(ID: 54) IDENTITY (reference)  (ref count: 2)
                  <(ID: 61) PARAMETER (32-bit field) 
                     <(ID: 57) IDENTITY (32-bit field)  (ref count: 2)
                     <(ID: 60) NULL_PARAMETER (NONE) 
      <(ID: 67) SEQUENCE_R (address field) 
         <(ID: 66) NULL_CHECK (reference) 
            <(ID: 48) IDENTITY (reference)  (ref count: 2)
         <(ID: 59) CONST_MB (address field)  (java.lang.String.getChars(II[CI)V)

   <(ID: 75) ASSIGN (32-bit field) 
      <(ID: 74) FIELD_REF (32-bit field) 
         <(ID: 51) IDENTITY (reference)  (ref count: 4)
         <(ID: 73) CONST_FIELD_OFFSET (NONE)  (3)
      <(ID: 72) LOCAL (int)   3>

   <(ID: 76) RETURN_VALUE (reference) 
      <(ID: 51) IDENTITY (reference)  (ref count: 4)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 344
ESTIMATED BUFFER SIZE = 456
CODE BUFFER ADDRESS = 0x2bcc1b84
PC MAP TABLE ADDRESS = 0x2bcc1b8c
CODE ENTRY ADDRESS = 0x2bcc1bb8
          		@ Method prologue
0x2bcc1bb8	0:	addiu	a1, JSP, 60	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc1bbc	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc1bc0	8:	sltu	t7, a1, CHUNKEND
0x2bcc1bc4	12:	bne	t7, zero, PC=0x2bcc1bb8	@ goto .skip
0x2bcc1bc8	16:	nop
0x2bcc1bcc	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc1bd0	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc1bc4) >>>>>>>>
0x2bcc1bc4	12:	bne	t7, zero, PC=0x2bcc1bd4	@ goto .skip
0x2bcc1bc8	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc1bd4) <<<<<<<<<
		.skip
          		@ Set up frame for synchronized method
0x2bcc1bd4	28:	addiu	a1, JSP, -8	@ ARG2 = JSP - argsSize * 4
0x2bcc1bd8	32:	addiu	a2, JSP, 8	@ NEW_JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc1bdc	36:	lui	t9, hi16(0x65)
0x2bcc1be0	40:	ori	t9, t9, lo16(0x65a430)	@ call CVMCCMinvokeNonstaticSyncMethodHelper CVMCCMinvokeNonstaticSyncMethodHelper
0x2bcc1be4	44:	jalr	t9
0x2bcc1be8	48:	nop
          		@ Interpreted -> compiled entry point
0x2bcc1bec	52:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc1bf0	56:	nop
0x2bcc1bf4	60:	nop
0x2bcc1bf8	64:	nop
			@ Initial Temp REF set is 
	L0:	68:	@ entry point for first block
			@ Preloading incoming local(1) reg(20)
0x2bcc1bfc	68:	lw	s4, -12(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=72
			@ Outgoing local(1) reg(20): in correct register
          		@ deferred comparison: 
0x2bcc1c00	72:	bne	s4, zero, PC=0x2bcc1c00	@ branch to block L1
0x2bcc1c04	76:	nop
0x2bcc1c08	80:	sw	s4, 0(JSP)
0x2bcc1c0c	84:	lw	a0, 0(CP)	@ mb java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcc1c10	88:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc1c14	92:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1c18	96:	jalr	s7
0x2bcc1c1c	100:	nop
          		@ Captured a stackmap here.
0x2bcc1c20	104:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc1c24	108:	lw	s4, 0(JSP)
0x2bcc1c28	112:	sw	s4, -12(JFP)	@ Java local cell # 1
			@ Outgoing local(1) reg(20): in correct register
			@ Initial Temp REF set is 
	L1:	116:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(20)
--->Fixed instruction at 72(0x2bcc1c00) to reference 116
          		@ MAP_PC idepth=0 javaPc=9 compiledPc=116
0x2bcc1c2c	116:	sw	s4, 0(JSP)
0x2bcc1c30	120:	lw	s7, 0(s4)	@ NULL check
0x2bcc1c34	124:	lw	a0, 0(CP)	@ mb java.lang.String.length()I
          		@ Invoke a method w/ a 32bit return type
0x2bcc1c38	128:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc1c3c	132:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1c40	136:	jalr	s7
0x2bcc1c44	140:	nop
          		@ Captured a stackmap here.
0x2bcc1c48	144:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc1c4c	148:	lw	s5, 0(JSP)
0x2bcc1c50	152:	lw	ra, -16(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcc1c54	156:	lw	s7, 12(ra)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc1c58	160:	lw	s6, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc1c5c	164:	lw	s4, 8(s6)	@ arraylength
0x2bcc1c60	168:	sw	s5, -8(JFP)	@ Java local cell # 2
0x2bcc1c64	172:	addu	s6, s7, s5
0x2bcc1c68	176:	sw	s6, -4(JFP)	@ Java local cell # 3
			@ Outgoing local(1) reg(20): not in register
0x2bcc1c6c	180:	sw	s4, 28(JFP)	@ spill Java temp cell # 0
0x2bcc1c70	184:	lw	s4, -12(JFP)	@ Java local cell # 1
			@ Outgoing local(2) reg(21): in correct register
			@ Outgoing local(0) reg(22): in wrong register
0x2bcc1c74	188:	move	s6, ra
0x2bcc1c78	192:	lw	s7, -4(JFP)	@ Java local cell # 3
0x2bcc1c7c	196:	lw	ra, 28(JFP)	@ Java temp cell # 0
          		@ deferred comparison: 
0x2bcc1c80	200:	slt	t7, ra, s7
0x2bcc1c84	204:	beq	t7, zero, PC=0x2bcc1c80	@ branch to block L2
0x2bcc1c88	208:	nop
0x2bcc1c8c	212:	sw	s6, 0(JSP)
0x2bcc1c90	216:	sw	s7, 4(JSP)
0x2bcc1c94	220:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.expandCapacity(I)V
          		@ Invoke a method w/ a void return type
0x2bcc1c98	224:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc1c9c	228:	jal	PC=(0x2bcb8f14)	@ call CVMCCMinvokeCNIMethod() for java.lang.StringBuffer.expandCapacity(I)V
0x2bcc1ca0	232:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(1) reg(20): not in register
0x2bcc1ca4	236:	lw	s4, -12(JFP)	@ Java local cell # 1
			@ Outgoing local(2) reg(21): not in register
0x2bcc1ca8	240:	lw	s5, -8(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(22): not in register
0x2bcc1cac	244:	lw	s6, -16(JFP)	@ Java local cell # 0
			@ Initial Temp REF set is 
	L2:	248:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(20)
			@ Binding Incoming Local(2) to reg(21)
			@ Binding Incoming Local(0) to reg(22)
--->Fixed instruction at 204(0x2bcc1c84) to reference 248
          		@ MAP_PC idepth=0 javaPc=35 compiledPc=248
          		@ Do getfield:
0x2bcc1cb0	248:	lw	s7, 8(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc1cb4	252:	lw	ra, 12(s6)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc1cb8	256:	sw	s4, 0(JSP)
0x2bcc1cbc	260:	sw	zero, 4(JSP)
0x2bcc1cc0	264:	sw	s5, 8(JSP)
0x2bcc1cc4	268:	sw	s7, 12(JSP)
0x2bcc1cc8	272:	sw	ra, 16(JSP)
0x2bcc1ccc	276:	lw	s7, 0(s4)	@ NULL check
0x2bcc1cd0	280:	lw	a0, 0(CP)	@ mb java.lang.String.getChars(II[CI)V
          		@ Invoke a method w/ a void return type
0x2bcc1cd4	284:	addiu	JSP, JSP, 20	@ adjust JSP before method call
0x2bcc1cd8	288:	jal	PC=(0x2bcb8f14)	@ call CVMCCMinvokeCNIMethod() for java.lang.String.getChars(II[CI)V
0x2bcc1cdc	292:	nop
          		@ Captured a stackmap here.
0x2bcc1ce0	296:	lw	ra, -4(JFP)	@ Java local cell # 3
          		@ Do putfield:
0x2bcc1ce4	300:	lw	s7, -16(JFP)	@ Java local cell # 0
0x2bcc1ce8	304:	sw	ra, 12(s7)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcc1cec	308:	sw	s7, -16(JFP)	@ Java local cell # 0
0x2bcc1cf0	312:	addiu	JSP, JFP, -12
0x2bcc1cf4	316:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc1cf8	320:	b	PC=0x2bcb91ac	@ goto CVMCCMreturnFromSyncMethod
0x2bcc1cfc	324:	nop
0x2bcc1d00	328:	.word	9065176	@ mb java.lang.String.getChars(II[CI)V
--->Fixed instruction at 280(0x2bcc1cd0) to reference 328
0x2bcc1d04	332:	.word	9109248	@ mb java.lang.StringBuffer.expandCapacity(I)V
--->Fixed instruction at 220(0x2bcc1c94) to reference 332
0x2bcc1d08	336:	.word	9065120	@ mb java.lang.String.length()I
--->Fixed instruction at 124(0x2bcc1c34) to reference 336
0x2bcc1d0c	340:	.word	9066212	@ mb java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
--->Fixed instruction at 84(0x2bcc1c0c) to reference 340
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc1bb8) >>>>>>>>
          		@ Capacity is 18 word(s)
0x2bcc1bb8	0:	addiu	a1, JSP, 64
<<<<<<<<<Pop Code Buffer to PC = 344 (0x2bcc1d10) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 52 (0x2bcc1bec) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcc1bec	52:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcc1bf0	56:	lui	CP, hi16(0x2bcc)
0x2bcc1bf4	60:	ori	CP, CP, lo16(0x2bcc1d00)
0x2bcc1bf8	64:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 344 (0x2bcc1d10) <<<<<<<<<
JS: COMPILED: size=428 startPC=0x2bcc1bb8 java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.ActorManager.addActor(Lcom/sun/mep/bench/Chess/Actor;)V
JS: COMPILING com.sun.mep.bench.Chess.ActorManager.addActor(Lcom/sun/mep/bench/Chess/Actor;)V
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(1) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(1) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
o1   bkID(0) Incoming Locals(2 0x0): 0- 1- 
bkID(0) local(0 #0)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(2 0x0): 0- 1- 
+bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
-gbk bkID(1) Incoming Locals(2 0x0): 0- 1- 
+gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
bkID(0) local(0 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
dstBk(0) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
dstBk(1) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
bkID(0) local(1 #1)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(2 0x1): 0+ 1- 
+bk  bkID(0) Incoming Locals(2 0x3): 0+ 1+ 
-gbk bkID(1) Incoming Locals(2 0x1): 0+ 1- 
+gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
bkID(0) local(1 #1)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(0) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(0) Incoming Locals(2 0x3): 0+ 1+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 
dstBk(1) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 0+ 1+ 

#################################################

The maximum node counts per root node are 6
IR block list contains 3 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 6 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.ActorManager.addActor(Lcom/sun/mep/bench/Chess/Actor;)V(ActorManager.java:93)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x939fe0):    aload_0 
<1>  (0x939fe1):    getfield_quick #6
<4>  (0x939fe4):    ifeq <18>
<7>  (0x939fe7):    aload_0 
<8>  (0x939fe8):    getfield #5 <com.sun.mep.bench.Chess.ActorManager.newActors:Ljava/util/Vector;>
<11>  (0x939feb):    aload_1 
<12>  (0x939fec):    invokevirtual #10 <java.util.Vector.addElement(Ljava/lang/Object;)V>
<15>  (0x939fef):    goto <26>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(13)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(28)
 
Successor Blocks(2): 
	ID(1) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(0 1)
	ID(2) LocalOrder(2) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 8) FETCH (32-bit field) 
         <(ID: 4) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 2)
               <(ID: 12) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (6)

   <(ID: 7) BCOND (int) 
   target: (BlockID: 1 BlockPC: 18)
   condition: EQ
   flags: 0
      <(ID: 5) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 6) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 11) IDENTITY (reference)  (ref count: 3)
      <(ID: 21) FETCH (reference) 
         <(ID: 10) FIELD_REF (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 2)
            <(ID: 9) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 20) INVOKE (v) 
      <(ID: 17) PARAMETER (reference) 
         <(ID: 11) IDENTITY (reference)  (ref count: 3)
         <(ID: 16) PARAMETER (reference) 
            <(ID: 13) LOCAL (reference)   1>
            <(ID: 15) NULL_PARAMETER (NONE) 
      <(ID: 19) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 18) GET_VTBL (NONE) 
            <(ID: 11) IDENTITY (reference)  (ref count: 3)
         <(ID: 14) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 49)

   <(ID: 22) GOTO (NONE) 
   target: (BlockID: 2 BlockPC: 26)


*************************************************
*
* (block ID:1 block PC:18 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.ActorManager.addActor(Lcom/sun/mep/bench/Chess/Actor;)V(ActorManager.java:96)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<18>  (0x939ff2):    aload_0 
<19>  (0x939ff3):    agetfield_quick #3
<22>  (0x939ff6):    aload_1 
<23>  (0x939ff7):    invokevirtual_quick_w #10 <java.util.Vector.addElement(Ljava/lang/Object;)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(24)
 	local(1)	ID(28)
 
Incoming Locals(2): 
	local(0)	ID(24)
 	local(1)	ID(28)
 
Successor Blocks(1): 
	ID(2) LocalOrder(2) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 23) MAP_PC (NONE)   18>

   <(ID: 27) IDENTITY (reference)  (ref count: 3)
      <(ID: 36) FETCH (reference) 
         <(ID: 26) FIELD_REF (reference) 
            <(ID: 24) LOCAL (reference)   0>
            <(ID: 25) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 35) INVOKE (v) 
      <(ID: 32) PARAMETER (reference) 
         <(ID: 27) IDENTITY (reference)  (ref count: 3)
         <(ID: 31) PARAMETER (reference) 
            <(ID: 28) LOCAL (reference)   1>
            <(ID: 30) NULL_PARAMETER (NONE) 
      <(ID: 34) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 33) GET_VTBL (NONE) 
            <(ID: 27) IDENTITY (reference)  (ref count: 3)
         <(ID: 29) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 49)


*************************************************
*
* (block ID:2 block PC:26 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.ActorManager.addActor(Lcom/sun/mep/bench/Chess/Actor;)V(ActorManager.java:97)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<26>  (0x939ffa):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

   <(ID: 37) MAP_PC (NONE)   26>

   <(ID: 38) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 40
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 170
ESTIMATED BUFFER SIZE = 324
CODE BUFFER ADDRESS = 0x2bcc1d30
PC MAP TABLE ADDRESS = 0x2bcc1d38
CODE ENTRY ADDRESS = 0x2bcc1d68
          		@ Method prologue
0x2bcc1d68	0:	addiu	a1, JSP, 40	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc1d6c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc1d70	8:	sltu	t7, a1, CHUNKEND
0x2bcc1d74	12:	bne	t7, zero, PC=0x2bcc1d68	@ goto .skip
0x2bcc1d78	16:	nop
0x2bcc1d7c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc1d80	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc1d74) >>>>>>>>
0x2bcc1d74	12:	bne	t7, zero, PC=0x2bcc1d84	@ goto .skip
0x2bcc1d78	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc1d84) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc1d84	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcc1d88	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc1d8c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc1d90	40:	addiu	a3, zero, 0
0x2bcc1d94	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc1d98	48:	addiu	a3, zero, -1
0x2bcc1d9c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc1da0	56:	move	a0, EE
0x2bcc1da4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc1da8	64:	lui	t9, hi16(0x65)
0x2bcc1dac	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc1db0	72:	jalr	t9
0x2bcc1db4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc1db8	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc1dbc	84:	nop
0x2bcc1dc0	88:	nop
0x2bcc1dc4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc1dc8	96:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcc1dcc	100:	lw	s5, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
          		@ Do getfield:
0x2bcc1dd0	104:	lw	s7, 24(s4)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
0x2bcc1dd4	108:	beq	s7, zero, PC=0x2bcc1dd4	@ branch to block L1
0x2bcc1dd8	112:	nop
          		@ Do getfield:
0x2bcc1ddc	116:	lw	s7, 16(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc1de0	120:	sw	s7, 0(JSP)
0x2bcc1de4	124:	sw	s5, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc1de8	128:	lw	s6, 0(s7)	@ Get object.cb
0x2bcc1dec	132:	addiu	t7, zero, -4
0x2bcc1df0	136:	and	s6, s6, t7
0x2bcc1df4	140:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc1df8	144:	lw	a0, 196(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc1dfc	148:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc1e00	152:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1e04	156:	jalr	s7
0x2bcc1e08	160:	nop
          		@ Captured a stackmap here.
0x2bcc1e0c	164:	b	PC=0x2bcc1e0c	@ branch to block L2
0x2bcc1e10	168:	nop
			@ Initial Temp REF set is 
	L1:	172:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
--->Fixed instruction at 108(0x2bcc1dd4) to reference 172
          		@ MAP_PC idepth=0 javaPc=18 compiledPc=172
          		@ Do getfield:
0x2bcc1e14	172:	lw	s7, 12(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc1e18	176:	sw	s7, 0(JSP)
0x2bcc1e1c	180:	sw	s5, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc1e20	184:	lw	s6, 0(s7)	@ Get object.cb
0x2bcc1e24	188:	addiu	t7, zero, -4
0x2bcc1e28	192:	and	s6, s6, t7
0x2bcc1e2c	196:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc1e30	200:	lw	a0, 196(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc1e34	204:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc1e38	208:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1e3c	212:	jalr	s7
0x2bcc1e40	216:	nop
          		@ Captured a stackmap here.
			@ Initial Temp REF set is 
	L2:	220:	@ entry point for branches
--->Fixed instruction at 164(0x2bcc1e0c) to reference 220
          		@ MAP_PC idepth=0 javaPc=26 compiledPc=220
0x2bcc1e44	220:	addiu	JSP, JFP, -8
0x2bcc1e48	224:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc1e4c	228:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc1e50	232:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc1d68) >>>>>>>>
          		@ Capacity is 12 word(s)
0x2bcc1d68	0:	addiu	a1, JSP, 40
<<<<<<<<<Pop Code Buffer to PC = 236 (0x2bcc1e54) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc1db8) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc1db8	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc1dbc	84:	lui	CP, hi16(0x2bcc)
0x2bcc1dc0	88:	ori	CP, CP, lo16(0x2bcc1e54)
0x2bcc1dc4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 236 (0x2bcc1e54) <<<<<<<<<
JS: COMPILED: size=312 startPC=0x2bcc1d68 com.sun.mep.bench.Chess.ActorManager.addActor(Lcom/sun/mep/bench/Chess/Actor;)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.Actor.registerActor()V
JS: COMPILING com.sun.mep.bench.Chess.Actor.registerActor()V
orig bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(1 0x0): 0- 

#################################################

The maximum node counts per root node are 6
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 5 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Actor.registerActor()V(Actor.java:180)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x955db8):    aload_0 
<1>  (0x955db9):    agetfield_quick #2
<4>  (0x955dbc):    agetfield_quick #23
<7>  (0x955dbf):    aload_0 
<8>  (0x955dc0):    invokevirtual_quick_w #20 <com.sun.mep.bench.Chess.ActorManager.addActor(Lcom/sun/mep/bench/Chess/Actor;)V>
<11>  (0x955dc3):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(1): 
	local(0)	ID(2)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (reference)  (ref count: 2)
      <(ID: 9) FETCH (reference) 
         <(ID: 4) FIELD_REF (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 2)
               <(ID: 18) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 8) IDENTITY (reference)  (ref count: 3)
      <(ID: 17) FETCH (reference) 
         <(ID: 7) FIELD_REF (reference) 
            <(ID: 5) IDENTITY (reference)  (ref count: 2)
            <(ID: 6) CONST_FIELD_OFFSET (NONE)  (23)

   <(ID: 16) INVOKE (v) 
      <(ID: 13) PARAMETER (reference) 
         <(ID: 8) IDENTITY (reference)  (ref count: 3)
         <(ID: 12) PARAMETER (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 2)
            <(ID: 11) NULL_PARAMETER (NONE) 
      <(ID: 15) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 14) GET_VTBL (NONE) 
            <(ID: 8) IDENTITY (reference)  (ref count: 3)
         <(ID: 10) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 12)

   <(ID: 19) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 20
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 80
ESTIMATED BUFFER SIZE = 204
CODE BUFFER ADDRESS = 0x2bcc1e68
PC MAP TABLE ADDRESS = 0x2bcc1e70
CODE ENTRY ADDRESS = 0x2bcc1e98
          		@ Method prologue
0x2bcc1e98	0:	addiu	a1, JSP, 44	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc1e9c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc1ea0	8:	sltu	t7, a1, CHUNKEND
0x2bcc1ea4	12:	bne	t7, zero, PC=0x2bcc1e98	@ goto .skip
0x2bcc1ea8	16:	nop
0x2bcc1eac	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc1eb0	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc1ea4) >>>>>>>>
0x2bcc1ea4	12:	bne	t7, zero, PC=0x2bcc1eb4	@ goto .skip
0x2bcc1ea8	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc1eb4) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc1eb4	28:	sw	JFP, 4(JSP)	@ Store curr JFP into new frame
0x2bcc1eb8	32:	addiu	JFP, JSP, 4	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc1ebc	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc1ec0	40:	addiu	a3, zero, 0
0x2bcc1ec4	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc1ec8	48:	addiu	a3, zero, -1
0x2bcc1ecc	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc1ed0	56:	move	a0, EE
0x2bcc1ed4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc1ed8	64:	lui	t9, hi16(0x65)
0x2bcc1edc	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc1ee0	72:	jalr	t9
0x2bcc1ee4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc1ee8	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc1eec	84:	nop
0x2bcc1ef0	88:	nop
0x2bcc1ef4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc1ef8	96:	lw	s4, -8(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
          		@ Do getfield:
0x2bcc1efc	100:	lw	s7, 8(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc1f00	104:	lw	s6, 92(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc1f04	108:	sw	s6, 0(JSP)
0x2bcc1f08	112:	sw	s4, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc1f0c	116:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc1f10	120:	addiu	t7, zero, -4
0x2bcc1f14	124:	and	s7, s7, t7
0x2bcc1f18	128:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc1f1c	132:	lw	a0, 48(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc1f20	136:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc1f24	140:	lw	s7, 0(a0)	@ call method through mb
0x2bcc1f28	144:	jalr	s7
0x2bcc1f2c	148:	nop
          		@ Captured a stackmap here.
0x2bcc1f30	152:	addiu	JSP, JFP, -8
0x2bcc1f34	156:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc1f38	160:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc1f3c	164:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc1e98) >>>>>>>>
          		@ Capacity is 12 word(s)
0x2bcc1e98	0:	addiu	a1, JSP, 44
<<<<<<<<<Pop Code Buffer to PC = 168 (0x2bcc1f40) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc1ee8) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc1ee8	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc1eec	84:	lui	CP, hi16(0x2bcc)
0x2bcc1ef0	88:	ori	CP, CP, lo16(0x2bcc1f40)
0x2bcc1ef4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 168 (0x2bcc1f40) <<<<<<<<<
JS: COMPILED: size=232 startPC=0x2bcc1e98 com.sun.mep.bench.Chess.Actor.registerActor()V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.Pawn.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
JS: COMPILING com.sun.mep.bench.Chess.Pawn.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
orig bkID(1) Incoming Locals(1 0x0): 0- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(4 0x0): 0- 1- 2- 3- 
o1   bkID(0) Incoming Locals(4 0x0): 0- 1- 2- 3- 
orig bkID(1) Incoming Locals(1 0x0): 0- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(4 0x0): 0- 1- 2- 3- 
o1   bkID(0) Incoming Locals(4 0x0): 0- 1- 2- 3- 
pre  bkID(0) Incoming Locals(4 0x0): 0- 1- 2- 3- 
local(#0) swapped with local(#0)
post bkID(0) Incoming Locals(4 0x1): 0+ 1- 2- 3- 
pre2  bkID(1) Incoming Locals(1 0x0): 0- 
local(#1) swapped with local(#0)
post2 bkID(1) Incoming Locals(2 0x1): <null> 0- 
pre  bkID(0) Incoming Locals(4 0x1): 0+ 1- 2- 3- 
local(#1) swapped with local(#1)
post bkID(0) Incoming Locals(4 0x3): 0+ 1+ 2- 3- 
pre2  bkID(1) Incoming Locals(2 0x1): <null> 0- 
local(#2) swapped with local(#1)
post2 bkID(1) Incoming Locals(3 0x3): <null> <null> 0- 
pre  bkID(0) Incoming Locals(4 0x3): 0+ 1+ 2- 3- 
local(#2) swapped with local(#2)
post bkID(0) Incoming Locals(4 0x7): 0+ 1+ 2+ 3- 
pre2  bkID(1) Incoming Locals(3 0x3): <null> <null> 0- 
local(#3) swapped with local(#2)
post2 bkID(1) Incoming Locals(4 0x7): <null> <null> <null> 0- 
pre  bkID(0) Incoming Locals(4 0x7): 0+ 1+ 2+ 3- 
local(#3) swapped with local(#3)
post bkID(0) Incoming Locals(4 0xf): 0+ 1+ 2+ 3+ 
pre2  bkID(1) Incoming Locals(4 0x7): <null> <null> <null> 0- 
local(#4) swapped with local(#3)
post2 bkID(1) Incoming Locals(5 0xf): <null> <null> <null> <null> 0- 
pre  bkID(1) Incoming Locals(5 0xf): <null> <null> <null> <null> 0- 
local(#4) swapped with local(#4)
post bkID(1) Incoming Locals(5 0x1f): <null> <null> <null> <null> 0+ 

#################################################

The maximum node counts per root node are 6
IR block list contains 3 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 12 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0xf
* Source: com.sun.mep.bench.Chess.Pawn.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V(Pawn.java:46)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<0>  (0x955080):    aload_0 
<1>  (0x955081):    aload_1 
<2>  (0x955082):    iload_2 
<3>  (0x955083):    iload_3 
<4>  (0x955084):    invokenonvirtual_quick #1 <com.sun.mep.bench.Chess.ChessPiece.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<7>  (0x955087):    iload_2 
<8>  (0x955088):    ifne <44>
<11>  (0x95508b):    aload_0 
<12>  (0x95508c):    agetfield_quick #27
<15>  (0x95508f):    agetfield_quick #31
<18>  (0x955092):    aload_0 
<19>  (0x955093):    invokevirtual_quick_w #4 <java.util.Vector.addElement(Ljava/lang/Object;)V>
<22>  (0x955096):    aload_0 
<23>  (0x955097):    agetfield_quick #2
<26>  (0x95509a):    dup 
<27>  (0x95509b):    getfield_quick #15
<30>  (0x95509e):    aload_0 
<31>  (0x95509f):    agetfield_quick #27
<34>  (0x9550a2):    getfield_quick #42
<37>  (0x9550a5):    iadd 
<38>  (0x9550a6):    putfield_quick #15
<41>  (0x9550a9):    goto <74>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(4): 
	local(0)	ID(2)
 	local(1)	ID(3)
 	local(2)	ID(4)
 	local(3)	ID(5)
 
Incoming Locals(4): 
	local(0)	ID(2)
 	local(1)	ID(3)
 	local(2)	ID(4)
 	local(3)	ID(5)
 
Successor Blocks(2): 
	ID(1) LocalOrder(4) AssignOrder(0) RefsOK(0) Locals(<null> <null> <null> <null> 0)
	ID(2) LocalOrder(4) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 12) INVOKE (v) 
      <(ID: 11) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 5)
            <(ID: 19) LOCAL (reference)   0>
         <(ID: 10) PARAMETER (reference) 
            <(ID: 3) LOCAL (reference)   1>
            <(ID: 9) PARAMETER (int) 
               <(ID: 4) IDENTITY (int)  (ref count: 2)
                  <(ID: 15) LOCAL (int)   2>
               <(ID: 8) PARAMETER (int) 
                  <(ID: 5) LOCAL (int)   3>
                  <(ID: 7) NULL_PARAMETER (NONE) 
      <(ID: 6) CONST_MB (address field)  (com.sun.mep.bench.Chess.ChessPiece.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 14) BCOND (int) 
   target: (BlockID: 1 BlockPC: 44)
   condition: NE
   flags: 0
      <(ID: 4) IDENTITY (int)  (ref count: 2)
      <(ID: 13) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 18) IDENTITY (reference)  (ref count: 2)
      <(ID: 23) FETCH (reference) 
         <(ID: 17) FIELD_REF (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 5)
            <(ID: 16) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 22) IDENTITY (reference)  (ref count: 3)
      <(ID: 31) FETCH (reference) 
         <(ID: 21) FIELD_REF (reference) 
            <(ID: 18) IDENTITY (reference)  (ref count: 2)
            <(ID: 20) CONST_FIELD_OFFSET (NONE)  (31)

   <(ID: 30) INVOKE (v) 
      <(ID: 27) PARAMETER (reference) 
         <(ID: 22) IDENTITY (reference)  (ref count: 3)
         <(ID: 26) PARAMETER (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 5)
            <(ID: 25) NULL_PARAMETER (NONE) 
      <(ID: 29) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 28) GET_VTBL (NONE) 
            <(ID: 22) IDENTITY (reference)  (ref count: 3)
         <(ID: 24) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 49)

   <(ID: 34) IDENTITY (reference)  (ref count: 3)
      <(ID: 38) FETCH (reference) 
         <(ID: 33) FIELD_REF (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 5)
            <(ID: 32) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 37) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 50) FETCH (32-bit field) 
         <(ID: 36) FIELD_REF (32-bit field) 
            <(ID: 34) IDENTITY (reference)  (ref count: 3)
            <(ID: 35) CONST_FIELD_OFFSET (NONE)  (15)

   <(ID: 41) IDENTITY (reference)  (ref count: 2)
      <(ID: 45) FETCH (reference) 
         <(ID: 40) FIELD_REF (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 5)
            <(ID: 39) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 44) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 51) FETCH (32-bit field) 
         <(ID: 43) FIELD_REF (32-bit field) 
            <(ID: 41) IDENTITY (reference)  (ref count: 2)
            <(ID: 42) CONST_FIELD_OFFSET (NONE)  (42)

   <(ID: 49) ASSIGN (32-bit field) 
      <(ID: 48) FIELD_REF (32-bit field) 
         <(ID: 34) IDENTITY (reference)  (ref count: 3)
         <(ID: 47) CONST_FIELD_OFFSET (NONE)  (15)
      <(ID: 46) ADD (int) 
         <(ID: 37) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 44) IDENTITY (32-bit field)  (ref count: 2)

   <(ID: 52) GOTO (NONE) 
   target: (BlockID: 2 BlockPC: 74)


*************************************************
*
* (block ID:1 block PC:44 )
* IR root list contains 9 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1f
* Source: com.sun.mep.bench.Chess.Pawn.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V(Pawn.java:54)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<44>  (0x9550ac):    aload_0 
<45>  (0x9550ad):    agetfield_quick #27
<48>  (0x9550b0):    agetfield_quick #32
<51>  (0x9550b3):    aload_0 
<52>  (0x9550b4):    invokevirtual_quick_w #4 <java.util.Vector.addElement(Ljava/lang/Object;)V>
<55>  (0x9550b7):    aload_0 
<56>  (0x9550b8):    agetfield_quick #2
<59>  (0x9550bb):    dup 
<60>  (0x9550bc):    getfield_quick #15
<63>  (0x9550bf):    aload_0 
<64>  (0x9550c0):    agetfield_quick #27
<67>  (0x9550c3):    getfield_quick #42
<70>  (0x9550c6):    isub 
<71>  (0x9550c7):    putfield_quick #15
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(54)
 
Incoming Locals(5): 
	<null>
	<null>
	<null>
	<null>
	local(0)	ID(54)
 
Successor Blocks(1): 
	ID(2) LocalOrder(1) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 53) MAP_PC (NONE)   44>

   <(ID: 57) IDENTITY (reference)  (ref count: 2)
      <(ID: 61) FETCH (reference) 
         <(ID: 56) FIELD_REF (reference) 
            <(ID: 54) IDENTITY (reference)  (ref count: 4)
               <(ID: 70) LOCAL (reference)   0>
            <(ID: 55) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 60) IDENTITY (reference)  (ref count: 3)
      <(ID: 69) FETCH (reference) 
         <(ID: 59) FIELD_REF (reference) 
            <(ID: 57) IDENTITY (reference)  (ref count: 2)
            <(ID: 58) CONST_FIELD_OFFSET (NONE)  (32)

   <(ID: 68) INVOKE (v) 
      <(ID: 65) PARAMETER (reference) 
         <(ID: 60) IDENTITY (reference)  (ref count: 3)
         <(ID: 64) PARAMETER (reference) 
            <(ID: 54) IDENTITY (reference)  (ref count: 4)
            <(ID: 63) NULL_PARAMETER (NONE) 
      <(ID: 67) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 66) GET_VTBL (NONE) 
            <(ID: 60) IDENTITY (reference)  (ref count: 3)
         <(ID: 62) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 49)

   <(ID: 73) IDENTITY (reference)  (ref count: 3)
      <(ID: 77) FETCH (reference) 
         <(ID: 72) FIELD_REF (reference) 
            <(ID: 54) IDENTITY (reference)  (ref count: 4)
            <(ID: 71) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 76) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 89) FETCH (32-bit field) 
         <(ID: 75) FIELD_REF (32-bit field) 
            <(ID: 73) IDENTITY (reference)  (ref count: 3)
            <(ID: 74) CONST_FIELD_OFFSET (NONE)  (15)

   <(ID: 80) IDENTITY (reference)  (ref count: 2)
      <(ID: 84) FETCH (reference) 
         <(ID: 79) FIELD_REF (reference) 
            <(ID: 54) IDENTITY (reference)  (ref count: 4)
            <(ID: 78) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 83) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 90) FETCH (32-bit field) 
         <(ID: 82) FIELD_REF (32-bit field) 
            <(ID: 80) IDENTITY (reference)  (ref count: 2)
            <(ID: 81) CONST_FIELD_OFFSET (NONE)  (42)

   <(ID: 88) ASSIGN (32-bit field) 
      <(ID: 87) FIELD_REF (32-bit field) 
         <(ID: 73) IDENTITY (reference)  (ref count: 3)
         <(ID: 86) CONST_FIELD_OFFSET (NONE)  (15)
      <(ID: 85) SUB (int) 
         <(ID: 76) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 83) IDENTITY (32-bit field)  (ref count: 2)


*************************************************
*
* (block ID:2 block PC:74 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Pawn.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V(Pawn.java:57)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<74>  (0x9550ca):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

   <(ID: 91) MAP_PC (NONE)   74>

   <(ID: 92) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 40
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 458
ESTIMATED BUFFER SIZE = 612
CODE BUFFER ADDRESS = 0x2bcc1f50
PC MAP TABLE ADDRESS = 0x2bcc1f58
CODE ENTRY ADDRESS = 0x2bcc1f88
          		@ Method prologue
0x2bcc1f88	0:	addiu	a1, JSP, 48	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc1f8c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc1f90	8:	sltu	t7, a1, CHUNKEND
0x2bcc1f94	12:	bne	t7, zero, PC=0x2bcc1f88	@ goto .skip
0x2bcc1f98	16:	nop
0x2bcc1f9c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc1fa0	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc1f94) >>>>>>>>
0x2bcc1f94	12:	bne	t7, zero, PC=0x2bcc1fa4	@ goto .skip
0x2bcc1f98	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc1fa4) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc1fa4	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcc1fa8	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc1fac	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc1fb0	40:	addiu	a3, zero, 0
0x2bcc1fb4	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc1fb8	48:	addiu	a3, zero, -1
0x2bcc1fbc	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc1fc0	56:	move	a0, EE
0x2bcc1fc4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc1fc8	64:	lui	t9, hi16(0x65)
0x2bcc1fcc	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc1fd0	72:	jalr	t9
0x2bcc1fd4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc1fd8	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc1fdc	84:	nop
0x2bcc1fe0	88:	nop
0x2bcc1fe4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc1fe8	96:	lw	s4, -16(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcc1fec	100:	lw	s5, -12(JFP)	@ Java local cell # 1
			@ Preloading incoming local(2) reg(22)
0x2bcc1ff0	104:	lw	s6, -8(JFP)	@ Java local cell # 2
			@ Preloading incoming local(3) reg(23)
0x2bcc1ff4	108:	lw	s7, -4(JFP)	@ Java local cell # 3
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=112
0x2bcc1ff8	112:	sw	s4, 0(JSP)
0x2bcc1ffc	116:	sw	s5, 4(JSP)
0x2bcc2000	120:	sw	s6, 8(JSP)
0x2bcc2004	124:	sw	s7, 12(JSP)
0x2bcc2008	128:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.ChessPiece.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc200c	132:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc2010	136:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2014	140:	jalr	s7
0x2bcc2018	144:	nop
          		@ Captured a stackmap here.
0x2bcc201c	148:	lw	s7, -8(JFP)	@ Java local cell # 2
          		@ deferred comparison: 
0x2bcc2020	152:	bne	s7, zero, PC=0x2bcc2020	@ branch to block L1
0x2bcc2024	156:	nop
          		@ Do getfield:
0x2bcc2028	160:	lw	s5, -16(JFP)	@ Java local cell # 0
0x2bcc202c	164:	lw	s6, 108(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc2030	168:	lw	s4, 124(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc2034	172:	sw	s4, 0(JSP)
0x2bcc2038	176:	sw	s5, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc203c	180:	lw	s6, 0(s4)	@ Get object.cb
0x2bcc2040	184:	addiu	t7, zero, -4
0x2bcc2044	188:	and	s6, s6, t7
0x2bcc2048	192:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc204c	196:	lw	a0, 196(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc2050	200:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc2054	204:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2058	208:	jalr	s7
0x2bcc205c	212:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcc2060	216:	lw	s6, -16(JFP)	@ Java local cell # 0
0x2bcc2064	220:	lw	s7, 8(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc2068	224:	lw	s5, 60(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc206c	228:	lw	s4, 108(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc2070	232:	lw	ra, 168(s4)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc2074	236:	addu	s4, s5, ra
          		@ Do putfield:
0x2bcc2078	240:	sw	s4, 60(s7)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcc207c	244:	b	PC=0x2bcc207c	@ branch to block L2
0x2bcc2080	248:	nop
			@ Initial Temp REF set is 
	L1:	252:	@ entry point for branches
--->Fixed instruction at 152(0x2bcc2020) to reference 252
          		@ MAP_PC idepth=0 javaPc=44 compiledPc=252
0x2bcc2084	252:	lw	ra, -16(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcc2088	256:	lw	s7, 108(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc208c	260:	lw	s6, 128(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc2090	264:	sw	s6, 0(JSP)
0x2bcc2094	268:	sw	ra, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc2098	272:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc209c	276:	addiu	t7, zero, -4
0x2bcc20a0	280:	and	s7, s7, t7
0x2bcc20a4	284:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc20a8	288:	lw	a0, 196(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc20ac	292:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc20b0	296:	lw	s7, 0(a0)	@ call method through mb
0x2bcc20b4	300:	jalr	s7
0x2bcc20b8	304:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcc20bc	308:	lw	s6, -16(JFP)	@ Java local cell # 0
0x2bcc20c0	312:	lw	s7, 8(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc20c4	316:	lw	s5, 60(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc20c8	320:	lw	s4, 108(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc20cc	324:	lw	ra, 168(s4)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc20d0	328:	subu	s4, s5, ra
          		@ Do putfield:
0x2bcc20d4	332:	sw	s4, 60(s7)	@ putfield(obj, fieldOffset, value{I|F});
			@ Initial Temp REF set is 
	L2:	336:	@ entry point for branches
--->Fixed instruction at 244(0x2bcc207c) to reference 336
          		@ MAP_PC idepth=0 javaPc=74 compiledPc=336
0x2bcc20d8	336:	addiu	JSP, JFP, -16
0x2bcc20dc	340:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc20e0	344:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc20e4	348:	nop
0x2bcc20e8	352:	.word	9777944	@ mb com.sun.mep.bench.Chess.ChessPiece.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
--->Fixed instruction at 128(0x2bcc2008) to reference 352
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc1f88) >>>>>>>>
          		@ Capacity is 16 word(s)
0x2bcc1f88	0:	addiu	a1, JSP, 48
<<<<<<<<<Pop Code Buffer to PC = 356 (0x2bcc20ec) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc1fd8) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc1fd8	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc1fdc	84:	lui	CP, hi16(0x2bcc)
0x2bcc1fe0	88:	ori	CP, CP, lo16(0x2bcc20e8)
0x2bcc1fe4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 356 (0x2bcc20ec) <<<<<<<<<
JS: COMPILED: size=440 startPC=0x2bcc1f88 com.sun.mep.bench.Chess.Pawn.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
JS: ATTEMPTING TO COMPILE java.lang.StringBuffer.<init>(I)V
JS: COMPILING java.lang.StringBuffer.<init>(I)V
orig bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(1 0x0): 0- 

#################################################

The maximum node counts per root node are 3
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 6 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.lang.StringBuffer.<init>(I)V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x6f61f8):    aload_0 
<1>  (0x6f61f9):    invokenonvirtual_quick #8606 <java.lang.Object.<init>()V>
<4>  (0x6f61fc):    aload_0 
<5>  (0x6f61fd):    iload_1 
<6>  (0x6f61fe):    newarray char
<8>  (0x6f6200):    aputfield_quick #2
<11>  (0x6f6203):    aload_0 
<12>  (0x6f6204):    iconst_0 
<13>  (0x6f6205):    putfield_quick #4
<16>  (0x6f6208):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(1): 
	local(0)	ID(2)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 6) INVOKE (v) 
      <(ID: 5) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 3)
            <(ID: 12) LOCAL (reference)   0>
         <(ID: 4) NULL_PARAMETER (NONE) 
      <(ID: 3) CONST_MB (address field)  (java.lang.Object.<init>()V)

   <(ID: 8) IDENTITY (reference)  (ref count: 2)
      <(ID: 13) NEW_ARRAY_CHAR (reference) 
         <(ID: 7) LOCAL (int)   1>

   <(ID: 11) ASSIGN (reference) 
      <(ID: 10) FIELD_REF (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 3)
         <(ID: 9) CONST_FIELD_OFFSET (NONE)  (2)
      <(ID: 8) IDENTITY (reference)  (ref count: 2)

   <(ID: 17) ASSIGN (32-bit field) 
      <(ID: 16) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 3)
         <(ID: 15) CONST_FIELD_OFFSET (NONE)  (4)
      <(ID: 14) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 18) RETURN (v) 


NUM BARRIER BYTES = 16
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 110
ESTIMATED BUFFER SIZE = 232
CODE BUFFER ADDRESS = 0x2bcc2108
PC MAP TABLE ADDRESS = 0x2bcc2110
CODE ENTRY ADDRESS = 0x2bcc2138
          		@ Method prologue
0x2bcc2138	0:	addiu	a1, JSP, 40	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc213c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc2140	8:	sltu	t7, a1, CHUNKEND
0x2bcc2144	12:	bne	t7, zero, PC=0x2bcc2138	@ goto .skip
0x2bcc2148	16:	nop
0x2bcc214c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc2150	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc2144) >>>>>>>>
0x2bcc2144	12:	bne	t7, zero, PC=0x2bcc2154	@ goto .skip
0x2bcc2148	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc2154) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc2154	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcc2158	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc215c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc2160	40:	addiu	a3, zero, 0
0x2bcc2164	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc2168	48:	addiu	a3, zero, -1
0x2bcc216c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc2170	56:	move	a0, EE
0x2bcc2174	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc2178	64:	lui	t9, hi16(0x65)
0x2bcc217c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc2180	72:	jalr	t9
0x2bcc2184	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc2188	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc218c	84:	nop
0x2bcc2190	88:	nop
0x2bcc2194	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc2198	96:	lw	s4, -8(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
0x2bcc219c	100:	sw	s4, 0(JSP)
0x2bcc21a0	104:	lw	a0, 0(CP)	@ mb java.lang.Object.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc21a4	108:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc21a8	112:	lw	s7, 0(a0)	@ call method through mb
0x2bcc21ac	116:	jalr	s7
0x2bcc21b0	120:	nop
          		@ Captured a stackmap here.
0x2bcc21b4	124:	lw	a1, -4(JFP)	@ Java local cell # 1
          		@ Do newarray:
0x2bcc21b8	128:	lw	a2, 0(CP)	@ [C
0x2bcc21bc	132:	addiu	a0, zero, 2	@ array element size
0x2bcc21c0	136:	jal	PC=(0x2bcb88f8)	@ call CVMCCMruntimeNewArrayGlue
0x2bcc21c4	140:	nop
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcc21c8	144:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcc21cc	148:	addiu	s6, s7, 8	@ fieldAddr = obj + fieldOffset;
0x2bcc21d0	152:	sw	v0, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcc21d4	156:	lw	s5, 0(CP)	@ cardTableVirtualBase
0x2bcc21d8	160:	addiu	s4, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc21dc	164:	srl	t7, s6, 9	@ mark card table
0x2bcc21e0	168:	addu	t7, s5, t7	@ add indexReg and baseReg
0x2bcc21e4	172:	sb	s4, 0(t7)
          		@ Do putfield:
0x2bcc21e8	176:	sw	zero, 16(s7)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcc21ec	180:	addiu	JSP, JFP, -8
0x2bcc21f0	184:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc21f4	188:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc21f8	192:	nop
0x2bcc21fc	196:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 156(0x2bcc21d4) to reference 196
0x2bcc2200	200:	.word	8897532	@ cb [C
--->Fixed instruction at 128(0x2bcc21b8) to reference 200
0x2bcc2204	204:	.word	9064388	@ mb java.lang.Object.<init>()V
--->Fixed instruction at 104(0x2bcc21a0) to reference 204
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc2138) >>>>>>>>
          		@ Capacity is 12 word(s)
0x2bcc2138	0:	addiu	a1, JSP, 40
<<<<<<<<<Pop Code Buffer to PC = 208 (0x2bcc2208) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc2188) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc2188	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc218c	84:	lui	CP, hi16(0x2bcc)
0x2bcc2190	88:	ori	CP, CP, lo16(0x2bcc21fc)
0x2bcc2194	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 208 (0x2bcc2208) <<<<<<<<<
JS: COMPILED: size=276 startPC=0x2bcc2138 java.lang.StringBuffer.<init>(I)V
JS: ATTEMPTING TO COMPILE java.lang.String.<init>(Ljava/lang/StringBuffer;)V
JS: COMPILING java.lang.String.<init>(Ljava/lang/StringBuffer;)V
orig bkID(1) Incoming Locals(1 0x0): 0- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
orig bkID(1) Incoming Locals(1 0x0): 0- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
pre  bkID(1) Incoming Locals(1 0x0): 0- 
local(#0) swapped with local(#0)
post bkID(1) Incoming Locals(1 0x1): 0+ 

#################################################

The maximum node counts per root node are 4
IR block list contains 3 blocks in method
#################################################

*************************************************
*
* (block ID:1 block PC:0 )
* IR root list contains 14 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1
* Source: java.lang.String.<init>(Ljava/lang/StringBuffer;)V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<0>  (0x6cc6c0):    aload_0 
<1>  (0x6cc6c1):    invokenonvirtual_quick #8606 <java.lang.Object.<init>()V>
<4>  (0x6cc6c4):    aload_1 
<5>  (0x6cc6c5):    dup 
<6>  (0x6cc6c6):    astore_2 
<7>  (0x6cc6c7):    monitorenter 
<8>  (0x6cc6c8):    aload_1 
<9>  (0x6cc6c9):    invokenonvirtual_quick #11022 <java.lang.StringBuffer.setShared()V>
<12>  (0x6cc6cc):    aload_0 
<13>  (0x6cc6cd):    aload_1 
<14>  (0x6cc6ce):    invokenonvirtual_quick #7958 <java.lang.StringBuffer.getValue()[C>
<17>  (0x6cc6d1):    aputfield_quick #2
<20>  (0x6cc6d4):    aload_0 
<21>  (0x6cc6d5):    iconst_0 
<22>  (0x6cc6d6):    putfield_quick #3
<25>  (0x6cc6d9):    aload_0 
<26>  (0x6cc6da):    aload_1 
<27>  (0x6cc6db):    invokenonvirtual_quick #5505 <java.lang.StringBuffer.lengthNoSync()I>
<30>  (0x6cc6de):    putfield_quick #4
<33>  (0x6cc6e1):    aload_2 
<34>  (0x6cc6e2):    monitorexit 
<35>  (0x6cc6e3):    goto <43>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(1): 
	local(0)	ID(2)
 
Assigned Locals(1): 
	ASSIGN(12): local(2)	ID(11)	rhsID(7)
 
Successor Blocks(1): 
	ID(2) LocalOrder(1) AssignOrder(1) RefsOK(0) Locals()

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 6) INVOKE (v) 
      <(ID: 5) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
            <(ID: 26) LOCAL (reference)   0>
         <(ID: 4) NULL_PARAMETER (NONE) 
      <(ID: 3) CONST_MB (address field)  (java.lang.Object.<init>()V)

   <(ID: 8) MONITOR_ENTER (NONE) 
      <(ID: 7) IDENTITY (reference)  (ref count: 7)
         <(ID: 13) LOCAL (reference)   1>

   <(ID: 9) MAP_PC (NONE)   8>

   <(ID: 12) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 11) LOCAL (reference)   2>
      <(ID: 7) IDENTITY (reference)  (ref count: 7)

   <(ID: 18) INVOKE (v) 
      <(ID: 15) PARAMETER (reference) 
         <(ID: 7) IDENTITY (reference)  (ref count: 7)
         <(ID: 14) NULL_PARAMETER (NONE) 
      <(ID: 17) SEQUENCE_R (address field) 
         <(ID: 16) NULL_CHECK (reference) 
            <(ID: 7) IDENTITY (reference)  (ref count: 7)
         <(ID: 10) CONST_MB (address field)  (java.lang.StringBuffer.setShared()V)

   <(ID: 22) IDENTITY (reference)  (ref count: 2)
      <(ID: 27) INVOKE (reference) 
         <(ID: 21) PARAMETER (reference) 
            <(ID: 7) IDENTITY (reference)  (ref count: 7)
            <(ID: 20) NULL_PARAMETER (NONE) 
         <(ID: 19) CONST_MB (address field)  (java.lang.StringBuffer.getValue()[C)

   <(ID: 25) ASSIGN (reference) 
      <(ID: 24) FIELD_REF (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 23) CONST_FIELD_OFFSET (NONE)  (2)
      <(ID: 22) IDENTITY (reference)  (ref count: 2)

   <(ID: 31) ASSIGN (32-bit field) 
      <(ID: 30) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 29) CONST_FIELD_OFFSET (NONE)  (3)
      <(ID: 28) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 35) IDENTITY (int)  (ref count: 2)
      <(ID: 39) INVOKE (int) 
         <(ID: 34) PARAMETER (reference) 
            <(ID: 7) IDENTITY (reference)  (ref count: 7)
            <(ID: 33) NULL_PARAMETER (NONE) 
         <(ID: 32) CONST_MB (address field)  (java.lang.StringBuffer.lengthNoSync()I)

   <(ID: 38) ASSIGN (32-bit field) 
      <(ID: 37) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 36) CONST_FIELD_OFFSET (NONE)  (4)
      <(ID: 35) IDENTITY (int)  (ref count: 2)

   <(ID: 40) MONITOR_EXIT (NONE) 
      <(ID: 7) IDENTITY (reference)  (ref count: 7)

   <(ID: 41) MAP_PC (NONE)   35>

   <(ID: 42) GOTO (NONE) 
   target: (BlockID: 2 BlockPC: 43)


*************************************************
*
* (block ID:0 block PC:38 )
* IR root list contains 6 root nodes: in block 
* flags: 0x303
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.lang.String.<init>(Ljava/lang/StringBuffer;)V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<38>  (0x6cc6e6):    astore_3 
<39>  (0x6cc6e7):    aload_2 
<40>  (0x6cc6e8):    monitorexit 
<41>  (0x6cc6e9):    aload_3 
<42>  (0x6cc6ea):    athrow 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: -1 0

Assigned Locals(1): 
	ASSIGN(47): local(3)	ID(46)	rhsID(44)
 
   <(ID: 43) MAP_PC (NONE)   38>

   <(ID: 44) IDENTITY (reference)  (ref count: 3)
      <(ID: 48) EXCEPTION_OBJECT (reference) 

   <(ID: 47) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 46) LOCAL (reference)   3>
      <(ID: 44) IDENTITY (reference)  (ref count: 3)

   <(ID: 49) MONITOR_EXIT (NONE) 
      <(ID: 45) LOCAL (reference)   2>

   <(ID: 50) MAP_PC (NONE)   41>

   <(ID: 51) THROW (NONE) 
      <(ID: 44) IDENTITY (reference)  (ref count: 3)


*************************************************
*
* (block ID:2 block PC:43 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: java.lang.String.<init>(Ljava/lang/StringBuffer;)V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<43>  (0x6cc6eb):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 
*************************************************

Number and size of USED nodes in phi array: 0 0

   <(ID: 52) MAP_PC (NONE)   43>

   <(ID: 53) RETURN (v) 


NUM BARRIER BYTES = 16
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 272
ESTIMATED BUFFER SIZE = 412
CODE BUFFER ADDRESS = 0x2bcc221c
PC MAP TABLE ADDRESS = 0x2bcc2224
CODE ENTRY ADDRESS = 0x2bcc2260
          		@ Method prologue
0x2bcc2260	0:	addiu	a1, JSP, 48	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc2264	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc2268	8:	sltu	t7, a1, CHUNKEND
0x2bcc226c	12:	bne	t7, zero, PC=0x2bcc2260	@ goto .skip
0x2bcc2270	16:	nop
0x2bcc2274	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc2278	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc226c) >>>>>>>>
0x2bcc226c	12:	bne	t7, zero, PC=0x2bcc227c	@ goto .skip
0x2bcc2270	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc227c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc227c	28:	sw	JFP, 8(JSP)	@ Store curr JFP into new frame
0x2bcc2280	32:	addiu	JFP, JSP, 8	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc2284	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc2288	40:	addiu	a3, zero, 0
0x2bcc228c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc2290	48:	addiu	a3, zero, -1
0x2bcc2294	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc2298	56:	move	a0, EE
0x2bcc229c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc22a0	64:	lui	t9, hi16(0x65)
0x2bcc22a4	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc22a8	72:	jalr	t9
0x2bcc22ac	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc22b0	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc22b4	84:	nop
0x2bcc22b8	88:	nop
0x2bcc22bc	92:	nop
			@ Initial Temp REF set is 
	L1:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc22c0	96:	lw	s4, -16(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
0x2bcc22c4	100:	sw	s4, 0(JSP)
0x2bcc22c8	104:	lw	a0, 0(CP)	@ mb java.lang.Object.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc22cc	108:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc22d0	112:	lw	s7, 0(a0)	@ call method through mb
0x2bcc22d4	116:	jalr	s7
0x2bcc22d8	120:	nop
          		@ Captured a stackmap here.
0x2bcc22dc	124:	lw	a2, -12(JFP)	@ Java local cell # 1
0x2bcc22e0	128:	jal	PC=(0x2bcb856c)	@ call CVMCCMruntimeMonitorEnterGlue
0x2bcc22e4	132:	nop
          		@ Captured a stackmap here.
          		@ MAP_PC idepth=0 javaPc=8 compiledPc=136
0x2bcc22e8	136:	lw	s7, -12(JFP)	@ Java local cell # 1
0x2bcc22ec	140:	sw	s7, -8(JFP)	@ Java local cell # 2
0x2bcc22f0	144:	sw	s7, 0(JSP)
0x2bcc22f4	148:	lw	s6, 0(s7)	@ NULL check
0x2bcc22f8	152:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.setShared()V
          		@ Invoke a method w/ a void return type
0x2bcc22fc	156:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc2300	160:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2304	164:	jalr	s7
0x2bcc2308	168:	nop
          		@ Captured a stackmap here.
0x2bcc230c	172:	lw	s7, -12(JFP)	@ Java local cell # 1
0x2bcc2310	176:	sw	s7, 0(JSP)
0x2bcc2314	180:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.getValue()[C
          		@ Invoke a method w/ a 32bit return type
0x2bcc2318	184:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc231c	188:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2320	192:	jalr	s7
0x2bcc2324	196:	nop
          		@ Captured a stackmap here.
0x2bcc2328	200:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc232c	204:	lw	s7, 0(JSP)
          		@ Do putfield:
0x2bcc2330	208:	lw	s6, -16(JFP)	@ Java local cell # 0
0x2bcc2334	212:	addiu	s5, s6, 8	@ fieldAddr = obj + fieldOffset;
0x2bcc2338	216:	sw	s7, 0(s5)	@ putfield(fieldAddr, valueObj);
0x2bcc233c	220:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc2340	224:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc2344	228:	srl	t7, s5, 9	@ mark card table
0x2bcc2348	232:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc234c	236:	sb	ra, 0(t7)
          		@ Do putfield:
0x2bcc2350	240:	sw	zero, 12(s6)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcc2354	244:	lw	s7, -12(JFP)	@ Java local cell # 1
0x2bcc2358	248:	sw	s7, 0(JSP)
0x2bcc235c	252:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.lengthNoSync()I
          		@ Invoke a method w/ a 32bit return type
0x2bcc2360	256:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc2364	260:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2368	264:	jalr	s7
0x2bcc236c	268:	nop
          		@ Captured a stackmap here.
0x2bcc2370	272:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2374	276:	lw	s7, 0(JSP)
          		@ Do putfield:
0x2bcc2378	280:	lw	s6, -16(JFP)	@ Java local cell # 0
0x2bcc237c	284:	sw	s7, 16(s6)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcc2380	288:	lw	a2, -12(JFP)	@ Java local cell # 1
0x2bcc2384	292:	jal	PC=(0x2bcb8674)	@ call CVMCCMruntimeMonitorExitGlue
0x2bcc2388	296:	nop
          		@ Captured a stackmap here.
          		@ MAP_PC idepth=0 javaPc=35 compiledPc=300
0x2bcc238c	300:	b	PC=0x2bcc238c	@ branch to block L2
0x2bcc2390	304:	nop
			@ Initial Temp REF set is 
	L0:	308:	@ entry point for exception handler
          		@ Captured a stackmap here.
          		@ MAP_PC idepth=0 javaPc=38 compiledPc=308
0x2bcc2394	308:	sw	a0, -4(JFP)	@ Java local cell # 3
0x2bcc2398	312:	lw	a2, -8(JFP)	@ Java local cell # 2
0x2bcc239c	316:	jal	PC=(0x2bcb8674)	@ call CVMCCMruntimeMonitorExitGlue
0x2bcc23a0	320:	nop
          		@ Captured a stackmap here.
          		@ MAP_PC idepth=0 javaPc=41 compiledPc=324
0x2bcc23a4	324:	lw	a2, -4(JFP)	@ Java local cell # 3
0x2bcc23a8	328:	jal	PC=(0x2bcb8138)	@ goto CVMCCMruntimeThrowObjectGlue
0x2bcc23ac	332:	nop
			@ Initial Temp REF set is 
	L2:	336:	@ entry point for branches
--->Fixed instruction at 300(0x2bcc238c) to reference 336
          		@ MAP_PC idepth=0 javaPc=43 compiledPc=336
0x2bcc23b0	336:	addiu	JSP, JFP, -16
0x2bcc23b4	340:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc23b8	344:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc23bc	348:	nop
0x2bcc23c0	352:	.word	9109108	@ mb java.lang.StringBuffer.lengthNoSync()I
--->Fixed instruction at 252(0x2bcc235c) to reference 352
0x2bcc23c4	356:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 220(0x2bcc233c) to reference 356
0x2bcc23c8	360:	.word	9110396	@ mb java.lang.StringBuffer.getValue()[C
--->Fixed instruction at 180(0x2bcc2314) to reference 360
0x2bcc23cc	364:	.word	9110368	@ mb java.lang.StringBuffer.setShared()V
--->Fixed instruction at 152(0x2bcc22f8) to reference 364
0x2bcc23d0	368:	.word	9064388	@ mb java.lang.Object.<init>()V
--->Fixed instruction at 104(0x2bcc22c8) to reference 368
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc2260) >>>>>>>>
          		@ Capacity is 14 word(s)
0x2bcc2260	0:	addiu	a1, JSP, 48
<<<<<<<<<Pop Code Buffer to PC = 372 (0x2bcc23d4) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc22b0) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc22b0	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc22b4	84:	lui	CP, hi16(0x2bcc)
0x2bcc22b8	88:	ori	CP, CP, lo16(0x2bcc23c0)
0x2bcc22bc	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 372 (0x2bcc23d4) <<<<<<<<<
JS: COMPILED: size=496 startPC=0x2bcc2260 java.lang.String.<init>(Ljava/lang/StringBuffer;)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.Actor.<init>(Lcom/sun/mep/bench/Chess/Game;)V
JS: COMPILING com.sun.mep.bench.Chess.Actor.<init>(Lcom/sun/mep/bench/Chess/Game;)V
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 

#################################################

The maximum node counts per root node are 7
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 19 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Actor.<init>(Lcom/sun/mep/bench/Chess/Game;)V(Actor.java:148)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x955cd0):    aload_0 
<1>  (0x955cd1):    invokeignored_quick 
<4>  (0x955cd4):    aload_0 
<5>  (0x955cd5):    aconst_null 
<6>  (0x955cd6):    aputfield_quick #3
<9>  (0x955cd9):    aload_0 
<10>  (0x955cda):    aconst_null 
<11>  (0x955cdb):    aputfield_quick #4
<14>  (0x955cde):    aload_0 
<15>  (0x955cdf):    iconst_0 
<16>  (0x955ce0):    putfield_quick #14
<19>  (0x955ce3):    aload_0 
<20>  (0x955ce4):    iconst_1 
<21>  (0x955ce5):    putfield_quick #15
<24>  (0x955ce8):    aload_0 
<25>  (0x955ce9):    iconst_1 
<26>  (0x955cea):    putfield_quick #16
<29>  (0x955ced):    aload_0 
<30>  (0x955cee):    iconst_1 
<31>  (0x955cef):    putfield_quick #17
<34>  (0x955cf2):    aload_0 
<35>  (0x955cf3):    iconst_0 
<36>  (0x955cf4):    putfield_quick #18
<39>  (0x955cf7):    aload_0 
<40>  (0x955cf8):    aload_1 
<41>  (0x955cf9):    aputfield_quick #2
<44>  (0x955cfc):    aload_0 
<45>  (0x955cfd):    new_quick #10 <com.sun.mep.bench.Chess.Rectangle>
<48>  (0x955d00):    dup 
<49>  (0x955d01):    iconst_0 
<50>  (0x955d02):    iconst_0 
<51>  (0x955d03):    iconst_0 
<52>  (0x955d04):    iconst_0 
<53>  (0x955d05):    invokenonvirtual_quick #11 <com.sun.mep.bench.Chess.Rectangle.<init>(IIII)V>
<56>  (0x955d08):    aputfield_quick #5
<59>  (0x955d0b):    aload_0 
<60>  (0x955d0c):    invokevirtual_quick_w #13 <com.sun.mep.bench.Chess.Actor.notifyForEvents()V>
<63>  (0x955d0f):    aload_0 
<64>  (0x955d10):    invokevirtual_quick_w #14 <com.sun.mep.bench.Chess.Actor.createMovementHandler()V>
<67>  (0x955d13):    aload_0 
<68>  (0x955d14):    invokevirtual_quick_w #15 <com.sun.mep.bench.Chess.Actor.createBoundaryHandler()V>
<71>  (0x955d17):    aload_0 
<72>  (0x955d18):    aload_0 
<73>  (0x955d19):    getfield_quick #17
<76>  (0x955d1c):    invokevirtual_quick_w #16 <com.sun.mep.bench.Chess.Actor.setFixed(Z)V>
<79>  (0x955d1f):    aload_0 
<80>  (0x955d20):    invokevirtual_quick_w #17 <com.sun.mep.bench.Chess.Actor.registerActor()V>
<83>  (0x955d23):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(32)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(32)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 6) ASSIGN (reference) 
      <(ID: 5) FIELD_REF (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 20)
            <(ID: 11) LOCAL (reference)   0>
         <(ID: 4) CONST_FIELD_OFFSET (NONE)  (3)
      <(ID: 3) CONST_STRING_OBJECT (reference)  (stringObject 0x0)


   <(ID: 10) ASSIGN (reference) 
      <(ID: 9) FIELD_REF (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 8) CONST_FIELD_OFFSET (NONE)  (4)
      <(ID: 7) CONST_STRING_OBJECT (reference)  (stringObject 0x0)


   <(ID: 15) ASSIGN (32-bit field) 
      <(ID: 14) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 13) CONST_FIELD_OFFSET (NONE)  (14)
      <(ID: 12) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 19) ASSIGN (32-bit field) 
      <(ID: 18) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 17) CONST_FIELD_OFFSET (NONE)  (15)
      <(ID: 16) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 23) ASSIGN (32-bit field) 
      <(ID: 22) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 21) CONST_FIELD_OFFSET (NONE)  (16)
      <(ID: 20) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 27) ASSIGN (32-bit field) 
      <(ID: 26) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 25) CONST_FIELD_OFFSET (NONE)  (17)
      <(ID: 24) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 31) ASSIGN (32-bit field) 
      <(ID: 30) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 29) CONST_FIELD_OFFSET (NONE)  (18)
      <(ID: 28) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 35) ASSIGN (reference) 
      <(ID: 34) FIELD_REF (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 33) CONST_FIELD_OFFSET (NONE)  (2)
      <(ID: 32) LOCAL (reference)   1>

   <(ID: 37) IDENTITY (reference)  (ref count: 3)
      <(ID: 50) NEW_OBJECT (reference) 
         <(ID: 36) CONST_CB (address field)  (com.sun.mep.bench.Chess.Rectangle)

   <(ID: 49) INVOKE (v) 
      <(ID: 48) PARAMETER (reference) 
         <(ID: 37) IDENTITY (reference)  (ref count: 3)
         <(ID: 47) PARAMETER (int) 
            <(ID: 38) CONST_JAVA_NUMERIC32 (int)  (0)
            <(ID: 46) PARAMETER (int) 
               <(ID: 39) CONST_JAVA_NUMERIC32 (int)  (0)
               <(ID: 45) PARAMETER (int) 
                  <(ID: 40) CONST_JAVA_NUMERIC32 (int)  (0)
                  <(ID: 44) PARAMETER (int) 
                     <(ID: 41) CONST_JAVA_NUMERIC32 (int)  (0)
                     <(ID: 43) NULL_PARAMETER (NONE) 
      <(ID: 42) CONST_MB (address field)  (com.sun.mep.bench.Chess.Rectangle.<init>(IIII)V)

   <(ID: 53) ASSIGN (reference) 
      <(ID: 52) FIELD_REF (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 51) CONST_FIELD_OFFSET (NONE)  (5)
      <(ID: 37) IDENTITY (reference)  (ref count: 3)

   <(ID: 59) INVOKE (v) 
      <(ID: 56) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 55) NULL_PARAMETER (NONE) 
      <(ID: 58) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 57) GET_VTBL (NONE) 
            <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 54) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 16)

   <(ID: 65) INVOKE (v) 
      <(ID: 62) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 61) NULL_PARAMETER (NONE) 
      <(ID: 64) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 63) GET_VTBL (NONE) 
            <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 60) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 14)

   <(ID: 71) INVOKE (v) 
      <(ID: 68) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 67) NULL_PARAMETER (NONE) 
      <(ID: 70) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 69) GET_VTBL (NONE) 
            <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 66) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 15)

   <(ID: 74) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 82) FETCH (32-bit field) 
         <(ID: 73) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 20)
            <(ID: 72) CONST_FIELD_OFFSET (NONE)  (17)

   <(ID: 81) INVOKE (v) 
      <(ID: 78) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 77) PARAMETER (32-bit field) 
            <(ID: 74) IDENTITY (32-bit field)  (ref count: 2)
            <(ID: 76) NULL_PARAMETER (NONE) 
      <(ID: 80) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 79) GET_VTBL (NONE) 
            <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 75) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 12)

   <(ID: 88) INVOKE (v) 
      <(ID: 85) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 84) NULL_PARAMETER (NONE) 
      <(ID: 87) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 86) GET_VTBL (NONE) 
            <(ID: 2) IDENTITY (reference)  (ref count: 20)
         <(ID: 83) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 13)

   <(ID: 89) RETURN (v) 


NUM BARRIER BYTES = 64
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 100
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 512
ESTIMATED BUFFER SIZE = 780
CODE BUFFER ADDRESS = 0x2bcc240c
PC MAP TABLE ADDRESS = 0x2bcc2414
CODE ENTRY ADDRESS = 0x2bcc2438
          		@ Method prologue
0x2bcc2438	0:	addiu	a1, JSP, 60	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc243c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc2440	8:	sltu	t7, a1, CHUNKEND
0x2bcc2444	12:	bne	t7, zero, PC=0x2bcc2438	@ goto .skip
0x2bcc2448	16:	nop
0x2bcc244c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc2450	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc2444) >>>>>>>>
0x2bcc2444	12:	bne	t7, zero, PC=0x2bcc2454	@ goto .skip
0x2bcc2448	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc2454) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc2454	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcc2458	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc245c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc2460	40:	addiu	a3, zero, 0
0x2bcc2464	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc2468	48:	addiu	a3, zero, -1
0x2bcc246c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc2470	56:	move	a0, EE
0x2bcc2474	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc2478	64:	lui	t9, hi16(0x65)
0x2bcc247c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc2480	72:	jalr	t9
0x2bcc2484	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc2488	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc248c	84:	nop
0x2bcc2490	88:	nop
0x2bcc2494	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc2498	96:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcc249c	100:	lw	s5, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
          		@ Do putfield:
0x2bcc24a0	104:	addiu	s7, s4, 12	@ fieldAddr = obj + fieldOffset;
0x2bcc24a4	108:	sw	zero, 0(s7)	@ putfield(fieldAddr, valueObj);
0x2bcc24a8	112:	lw	s6, 0(CP)	@ cardTableVirtualBase
0x2bcc24ac	116:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc24b0	120:	srl	t7, s7, 9	@ mark card table
0x2bcc24b4	124:	addu	t7, s6, t7	@ add indexReg and baseReg
0x2bcc24b8	128:	sb	ra, 0(t7)
          		@ Do putfield:
0x2bcc24bc	132:	addiu	s7, s4, 16	@ fieldAddr = obj + fieldOffset;
0x2bcc24c0	136:	sw	zero, 0(s7)	@ putfield(fieldAddr, valueObj);
0x2bcc24c4	140:	srl	t7, s7, 9	@ mark card table
0x2bcc24c8	144:	addu	t7, s6, t7	@ add indexReg and baseReg
0x2bcc24cc	148:	sb	ra, 0(t7)
          		@ Do putfield:
0x2bcc24d0	152:	sw	zero, 56(s4)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do putfield:
0x2bcc24d4	156:	sw	ra, 60(s4)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do putfield:
0x2bcc24d8	160:	sw	ra, 64(s4)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do putfield:
0x2bcc24dc	164:	sw	ra, 68(s4)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do putfield:
0x2bcc24e0	168:	sw	zero, 72(s4)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do putfield:
0x2bcc24e4	172:	addiu	s7, s4, 8	@ fieldAddr = obj + fieldOffset;
0x2bcc24e8	176:	sw	s5, 0(s7)	@ putfield(fieldAddr, valueObj);
0x2bcc24ec	180:	srl	t7, s7, 9	@ mark card table
0x2bcc24f0	184:	addu	t7, s6, t7	@ add indexReg and baseReg
0x2bcc24f4	188:	sb	ra, 0(t7)
0x2bcc24f8	192:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Rectangle
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Rectangle
0x2bcc24fc	196:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc2500	200:	nop
          		@ Captured a stackmap here.
0x2bcc2504	204:	sw	v0, 0(JSP)
0x2bcc2508	208:	sw	zero, 4(JSP)
0x2bcc250c	212:	sw	zero, 8(JSP)
0x2bcc2510	216:	sw	zero, 12(JSP)
0x2bcc2514	220:	sw	zero, 16(JSP)
0x2bcc2518	224:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Rectangle.<init>(IIII)V
          		@ Invoke a method w/ a void return type
0x2bcc251c	228:	addiu	JSP, JSP, 20	@ adjust JSP before method call
0x2bcc2520	232:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc2524	236:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2528	240:	jalr	s7
0x2bcc252c	244:	nop
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcc2530	248:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcc2534	252:	addiu	s6, s7, 20	@ fieldAddr = obj + fieldOffset;
0x2bcc2538	256:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcc253c	260:	sw	s5, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcc2540	264:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc2544	268:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc2548	272:	srl	t7, s6, 9	@ mark card table
0x2bcc254c	276:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc2550	280:	sb	ra, 0(t7)
0x2bcc2554	284:	sw	s7, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc2558	288:	lw	s6, 0(s7)	@ Get object.cb
0x2bcc255c	292:	addiu	t7, zero, -4
0x2bcc2560	296:	and	s6, s6, t7
0x2bcc2564	300:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc2568	304:	lw	a0, 64(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc256c	308:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc2570	312:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2574	316:	jalr	s7
0x2bcc2578	320:	nop
          		@ Captured a stackmap here.
0x2bcc257c	324:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcc2580	328:	sw	s7, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc2584	332:	lw	s6, 0(s7)	@ Get object.cb
0x2bcc2588	336:	addiu	t7, zero, -4
0x2bcc258c	340:	and	s6, s6, t7
0x2bcc2590	344:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc2594	348:	lw	a0, 56(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc2598	352:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc259c	356:	lw	s7, 0(a0)	@ call method through mb
0x2bcc25a0	360:	jalr	s7
0x2bcc25a4	364:	nop
          		@ Captured a stackmap here.
0x2bcc25a8	368:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcc25ac	372:	sw	s7, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc25b0	376:	lw	s6, 0(s7)	@ Get object.cb
0x2bcc25b4	380:	addiu	t7, zero, -4
0x2bcc25b8	384:	and	s6, s6, t7
0x2bcc25bc	388:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc25c0	392:	lw	a0, 60(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc25c4	396:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc25c8	400:	lw	s7, 0(a0)	@ call method through mb
0x2bcc25cc	404:	jalr	s7
0x2bcc25d0	408:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcc25d4	412:	lw	s6, -8(JFP)	@ Java local cell # 0
0x2bcc25d8	416:	lw	s7, 68(s6)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc25dc	420:	sw	s6, 0(JSP)
0x2bcc25e0	424:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc25e4	428:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc25e8	432:	addiu	t7, zero, -4
0x2bcc25ec	436:	and	s7, s7, t7
0x2bcc25f0	440:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc25f4	444:	lw	a0, 48(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc25f8	448:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc25fc	452:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2600	456:	jalr	s7
0x2bcc2604	460:	nop
          		@ Captured a stackmap here.
0x2bcc2608	464:	lw	s7, -8(JFP)	@ Java local cell # 0
0x2bcc260c	468:	sw	s7, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc2610	472:	lw	s6, 0(s7)	@ Get object.cb
0x2bcc2614	476:	addiu	t7, zero, -4
0x2bcc2618	480:	and	s6, s6, t7
0x2bcc261c	484:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc2620	488:	lw	a0, 52(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc2624	492:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc2628	496:	lw	s7, 0(a0)	@ call method through mb
0x2bcc262c	500:	jalr	s7
0x2bcc2630	504:	nop
          		@ Captured a stackmap here.
0x2bcc2634	508:	addiu	JSP, JFP, -8
0x2bcc2638	512:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc263c	516:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc2640	520:	nop
0x2bcc2644	524:	.word	9786576	@ mb com.sun.mep.bench.Chess.Rectangle.<init>(IIII)V
--->Fixed instruction at 224(0x2bcc2518) to reference 524
0x2bcc2648	528:	.word	9786344	@ cb com.sun.mep.bench.Chess.Rectangle
--->Fixed instruction at 192(0x2bcc24f8) to reference 528
0x2bcc264c	532:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 264(0x2bcc2540) to reference 532
--->Fixed instruction at 112(0x2bcc24a8) to reference 532
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc2438) >>>>>>>>
          		@ Capacity is 18 word(s)
0x2bcc2438	0:	addiu	a1, JSP, 64
<<<<<<<<<Pop Code Buffer to PC = 536 (0x2bcc2650) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc2488) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcc2488	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcc248c	84:	lui	CP, hi16(0x2bcc)
0x2bcc2490	88:	ori	CP, CP, lo16(0x2bcc2644)
0x2bcc2494	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 536 (0x2bcc2650) <<<<<<<<<
JS: COMPILED: size=632 startPC=0x2bcc2438 com.sun.mep.bench.Chess.Actor.<init>(Lcom/sun/mep/bench/Chess/Game;)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V
JS: COMPILING com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V
orig bkID(7) Incoming Locals(1 0x0): 0- 
o1   bkID(7) Incoming Locals(1 0x0): 0- 
o1   bkID(7) Incoming Locals(1 0x0): 0- 
o1   bkID(7) Incoming Locals(1 0x0): 0- 
orig bkID(13) Incoming Locals(1 0x0): 0- 
o1   bkID(13) Incoming Locals(1 0x0): 0- 
orig bkID(18) Incoming Locals(1 0x0): 0- 
o1   bkID(18) Incoming Locals(1 0x0): 0- 
orig bkID(17) Incoming Locals(2 0x0): 7- 0- 
o1   bkID(17) Incoming Locals(1 0x0): 7- 
s1   bkID(17) Incoming Locals(2 0x0): 7- 0- 
o1   bkID(17) Incoming Locals(2 0x0): 7- 0- 
orig bkID(14) Incoming Locals(3 0x0): 12- 6- 7- 
o1   bkID(14) Incoming Locals(2 0x0): 12- 6- 
s1   bkID(14) Incoming Locals(3 0x0): 12- 6- 7- 
s1   bkID(14) Incoming Locals(4 0x0): 12- 6- 7- 0- 
o1   bkID(14) Incoming Locals(4 0x0): 12- 6- 7- 0- 
s1   bkID(14) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
o1   bkID(14) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
orig bkID(16) Incoming Locals(1 0x0): 12- 
o1   bkID(16) Incoming Locals(1 0x0): 12- 
s1   bkID(16) Incoming Locals(2 0x0): 12- 6- 
s1   bkID(16) Incoming Locals(3 0x0): 12- 6- 7- 
s1   bkID(16) Incoming Locals(4 0x0): 12- 6- 7- 0- 
s1   bkID(16) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
o1   bkID(16) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
orig bkID(15) Incoming Locals(1 0x0): 3- 
o1   bkID(15) Incoming Locals(1 0x0): 3- 
orig bkID(6) Incoming Locals(1 0x0): 1- 
o1   bkID(6) Incoming Locals(1 0x0): 1- 
orig bkID(12) Incoming Locals(1 0x0): 0- 
o1   bkID(12) Incoming Locals(1 0x0): 0- 
orig bkID(11) Incoming Locals(2 0x0): 7- 0- 
o1   bkID(11) Incoming Locals(1 0x0): 7- 
s1   bkID(11) Incoming Locals(2 0x0): 7- 0- 
o1   bkID(11) Incoming Locals(2 0x0): 7- 0- 
orig bkID(8) Incoming Locals(3 0x0): 12- 6- 7- 
o1   bkID(8) Incoming Locals(2 0x0): 12- 6- 
s1   bkID(8) Incoming Locals(3 0x0): 12- 6- 7- 
s1   bkID(8) Incoming Locals(4 0x0): 12- 6- 7- 0- 
o1   bkID(8) Incoming Locals(4 0x0): 12- 6- 7- 0- 
s1   bkID(8) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
o1   bkID(8) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
orig bkID(10) Incoming Locals(1 0x0): 12- 
o1   bkID(10) Incoming Locals(1 0x0): 12- 
s1   bkID(10) Incoming Locals(2 0x0): 12- 6- 
s1   bkID(10) Incoming Locals(3 0x0): 12- 6- 7- 
s1   bkID(10) Incoming Locals(4 0x0): 12- 6- 7- 0- 
s1   bkID(10) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
o1   bkID(10) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
orig bkID(9) Incoming Locals(1 0x0): 3- 
o1   bkID(9) Incoming Locals(1 0x0): 3- 
orig bkID(4) Incoming Locals(2 0x0): 0- 2- 
o1   bkID(4) Incoming Locals(2 0x0): 0- 2- 
orig bkID(1) Incoming Locals(1 0x0): 0- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
orig bkID(3) Incoming Locals(1 0x0): 0- 
o1   bkID(3) Incoming Locals(1 0x0): 0- 
o1   bkID(3) Incoming Locals(1 0x0): 0- 
orig bkID(7) Incoming Locals(1 0x0): 0- 
o1   bkID(7) Incoming Locals(1 0x0): 0- 
o1   bkID(7) Incoming Locals(1 0x0): 0- 
o1   bkID(7) Incoming Locals(1 0x0): 0- 
orig bkID(13) Incoming Locals(1 0x0): 0- 
o1   bkID(13) Incoming Locals(1 0x0): 0- 
orig bkID(18) Incoming Locals(1 0x0): 0- 
o1   bkID(18) Incoming Locals(1 0x0): 0- 
orig bkID(17) Incoming Locals(2 0x0): 7- 0- 
o1   bkID(17) Incoming Locals(1 0x0): 7- 
s1   bkID(17) Incoming Locals(2 0x0): 7- 0- 
o1   bkID(17) Incoming Locals(2 0x0): 7- 0- 
orig bkID(14) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
o1   bkID(14) Incoming Locals(2 0x0): 12- 6- 
s1   bkID(14) Incoming Locals(3 0x0): 12- 6- 7- 
s1   bkID(14) Incoming Locals(4 0x0): 12- 6- 7- 0- 
o1   bkID(14) Incoming Locals(4 0x0): 12- 6- 7- 0- 
s1   bkID(14) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
o1   bkID(14) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
orig bkID(16) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
o1   bkID(16) Incoming Locals(1 0x0): 12- 
s1   bkID(16) Incoming Locals(2 0x0): 12- 6- 
s1   bkID(16) Incoming Locals(3 0x0): 12- 6- 7- 
s1   bkID(16) Incoming Locals(4 0x0): 12- 6- 7- 0- 
s1   bkID(16) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
o1   bkID(16) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
orig bkID(15) Incoming Locals(1 0x0): 3- 
o1   bkID(15) Incoming Locals(1 0x0): 3- 
orig bkID(6) Incoming Locals(1 0x0): 1- 
o1   bkID(6) Incoming Locals(1 0x0): 1- 
orig bkID(12) Incoming Locals(1 0x0): 0- 
o1   bkID(12) Incoming Locals(1 0x0): 0- 
orig bkID(11) Incoming Locals(2 0x0): 7- 0- 
o1   bkID(11) Incoming Locals(1 0x0): 7- 
s1   bkID(11) Incoming Locals(2 0x0): 7- 0- 
o1   bkID(11) Incoming Locals(2 0x0): 7- 0- 
orig bkID(8) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
o1   bkID(8) Incoming Locals(2 0x0): 12- 6- 
s1   bkID(8) Incoming Locals(3 0x0): 12- 6- 7- 
s1   bkID(8) Incoming Locals(4 0x0): 12- 6- 7- 0- 
o1   bkID(8) Incoming Locals(4 0x0): 12- 6- 7- 0- 
s1   bkID(8) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
o1   bkID(8) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
orig bkID(10) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
o1   bkID(10) Incoming Locals(1 0x0): 12- 
s1   bkID(10) Incoming Locals(2 0x0): 12- 6- 
s1   bkID(10) Incoming Locals(3 0x0): 12- 6- 7- 
s1   bkID(10) Incoming Locals(4 0x0): 12- 6- 7- 0- 
s1   bkID(10) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
o1   bkID(10) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
orig bkID(9) Incoming Locals(1 0x0): 3- 
o1   bkID(9) Incoming Locals(1 0x0): 3- 
orig bkID(4) Incoming Locals(2 0x0): 0- 2- 
o1   bkID(4) Incoming Locals(2 0x0): 0- 2- 
orig bkID(1) Incoming Locals(1 0x0): 0- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
orig bkID(3) Incoming Locals(1 0x0): 0- 
o1   bkID(3) Incoming Locals(1 0x0): 0- 
o1   bkID(3) Incoming Locals(1 0x0): 0- 
bkID(7) local(0 #0)  not found in goalBk
bkID(7) local(0 #0)  not found in goalBk
bkID(17) local(0 #7)  not found in goalBk
bkID(17) local(1 #0)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(17) Incoming Locals(2 0x0): 7- 0- 
+bk  bkID(17) Incoming Locals(2 0x1): 0+ 7- 
-gbk bkID(18) Incoming Locals(1 0x0): 0- 
+gbk bkID(18) Incoming Locals(1 0x1): 0+ 
bkID(17) local(1 #7)  not found in goalBk
bkID(14) local(0 #12)  not found in goalBk
bkID(14) local(1 #6)  not found in goalBk
bkID(14) local(2 #7)  not ordered
bestLocal(1) bestLocalScore(24)
-bk  bkID(14) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
+bk  bkID(14) Incoming Locals(5 0x2): 12- 7+ 6- 0- 3- 
-gbk bkID(17) Incoming Locals(2 0x1): 0+ 7- 
+gbk bkID(17) Incoming Locals(2 0x3): 0+ 7+ 
bkID(14) local(2 #6)  not found in goalBk
bkID(14) local(3 #0)  ordered in goalBk(17)
-bk  bkID(14) Incoming Locals(5 0x2): 12- 7+ 6- 0- 3- 
dstBk(14) local(0 0) found in slot(3)
local(#0) swapped with local(#3)
+bk  bkID(14) Incoming Locals(5 0x3): 0+ 7+ 6- 12- 3- 
bkID(14) local(4 #3)  not found in goalBk
bkID(14) local(0 #0)  not found in goalBk
bkID(14) local(1 #7)  not found in goalBk
bkID(14) local(2 #6)  not found in goalBk
bkID(14) local(3 #12)  not found in goalBk
bkID(14) local(4 #3)  not ordered
bestLocal(2) bestLocalScore(8)
-bk  bkID(14) Incoming Locals(5 0x3): 0+ 7+ 6- 12- 3- 
+bk  bkID(14) Incoming Locals(5 0x7): 0+ 7+ 3+ 12- 6- 
-gbk bkID(15) Incoming Locals(1 0x0): 3- 
+gbk bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
bkID(14) local(4 #6)  not found in goalBk
bkID(15) local(2 #3)  not found in goalBk
Pushing blockID(15)
bkID(16) local(0 #12)  not ordered
bestLocal(3) bestLocalScore(24)
-bk  bkID(16) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
+bk  bkID(16) Incoming Locals(5 0x8): 0- 6- 7- 12+ 3- 
-gbk bkID(14) Incoming Locals(5 0x7): 0+ 7+ 3+ 12- 6- 
+gbk bkID(14) Incoming Locals(5 0xf): 0+ 7+ 3+ 12+ 6- 
bkID(16) local(0 #0)  ordered in goalBk(14)
-bk  bkID(16) Incoming Locals(5 0x8): 0- 6- 7- 12+ 3- 
dstBk(16) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(16) Incoming Locals(5 0x9): 0+ 6- 7- 12+ 3- 
 ordered in bk
-gbk bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
+gbk bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
-gbk bkID(14) Incoming Locals(5 0xf): 0+ 7+ 3+ 12+ 6- 
dstBk(14) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(14) Incoming Locals(5 0xf): 0+ 7+ 3+ 12+ 6- 
bkID(16) local(1 #6)  not ordered
bestLocal(4) bestLocalScore(24)
-bk  bkID(16) Incoming Locals(5 0x9): 0+ 6- 7- 12+ 3- 
+bk  bkID(16) Incoming Locals(5 0x19): 0+ 3- 7- 12+ 6+ 
-gbk bkID(14) Incoming Locals(5 0xf): 0+ 7+ 3+ 12+ 6- 
+gbk bkID(14) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
bkID(16) local(1 #3)  ordered in goalBk(14)
-bk  bkID(16) Incoming Locals(5 0x19): 0+ 3- 7- 12+ 6+ 
dstBk(16) local(2 3) found in slot(1)
local(#2) swapped with local(#1)
+bk  bkID(16) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
bkID(16) local(2 #3)  ordered in goalBk(14)
-bk  bkID(16) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
dstBk(16) local(2 3) found in slot(2)
local(2 3) same slot
+bk  bkID(16) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
 ordered in bk
-gbk bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
dstBk(15) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
-gbk bkID(14) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
dstBk(14) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(14) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
bkID(16) local(3 #12)  ordered in goalBk(14)
-bk  bkID(16) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
dstBk(16) local(3 12) found in slot(3)
local(3 12) same slot
+bk  bkID(16) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
 ordered in bk
-gbk bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
+gbk bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
-gbk bkID(14) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
dstBk(14) local(3 12) found in slot(3)
local(3 12) same slot
+gbk bkID(14) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
bkID(16) local(4 #6)  ordered in goalBk(14)
-bk  bkID(16) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
dstBk(16) local(4 6) found in slot(4)
local(4 6) same slot
+bk  bkID(16) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
 ordered in bk
-gbk bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
+gbk bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
-gbk bkID(14) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
dstBk(14) local(4 6) found in slot(4)
local(4 6) same slot
+gbk bkID(14) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
bkID(16) local(0 #0)  not found in goalBk
bkID(16) local(1 #7)  not found in goalBk
bkID(16) local(2 #3)  ordered in goalBk(15)
-bk  bkID(16) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
dstBk(16) local(2 3) found in slot(2)
local(2 3) same slot
+bk  bkID(16) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
 ordered in bk
-gbk bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
dstBk(15) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
bkID(16) local(3 #12)  not found in goalBk
bkID(16) local(4 #6)  not found in goalBk
bkID(15) local(2 #3)  ordered in goalBk(14)
-bk  bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
dstBk(15) local(2 3) found in slot(2)
local(2 3) same slot
+bk  bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
 ordered in bk
-gbk bkID(14) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
dstBk(14) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(14) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
bkID(15) local(2 #3)  ordered in goalBk(15)
-bk  bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
dstBk(15) local(2 3) found in slot(2)
local(2 3) same slot
+bk  bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
 ordered in bk
-gbk bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
dstBk(15) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(15) Incoming Locals(3 0x4): <null> <null> 3+ 
Popping blockID(15)
bkID(11) local(0 #7)  not found in goalBk
bkID(11) local(1 #0)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(11) Incoming Locals(2 0x0): 7- 0- 
+bk  bkID(11) Incoming Locals(2 0x1): 0+ 7- 
-gbk bkID(12) Incoming Locals(1 0x0): 0- 
+gbk bkID(12) Incoming Locals(1 0x1): 0+ 
bkID(11) local(1 #7)  not found in goalBk
bkID(8) local(0 #12)  not found in goalBk
bkID(8) local(1 #6)  not found in goalBk
bkID(8) local(2 #7)  not ordered
bestLocal(1) bestLocalScore(24)
-bk  bkID(8) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
+bk  bkID(8) Incoming Locals(5 0x2): 12- 7+ 6- 0- 3- 
-gbk bkID(11) Incoming Locals(2 0x1): 0+ 7- 
+gbk bkID(11) Incoming Locals(2 0x3): 0+ 7+ 
bkID(8) local(2 #6)  not found in goalBk
bkID(8) local(3 #0)  ordered in goalBk(11)
-bk  bkID(8) Incoming Locals(5 0x2): 12- 7+ 6- 0- 3- 
dstBk(8) local(0 0) found in slot(3)
local(#0) swapped with local(#3)
+bk  bkID(8) Incoming Locals(5 0x3): 0+ 7+ 6- 12- 3- 
bkID(8) local(4 #3)  not found in goalBk
bkID(8) local(0 #0)  not found in goalBk
bkID(8) local(1 #7)  not found in goalBk
bkID(8) local(2 #6)  not found in goalBk
bkID(8) local(3 #12)  not found in goalBk
bkID(8) local(4 #3)  not ordered
bestLocal(2) bestLocalScore(8)
-bk  bkID(8) Incoming Locals(5 0x3): 0+ 7+ 6- 12- 3- 
+bk  bkID(8) Incoming Locals(5 0x7): 0+ 7+ 3+ 12- 6- 
-gbk bkID(9) Incoming Locals(1 0x0): 3- 
+gbk bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
bkID(8) local(4 #6)  not found in goalBk
bkID(9) local(2 #3)  not found in goalBk
Pushing blockID(9)
bkID(10) local(0 #12)  not ordered
bestLocal(3) bestLocalScore(24)
-bk  bkID(10) Incoming Locals(5 0x0): 12- 6- 7- 0- 3- 
+bk  bkID(10) Incoming Locals(5 0x8): 0- 6- 7- 12+ 3- 
-gbk bkID(8) Incoming Locals(5 0x7): 0+ 7+ 3+ 12- 6- 
+gbk bkID(8) Incoming Locals(5 0xf): 0+ 7+ 3+ 12+ 6- 
bkID(10) local(0 #0)  ordered in goalBk(8)
-bk  bkID(10) Incoming Locals(5 0x8): 0- 6- 7- 12+ 3- 
dstBk(10) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(10) Incoming Locals(5 0x9): 0+ 6- 7- 12+ 3- 
 ordered in bk
-gbk bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
+gbk bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
-gbk bkID(8) Incoming Locals(5 0xf): 0+ 7+ 3+ 12+ 6- 
dstBk(8) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(8) Incoming Locals(5 0xf): 0+ 7+ 3+ 12+ 6- 
bkID(10) local(1 #6)  not ordered
bestLocal(4) bestLocalScore(24)
-bk  bkID(10) Incoming Locals(5 0x9): 0+ 6- 7- 12+ 3- 
+bk  bkID(10) Incoming Locals(5 0x19): 0+ 3- 7- 12+ 6+ 
-gbk bkID(8) Incoming Locals(5 0xf): 0+ 7+ 3+ 12+ 6- 
+gbk bkID(8) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
bkID(10) local(1 #3)  ordered in goalBk(8)
-bk  bkID(10) Incoming Locals(5 0x19): 0+ 3- 7- 12+ 6+ 
dstBk(10) local(2 3) found in slot(1)
local(#2) swapped with local(#1)
+bk  bkID(10) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
bkID(10) local(2 #3)  ordered in goalBk(8)
-bk  bkID(10) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
dstBk(10) local(2 3) found in slot(2)
local(2 3) same slot
+bk  bkID(10) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
dstBk(9) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
-gbk bkID(8) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
dstBk(8) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(8) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
bkID(10) local(3 #12)  ordered in goalBk(8)
-bk  bkID(10) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
dstBk(10) local(3 12) found in slot(3)
local(3 12) same slot
+bk  bkID(10) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
+gbk bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
-gbk bkID(8) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
dstBk(8) local(3 12) found in slot(3)
local(3 12) same slot
+gbk bkID(8) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
bkID(10) local(4 #6)  ordered in goalBk(8)
-bk  bkID(10) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
dstBk(10) local(4 6) found in slot(4)
local(4 6) same slot
+bk  bkID(10) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
+gbk bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
-gbk bkID(8) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
dstBk(8) local(4 6) found in slot(4)
local(4 6) same slot
+gbk bkID(8) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
bkID(10) local(0 #0)  not found in goalBk
bkID(10) local(1 #7)  not found in goalBk
bkID(10) local(2 #3)  ordered in goalBk(9)
-bk  bkID(10) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
dstBk(10) local(2 3) found in slot(2)
local(2 3) same slot
+bk  bkID(10) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
dstBk(9) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
bkID(10) local(3 #12)  not found in goalBk
bkID(10) local(4 #6)  not found in goalBk
bkID(9) local(2 #3)  ordered in goalBk(8)
-bk  bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
dstBk(9) local(2 3) found in slot(2)
local(2 3) same slot
+bk  bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
 ordered in bk
-gbk bkID(8) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
dstBk(8) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(8) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
bkID(9) local(2 #3)  ordered in goalBk(9)
-bk  bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
dstBk(9) local(2 3) found in slot(2)
local(2 3) same slot
+bk  bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
dstBk(9) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(9) Incoming Locals(3 0x4): <null> <null> 3+ 
Popping blockID(9)
bkID(1) local(0 #0)  not found in goalBk
bkID(3) local(0 #0)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(3) Incoming Locals(1 0x0): 0- 
+bk  bkID(3) Incoming Locals(1 0x1): 0+ 
-gbk bkID(4) Incoming Locals(2 0x0): 0- 2- 
+gbk bkID(4) Incoming Locals(2 0x1): 0+ 2- 
bkID(3) local(0 #0)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(1 0x1): 0+ 
dstBk(3) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(3) Incoming Locals(1 0x1): 0+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x1): 0+ 2- 
dstBk(4) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(4) Incoming Locals(2 0x1): 0+ 2- 
pre  bkID(1) Incoming Locals(1 0x0): 0- 
local(#0) swapped with local(#1)
post bkID(1) Incoming Locals(2 0x2): <null> 0+ 
pre2  bkID(4) Incoming Locals(2 0x1): 0+ 2- 
local(#2) swapped with local(#1)
post2 bkID(4) Incoming Locals(3 0x3): 0+ <null> 2- 
pre  bkID(4) Incoming Locals(3 0x3): 0+ <null> 2- 
local(#2) swapped with local(#5)
post bkID(4) Incoming Locals(6 0x23): 0+ <null> <null> <null> <null> 2+ 
pre  bkID(6) Incoming Locals(6 0x20): 1- <null> <null> <null> <null> <null> 
local(#0) swapped with local(#0)
post bkID(6) Incoming Locals(6 0x21): 1+ <null> <null> <null> <null> <null> 
pre2  bkID(13) Incoming Locals(1 0x0): 0- 
local(#1) swapped with local(#0)
post2 bkID(13) Incoming Locals(2 0x1): <null> 0- 
pre2  bkID(7) Incoming Locals(6 0x20): 0- <null> <null> <null> <null> <null> 
local(#1) swapped with local(#0)
post2 bkID(7) Incoming Locals(6 0x21): <null> 0- <null> <null> <null> <null> 
pre2  bkID(14) Incoming Locals(5 0x1f): 0+ 7+ 3+ 12+ 6+ 
local(#5) swapped with local(#0)
post2 bkID(14) Incoming Locals(6 0x1f): <null> 7+ 3+ 12+ 6+ 0- 
pre  bkID(16) Incoming Locals(5 0x1d): 0+ 7- 3+ 12+ 6+ 
local(#1) swapped with local(#5)
post bkID(16) Incoming Locals(6 0x3d): 0+ <null> 3+ 12+ 6+ 7+ 
pre  bkID(14) Incoming Locals(6 0x1f): <null> 7+ 3+ 12+ 6+ 0- 
local(#5) swapped with local(#5)
post bkID(14) Incoming Locals(6 0x3f): <null> 7+ 3+ 12+ 6+ 0+ 
pre  bkID(13) Incoming Locals(2 0x1): <null> 0- 
local(#1) swapped with local(#1)
post bkID(13) Incoming Locals(2 0x3): <null> 0+ 
pre2  bkID(7) Incoming Locals(6 0x21): <null> 0- <null> <null> <null> <null> 
local(#2) swapped with local(#1)
post2 bkID(7) Incoming Locals(6 0x23): <null> <null> 0- <null> <null> <null> 
pre  bkID(7) Incoming Locals(6 0x23): <null> <null> 0- <null> <null> <null> 
local(#2) swapped with local(#2)
post bkID(7) Incoming Locals(6 0x27): <null> <null> 0+ <null> <null> <null> 

#################################################

The maximum node counts per root node are 22
IR block list contains 21 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 19 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:133)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<0>  (0x95805c):    new_quick #43 <java.lang.StringBuffer>
<3>  (0x95805f):    dup 
<4>  (0x958060):    invokenonvirtual_quick #44 <java.lang.StringBuffer.<init>()V>
<7>  (0x958063):    aload_1 
<8>  (0x958064):    invokevirtual_quick_w #24 <com.sun.mep.bench.Chess.ChessPiece.getPieceType()I>
<11>  (0x958067):    invokestatic_quick #45 <com.sun.mep.bench.Chess.ChessPiece.getPieceType(I)Ljava/lang/String;>
<14>  (0x95806a):    invokenonvirtual_quick #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<17>  (0x95806d):    aldc_ind_quick #47
<19>  (0x95806f):    invokenonvirtual_quick #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<22>  (0x958072):    invokenonvirtual_quick #48 <java.lang.StringBuffer.toString()Ljava/lang/String;>
<25>  (0x958075):    astore_2 
<26>  (0x958076):    new_quick #49 <com.sun.mep.bench.Chess.GameState>
<29>  (0x958079):    dup 
<30>  (0x95807a):    aload_0 
<31>  (0x95807b):    agetfield_quick #27
<34>  (0x95807e):    invokenonvirtual_quick #50 <com.sun.mep.bench.Chess.GameState.<init>(Lcom/sun/mep/bench/Chess/ChessGame;)V>
<37>  (0x958081):    astore_3 
<38>  (0x958082):    aload_0 
<39>  (0x958083):    agetfield_quick #2
<42>  (0x958086):    getfield_quick #12
<45>  (0x958089):    ifeq <117>
<48>  (0x95808c):    aload_1 
<49>  (0x95808d):    checkcast #53
<52>  (0x958090):    getfield #54
<55>  (0x958093):    ldc #55
<57>  (0x958095):    invokevirtual #56
<60>  (0x958098):    ifeq <86>
<63>  (0x95809b):    new #43 <java.lang.StringBuffer>
<66>  (0x95809e):    dup 
<67>  (0x95809f):    invokespecial #44 <java.lang.StringBuffer.<init>()V>
<70>  (0x9580a2):    aload_2 
<71>  (0x9580a3):    invokevirtual #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<74>  (0x9580a6):    ldc #57
<76>  (0x9580a8):    invokevirtual #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<79>  (0x9580ab):    invokevirtual #48 <java.lang.StringBuffer.toString()Ljava/lang/String;>
<82>  (0x9580ae):    astore_2 
<83>  (0x9580af):    goto <106>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Assigned Locals(3): 
	ASSIGN(66): local(2)	ID(65)	rhsID(38)
 	ASSIGN(69): local(3)	ID(68)	rhsID(43)
 	ASSIGN(120): local(2)	ID(119)	rhsID(116)
 
Successor Blocks(3): 
	ID(1) LocalOrder(0) AssignOrder(2) RefsOK(0) Locals(<null> 0)
	ID(2) LocalOrder(0) AssignOrder(2) RefsOK(0) Locals()
	ID(3) LocalOrder(0) AssignOrder(3) RefsOK(0) Locals(0)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 3) IDENTITY (reference)  (ref count: 3)
      <(ID: 8) NEW_OBJECT (reference) 
         <(ID: 2) CONST_CB (address field)  (java.lang.StringBuffer)

   <(ID: 7) INVOKE (v) 
      <(ID: 6) PARAMETER (reference) 
         <(ID: 3) IDENTITY (reference)  (ref count: 3)
         <(ID: 5) NULL_PARAMETER (NONE) 
      <(ID: 4) CONST_MB (address field)  (java.lang.StringBuffer.<init>()V)

   <(ID: 38) IDENTITY (reference)  (ref count: 3)
      <(ID: 67) INVOKE (reference) 
         <(ID: 35) PARAMETER (reference) 
            <(ID: 32) IDENTITY (reference)  (ref count: 2)
               <(ID: 41) INVOKE (reference) 
                  <(ID: 29) PARAMETER (reference) 
                     <(ID: 24) IDENTITY (reference)  (ref count: 2)
                        <(ID: 40) INVOKE (reference) 
                           <(ID: 23) PARAMETER (reference) 
                              <(ID: 3) IDENTITY (reference)  (ref count: 3)
                              <(ID: 22) PARAMETER (reference) 
                                 <(ID: 19) INVOKE (reference) 
                                    <(ID: 18) PARAMETER (int) 
                                       <(ID: 15) INVOKE (int) 
                                          <(ID: 12) PARAMETER (reference) 
                                             <(ID: 9) IDENTITY (reference)  (ref count: 3)
                                                <(ID: 39) LOCAL (reference)   1>
                                             <(ID: 11) NULL_PARAMETER (NONE) 
                                          <(ID: 14) FETCH_MB_FROM_VTABLE (address field) 
                                             <(ID: 13) GET_VTBL (NONE) 
                                                <(ID: 9) IDENTITY (reference)  (ref count: 3)
                                             <(ID: 10) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 38)
                                       <(ID: 17) NULL_PARAMETER (NONE) 
                                    <(ID: 16) CONST_MB (address field)  (com.sun.mep.bench.Chess.ChessPiece.getPieceType(I)Ljava/lang/String;)
                                 <(ID: 21) NULL_PARAMETER (NONE) 
                           <(ID: 20) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                     <(ID: 28) PARAMETER (reference) 
                        <(ID: 25) CONST_STRING_ICELL (reference)  (stringICell 0x80dc20)

                        <(ID: 27) NULL_PARAMETER (NONE) 
                  <(ID: 31) SEQUENCE_R (address field) 
                     <(ID: 30) NULL_CHECK (reference) 
                        <(ID: 24) IDENTITY (reference)  (ref count: 2)
                     <(ID: 26) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
            <(ID: 34) NULL_PARAMETER (NONE) 
         <(ID: 37) SEQUENCE_R (address field) 
            <(ID: 36) NULL_CHECK (reference) 
               <(ID: 32) IDENTITY (reference)  (ref count: 2)
            <(ID: 33) CONST_MB (address field)  (java.lang.StringBuffer.toString()Ljava/lang/String;)

   <(ID: 43) IDENTITY (reference)  (ref count: 3)
      <(ID: 53) NEW_OBJECT (reference) 
         <(ID: 42) CONST_CB (address field)  (com.sun.mep.bench.Chess.GameState)

   <(ID: 47) IDENTITY (reference)  (ref count: 2)
      <(ID: 54) FETCH (reference) 
         <(ID: 46) FIELD_REF (reference) 
            <(ID: 44) IDENTITY (reference)  (ref count: 2)
               <(ID: 58) LOCAL (reference)   0>
            <(ID: 45) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 52) INVOKE (v) 
      <(ID: 51) PARAMETER (reference) 
         <(ID: 43) IDENTITY (reference)  (ref count: 3)
         <(ID: 50) PARAMETER (reference) 
            <(ID: 47) IDENTITY (reference)  (ref count: 2)
            <(ID: 49) NULL_PARAMETER (NONE) 
      <(ID: 48) CONST_MB (address field)  (com.sun.mep.bench.Chess.GameState.<init>(Lcom/sun/mep/bench/Chess/ChessGame;)V)

   <(ID: 57) IDENTITY (reference)  (ref count: 2)
      <(ID: 62) FETCH (reference) 
         <(ID: 56) FIELD_REF (reference) 
            <(ID: 44) IDENTITY (reference)  (ref count: 2)
            <(ID: 55) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 61) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 70) FETCH (32-bit field) 
         <(ID: 60) FIELD_REF (32-bit field) 
            <(ID: 57) IDENTITY (reference)  (ref count: 2)
            <(ID: 59) CONST_FIELD_OFFSET (NONE)  (12)

   <(ID: 66) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 65) LOCAL (reference)   2>
      <(ID: 38) IDENTITY (reference)  (ref count: 3)

   <(ID: 69) ASSIGN (reference)  (assignIdx: 1)
      <(ID: 68) LOCAL (reference)   3>
      <(ID: 43) IDENTITY (reference)  (ref count: 3)

   <(ID: 64) BCOND (int) 
   target: (BlockID: 1 BlockPC: 117)
   condition: EQ
   flags: 0
      <(ID: 61) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 63) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 86) IDENTITY (int)  (ref count: 2)
      <(ID: 90) INVOKE (int) 
         <(ID: 83) PARAMETER (reference) 
            <(ID: 77) IDENTITY (reference)  (ref count: 2)
               <(ID: 89) FETCH (reference) 
                  <(ID: 76) FIELD_REF (reference) volatile 
                     <(ID: 73) CHECKCAST (reference) 
                        <(ID: 9) IDENTITY (reference)  (ref count: 3)
                        <(ID: 72) RESOLVE_REFERENCE (NONE) 
                           <(ID: 71) CONST_CB_UNRESOLVED (NONE)  (cpIndex 53)
                     <(ID: 75) RESOLVE_REFERENCE (NONE) 
                        <(ID: 74) CONST_GETFIELD_FB_UNRESOLVED (NONE)  (cpIndex 54)
            <(ID: 82) PARAMETER (reference) 
               <(ID: 78) CONST_STRING_ICELL (reference)  (stringICell 0x90ddd4)

               <(ID: 81) NULL_PARAMETER (NONE) 
         <(ID: 85) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 84) GET_VTBL (NONE) 
               <(ID: 77) IDENTITY (reference)  (ref count: 2)
            <(ID: 80) RESOLVE_REFERENCE (NONE) 
               <(ID: 79) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 56)

   <(ID: 88) BCOND (int) 
   target: (BlockID: 2 BlockPC: 86)
   condition: EQ
   flags: 0
      <(ID: 86) IDENTITY (int)  (ref count: 2)
      <(ID: 87) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 92) IDENTITY (reference)  (ref count: 3)
      <(ID: 97) NEW_OBJECT (reference) 
         <(ID: 91) CONST_CB (address field)  (java.lang.StringBuffer)

   <(ID: 96) INVOKE (v) 
      <(ID: 95) PARAMETER (reference) 
         <(ID: 92) IDENTITY (reference)  (ref count: 3)
         <(ID: 94) NULL_PARAMETER (NONE) 
      <(ID: 93) CONST_MB (address field)  (java.lang.StringBuffer.<init>()V)

   <(ID: 116) IDENTITY (reference)  (ref count: 2)
      <(ID: 121) INVOKE (reference) 
         <(ID: 113) PARAMETER (reference) 
            <(ID: 110) IDENTITY (reference)  (ref count: 2)
               <(ID: 118) INVOKE (reference) 
                  <(ID: 107) PARAMETER (reference) 
                     <(ID: 102) IDENTITY (reference)  (ref count: 2)
                        <(ID: 117) INVOKE (reference) 
                           <(ID: 101) PARAMETER (reference) 
                              <(ID: 92) IDENTITY (reference)  (ref count: 3)
                              <(ID: 100) PARAMETER (reference) 
                                 <(ID: 38) IDENTITY (reference)  (ref count: 3)
                                 <(ID: 99) NULL_PARAMETER (NONE) 
                           <(ID: 98) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                     <(ID: 106) PARAMETER (reference) 
                        <(ID: 103) CONST_STRING_ICELL (reference)  (stringICell 0x90e938)

                        <(ID: 105) NULL_PARAMETER (NONE) 
                  <(ID: 109) SEQUENCE_R (address field) 
                     <(ID: 108) NULL_CHECK (reference) 
                        <(ID: 102) IDENTITY (reference)  (ref count: 2)
                     <(ID: 104) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
            <(ID: 112) NULL_PARAMETER (NONE) 
         <(ID: 115) SEQUENCE_R (address field) 
            <(ID: 114) NULL_CHECK (reference) 
               <(ID: 110) IDENTITY (reference)  (ref count: 2)
            <(ID: 111) CONST_MB (address field)  (java.lang.StringBuffer.toString()Ljava/lang/String;)

   <(ID: 120) ASSIGN (reference)  (assignIdx: 2)
      <(ID: 119) LOCAL (reference)   2>
      <(ID: 116) IDENTITY (reference)  (ref count: 2)

   <(ID: 122) GOTO (NONE) 
   target: (BlockID: 3 BlockPC: 106)


*************************************************
*
* (block ID:2 block PC:86 )
* IR root list contains 5 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:142)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<86>  (0x9580b2):    new #43 <java.lang.StringBuffer>
<89>  (0x9580b5):    dup 
<90>  (0x9580b6):    invokespecial #44 <java.lang.StringBuffer.<init>()V>
<93>  (0x9580b9):    aload_2 
<94>  (0x9580ba):    invokevirtual #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<97>  (0x9580bd):    ldc #58
<99>  (0x9580bf):    invokevirtual #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<102>  (0x9580c2):    invokevirtual #48 <java.lang.StringBuffer.toString()Ljava/lang/String;>
<105>  (0x9580c5):    astore_2 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(268): local(2)	ID(267)	rhsID(264)
 
Successor Blocks(1): 
	ID(3) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(0)

   <(ID: 237) MAP_PC (NONE)   86>

   <(ID: 239) IDENTITY (reference)  (ref count: 3)
      <(ID: 244) NEW_OBJECT (reference) 
         <(ID: 238) CONST_CB (address field)  (java.lang.StringBuffer)

   <(ID: 243) INVOKE (v) 
      <(ID: 242) PARAMETER (reference) 
         <(ID: 239) IDENTITY (reference)  (ref count: 3)
         <(ID: 241) NULL_PARAMETER (NONE) 
      <(ID: 240) CONST_MB (address field)  (java.lang.StringBuffer.<init>()V)

   <(ID: 264) IDENTITY (reference)  (ref count: 2)
      <(ID: 269) INVOKE (reference) 
         <(ID: 261) PARAMETER (reference) 
            <(ID: 258) IDENTITY (reference)  (ref count: 2)
               <(ID: 266) INVOKE (reference) 
                  <(ID: 255) PARAMETER (reference) 
                     <(ID: 250) IDENTITY (reference)  (ref count: 2)
                        <(ID: 265) INVOKE (reference) 
                           <(ID: 249) PARAMETER (reference) 
                              <(ID: 239) IDENTITY (reference)  (ref count: 3)
                              <(ID: 248) PARAMETER (reference) 
                                 <(ID: 245) LOCAL (reference)   2>
                                 <(ID: 247) NULL_PARAMETER (NONE) 
                           <(ID: 246) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                     <(ID: 254) PARAMETER (reference) 
                        <(ID: 251) CONST_STRING_ICELL (reference)  (stringICell 0x90dcbc)

                        <(ID: 253) NULL_PARAMETER (NONE) 
                  <(ID: 257) SEQUENCE_R (address field) 
                     <(ID: 256) NULL_CHECK (reference) 
                        <(ID: 250) IDENTITY (reference)  (ref count: 2)
                     <(ID: 252) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
            <(ID: 260) NULL_PARAMETER (NONE) 
         <(ID: 263) SEQUENCE_R (address field) 
            <(ID: 262) NULL_CHECK (reference) 
               <(ID: 258) IDENTITY (reference)  (ref count: 2)
            <(ID: 259) CONST_MB (address field)  (java.lang.StringBuffer.toString()Ljava/lang/String;)

   <(ID: 268) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 267) LOCAL (reference)   2>
      <(ID: 264) IDENTITY (reference)  (ref count: 2)


*************************************************
*
* (block ID:3 block PC:106 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:143)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<106>  (0x9580c6):    aload_0 
<107>  (0x9580c7):    getfield #59
<110>  (0x9580ca):    iconst_0 
<111>  (0x9580cb):    putfield #52 <com.sun.mep.bench.Chess.Game.castling:Z>
<114>  (0x9580ce):    goto <254>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(271)
 
Incoming Locals(1): 
	local(0)	ID(271)
 
Successor Blocks(1): 
	ID(4) LocalOrder(1) AssignOrder(0) RefsOK(0) Locals(0 <null> <null> <null> <null> 2)

   <(ID: 270) MAP_PC (NONE)   106>

   <(ID: 275) IDENTITY (reference)  (ref count: 2)
      <(ID: 280) FETCH (reference) 
         <(ID: 274) FIELD_REF (reference) volatile 
            <(ID: 271) LOCAL (reference)   0>
            <(ID: 273) RESOLVE_REFERENCE (NONE) 
               <(ID: 272) CONST_GETFIELD_FB_UNRESOLVED (NONE)  (cpIndex 59)

   <(ID: 279) ASSIGN (int) 
      <(ID: 278) FIELD_REF (int) 
         <(ID: 275) IDENTITY (reference)  (ref count: 2)
         <(ID: 277) CONST_FIELD_OFFSET (NONE)  (12)
      <(ID: 276) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 281) GOTO (NONE) 
   target: (BlockID: 4 BlockPC: 254)


*************************************************
*
* (block ID:1 block PC:117 )
* IR root list contains 17 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x2
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:145)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<117>  (0x9580d1):    aload_0 
<118>  (0x9580d2):    agetfield_quick #2
<121>  (0x9580d5):    getfield_quick #10
<124>  (0x9580d8):    ifeq <192>
<127>  (0x9580db):    new #43 <java.lang.StringBuffer>
<130>  (0x9580de):    dup 
<131>  (0x9580df):    invokespecial #44 <java.lang.StringBuffer.<init>()V>
<134>  (0x9580e2):    aload_2 
<135>  (0x9580e3):    invokevirtual #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<138>  (0x9580e6):    aload_0 
<139>  (0x9580e7):    aload_1 
<140>  (0x9580e8):    getfield #17 <com.sun.mep.bench.Chess.ChessPiece.previousCol:I>
<143>  (0x9580eb):    invokevirtual #61 <com.sun.mep.bench.Chess.ChessPiece.getColLetter(I)C>
<146>  (0x9580ee):    invokevirtual #62 <java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;>
<149>  (0x9580f1):    bipush 8
<151>  (0x9580f3):    aload_1 
<152>  (0x9580f4):    getfield #16 <com.sun.mep.bench.Chess.ChessPiece.previousRow:I>
<155>  (0x9580f7):    isub 
<156>  (0x9580f8):    invokevirtual #63 <java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;>
<159>  (0x9580fb):    ldc #64
<161>  (0x9580fd):    invokevirtual #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<164>  (0x958100):    aload_0 
<165>  (0x958101):    aload_1 
<166>  (0x958102):    getfield #13 <com.sun.mep.bench.Chess.ChessPiece.col:I>
<169>  (0x958105):    invokevirtual #61 <com.sun.mep.bench.Chess.ChessPiece.getColLetter(I)C>
<172>  (0x958108):    invokevirtual #62 <java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;>
<175>  (0x95810b):    bipush 8
<177>  (0x95810d):    aload_1 
<178>  (0x95810e):    getfield #15 <com.sun.mep.bench.Chess.ChessPiece.row:I>
<181>  (0x958111):    isub 
<182>  (0x958112):    invokevirtual #63 <java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;>
<185>  (0x958115):    invokevirtual #48 <java.lang.StringBuffer.toString()Ljava/lang/String;>
<188>  (0x958118):    astore_2 
<189>  (0x958119):    goto <254>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(124)
 
Incoming Locals(2): 
	<null>
	local(0)	ID(124)
 
Assigned Locals(1): 
	ASSIGN(234): local(2)	ID(233)	rhsID(229)
 
Successor Blocks(2): 
	ID(5) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals()
	ID(4) LocalOrder(1) AssignOrder(1) RefsOK(0) Locals(0 <null> <null> <null> <null> 2)

   <(ID: 123) MAP_PC (NONE)   117>

   <(ID: 127) IDENTITY (reference)  (ref count: 2)
      <(ID: 131) FETCH (reference) 
         <(ID: 126) FIELD_REF (reference) 
            <(ID: 124) IDENTITY (reference)  (ref count: 5)
               <(ID: 171) LOCAL (reference)   0>
            <(ID: 125) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 130) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 134) FETCH (32-bit field) 
         <(ID: 129) FIELD_REF (32-bit field) 
            <(ID: 127) IDENTITY (reference)  (ref count: 2)
            <(ID: 128) CONST_FIELD_OFFSET (NONE)  (10)

   <(ID: 133) BCOND (int) 
   target: (BlockID: 5 BlockPC: 192)
   condition: EQ
   flags: 0
      <(ID: 130) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 132) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 136) IDENTITY (reference)  (ref count: 3)
      <(ID: 141) NEW_OBJECT (reference) 
         <(ID: 135) CONST_CB (address field)  (java.lang.StringBuffer)

   <(ID: 140) INVOKE (v) 
      <(ID: 139) PARAMETER (reference) 
         <(ID: 136) IDENTITY (reference)  (ref count: 3)
         <(ID: 138) NULL_PARAMETER (NONE) 
      <(ID: 137) CONST_MB (address field)  (java.lang.StringBuffer.<init>()V)

   <(ID: 147) IDENTITY (reference)  (ref count: 3)
      <(ID: 170) INVOKE (reference) 
         <(ID: 146) PARAMETER (reference) 
            <(ID: 136) IDENTITY (reference)  (ref count: 3)
            <(ID: 145) PARAMETER (reference) 
               <(ID: 142) LOCAL (reference)   2>
               <(ID: 144) NULL_PARAMETER (NONE) 
         <(ID: 143) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)

   <(ID: 151) IDENTITY (int)  (ref count: 2)
      <(ID: 172) FETCH (int) 
         <(ID: 150) FIELD_REF (int) 
            <(ID: 148) IDENTITY (reference)  (ref count: 4)
               <(ID: 173) LOCAL (reference)   1>
            <(ID: 149) CONST_FIELD_OFFSET (NONE)  (22)

   <(ID: 165) IDENTITY (reference)  (ref count: 3)
      <(ID: 193) INVOKE (reference) 
         <(ID: 162) PARAMETER (reference) 
            <(ID: 147) IDENTITY (reference)  (ref count: 3)
            <(ID: 161) PARAMETER (int) 
               <(ID: 158) INVOKE (int) 
                  <(ID: 155) PARAMETER (reference) 
                     <(ID: 124) IDENTITY (reference)  (ref count: 5)
                     <(ID: 154) PARAMETER (int) 
                        <(ID: 151) IDENTITY (int)  (ref count: 2)
                        <(ID: 153) NULL_PARAMETER (NONE) 
                  <(ID: 157) FETCH_MB_FROM_VTABLE (address field) 
                     <(ID: 156) GET_VTBL (NONE) 
                        <(ID: 124) IDENTITY (reference)  (ref count: 5)
                     <(ID: 152) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 39)
               <(ID: 160) NULL_PARAMETER (NONE) 
         <(ID: 164) SEQUENCE_R (address field) 
            <(ID: 163) NULL_CHECK (reference) 
               <(ID: 147) IDENTITY (reference)  (ref count: 3)
            <(ID: 159) CONST_MB (address field)  (java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;)

   <(ID: 169) IDENTITY (int)  (ref count: 2)
      <(ID: 194) FETCH (int) 
         <(ID: 168) FIELD_REF (int) 
            <(ID: 148) IDENTITY (reference)  (ref count: 4)
            <(ID: 167) CONST_FIELD_OFFSET (NONE)  (21)

   <(ID: 189) IDENTITY (reference)  (ref count: 3)
      <(ID: 214) INVOKE (reference) 
         <(ID: 186) PARAMETER (reference) 
            <(ID: 181) IDENTITY (reference)  (ref count: 2)
               <(ID: 195) INVOKE (reference) 
                  <(ID: 178) PARAMETER (reference) 
                     <(ID: 165) IDENTITY (reference)  (ref count: 3)
                     <(ID: 177) PARAMETER (int) 
                        <(ID: 174) SUB (int) 
                           <(ID: 166) CONST_JAVA_NUMERIC32 (int)  (8)
                           <(ID: 169) IDENTITY (int)  (ref count: 2)
                        <(ID: 176) NULL_PARAMETER (NONE) 
                  <(ID: 180) SEQUENCE_R (address field) 
                     <(ID: 179) NULL_CHECK (reference) 
                        <(ID: 165) IDENTITY (reference)  (ref count: 3)
                     <(ID: 175) CONST_MB (address field)  (java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;)
            <(ID: 185) PARAMETER (reference) 
               <(ID: 182) CONST_STRING_ICELL (reference)  (stringICell 0x90df20)

               <(ID: 184) NULL_PARAMETER (NONE) 
         <(ID: 188) SEQUENCE_R (address field) 
            <(ID: 187) NULL_CHECK (reference) 
               <(ID: 181) IDENTITY (reference)  (ref count: 2)
            <(ID: 183) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)

   <(ID: 192) IDENTITY (int)  (ref count: 2)
      <(ID: 215) FETCH (int) 
         <(ID: 191) FIELD_REF (int) 
            <(ID: 148) IDENTITY (reference)  (ref count: 4)
            <(ID: 190) CONST_FIELD_OFFSET (NONE)  (20)

   <(ID: 209) IDENTITY (reference)  (ref count: 3)
      <(ID: 230) INVOKE (reference) 
         <(ID: 206) PARAMETER (reference) 
            <(ID: 189) IDENTITY (reference)  (ref count: 3)
            <(ID: 205) PARAMETER (int) 
               <(ID: 202) INVOKE (int) 
                  <(ID: 199) PARAMETER (reference) 
                     <(ID: 124) IDENTITY (reference)  (ref count: 5)
                     <(ID: 198) PARAMETER (int) 
                        <(ID: 192) IDENTITY (int)  (ref count: 2)
                        <(ID: 197) NULL_PARAMETER (NONE) 
                  <(ID: 201) FETCH_MB_FROM_VTABLE (address field) 
                     <(ID: 200) GET_VTBL (NONE) 
                        <(ID: 124) IDENTITY (reference)  (ref count: 5)
                     <(ID: 196) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 39)
               <(ID: 204) NULL_PARAMETER (NONE) 
         <(ID: 208) SEQUENCE_R (address field) 
            <(ID: 207) NULL_CHECK (reference) 
               <(ID: 189) IDENTITY (reference)  (ref count: 3)
            <(ID: 203) CONST_MB (address field)  (java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;)

   <(ID: 213) IDENTITY (int)  (ref count: 2)
      <(ID: 231) FETCH (int) 
         <(ID: 212) FIELD_REF (int) 
            <(ID: 148) IDENTITY (reference)  (ref count: 4)
            <(ID: 211) CONST_FIELD_OFFSET (NONE)  (19)

   <(ID: 229) IDENTITY (reference)  (ref count: 2)
      <(ID: 235) INVOKE (reference) 
         <(ID: 226) PARAMETER (reference) 
            <(ID: 223) IDENTITY (reference)  (ref count: 2)
               <(ID: 232) INVOKE (reference) 
                  <(ID: 220) PARAMETER (reference) 
                     <(ID: 209) IDENTITY (reference)  (ref count: 3)
                     <(ID: 219) PARAMETER (int) 
                        <(ID: 216) SUB (int) 
                           <(ID: 210) CONST_JAVA_NUMERIC32 (int)  (8)
                           <(ID: 213) IDENTITY (int)  (ref count: 2)
                        <(ID: 218) NULL_PARAMETER (NONE) 
                  <(ID: 222) SEQUENCE_R (address field) 
                     <(ID: 221) NULL_CHECK (reference) 
                        <(ID: 209) IDENTITY (reference)  (ref count: 3)
                     <(ID: 217) CONST_MB (address field)  (java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;)
            <(ID: 225) NULL_PARAMETER (NONE) 
         <(ID: 228) SEQUENCE_R (address field) 
            <(ID: 227) NULL_CHECK (reference) 
               <(ID: 223) IDENTITY (reference)  (ref count: 2)
            <(ID: 224) CONST_MB (address field)  (java.lang.StringBuffer.toString()Ljava/lang/String;)

   <(ID: 234) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 233) LOCAL (reference)   2>
      <(ID: 229) IDENTITY (reference)  (ref count: 2)

   <(ID: 236) GOTO (NONE) 
   target: (BlockID: 4 BlockPC: 254)


*************************************************
*
* (block ID:5 block PC:192 )
* IR root list contains 13 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:154)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<192>  (0x95811c):    new_quick #43 <java.lang.StringBuffer>
<195>  (0x95811f):    dup 
<196>  (0x958120):    invokenonvirtual_quick #44 <java.lang.StringBuffer.<init>()V>
<199>  (0x958123):    aload_2 
<200>  (0x958124):    invokenonvirtual_quick #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<203>  (0x958127):    aload_0 
<204>  (0x958128):    aload_1 
<205>  (0x958129):    getfield_quick #22
<208>  (0x95812c):    invokevirtual_quick_w #61 <com.sun.mep.bench.Chess.ChessPiece.getColLetter(I)C>
<211>  (0x95812f):    invokenonvirtual_quick #62 <java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;>
<214>  (0x958132):    bipush 8
<216>  (0x958134):    aload_1 
<217>  (0x958135):    getfield_quick #21
<220>  (0x958138):    isub 
<221>  (0x958139):    invokenonvirtual_quick #63 <java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;>
<224>  (0x95813c):    aldc_ind_quick #65
<226>  (0x95813e):    invokenonvirtual_quick #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<229>  (0x958141):    aload_0 
<230>  (0x958142):    aload_1 
<231>  (0x958143):    getfield_quick #20
<234>  (0x958146):    invokevirtual_quick_w #61 <com.sun.mep.bench.Chess.ChessPiece.getColLetter(I)C>
<237>  (0x958149):    invokenonvirtual_quick #62 <java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;>
<240>  (0x95814c):    bipush 8
<242>  (0x95814e):    aload_1 
<243>  (0x95814f):    getfield_quick #19
<246>  (0x958152):    isub 
<247>  (0x958153):    invokenonvirtual_quick #63 <java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;>
<250>  (0x958156):    invokenonvirtual_quick #48 <java.lang.StringBuffer.toString()Ljava/lang/String;>
<253>  (0x958159):    astore_2 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

Assigned Locals(1): 
	ASSIGN(383): local(2)	ID(382)	rhsID(378)
 
Successor Blocks(1): 
	ID(4) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(0 <null> <null> <null> <null> 2)

   <(ID: 282) MAP_PC (NONE)   192>

   <(ID: 284) IDENTITY (reference)  (ref count: 3)
      <(ID: 289) NEW_OBJECT (reference) 
         <(ID: 283) CONST_CB (address field)  (java.lang.StringBuffer)

   <(ID: 288) INVOKE (v) 
      <(ID: 287) PARAMETER (reference) 
         <(ID: 284) IDENTITY (reference)  (ref count: 3)
         <(ID: 286) NULL_PARAMETER (NONE) 
      <(ID: 285) CONST_MB (address field)  (java.lang.StringBuffer.<init>()V)

   <(ID: 295) IDENTITY (reference)  (ref count: 3)
      <(ID: 319) INVOKE (reference) 
         <(ID: 294) PARAMETER (reference) 
            <(ID: 284) IDENTITY (reference)  (ref count: 3)
            <(ID: 293) PARAMETER (reference) 
               <(ID: 290) LOCAL (reference)   2>
               <(ID: 292) NULL_PARAMETER (NONE) 
         <(ID: 291) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)

   <(ID: 300) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 320) FETCH (32-bit field) 
         <(ID: 299) FIELD_REF (32-bit field) 
            <(ID: 297) IDENTITY (reference)  (ref count: 4)
               <(ID: 322) LOCAL (reference)   1>
            <(ID: 298) CONST_FIELD_OFFSET (NONE)  (22)

   <(ID: 314) IDENTITY (reference)  (ref count: 3)
      <(ID: 342) INVOKE (reference) 
         <(ID: 311) PARAMETER (reference) 
            <(ID: 295) IDENTITY (reference)  (ref count: 3)
            <(ID: 310) PARAMETER (int) 
               <(ID: 307) INVOKE (int) 
                  <(ID: 304) PARAMETER (reference) 
                     <(ID: 296) IDENTITY (reference)  (ref count: 4)
                        <(ID: 321) LOCAL (reference)   0>
                     <(ID: 303) PARAMETER (32-bit field) 
                        <(ID: 300) IDENTITY (32-bit field)  (ref count: 2)
                        <(ID: 302) NULL_PARAMETER (NONE) 
                  <(ID: 306) FETCH_MB_FROM_VTABLE (address field) 
                     <(ID: 305) GET_VTBL (NONE) 
                        <(ID: 296) IDENTITY (reference)  (ref count: 4)
                     <(ID: 301) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 39)
               <(ID: 309) NULL_PARAMETER (NONE) 
         <(ID: 313) SEQUENCE_R (address field) 
            <(ID: 312) NULL_CHECK (reference) 
               <(ID: 295) IDENTITY (reference)  (ref count: 3)
            <(ID: 308) CONST_MB (address field)  (java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;)

   <(ID: 318) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 343) FETCH (32-bit field) 
         <(ID: 317) FIELD_REF (32-bit field) 
            <(ID: 297) IDENTITY (reference)  (ref count: 4)
            <(ID: 316) CONST_FIELD_OFFSET (NONE)  (21)

   <(ID: 338) IDENTITY (reference)  (ref count: 3)
      <(ID: 363) INVOKE (reference) 
         <(ID: 335) PARAMETER (reference) 
            <(ID: 330) IDENTITY (reference)  (ref count: 2)
               <(ID: 344) INVOKE (reference) 
                  <(ID: 327) PARAMETER (reference) 
                     <(ID: 314) IDENTITY (reference)  (ref count: 3)
                     <(ID: 326) PARAMETER (int) 
                        <(ID: 323) SUB (int) 
                           <(ID: 315) CONST_JAVA_NUMERIC32 (int)  (8)
                           <(ID: 318) IDENTITY (32-bit field)  (ref count: 2)
                        <(ID: 325) NULL_PARAMETER (NONE) 
                  <(ID: 329) SEQUENCE_R (address field) 
                     <(ID: 328) NULL_CHECK (reference) 
                        <(ID: 314) IDENTITY (reference)  (ref count: 3)
                     <(ID: 324) CONST_MB (address field)  (java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;)
            <(ID: 334) PARAMETER (reference) 
               <(ID: 331) CONST_STRING_ICELL (reference)  (stringICell 0x80cd18)

               <(ID: 333) NULL_PARAMETER (NONE) 
         <(ID: 337) SEQUENCE_R (address field) 
            <(ID: 336) NULL_CHECK (reference) 
               <(ID: 330) IDENTITY (reference)  (ref count: 2)
            <(ID: 332) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)

   <(ID: 341) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 364) FETCH (32-bit field) 
         <(ID: 340) FIELD_REF (32-bit field) 
            <(ID: 297) IDENTITY (reference)  (ref count: 4)
            <(ID: 339) CONST_FIELD_OFFSET (NONE)  (20)

   <(ID: 358) IDENTITY (reference)  (ref count: 3)
      <(ID: 379) INVOKE (reference) 
         <(ID: 355) PARAMETER (reference) 
            <(ID: 338) IDENTITY (reference)  (ref count: 3)
            <(ID: 354) PARAMETER (int) 
               <(ID: 351) INVOKE (int) 
                  <(ID: 348) PARAMETER (reference) 
                     <(ID: 296) IDENTITY (reference)  (ref count: 4)
                     <(ID: 347) PARAMETER (32-bit field) 
                        <(ID: 341) IDENTITY (32-bit field)  (ref count: 2)
                        <(ID: 346) NULL_PARAMETER (NONE) 
                  <(ID: 350) FETCH_MB_FROM_VTABLE (address field) 
                     <(ID: 349) GET_VTBL (NONE) 
                        <(ID: 296) IDENTITY (reference)  (ref count: 4)
                     <(ID: 345) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 39)
               <(ID: 353) NULL_PARAMETER (NONE) 
         <(ID: 357) SEQUENCE_R (address field) 
            <(ID: 356) NULL_CHECK (reference) 
               <(ID: 338) IDENTITY (reference)  (ref count: 3)
            <(ID: 352) CONST_MB (address field)  (java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;)

   <(ID: 362) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 380) FETCH (32-bit field) 
         <(ID: 361) FIELD_REF (32-bit field) 
            <(ID: 297) IDENTITY (reference)  (ref count: 4)
            <(ID: 360) CONST_FIELD_OFFSET (NONE)  (19)

   <(ID: 378) IDENTITY (reference)  (ref count: 2)
      <(ID: 384) INVOKE (reference) 
         <(ID: 375) PARAMETER (reference) 
            <(ID: 372) IDENTITY (reference)  (ref count: 2)
               <(ID: 381) INVOKE (reference) 
                  <(ID: 369) PARAMETER (reference) 
                     <(ID: 358) IDENTITY (reference)  (ref count: 3)
                     <(ID: 368) PARAMETER (int) 
                        <(ID: 365) SUB (int) 
                           <(ID: 359) CONST_JAVA_NUMERIC32 (int)  (8)
                           <(ID: 362) IDENTITY (32-bit field)  (ref count: 2)
                        <(ID: 367) NULL_PARAMETER (NONE) 
                  <(ID: 371) SEQUENCE_R (address field) 
                     <(ID: 370) NULL_CHECK (reference) 
                        <(ID: 358) IDENTITY (reference)  (ref count: 3)
                     <(ID: 366) CONST_MB (address field)  (java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;)
            <(ID: 374) NULL_PARAMETER (NONE) 
         <(ID: 377) SEQUENCE_R (address field) 
            <(ID: 376) NULL_CHECK (reference) 
               <(ID: 372) IDENTITY (reference)  (ref count: 2)
            <(ID: 373) CONST_MB (address field)  (java.lang.StringBuffer.toString()Ljava/lang/String;)

   <(ID: 383) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 382) LOCAL (reference)   2>
      <(ID: 378) IDENTITY (reference)  (ref count: 2)


*************************************************
*
* (block ID:4 block PC:254 )
* IR root list contains 28 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x23
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:159)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<254>  (0x95815a):    aload_0 
<255>  (0x95815b):    agetfield_quick #27
<258>  (0x95815e):    agetfield_quick #16
<261>  (0x958161):    aload_2 
<262>  (0x958162):    invokevirtual_quick_w #67 <com.sun.mep.bench.Chess.MoveListManager.set(Ljava/lang/String;)V>
<265>  (0x958165):    aload_3 
<266>  (0x958166):    invokevirtual_quick_w #68 <com.sun.mep.bench.Chess.GameState.setToBoard()V>
<269>  (0x958169):    aload_3 
<270>  (0x95816a):    aload_0 
<271>  (0x95816b):    agetfield_quick #27
<274>  (0x95816e):    agetfield_quick #50
<277>  (0x958171):    invokevirtual_quick_w #70 <com.sun.mep.bench.Chess.GameState.archive(Ljava/lang/StringBuffer;)V>
<280>  (0x958174):    iconst_1 
<281>  (0x958175):    istore 7
<283>  (0x958177):    new_quick #71 <com.sun.mep.bench.Chess.Check4Mate>
<286>  (0x95817a):    dup 
<287>  (0x95817b):    aload_3 
<288>  (0x95817c):    aload_0 
<289>  (0x95817d):    agetfield_quick #27
<292>  (0x958180):    invokenonvirtual_quick #72 <com.sun.mep.bench.Chess.Check4Mate.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V>
<295>  (0x958183):    astore 8
<297>  (0x958185):    new_quick #73 <com.sun.mep.bench.Chess.Move>
<300>  (0x958188):    dup 
<301>  (0x958189):    invokenonvirtual_quick #74 <com.sun.mep.bench.Chess.Move.<init>()V>
<304>  (0x95818c):    astore 10
<306>  (0x95818e):    aload_1 
<307>  (0x95818f):    invokevirtual_quick_w #75 <com.sun.mep.bench.Chess.ChessPiece.getColour()C>
<310>  (0x958192):    bipush 119
<312>  (0x958194):    if_icmpne <529>
<315>  (0x958197):    iconst_1 
<316>  (0x958198):    istore 5
<318>  (0x95819a):    aload 8
<320>  (0x95819c):    iload 5
<322>  (0x95819e):    invokevirtual_quick_w #76 <com.sun.mep.bench.Chess.Check4Mate.check4check(I)Z>
<325>  (0x9581a1):    ifeq <764>
<328>  (0x9581a4):    aload_0 
<329>  (0x9581a5):    getfield #6 <com.sun.mep.bench.Chess.ChessPiece.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<332>  (0x9581a8):    getfield #77
<335>  (0x9581ab):    aload_3 
<336>  (0x9581ac):    invokevirtual #78
<339>  (0x9581af):    astore 11
<341>  (0x9581b1):    aload 11
<343>  (0x9581b3):    invokevirtual #79
<346>  (0x9581b6):    istore 6
<348>  (0x9581b8):    iconst_0 
<349>  (0x9581b9):    istore 12
<351>  (0x9581bb):    goto <471>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(386)
 	local(2)	ID(394)
 
Incoming Locals(6): 
	local(0)	ID(386)
 	<null>
	<null>
	<null>
	<null>
	local(2)	ID(394)
 
Assigned Locals(7): 
	ASSIGN(458): local(7)	ID(457)	rhsID(427)
 	ASSIGN(461): local(8)	ID(460)	rhsID(429)
 	ASSIGN(463): local(10)	ID(462)	rhsID(442)
 	ASSIGN(476): local(5)	ID(475)	rhsID(465)
 	ASSIGN(505): local(6)	ID(504)	rhsID(501)
 	ASSIGN(508): local(11)	ID(507)	rhsID(492)
 	ASSIGN(510): local(12)	ID(509)	rhsID(503)
 
Successor Blocks(3): 
	ID(6) LocalOrder(2) AssignOrder(3) RefsOK(0) Locals(1 <null> <null> <null> <null> <null>)
	ID(7) LocalOrder(2) AssignOrder(4) RefsOK(0) Locals(<null> <null> 0 <null> <null> <null>)
	ID(8) LocalOrder(2) AssignOrder(7) RefsOK(0) Locals(0 7 3 12 6 <null>)

   <(ID: 385) MAP_PC (NONE)   254>

   <(ID: 389) IDENTITY (reference)  (ref count: 2)
      <(ID: 393) FETCH (reference) 
         <(ID: 388) FIELD_REF (reference) 
            <(ID: 386) IDENTITY (reference)  (ref count: 4)
               <(ID: 414) LOCAL (reference)   0>
            <(ID: 387) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 392) IDENTITY (reference)  (ref count: 3)
      <(ID: 402) FETCH (reference) 
         <(ID: 391) FIELD_REF (reference) 
            <(ID: 389) IDENTITY (reference)  (ref count: 2)
            <(ID: 390) CONST_FIELD_OFFSET (NONE)  (16)

   <(ID: 401) INVOKE (v) 
      <(ID: 398) PARAMETER (reference) 
         <(ID: 392) IDENTITY (reference)  (ref count: 3)
         <(ID: 397) PARAMETER (reference) 
            <(ID: 394) LOCAL (reference)   2>
            <(ID: 396) NULL_PARAMETER (NONE) 
      <(ID: 400) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 399) GET_VTBL (NONE) 
            <(ID: 392) IDENTITY (reference)  (ref count: 3)
         <(ID: 395) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 409) INVOKE (v) 
      <(ID: 406) PARAMETER (reference) 
         <(ID: 403) IDENTITY (reference)  (ref count: 6)
            <(ID: 410) LOCAL (reference)   3>
         <(ID: 405) NULL_PARAMETER (NONE) 
      <(ID: 408) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 407) GET_VTBL (NONE) 
            <(ID: 403) IDENTITY (reference)  (ref count: 6)
         <(ID: 404) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 413) IDENTITY (reference)  (ref count: 2)
      <(ID: 418) FETCH (reference) 
         <(ID: 412) FIELD_REF (reference) 
            <(ID: 386) IDENTITY (reference)  (ref count: 4)
            <(ID: 411) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 417) IDENTITY (reference)  (ref count: 2)
      <(ID: 426) FETCH (reference) 
         <(ID: 416) FIELD_REF (reference) 
            <(ID: 413) IDENTITY (reference)  (ref count: 2)
            <(ID: 415) CONST_FIELD_OFFSET (NONE)  (50)

   <(ID: 425) INVOKE (v) 
      <(ID: 422) PARAMETER (reference) 
         <(ID: 403) IDENTITY (reference)  (ref count: 6)
         <(ID: 421) PARAMETER (reference) 
            <(ID: 417) IDENTITY (reference)  (ref count: 2)
            <(ID: 420) NULL_PARAMETER (NONE) 
      <(ID: 424) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 423) GET_VTBL (NONE) 
            <(ID: 403) IDENTITY (reference)  (ref count: 6)
         <(ID: 419) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 13)

   <(ID: 429) IDENTITY (reference)  (ref count: 5)
      <(ID: 439) NEW_OBJECT (reference) 
         <(ID: 428) CONST_CB (address field)  (com.sun.mep.bench.Chess.Check4Mate)

   <(ID: 432) IDENTITY (reference)  (ref count: 2)
      <(ID: 440) FETCH (reference) 
         <(ID: 431) FIELD_REF (reference) 
            <(ID: 386) IDENTITY (reference)  (ref count: 4)
            <(ID: 430) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 438) INVOKE (v) 
      <(ID: 437) PARAMETER (reference) 
         <(ID: 429) IDENTITY (reference)  (ref count: 5)
         <(ID: 436) PARAMETER (reference) 
            <(ID: 403) IDENTITY (reference)  (ref count: 6)
            <(ID: 435) PARAMETER (reference) 
               <(ID: 432) IDENTITY (reference)  (ref count: 2)
               <(ID: 434) NULL_PARAMETER (NONE) 
      <(ID: 433) CONST_MB (address field)  (com.sun.mep.bench.Chess.Check4Mate.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V)

   <(ID: 442) IDENTITY (reference)  (ref count: 3)
      <(ID: 447) NEW_OBJECT (reference) 
         <(ID: 441) CONST_CB (address field)  (com.sun.mep.bench.Chess.Move)

   <(ID: 446) INVOKE (v) 
      <(ID: 445) PARAMETER (reference) 
         <(ID: 442) IDENTITY (reference)  (ref count: 3)
         <(ID: 444) NULL_PARAMETER (NONE) 
      <(ID: 443) CONST_MB (address field)  (com.sun.mep.bench.Chess.Move.<init>()V)

   <(ID: 458) ASSIGN (int)  (assignIdx: 0)
      <(ID: 457) LOCAL (int)   7>
      <(ID: 427) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 454) IDENTITY (int)  (ref count: 2)
      <(ID: 464) INVOKE (int) 
         <(ID: 451) PARAMETER (reference) 
            <(ID: 448) IDENTITY (reference)  (ref count: 2)
               <(ID: 459) LOCAL (reference)   1>
            <(ID: 450) NULL_PARAMETER (NONE) 
         <(ID: 453) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 452) GET_VTBL (NONE) 
               <(ID: 448) IDENTITY (reference)  (ref count: 2)
            <(ID: 449) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 41)

   <(ID: 461) ASSIGN (reference)  (assignIdx: 1)
      <(ID: 460) LOCAL (reference)   8>
      <(ID: 429) IDENTITY (reference)  (ref count: 5)

   <(ID: 463) ASSIGN (reference)  (assignIdx: 2)
      <(ID: 462) LOCAL (reference)   10>
      <(ID: 442) IDENTITY (reference)  (ref count: 3)

   <(ID: 456) BCOND (int) 
   target: (BlockID: 6 BlockPC: 529)
   condition: NE
   flags: 0
      <(ID: 454) IDENTITY (int)  (ref count: 2)
      <(ID: 455) CONST_JAVA_NUMERIC32 (int)  (119)


   <(ID: 472) IDENTITY (int)  (ref count: 2)
      <(ID: 477) INVOKE (int) 
         <(ID: 469) PARAMETER (reference) 
            <(ID: 429) IDENTITY (reference)  (ref count: 5)
            <(ID: 468) PARAMETER (int) 
               <(ID: 465) CONST_JAVA_NUMERIC32 (int)  (ref count: 2) (1)
               <(ID: 467) NULL_PARAMETER (NONE) 
         <(ID: 471) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 470) GET_VTBL (NONE) 
               <(ID: 429) IDENTITY (reference)  (ref count: 5)
            <(ID: 466) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 476) ASSIGN (int)  (assignIdx: 3)
      <(ID: 475) LOCAL (int)   5>
      <(ID: 465) CONST_JAVA_NUMERIC32 (int)  (ref count: 2)

   <(ID: 474) BCOND (int) 
   target: (BlockID: 7 BlockPC: 764)
   condition: EQ
   flags: 0
      <(ID: 472) IDENTITY (int)  (ref count: 2)
      <(ID: 473) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 480) IDENTITY (reference)  (ref count: 2)
      <(ID: 493) FETCH (reference) 
         <(ID: 479) FIELD_REF (reference) 
            <(ID: 386) IDENTITY (reference)  (ref count: 4)
            <(ID: 478) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 492) IDENTITY (reference)  (ref count: 4)
      <(ID: 502) INVOKE (reference) 
         <(ID: 489) PARAMETER (reference) 
            <(ID: 484) IDENTITY (reference)  (ref count: 2)
               <(ID: 494) FETCH (reference) 
                  <(ID: 483) FIELD_REF (reference) volatile 
                     <(ID: 480) IDENTITY (reference)  (ref count: 2)
                     <(ID: 482) RESOLVE_REFERENCE (NONE) 
                        <(ID: 481) CONST_GETFIELD_FB_UNRESOLVED (NONE)  (cpIndex 77)
            <(ID: 488) PARAMETER (reference) 
               <(ID: 403) IDENTITY (reference)  (ref count: 6)
               <(ID: 487) NULL_PARAMETER (NONE) 
         <(ID: 491) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 490) GET_VTBL (NONE) 
               <(ID: 484) IDENTITY (reference)  (ref count: 2)
            <(ID: 486) RESOLVE_REFERENCE (NONE) 
               <(ID: 485) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 78)

   <(ID: 501) IDENTITY (int)  (ref count: 2)
      <(ID: 506) INVOKE (int) 
         <(ID: 498) PARAMETER (reference) 
            <(ID: 492) IDENTITY (reference)  (ref count: 4)
            <(ID: 497) NULL_PARAMETER (NONE) 
         <(ID: 500) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 499) GET_VTBL (NONE) 
               <(ID: 492) IDENTITY (reference)  (ref count: 4)
            <(ID: 496) RESOLVE_REFERENCE (NONE) 
               <(ID: 495) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 79)

   <(ID: 505) ASSIGN (int)  (assignIdx: 4)
      <(ID: 504) LOCAL (int)   6>
      <(ID: 501) IDENTITY (int)  (ref count: 2)

   <(ID: 508) ASSIGN (reference)  (assignIdx: 5)
      <(ID: 507) LOCAL (reference)   11>
      <(ID: 492) IDENTITY (reference)  (ref count: 4)

   <(ID: 510) ASSIGN (int)  (assignIdx: 6)
      <(ID: 509) LOCAL (int)   12>
      <(ID: 503) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 511) GOTO (NONE) 
   target: (BlockID: 8 BlockPC: 471)


*************************************************
*
* (block ID:9 block PC:354 )
* IR root list contains 20 root nodes: in block 
* flags: 0x361
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x4
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:181)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<354>  (0x9581be):    aload_3 
<355>  (0x9581bf):    invokevirtual #68 <com.sun.mep.bench.Chess.GameState.setToBoard()V>
<358>  (0x9581c2):    aload 11
<360>  (0x9581c4):    iload 12
<362>  (0x9581c6):    invokevirtual #80
<365>  (0x9581c9):    checkcast #81
<368>  (0x9581cc):    astore 9
<370>  (0x9581ce):    aload 10
<372>  (0x9581d0):    aload 9
<374>  (0x9581d2):    putfield #82
<377>  (0x9581d5):    aload_0 
<378>  (0x9581d6):    getfield #6 <com.sun.mep.bench.Chess.ChessPiece.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<381>  (0x9581d9):    getfield #77
<384>  (0x9581dc):    aload_3 
<385>  (0x9581dd):    aload 10
<387>  (0x9581df):    iload 5
<389>  (0x9581e1):    invokevirtual #83
<392>  (0x9581e4):    astore 4
<394>  (0x9581e6):    new #71 <com.sun.mep.bench.Chess.Check4Mate>
<397>  (0x9581e9):    dup 
<398>  (0x9581ea):    aload 4
<400>  (0x9581ec):    aload_0 
<401>  (0x9581ed):    getfield #6 <com.sun.mep.bench.Chess.ChessPiece.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<404>  (0x9581f0):    invokespecial #72 <com.sun.mep.bench.Chess.Check4Mate.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V>
<407>  (0x9581f3):    astore 13
<409>  (0x9581f5):    aload 13
<411>  (0x9581f7):    iload 5
<413>  (0x9581f9):    invokevirtual #76 <com.sun.mep.bench.Chess.Check4Mate.check4check(I)Z>
<416>  (0x9581fc):    istore 7
<418>  (0x9581fe):    iload 7
<420>  (0x958200):    ifne <468>
<423>  (0x958203):    aload_0 
<424>  (0x958204):    getfield #6 <com.sun.mep.bench.Chess.ChessPiece.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<427>  (0x958207):    getfield #84
<430>  (0x95820a):    new #43 <java.lang.StringBuffer>
<433>  (0x95820d):    dup 
<434>  (0x95820e):    invokespecial #44 <java.lang.StringBuffer.<init>()V>
<437>  (0x958211):    ldc #85
<439>  (0x958213):    invokevirtual #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<442>  (0x958216):    aload 9
<444>  (0x958218):    invokevirtual #86
<447>  (0x95821b):    ldc #87
<449>  (0x95821d):    invokevirtual #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<452>  (0x958220):    iload 12
<454>  (0x958222):    invokevirtual #63 <java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;>
<457>  (0x958225):    ldc #88
<459>  (0x958227):    invokevirtual #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<462>  (0x95822a):    invokevirtual #48 <java.lang.StringBuffer.toString()Ljava/lang/String;>
<465>  (0x95822d):    invokevirtual #33 <com.sun.mep.bench.Chess.DebugTextManager.set(Ljava/lang/String;)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 8 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(3)	ID(767)
 
Incoming Locals(3): 
	<null>
	<null>
	local(3)	ID(767)
 
Assigned Locals(4): 
	ASSIGN(843): local(4)	ID(842)	rhsID(813)
 	ASSIGN(845): local(7)	ID(844)	rhsID(838)
 	ASSIGN(848): local(9)	ID(847)	rhsID(787)
 	ASSIGN(850): local(13)	ID(849)	rhsID(818)
 
Successor Blocks(1): 
	ID(10) LocalOrder(1) AssignOrder(4) RefsOK(0) Locals(0 7 3 12 6)

   <(ID: 766) MAP_PC (NONE)   354>

   <(ID: 773) INVOKE (v) 
      <(ID: 770) PARAMETER (reference) 
         <(ID: 767) IDENTITY (reference)  (ref count: 3)
            <(ID: 774) LOCAL (reference)   3>
         <(ID: 769) NULL_PARAMETER (NONE) 
      <(ID: 772) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 771) GET_VTBL (NONE) 
            <(ID: 767) IDENTITY (reference)  (ref count: 3)
         <(ID: 768) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 787) IDENTITY (reference)  (ref count: 4)
      <(ID: 794) CHECKCAST (reference) 
         <(ID: 784) INVOKE (reference) 
            <(ID: 781) PARAMETER (reference) 
               <(ID: 775) IDENTITY (reference)  (ref count: 2)
                  <(ID: 788) LOCAL (reference)   11>
               <(ID: 780) PARAMETER (int) 
                  <(ID: 776) IDENTITY (int)  (ref count: 2)
                     <(ID: 919) LOCAL (int)   12>
                  <(ID: 779) NULL_PARAMETER (NONE) 
            <(ID: 783) FETCH_MB_FROM_VTABLE (address field) 
               <(ID: 782) GET_VTBL (NONE) 
                  <(ID: 775) IDENTITY (reference)  (ref count: 2)
               <(ID: 778) RESOLVE_REFERENCE (NONE) 
                  <(ID: 777) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 80)
         <(ID: 786) RESOLVE_REFERENCE (NONE) 
            <(ID: 785) CONST_CB_UNRESOLVED (NONE)  (cpIndex 81)

   <(ID: 793) ASSIGN (reference) 
      <(ID: 792) FIELD_REF (reference) volatile 
         <(ID: 789) IDENTITY (reference)  (ref count: 2)
            <(ID: 815) LOCAL (reference)   10>
         <(ID: 791) RESOLVE_REFERENCE (NONE) 
            <(ID: 790) CONST_PUTFIELD_FB_UNRESOLVED (NONE)  (cpIndex 82)
      <(ID: 787) IDENTITY (reference)  (ref count: 4)

   <(ID: 798) IDENTITY (reference)  (ref count: 2)
      <(ID: 814) FETCH (reference) 
         <(ID: 797) FIELD_REF (reference) 
            <(ID: 795) IDENTITY (reference)  (ref count: 3)
               <(ID: 822) LOCAL (reference)   0>
            <(ID: 796) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 813) IDENTITY (reference)  (ref count: 3)
      <(ID: 830) INVOKE (reference) 
         <(ID: 810) PARAMETER (reference) 
            <(ID: 802) IDENTITY (reference)  (ref count: 2)
               <(ID: 816) FETCH (reference) 
                  <(ID: 801) FIELD_REF (reference) volatile 
                     <(ID: 798) IDENTITY (reference)  (ref count: 2)
                     <(ID: 800) RESOLVE_REFERENCE (NONE) 
                        <(ID: 799) CONST_GETFIELD_FB_UNRESOLVED (NONE)  (cpIndex 77)
            <(ID: 809) PARAMETER (reference) 
               <(ID: 767) IDENTITY (reference)  (ref count: 3)
               <(ID: 808) PARAMETER (reference) 
                  <(ID: 789) IDENTITY (reference)  (ref count: 2)
                  <(ID: 807) PARAMETER (int) 
                     <(ID: 803) IDENTITY (int)  (ref count: 2)
                        <(ID: 839) LOCAL (int)   5>
                     <(ID: 806) NULL_PARAMETER (NONE) 
         <(ID: 812) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 811) GET_VTBL (NONE) 
               <(ID: 802) IDENTITY (reference)  (ref count: 2)
            <(ID: 805) RESOLVE_REFERENCE (NONE) 
               <(ID: 804) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 83)

   <(ID: 818) IDENTITY (reference)  (ref count: 5)
      <(ID: 829) NEW_OBJECT (reference) 
         <(ID: 817) CONST_CB (address field)  (com.sun.mep.bench.Chess.Check4Mate)

   <(ID: 821) IDENTITY (reference)  (ref count: 2)
      <(ID: 831) FETCH (reference) 
         <(ID: 820) FIELD_REF (reference) 
            <(ID: 795) IDENTITY (reference)  (ref count: 3)
            <(ID: 819) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 828) INVOKE (v) 
      <(ID: 827) PARAMETER (reference) 
         <(ID: 818) IDENTITY (reference)  (ref count: 5)
         <(ID: 826) PARAMETER (reference) 
            <(ID: 813) IDENTITY (reference)  (ref count: 3)
            <(ID: 825) PARAMETER (reference) 
               <(ID: 821) IDENTITY (reference)  (ref count: 2)
               <(ID: 824) NULL_PARAMETER (NONE) 
      <(ID: 823) CONST_MB (address field)  (com.sun.mep.bench.Chess.Check4Mate.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V)

   <(ID: 838) IDENTITY (int)  (ref count: 3)
      <(ID: 846) INVOKE (int) 
         <(ID: 835) PARAMETER (reference) 
            <(ID: 818) IDENTITY (reference)  (ref count: 5)
            <(ID: 834) PARAMETER (int) 
               <(ID: 803) IDENTITY (int)  (ref count: 2)
               <(ID: 833) NULL_PARAMETER (NONE) 
         <(ID: 837) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 836) GET_VTBL (NONE) 
               <(ID: 818) IDENTITY (reference)  (ref count: 5)
            <(ID: 832) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 843) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 842) LOCAL (reference)   4>
      <(ID: 813) IDENTITY (reference)  (ref count: 3)

   <(ID: 845) ASSIGN (int)  (assignIdx: 1)
      <(ID: 844) LOCAL (int)   7>
      <(ID: 838) IDENTITY (int)  (ref count: 3)

   <(ID: 848) ASSIGN (reference)  (assignIdx: 2)
      <(ID: 847) LOCAL (reference)   9>
      <(ID: 787) IDENTITY (reference)  (ref count: 4)

   <(ID: 850) ASSIGN (reference)  (assignIdx: 3)
      <(ID: 849) LOCAL (reference)   13>
      <(ID: 818) IDENTITY (reference)  (ref count: 5)

   <(ID: 841) BCOND (int) 
   target: (BlockID: 10 BlockPC: 468)
   condition: NE
   flags: 0
      <(ID: 838) IDENTITY (int)  (ref count: 3)
      <(ID: 840) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 853) IDENTITY (reference)  (ref count: 2)
      <(ID: 864) FETCH (reference) 
         <(ID: 852) FIELD_REF (reference) 
            <(ID: 795) IDENTITY (reference)  (ref count: 3)
            <(ID: 851) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 857) IDENTITY (reference)  (ref count: 3)
      <(ID: 916) FETCH (reference) 
         <(ID: 856) FIELD_REF (reference) volatile 
            <(ID: 853) IDENTITY (reference)  (ref count: 2)
            <(ID: 855) RESOLVE_REFERENCE (NONE) 
               <(ID: 854) CONST_GETFIELD_FB_UNRESOLVED (NONE)  (cpIndex 84)

   <(ID: 859) IDENTITY (reference)  (ref count: 3)
      <(ID: 865) NEW_OBJECT (reference) 
         <(ID: 858) CONST_CB (address field)  (java.lang.StringBuffer)

   <(ID: 863) INVOKE (v) 
      <(ID: 862) PARAMETER (reference) 
         <(ID: 859) IDENTITY (reference)  (ref count: 3)
         <(ID: 861) NULL_PARAMETER (NONE) 
      <(ID: 860) CONST_MB (address field)  (java.lang.StringBuffer.<init>()V)

   <(ID: 915) INVOKE (v) 
      <(ID: 912) PARAMETER (reference) 
         <(ID: 857) IDENTITY (reference)  (ref count: 3)
         <(ID: 911) PARAMETER (reference) 
            <(ID: 908) INVOKE (reference) 
               <(ID: 905) PARAMETER (reference) 
                  <(ID: 902) IDENTITY (reference)  (ref count: 2)
                     <(ID: 922) INVOKE (reference) 
                        <(ID: 899) PARAMETER (reference) 
                           <(ID: 894) IDENTITY (reference)  (ref count: 2)
                              <(ID: 921) INVOKE (reference) 
                                 <(ID: 891) PARAMETER (reference) 
                                    <(ID: 887) IDENTITY (reference)  (ref count: 2)
                                       <(ID: 920) INVOKE (reference) 
                                          <(ID: 884) PARAMETER (reference) 
                                             <(ID: 879) IDENTITY (reference)  (ref count: 2)
                                                <(ID: 918) INVOKE (reference) 
                                                   <(ID: 876) PARAMETER (reference) 
                                                      <(ID: 871) IDENTITY (reference)  (ref count: 2)
                                                         <(ID: 917) INVOKE (reference) 
                                                            <(ID: 870) PARAMETER (reference) 
                                                               <(ID: 859) IDENTITY (reference)  (ref count: 3)
                                                               <(ID: 869) PARAMETER (reference) 
                                                                  <(ID: 866) CONST_STRING_ICELL (reference)  (stringICell 0x90de20)

                                                                  <(ID: 868) NULL_PARAMETER (NONE) 
                                                            <(ID: 867) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                                                      <(ID: 875) PARAMETER (reference) 
                                                         <(ID: 787) IDENTITY (reference)  (ref count: 4)
                                                         <(ID: 874) NULL_PARAMETER (NONE) 
                                                   <(ID: 878) FETCH_MB_FROM_VTABLE (address field) 
                                                      <(ID: 877) GET_VTBL (NONE) 
                                                         <(ID: 871) IDENTITY (reference)  (ref count: 2)
                                                      <(ID: 873) RESOLVE_REFERENCE (NONE) 
                                                         <(ID: 872) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 86)
                                             <(ID: 883) PARAMETER (reference) 
                                                <(ID: 880) CONST_STRING_ICELL (reference)  (stringICell 0x80ba40)

                                                <(ID: 882) NULL_PARAMETER (NONE) 
                                          <(ID: 886) SEQUENCE_R (address field) 
                                             <(ID: 885) NULL_CHECK (reference) 
                                                <(ID: 879) IDENTITY (reference)  (ref count: 2)
                                             <(ID: 881) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                                    <(ID: 890) PARAMETER (int) 
                                       <(ID: 776) IDENTITY (int)  (ref count: 2)
                                       <(ID: 889) NULL_PARAMETER (NONE) 
                                 <(ID: 893) SEQUENCE_R (address field) 
                                    <(ID: 892) NULL_CHECK (reference) 
                                       <(ID: 887) IDENTITY (reference)  (ref count: 2)
                                    <(ID: 888) CONST_MB (address field)  (java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;)
                           <(ID: 898) PARAMETER (reference) 
                              <(ID: 895) CONST_STRING_ICELL (reference)  (stringICell 0x90dca4)

                              <(ID: 897) NULL_PARAMETER (NONE) 
                        <(ID: 901) SEQUENCE_R (address field) 
                           <(ID: 900) NULL_CHECK (reference) 
                              <(ID: 894) IDENTITY (reference)  (ref count: 2)
                           <(ID: 896) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                  <(ID: 904) NULL_PARAMETER (NONE) 
               <(ID: 907) SEQUENCE_R (address field) 
                  <(ID: 906) NULL_CHECK (reference) 
                     <(ID: 902) IDENTITY (reference)  (ref count: 2)
                  <(ID: 903) CONST_MB (address field)  (java.lang.StringBuffer.toString()Ljava/lang/String;)
            <(ID: 910) NULL_PARAMETER (NONE) 
      <(ID: 914) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 913) GET_VTBL (NONE) 
            <(ID: 857) IDENTITY (reference)  (ref count: 3)
         <(ID: 909) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)


*************************************************
*
* (block ID:10 block PC:468 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1d
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:179)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<468>  (0x958230):    iinc 12 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 4 8 9 10 11 13 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(12)	ID(1145)
 
Incoming Locals(5): 
	local(0)	ID(1125)
 	local(7)	ID(723)
 	local(3)	ID(767)
 	local(12)	ID(1145)
 	local(6)	ID(606)
 
Assigned Locals(1): 
	ASSIGN(1149): local(12)	ID(1148)	rhsID(1147)
 
Successor Blocks(1): 
	ID(8) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(0 7 3 12 6 <null>)

   <(ID: 1144) MAP_PC (NONE)   468>

   <(ID: 1145) IDENTITY (int)  (ref count: 2)
      <(ID: 1150) LOCAL (int)   12>

   <(ID: 1149) ASSIGN (int)  (assignIdx: 0)
      <(ID: 1148) LOCAL (int)   12>
      <(ID: 1147) ADD (int) 
         <(ID: 1145) IDENTITY (int)  (ref count: 2)
         <(ID: 1146) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:8 block PC:471 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3f
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:179)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<471>  (0x958233):    iload 12
<473>  (0x958235):    iload 6
<475>  (0x958237):    if_icmpge <483>
<478>  (0x95823a):    iload 7
<480>  (0x95823c):    ifne <354>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 8 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(12)	ID(605)
 	local(6)	ID(606)
 	local(7)	ID(608)
 
Incoming Locals(6): 
	local(0)	ID(1125)
 	local(7)	ID(723)
 	local(3)	ID(767)
 	local(12)	ID(605)
 	local(6)	ID(606)
 	<null>

Successor Blocks(2): 
	ID(11) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(0 7)
	ID(9) LocalOrder(3) AssignOrder(0) RefsOK(1) Locals(<null> <null> 3)

   <(ID: 604) MAP_PC (NONE)   471>

   <(ID: 607) BCOND (int) 
   target: (BlockID: 11 BlockPC: 483)
   condition: GE
   flags: 0
      <(ID: 605) LOCAL (int)   12>
      <(ID: 606) LOCAL (int)   6>


   <(ID: 610) BCOND (int) 
   target: (BlockID: 9 BlockPC: 354)
   condition: NE
   flags: 0
      <(ID: 608) LOCAL (int)   7>
      <(ID: 609) CONST_JAVA_NUMERIC32 (int)  (0)



*************************************************
*
* (block ID:11 block PC:483 )
* IR root list contains 7 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:193)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<483>  (0x95823f):    iload 7
<485>  (0x958241):    ifeq <514>
<488>  (0x958244):    aload_0 
<489>  (0x958245):    getfield #6 <com.sun.mep.bench.Chess.ChessPiece.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<492>  (0x958248):    getfield #89
<495>  (0x95824b):    ldc #90
<497>  (0x95824d):    invokevirtual #33 <com.sun.mep.bench.Chess.DebugTextManager.set(Ljava/lang/String;)V>
<500>  (0x958250):    aload_0 
<501>  (0x958251):    getfield #6 <com.sun.mep.bench.Chess.ChessPiece.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<504>  (0x958254):    aload_1 
<505>  (0x958255):    invokevirtual #75 <com.sun.mep.bench.Chess.ChessPiece.getColour()C>
<508>  (0x958258):    invokevirtual #91
<511>  (0x95825b):    goto <764>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 8 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(7)	ID(723)
 	local(0)	ID(726)
 
Incoming Locals(2): 
	local(0)	ID(1125)
 	local(7)	ID(723)
 
Successor Blocks(2): 
	ID(12) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(0)
	ID(7) LocalOrder(2) AssignOrder(0) RefsOK(0) Locals(<null> <null> 0 <null> <null> <null>)

   <(ID: 722) MAP_PC (NONE)   483>

   <(ID: 725) BCOND (int) 
   target: (BlockID: 12 BlockPC: 514)
   condition: EQ
   flags: 0
      <(ID: 723) LOCAL (int)   7>
      <(ID: 724) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 729) IDENTITY (reference)  (ref count: 2)
      <(ID: 742) FETCH (reference) 
         <(ID: 728) FIELD_REF (reference) 
            <(ID: 726) IDENTITY (reference)  (ref count: 2)
               <(ID: 747) LOCAL (reference)   0>
            <(ID: 727) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 741) INVOKE (v) 
      <(ID: 738) PARAMETER (reference) 
         <(ID: 733) IDENTITY (reference)  (ref count: 2)
            <(ID: 743) FETCH (reference) 
               <(ID: 732) FIELD_REF (reference) volatile 
                  <(ID: 729) IDENTITY (reference)  (ref count: 2)
                  <(ID: 731) RESOLVE_REFERENCE (NONE) 
                     <(ID: 730) CONST_GETFIELD_FB_UNRESOLVED (NONE)  (cpIndex 89)
         <(ID: 737) PARAMETER (reference) 
            <(ID: 734) CONST_STRING_ICELL (reference)  (stringICell 0x90e6c4)

            <(ID: 736) NULL_PARAMETER (NONE) 
      <(ID: 740) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 739) GET_VTBL (NONE) 
            <(ID: 733) IDENTITY (reference)  (ref count: 2)
         <(ID: 735) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 746) IDENTITY (reference)  (ref count: 3)
      <(ID: 763) FETCH (reference) 
         <(ID: 745) FIELD_REF (reference) 
            <(ID: 726) IDENTITY (reference)  (ref count: 2)
            <(ID: 744) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 762) INVOKE (v) 
      <(ID: 759) PARAMETER (reference) 
         <(ID: 746) IDENTITY (reference)  (ref count: 3)
         <(ID: 758) PARAMETER (int) 
            <(ID: 754) INVOKE (int) 
               <(ID: 751) PARAMETER (reference) 
                  <(ID: 748) IDENTITY (reference)  (ref count: 2)
                     <(ID: 764) LOCAL (reference)   1>
                  <(ID: 750) NULL_PARAMETER (NONE) 
               <(ID: 753) FETCH_MB_FROM_VTABLE (address field) 
                  <(ID: 752) GET_VTBL (NONE) 
                     <(ID: 748) IDENTITY (reference)  (ref count: 2)
                  <(ID: 749) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 41)
            <(ID: 757) NULL_PARAMETER (NONE) 
      <(ID: 761) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 760) GET_VTBL (NONE) 
            <(ID: 746) IDENTITY (reference)  (ref count: 3)
         <(ID: 756) RESOLVE_REFERENCE (NONE) 
            <(ID: 755) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 91)

   <(ID: 765) GOTO (NONE) 
   target: (BlockID: 7 BlockPC: 764)


*************************************************
*
* (block ID:12 block PC:514 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:200)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<514>  (0x95825e):    aload_0 
<515>  (0x95825f):    getfield #6 <com.sun.mep.bench.Chess.ChessPiece.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<518>  (0x958262):    getfield #92
<521>  (0x958265):    ldc #93
<523>  (0x958267):    invokevirtual #33 <com.sun.mep.bench.Chess.DebugTextManager.set(Ljava/lang/String;)V>
<526>  (0x95826a):    goto <764>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 8 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(1125)
 
Incoming Locals(1): 
	local(0)	ID(1125)
 
Successor Blocks(1): 
	ID(7) LocalOrder(1) AssignOrder(0) RefsOK(0) Locals(<null> <null> 0 <null> <null> <null>)

   <(ID: 1124) MAP_PC (NONE)   514>

   <(ID: 1128) IDENTITY (reference)  (ref count: 2)
      <(ID: 1141) FETCH (reference) 
         <(ID: 1127) FIELD_REF (reference) 
            <(ID: 1125) LOCAL (reference)   0>
            <(ID: 1126) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 1140) INVOKE (v) 
      <(ID: 1137) PARAMETER (reference) 
         <(ID: 1132) IDENTITY (reference)  (ref count: 2)
            <(ID: 1142) FETCH (reference) 
               <(ID: 1131) FIELD_REF (reference) volatile 
                  <(ID: 1128) IDENTITY (reference)  (ref count: 2)
                  <(ID: 1130) RESOLVE_REFERENCE (NONE) 
                     <(ID: 1129) CONST_GETFIELD_FB_UNRESOLVED (NONE)  (cpIndex 92)
         <(ID: 1136) PARAMETER (reference) 
            <(ID: 1133) CONST_STRING_ICELL (reference)  (stringICell 0x90e2e4)

            <(ID: 1135) NULL_PARAMETER (NONE) 
      <(ID: 1139) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 1138) GET_VTBL (NONE) 
            <(ID: 1132) IDENTITY (reference)  (ref count: 2)
         <(ID: 1134) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 1143) GOTO (NONE) 
   target: (BlockID: 7 BlockPC: 764)


*************************************************
*
* (block ID:6 block PC:529 )
* IR root list contains 13 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x21
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:205)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<529>  (0x95826d):    aload_1 
<530>  (0x95826e):    invokevirtual_quick_w #75 <com.sun.mep.bench.Chess.ChessPiece.getColour()C>
<533>  (0x958271):    bipush 98
<535>  (0x958273):    if_icmpne <752>
<538>  (0x958276):    iconst_m1 
<539>  (0x958277):    istore 5
<541>  (0x958279):    aload 8
<543>  (0x95827b):    iload 5
<545>  (0x95827d):    invokevirtual_quick_w #76 <com.sun.mep.bench.Chess.Check4Mate.check4check(I)Z>
<548>  (0x958280):    ifeq <764>
<551>  (0x958283):    aload_0 
<552>  (0x958284):    getfield #6 <com.sun.mep.bench.Chess.ChessPiece.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<555>  (0x958287):    getfield #77
<558>  (0x95828a):    aload_3 
<559>  (0x95828b):    invokevirtual #94
<562>  (0x95828e):    astore 11
<564>  (0x958290):    aload 11
<566>  (0x958292):    invokevirtual #79
<569>  (0x958295):    istore 6
<571>  (0x958297):    iconst_0 
<572>  (0x958298):    istore 12
<574>  (0x95829a):    goto <694>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 8 10 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(1)	ID(513)
 
Incoming Locals(6): 
	local(1)	ID(513)
 	<null>
	<null>
	<null>
	<null>
	<null>

Assigned Locals(4): 
	ASSIGN(537): local(5)	ID(536)	rhsID(524)
 	ASSIGN(568): local(6)	ID(567)	rhsID(564)
 	ASSIGN(571): local(11)	ID(570)	rhsID(555)
 	ASSIGN(573): local(12)	ID(572)	rhsID(566)
 
Successor Blocks(3): 
	ID(13) LocalOrder(1) AssignOrder(0) RefsOK(0) Locals(<null> 0)
	ID(7) LocalOrder(1) AssignOrder(1) RefsOK(0) Locals(<null> <null> 0 <null> <null> <null>)
	ID(14) LocalOrder(1) AssignOrder(4) RefsOK(0) Locals(<null> 7 3 12 6 0)

   <(ID: 512) MAP_PC (NONE)   529>

   <(ID: 519) IDENTITY (int)  (ref count: 2)
      <(ID: 523) INVOKE (int) 
         <(ID: 516) PARAMETER (reference) 
            <(ID: 513) IDENTITY (reference)  (ref count: 2)
               <(ID: 522) LOCAL (reference)   1>
            <(ID: 515) NULL_PARAMETER (NONE) 
         <(ID: 518) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 517) GET_VTBL (NONE) 
               <(ID: 513) IDENTITY (reference)  (ref count: 2)
            <(ID: 514) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 41)

   <(ID: 521) BCOND (int) 
   target: (BlockID: 13 BlockPC: 752)
   condition: NE
   flags: 0
      <(ID: 519) IDENTITY (int)  (ref count: 2)
      <(ID: 520) CONST_JAVA_NUMERIC32 (int)  (98)


   <(ID: 532) IDENTITY (int)  (ref count: 2)
      <(ID: 538) INVOKE (int) 
         <(ID: 529) PARAMETER (reference) 
            <(ID: 525) IDENTITY (reference)  (ref count: 2)
               <(ID: 535) LOCAL (reference)   8>
            <(ID: 528) PARAMETER (int) 
               <(ID: 524) CONST_JAVA_NUMERIC32 (int)  (ref count: 2) (-1)
               <(ID: 527) NULL_PARAMETER (NONE) 
         <(ID: 531) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 530) GET_VTBL (NONE) 
               <(ID: 525) IDENTITY (reference)  (ref count: 2)
            <(ID: 526) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 537) ASSIGN (int)  (assignIdx: 0)
      <(ID: 536) LOCAL (int)   5>
      <(ID: 524) CONST_JAVA_NUMERIC32 (int)  (ref count: 2)

   <(ID: 534) BCOND (int) 
   target: (BlockID: 7 BlockPC: 764)
   condition: EQ
   flags: 0
      <(ID: 532) IDENTITY (int)  (ref count: 2)
      <(ID: 533) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 542) IDENTITY (reference)  (ref count: 2)
      <(ID: 556) FETCH (reference) 
         <(ID: 541) FIELD_REF (reference) 
            <(ID: 539) LOCAL (reference)   0>
            <(ID: 540) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 555) IDENTITY (reference)  (ref count: 4)
      <(ID: 565) INVOKE (reference) 
         <(ID: 552) PARAMETER (reference) 
            <(ID: 546) IDENTITY (reference)  (ref count: 2)
               <(ID: 557) FETCH (reference) 
                  <(ID: 545) FIELD_REF (reference) volatile 
                     <(ID: 542) IDENTITY (reference)  (ref count: 2)
                     <(ID: 544) RESOLVE_REFERENCE (NONE) 
                        <(ID: 543) CONST_GETFIELD_FB_UNRESOLVED (NONE)  (cpIndex 77)
            <(ID: 551) PARAMETER (reference) 
               <(ID: 547) LOCAL (reference)   3>
               <(ID: 550) NULL_PARAMETER (NONE) 
         <(ID: 554) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 553) GET_VTBL (NONE) 
               <(ID: 546) IDENTITY (reference)  (ref count: 2)
            <(ID: 549) RESOLVE_REFERENCE (NONE) 
               <(ID: 548) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 94)

   <(ID: 564) IDENTITY (int)  (ref count: 2)
      <(ID: 569) INVOKE (int) 
         <(ID: 561) PARAMETER (reference) 
            <(ID: 555) IDENTITY (reference)  (ref count: 4)
            <(ID: 560) NULL_PARAMETER (NONE) 
         <(ID: 563) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 562) GET_VTBL (NONE) 
               <(ID: 555) IDENTITY (reference)  (ref count: 4)
            <(ID: 559) RESOLVE_REFERENCE (NONE) 
               <(ID: 558) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 79)

   <(ID: 568) ASSIGN (int)  (assignIdx: 1)
      <(ID: 567) LOCAL (int)   6>
      <(ID: 564) IDENTITY (int)  (ref count: 2)

   <(ID: 571) ASSIGN (reference)  (assignIdx: 2)
      <(ID: 570) LOCAL (reference)   11>
      <(ID: 555) IDENTITY (reference)  (ref count: 4)

   <(ID: 573) ASSIGN (int)  (assignIdx: 3)
      <(ID: 572) LOCAL (int)   12>
      <(ID: 566) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 574) GOTO (NONE) 
   target: (BlockID: 14 BlockPC: 694)


*************************************************
*
* (block ID:15 block PC:577 )
* IR root list contains 20 root nodes: in block 
* flags: 0x361
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x24
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:213)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<577>  (0x95829d):    aload_3 
<578>  (0x95829e):    invokevirtual #68 <com.sun.mep.bench.Chess.GameState.setToBoard()V>
<581>  (0x9582a1):    aload 11
<583>  (0x9582a3):    iload 12
<585>  (0x9582a5):    invokevirtual #80
<588>  (0x9582a8):    checkcast #81
<591>  (0x9582ab):    astore 9
<593>  (0x9582ad):    aload 10
<595>  (0x9582af):    aload 9
<597>  (0x9582b1):    putfield #82
<600>  (0x9582b4):    aload_0 
<601>  (0x9582b5):    getfield #6 <com.sun.mep.bench.Chess.ChessPiece.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<604>  (0x9582b8):    getfield #77
<607>  (0x9582bb):    aload_3 
<608>  (0x9582bc):    aload 10
<610>  (0x9582be):    iload 5
<612>  (0x9582c0):    invokevirtual #83
<615>  (0x9582c3):    astore 4
<617>  (0x9582c5):    new #71 <com.sun.mep.bench.Chess.Check4Mate>
<620>  (0x9582c8):    dup 
<621>  (0x9582c9):    aload 4
<623>  (0x9582cb):    aload_0 
<624>  (0x9582cc):    getfield #6 <com.sun.mep.bench.Chess.ChessPiece.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<627>  (0x9582cf):    invokespecial #72 <com.sun.mep.bench.Chess.Check4Mate.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V>
<630>  (0x9582d2):    astore 13
<632>  (0x9582d4):    aload 13
<634>  (0x9582d6):    iload 5
<636>  (0x9582d8):    invokevirtual #76 <com.sun.mep.bench.Chess.Check4Mate.check4check(I)Z>
<639>  (0x9582db):    istore 7
<641>  (0x9582dd):    iload 7
<643>  (0x9582df):    ifne <691>
<646>  (0x9582e2):    aload_0 
<647>  (0x9582e3):    getfield #6 <com.sun.mep.bench.Chess.ChessPiece.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<650>  (0x9582e6):    getfield #95
<653>  (0x9582e9):    new #43 <java.lang.StringBuffer>
<656>  (0x9582ec):    dup 
<657>  (0x9582ed):    invokespecial #44 <java.lang.StringBuffer.<init>()V>
<660>  (0x9582f0):    ldc #85
<662>  (0x9582f2):    invokevirtual #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<665>  (0x9582f5):    aload 9
<667>  (0x9582f7):    invokevirtual #86
<670>  (0x9582fa):    ldc #87
<672>  (0x9582fc):    invokevirtual #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<675>  (0x9582ff):    iload 12
<677>  (0x958301):    invokevirtual #63 <java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;>
<680>  (0x958304):    ldc #88
<682>  (0x958306):    invokevirtual #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<685>  (0x958309):    invokevirtual #48 <java.lang.StringBuffer.toString()Ljava/lang/String;>
<688>  (0x95830c):    invokevirtual #33 <com.sun.mep.bench.Chess.DebugTextManager.set(Ljava/lang/String;)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 8 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(3)	ID(968)
 
Incoming Locals(6): 
	<null>
	<null>
	local(3)	ID(968)
 	<null>
	<null>
	<null>

Assigned Locals(4): 
	ASSIGN(1044): local(4)	ID(1043)	rhsID(1014)
 	ASSIGN(1046): local(7)	ID(1045)	rhsID(1039)
 	ASSIGN(1049): local(9)	ID(1048)	rhsID(988)
 	ASSIGN(1051): local(13)	ID(1050)	rhsID(1019)
 
Successor Blocks(1): 
	ID(16) LocalOrder(1) AssignOrder(4) RefsOK(0) Locals(0 <null> 3 12 6 7)

   <(ID: 967) MAP_PC (NONE)   577>

   <(ID: 974) INVOKE (v) 
      <(ID: 971) PARAMETER (reference) 
         <(ID: 968) IDENTITY (reference)  (ref count: 3)
            <(ID: 975) LOCAL (reference)   3>
         <(ID: 970) NULL_PARAMETER (NONE) 
      <(ID: 973) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 972) GET_VTBL (NONE) 
            <(ID: 968) IDENTITY (reference)  (ref count: 3)
         <(ID: 969) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 988) IDENTITY (reference)  (ref count: 4)
      <(ID: 995) CHECKCAST (reference) 
         <(ID: 985) INVOKE (reference) 
            <(ID: 982) PARAMETER (reference) 
               <(ID: 976) IDENTITY (reference)  (ref count: 2)
                  <(ID: 989) LOCAL (reference)   11>
               <(ID: 981) PARAMETER (int) 
                  <(ID: 977) IDENTITY (int)  (ref count: 2)
                     <(ID: 1120) LOCAL (int)   12>
                  <(ID: 980) NULL_PARAMETER (NONE) 
            <(ID: 984) FETCH_MB_FROM_VTABLE (address field) 
               <(ID: 983) GET_VTBL (NONE) 
                  <(ID: 976) IDENTITY (reference)  (ref count: 2)
               <(ID: 979) RESOLVE_REFERENCE (NONE) 
                  <(ID: 978) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 80)
         <(ID: 987) RESOLVE_REFERENCE (NONE) 
            <(ID: 986) CONST_CB_UNRESOLVED (NONE)  (cpIndex 81)

   <(ID: 994) ASSIGN (reference) 
      <(ID: 993) FIELD_REF (reference) volatile 
         <(ID: 990) IDENTITY (reference)  (ref count: 2)
            <(ID: 1016) LOCAL (reference)   10>
         <(ID: 992) RESOLVE_REFERENCE (NONE) 
            <(ID: 991) CONST_PUTFIELD_FB_UNRESOLVED (NONE)  (cpIndex 82)
      <(ID: 988) IDENTITY (reference)  (ref count: 4)

   <(ID: 999) IDENTITY (reference)  (ref count: 2)
      <(ID: 1015) FETCH (reference) 
         <(ID: 998) FIELD_REF (reference) 
            <(ID: 996) IDENTITY (reference)  (ref count: 3)
               <(ID: 1023) LOCAL (reference)   0>
            <(ID: 997) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 1014) IDENTITY (reference)  (ref count: 3)
      <(ID: 1031) INVOKE (reference) 
         <(ID: 1011) PARAMETER (reference) 
            <(ID: 1003) IDENTITY (reference)  (ref count: 2)
               <(ID: 1017) FETCH (reference) 
                  <(ID: 1002) FIELD_REF (reference) volatile 
                     <(ID: 999) IDENTITY (reference)  (ref count: 2)
                     <(ID: 1001) RESOLVE_REFERENCE (NONE) 
                        <(ID: 1000) CONST_GETFIELD_FB_UNRESOLVED (NONE)  (cpIndex 77)
            <(ID: 1010) PARAMETER (reference) 
               <(ID: 968) IDENTITY (reference)  (ref count: 3)
               <(ID: 1009) PARAMETER (reference) 
                  <(ID: 990) IDENTITY (reference)  (ref count: 2)
                  <(ID: 1008) PARAMETER (int) 
                     <(ID: 1004) IDENTITY (int)  (ref count: 2)
                        <(ID: 1040) LOCAL (int)   5>
                     <(ID: 1007) NULL_PARAMETER (NONE) 
         <(ID: 1013) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 1012) GET_VTBL (NONE) 
               <(ID: 1003) IDENTITY (reference)  (ref count: 2)
            <(ID: 1006) RESOLVE_REFERENCE (NONE) 
               <(ID: 1005) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 83)

   <(ID: 1019) IDENTITY (reference)  (ref count: 5)
      <(ID: 1030) NEW_OBJECT (reference) 
         <(ID: 1018) CONST_CB (address field)  (com.sun.mep.bench.Chess.Check4Mate)

   <(ID: 1022) IDENTITY (reference)  (ref count: 2)
      <(ID: 1032) FETCH (reference) 
         <(ID: 1021) FIELD_REF (reference) 
            <(ID: 996) IDENTITY (reference)  (ref count: 3)
            <(ID: 1020) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 1029) INVOKE (v) 
      <(ID: 1028) PARAMETER (reference) 
         <(ID: 1019) IDENTITY (reference)  (ref count: 5)
         <(ID: 1027) PARAMETER (reference) 
            <(ID: 1014) IDENTITY (reference)  (ref count: 3)
            <(ID: 1026) PARAMETER (reference) 
               <(ID: 1022) IDENTITY (reference)  (ref count: 2)
               <(ID: 1025) NULL_PARAMETER (NONE) 
      <(ID: 1024) CONST_MB (address field)  (com.sun.mep.bench.Chess.Check4Mate.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V)

   <(ID: 1039) IDENTITY (int)  (ref count: 3)
      <(ID: 1047) INVOKE (int) 
         <(ID: 1036) PARAMETER (reference) 
            <(ID: 1019) IDENTITY (reference)  (ref count: 5)
            <(ID: 1035) PARAMETER (int) 
               <(ID: 1004) IDENTITY (int)  (ref count: 2)
               <(ID: 1034) NULL_PARAMETER (NONE) 
         <(ID: 1038) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 1037) GET_VTBL (NONE) 
               <(ID: 1019) IDENTITY (reference)  (ref count: 5)
            <(ID: 1033) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 1044) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 1043) LOCAL (reference)   4>
      <(ID: 1014) IDENTITY (reference)  (ref count: 3)

   <(ID: 1046) ASSIGN (int)  (assignIdx: 1)
      <(ID: 1045) LOCAL (int)   7>
      <(ID: 1039) IDENTITY (int)  (ref count: 3)

   <(ID: 1049) ASSIGN (reference)  (assignIdx: 2)
      <(ID: 1048) LOCAL (reference)   9>
      <(ID: 988) IDENTITY (reference)  (ref count: 4)

   <(ID: 1051) ASSIGN (reference)  (assignIdx: 3)
      <(ID: 1050) LOCAL (reference)   13>
      <(ID: 1019) IDENTITY (reference)  (ref count: 5)

   <(ID: 1042) BCOND (int) 
   target: (BlockID: 16 BlockPC: 691)
   condition: NE
   flags: 0
      <(ID: 1039) IDENTITY (int)  (ref count: 3)
      <(ID: 1041) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 1054) IDENTITY (reference)  (ref count: 2)
      <(ID: 1065) FETCH (reference) 
         <(ID: 1053) FIELD_REF (reference) 
            <(ID: 996) IDENTITY (reference)  (ref count: 3)
            <(ID: 1052) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 1058) IDENTITY (reference)  (ref count: 3)
      <(ID: 1117) FETCH (reference) 
         <(ID: 1057) FIELD_REF (reference) volatile 
            <(ID: 1054) IDENTITY (reference)  (ref count: 2)
            <(ID: 1056) RESOLVE_REFERENCE (NONE) 
               <(ID: 1055) CONST_GETFIELD_FB_UNRESOLVED (NONE)  (cpIndex 95)

   <(ID: 1060) IDENTITY (reference)  (ref count: 3)
      <(ID: 1066) NEW_OBJECT (reference) 
         <(ID: 1059) CONST_CB (address field)  (java.lang.StringBuffer)

   <(ID: 1064) INVOKE (v) 
      <(ID: 1063) PARAMETER (reference) 
         <(ID: 1060) IDENTITY (reference)  (ref count: 3)
         <(ID: 1062) NULL_PARAMETER (NONE) 
      <(ID: 1061) CONST_MB (address field)  (java.lang.StringBuffer.<init>()V)

   <(ID: 1116) INVOKE (v) 
      <(ID: 1113) PARAMETER (reference) 
         <(ID: 1058) IDENTITY (reference)  (ref count: 3)
         <(ID: 1112) PARAMETER (reference) 
            <(ID: 1109) INVOKE (reference) 
               <(ID: 1106) PARAMETER (reference) 
                  <(ID: 1103) IDENTITY (reference)  (ref count: 2)
                     <(ID: 1123) INVOKE (reference) 
                        <(ID: 1100) PARAMETER (reference) 
                           <(ID: 1095) IDENTITY (reference)  (ref count: 2)
                              <(ID: 1122) INVOKE (reference) 
                                 <(ID: 1092) PARAMETER (reference) 
                                    <(ID: 1088) IDENTITY (reference)  (ref count: 2)
                                       <(ID: 1121) INVOKE (reference) 
                                          <(ID: 1085) PARAMETER (reference) 
                                             <(ID: 1080) IDENTITY (reference)  (ref count: 2)
                                                <(ID: 1119) INVOKE (reference) 
                                                   <(ID: 1077) PARAMETER (reference) 
                                                      <(ID: 1072) IDENTITY (reference)  (ref count: 2)
                                                         <(ID: 1118) INVOKE (reference) 
                                                            <(ID: 1071) PARAMETER (reference) 
                                                               <(ID: 1060) IDENTITY (reference)  (ref count: 3)
                                                               <(ID: 1070) PARAMETER (reference) 
                                                                  <(ID: 1067) CONST_STRING_ICELL (reference)  (stringICell 0x90de20)

                                                                  <(ID: 1069) NULL_PARAMETER (NONE) 
                                                            <(ID: 1068) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                                                      <(ID: 1076) PARAMETER (reference) 
                                                         <(ID: 988) IDENTITY (reference)  (ref count: 4)
                                                         <(ID: 1075) NULL_PARAMETER (NONE) 
                                                   <(ID: 1079) FETCH_MB_FROM_VTABLE (address field) 
                                                      <(ID: 1078) GET_VTBL (NONE) 
                                                         <(ID: 1072) IDENTITY (reference)  (ref count: 2)
                                                      <(ID: 1074) RESOLVE_REFERENCE (NONE) 
                                                         <(ID: 1073) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 86)
                                             <(ID: 1084) PARAMETER (reference) 
                                                <(ID: 1081) CONST_STRING_ICELL (reference)  (stringICell 0x80ba40)

                                                <(ID: 1083) NULL_PARAMETER (NONE) 
                                          <(ID: 1087) SEQUENCE_R (address field) 
                                             <(ID: 1086) NULL_CHECK (reference) 
                                                <(ID: 1080) IDENTITY (reference)  (ref count: 2)
                                             <(ID: 1082) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                                    <(ID: 1091) PARAMETER (int) 
                                       <(ID: 977) IDENTITY (int)  (ref count: 2)
                                       <(ID: 1090) NULL_PARAMETER (NONE) 
                                 <(ID: 1094) SEQUENCE_R (address field) 
                                    <(ID: 1093) NULL_CHECK (reference) 
                                       <(ID: 1088) IDENTITY (reference)  (ref count: 2)
                                    <(ID: 1089) CONST_MB (address field)  (java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;)
                           <(ID: 1099) PARAMETER (reference) 
                              <(ID: 1096) CONST_STRING_ICELL (reference)  (stringICell 0x90dca4)

                              <(ID: 1098) NULL_PARAMETER (NONE) 
                        <(ID: 1102) SEQUENCE_R (address field) 
                           <(ID: 1101) NULL_CHECK (reference) 
                              <(ID: 1095) IDENTITY (reference)  (ref count: 2)
                           <(ID: 1097) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                  <(ID: 1105) NULL_PARAMETER (NONE) 
               <(ID: 1108) SEQUENCE_R (address field) 
                  <(ID: 1107) NULL_CHECK (reference) 
                     <(ID: 1103) IDENTITY (reference)  (ref count: 2)
                  <(ID: 1104) CONST_MB (address field)  (java.lang.StringBuffer.toString()Ljava/lang/String;)
            <(ID: 1111) NULL_PARAMETER (NONE) 
      <(ID: 1115) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 1114) GET_VTBL (NONE) 
            <(ID: 1058) IDENTITY (reference)  (ref count: 3)
         <(ID: 1110) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)


*************************************************
*
* (block ID:16 block PC:691 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3d
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:211)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<691>  (0x95830f):    iinc 12 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 4 8 9 10 11 13 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(12)	ID(1172)
 
Incoming Locals(6): 
	local(0)	ID(1152)
 	<null>
	local(3)	ID(968)
 	local(12)	ID(1172)
 	local(6)	ID(632)
 	local(7)	ID(924)
 
Assigned Locals(1): 
	ASSIGN(1176): local(12)	ID(1175)	rhsID(1174)
 
Successor Blocks(1): 
	ID(14) LocalOrder(1) AssignOrder(1) RefsOK(1) Locals(<null> 7 3 12 6 0)

   <(ID: 1171) MAP_PC (NONE)   691>

   <(ID: 1172) IDENTITY (int)  (ref count: 2)
      <(ID: 1177) LOCAL (int)   12>

   <(ID: 1176) ASSIGN (int)  (assignIdx: 0)
      <(ID: 1175) LOCAL (int)   12>
      <(ID: 1174) ADD (int) 
         <(ID: 1172) IDENTITY (int)  (ref count: 2)
         <(ID: 1173) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:14 block PC:694 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3f
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:211)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<694>  (0x958312):    iload 12
<696>  (0x958314):    iload 6
<698>  (0x958316):    if_icmpge <706>
<701>  (0x958319):    iload 7
<703>  (0x95831b):    ifne <577>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 8 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(3): 
	local(12)	ID(631)
 	local(6)	ID(632)
 	local(7)	ID(634)
 
Incoming Locals(6): 
	<null>
	local(7)	ID(924)
 	local(3)	ID(968)
 	local(12)	ID(631)
 	local(6)	ID(632)
 	local(0)	ID(1152)
 
Successor Blocks(2): 
	ID(17) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(0 7 <null> <null> <null> <null>)
	ID(15) LocalOrder(3) AssignOrder(0) RefsOK(1) Locals(<null> <null> 3 <null> <null> <null>)

   <(ID: 630) MAP_PC (NONE)   694>

   <(ID: 633) BCOND (int) 
   target: (BlockID: 17 BlockPC: 706)
   condition: GE
   flags: 0
      <(ID: 631) LOCAL (int)   12>
      <(ID: 632) LOCAL (int)   6>


   <(ID: 636) BCOND (int) 
   target: (BlockID: 15 BlockPC: 577)
   condition: NE
   flags: 0
      <(ID: 634) LOCAL (int)   7>
      <(ID: 635) CONST_JAVA_NUMERIC32 (int)  (0)



*************************************************
*
* (block ID:17 block PC:706 )
* IR root list contains 7 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x23
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:224)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<706>  (0x95831e):    iload 7
<708>  (0x958320):    ifeq <737>
<711>  (0x958323):    aload_0 
<712>  (0x958324):    getfield #6 <com.sun.mep.bench.Chess.ChessPiece.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<715>  (0x958327):    getfield #96
<718>  (0x95832a):    ldc #90
<720>  (0x95832c):    invokevirtual #33 <com.sun.mep.bench.Chess.DebugTextManager.set(Ljava/lang/String;)V>
<723>  (0x95832f):    aload_0 
<724>  (0x958330):    getfield #6 <com.sun.mep.bench.Chess.ChessPiece.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<727>  (0x958333):    aload_1 
<728>  (0x958334):    invokevirtual #75 <com.sun.mep.bench.Chess.ChessPiece.getColour()C>
<731>  (0x958337):    invokevirtual #91
<734>  (0x95833a):    goto <764>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 8 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(7)	ID(924)
 	local(0)	ID(927)
 
Incoming Locals(6): 
	local(0)	ID(1152)
 	local(7)	ID(924)
 	<null>
	<null>
	<null>
	<null>

Successor Blocks(2): 
	ID(18) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(0)
	ID(7) LocalOrder(2) AssignOrder(0) RefsOK(0) Locals(<null> <null> 0 <null> <null> <null>)

   <(ID: 923) MAP_PC (NONE)   706>

   <(ID: 926) BCOND (int) 
   target: (BlockID: 18 BlockPC: 737)
   condition: EQ
   flags: 0
      <(ID: 924) LOCAL (int)   7>
      <(ID: 925) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 930) IDENTITY (reference)  (ref count: 2)
      <(ID: 943) FETCH (reference) 
         <(ID: 929) FIELD_REF (reference) 
            <(ID: 927) IDENTITY (reference)  (ref count: 2)
               <(ID: 948) LOCAL (reference)   0>
            <(ID: 928) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 942) INVOKE (v) 
      <(ID: 939) PARAMETER (reference) 
         <(ID: 934) IDENTITY (reference)  (ref count: 2)
            <(ID: 944) FETCH (reference) 
               <(ID: 933) FIELD_REF (reference) volatile 
                  <(ID: 930) IDENTITY (reference)  (ref count: 2)
                  <(ID: 932) RESOLVE_REFERENCE (NONE) 
                     <(ID: 931) CONST_GETFIELD_FB_UNRESOLVED (NONE)  (cpIndex 96)
         <(ID: 938) PARAMETER (reference) 
            <(ID: 935) CONST_STRING_ICELL (reference)  (stringICell 0x90e6c4)

            <(ID: 937) NULL_PARAMETER (NONE) 
      <(ID: 941) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 940) GET_VTBL (NONE) 
            <(ID: 934) IDENTITY (reference)  (ref count: 2)
         <(ID: 936) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 947) IDENTITY (reference)  (ref count: 3)
      <(ID: 964) FETCH (reference) 
         <(ID: 946) FIELD_REF (reference) 
            <(ID: 927) IDENTITY (reference)  (ref count: 2)
            <(ID: 945) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 963) INVOKE (v) 
      <(ID: 960) PARAMETER (reference) 
         <(ID: 947) IDENTITY (reference)  (ref count: 3)
         <(ID: 959) PARAMETER (int) 
            <(ID: 955) INVOKE (int) 
               <(ID: 952) PARAMETER (reference) 
                  <(ID: 949) IDENTITY (reference)  (ref count: 2)
                     <(ID: 965) LOCAL (reference)   1>
                  <(ID: 951) NULL_PARAMETER (NONE) 
               <(ID: 954) FETCH_MB_FROM_VTABLE (address field) 
                  <(ID: 953) GET_VTBL (NONE) 
                     <(ID: 949) IDENTITY (reference)  (ref count: 2)
                  <(ID: 950) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 41)
            <(ID: 958) NULL_PARAMETER (NONE) 
      <(ID: 962) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 961) GET_VTBL (NONE) 
            <(ID: 947) IDENTITY (reference)  (ref count: 3)
         <(ID: 957) RESOLVE_REFERENCE (NONE) 
            <(ID: 956) CONST_METHOD_TABLE_INDEX_UNRESOLVED (NONE)  (cpIndex 91)

   <(ID: 966) GOTO (NONE) 
   target: (BlockID: 7 BlockPC: 764)


*************************************************
*
* (block ID:18 block PC:737 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:231)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<737>  (0x95833d):    aload_0 
<738>  (0x95833e):    getfield #6 <com.sun.mep.bench.Chess.ChessPiece.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<741>  (0x958341):    getfield #97
<744>  (0x958344):    ldc #93
<746>  (0x958346):    invokevirtual #33 <com.sun.mep.bench.Chess.DebugTextManager.set(Ljava/lang/String;)V>
<749>  (0x958349):    goto <764>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 8 10 11 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(1152)
 
Incoming Locals(1): 
	local(0)	ID(1152)
 
Successor Blocks(1): 
	ID(7) LocalOrder(1) AssignOrder(0) RefsOK(0) Locals(<null> <null> 0 <null> <null> <null>)

   <(ID: 1151) MAP_PC (NONE)   737>

   <(ID: 1155) IDENTITY (reference)  (ref count: 2)
      <(ID: 1168) FETCH (reference) 
         <(ID: 1154) FIELD_REF (reference) 
            <(ID: 1152) LOCAL (reference)   0>
            <(ID: 1153) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 1167) INVOKE (v) 
      <(ID: 1164) PARAMETER (reference) 
         <(ID: 1159) IDENTITY (reference)  (ref count: 2)
            <(ID: 1169) FETCH (reference) 
               <(ID: 1158) FIELD_REF (reference) volatile 
                  <(ID: 1155) IDENTITY (reference)  (ref count: 2)
                  <(ID: 1157) RESOLVE_REFERENCE (NONE) 
                     <(ID: 1156) CONST_GETFIELD_FB_UNRESOLVED (NONE)  (cpIndex 97)
         <(ID: 1163) PARAMETER (reference) 
            <(ID: 1160) CONST_STRING_ICELL (reference)  (stringICell 0x90e2e4)

            <(ID: 1162) NULL_PARAMETER (NONE) 
      <(ID: 1166) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 1165) GET_VTBL (NONE) 
            <(ID: 1159) IDENTITY (reference)  (ref count: 2)
         <(ID: 1161) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 1170) GOTO (NONE) 
   target: (BlockID: 7 BlockPC: 764)


*************************************************
*
* (block ID:13 block PC:752 )
* IR root list contains 3 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:236)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<752>  (0x95834c):    aload_0 
<753>  (0x95834d):    getfield #6 <com.sun.mep.bench.Chess.ChessPiece.cGame:Lcom/sun/mep/bench/Chess/ChessGame;>
<756>  (0x958350):    getfield #98
<759>  (0x958353):    ldc #99
<761>  (0x958355):    invokevirtual #33 <com.sun.mep.bench.Chess.DebugTextManager.set(Ljava/lang/String;)V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 8 10 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(612)
 
Incoming Locals(2): 
	<null>
	local(0)	ID(612)
 
Successor Blocks(1): 
	ID(7) LocalOrder(1) AssignOrder(0) RefsOK(0) Locals(<null> <null> 0 <null> <null> <null>)

   <(ID: 611) MAP_PC (NONE)   752>

   <(ID: 615) IDENTITY (reference)  (ref count: 2)
      <(ID: 628) FETCH (reference) 
         <(ID: 614) FIELD_REF (reference) 
            <(ID: 612) LOCAL (reference)   0>
            <(ID: 613) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 627) INVOKE (v) 
      <(ID: 624) PARAMETER (reference) 
         <(ID: 619) IDENTITY (reference)  (ref count: 2)
            <(ID: 629) FETCH (reference) 
               <(ID: 618) FIELD_REF (reference) volatile 
                  <(ID: 615) IDENTITY (reference)  (ref count: 2)
                  <(ID: 617) RESOLVE_REFERENCE (NONE) 
                     <(ID: 616) CONST_GETFIELD_FB_UNRESOLVED (NONE)  (cpIndex 98)
         <(ID: 623) PARAMETER (reference) 
            <(ID: 620) CONST_STRING_ICELL (reference)  (stringICell 0x90dcec)

            <(ID: 622) NULL_PARAMETER (NONE) 
      <(ID: 626) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 625) GET_VTBL (NONE) 
            <(ID: 619) IDENTITY (reference)  (ref count: 2)
         <(ID: 621) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)


*************************************************
*
* (block ID:7 block PC:764 )
* IR root list contains 13 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x27
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:239)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<764>  (0x958358):    aload_0 
<765>  (0x958359):    agetfield_quick #27
<768>  (0x95835c):    aload_0 
<769>  (0x95835d):    agetfield_quick #2
<772>  (0x958360):    getfield_quick #11
<775>  (0x958363):    ifne <782>
<778>  (0x958366):    iconst_1 
<779>  (0x958367):    goto <783>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 8 10 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(576)
 
Incoming Locals(6): 
	<null>
	<null>
	local(0)	ID(576)
 	<null>
	<null>
	<null>

Successor Blocks(2): 
	ID(19) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals()
	ID(20) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 575) MAP_PC (NONE)   764>

   <(ID: 579) IDENTITY (reference)  (ref count: 3)
      <(ID: 592) FETCH (reference) 
         <(ID: 578) FIELD_REF (reference) 
            <(ID: 576) IDENTITY (reference)  (ref count: 2)
               <(ID: 583) LOCAL (reference)   0>
            <(ID: 577) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 582) IDENTITY (reference)  (ref count: 2)
      <(ID: 587) FETCH (reference) 
         <(ID: 581) FIELD_REF (reference) 
            <(ID: 576) IDENTITY (reference)  (ref count: 2)
            <(ID: 580) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 586) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 594) FETCH (32-bit field) 
         <(ID: 585) FIELD_REF (32-bit field) 
            <(ID: 582) IDENTITY (reference)  (ref count: 2)
            <(ID: 584) CONST_FIELD_OFFSET (NONE)  (11)

   <(ID: 591) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 579) IDENTITY (reference)  (ref count: 3)


   <(ID: 593) LOAD_PHIS (NONE) 

   <(ID: 589) BCOND (int) 
   target: (BlockID: 19 BlockPC: 782)
   condition: NE
   flags: 0
      <(ID: 586) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 588) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 595) RELEASE_PHIS (NONE) 

   <(ID: 598) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 579) IDENTITY (reference)  (ref count: 3)


   <(ID: 600) DEFINE (int) 
   spillLocation: 1
   registerSpillOk: 1
   operand:       <(ID: 596) CONST_JAVA_NUMERIC32 (int)  (1)


   <(ID: 601) LOAD_PHIS (NONE) 

   <(ID: 602) RELEASE_PHIS (NONE) 

   <(ID: 603) GOTO (NONE) 
   target: (BlockID: 20 BlockPC: 783)


*************************************************
*
* (block ID:19 block PC:782 )
* IR root list contains 5 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:239)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<782>  (0x95836a):    iconst_0 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 8 10 
*************************************************

Number and size of USED nodes in phi array: 1 1

Successor Blocks(1): 
	ID(20) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 637) MAP_PC (NONE)   782>

   <(ID: 639) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 590) USED (reference) 
      spillLocation: 0
      registerSpillOk: 1



   <(ID: 640) DEFINE (int) 
   spillLocation: 1
   registerSpillOk: 1
   operand:       <(ID: 638) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 641) LOAD_PHIS (NONE) 

   <(ID: 642) RELEASE_PHIS (NONE) 


*************************************************
*
* (block ID:20 block PC:783 )
* IR root list contains 14 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V(ChessPiece.java:239)
* Compilation depth: 0 locals : 0 .. 13
* Byte-codes for block:
<783>  (0x95836b):    putfield_quick #11
<786>  (0x95836e):    aload_0 
<787>  (0x95836f):    agetfield_quick #27
<790>  (0x958372):    agetfield_quick #18
<793>  (0x958375):    new_quick #43 <java.lang.StringBuffer>
<796>  (0x958378):    dup 
<797>  (0x958379):    invokenonvirtual_quick #44 <java.lang.StringBuffer.<init>()V>
<800>  (0x95837c):    aldc_ind_quick #103
<802>  (0x95837e):    invokenonvirtual_quick #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<805>  (0x958381):    aload_0 
<806>  (0x958382):    agetfield_quick #2
<809>  (0x958385):    getfield_quick #15
<812>  (0x958388):    invokenonvirtual_quick #63 <java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;>
<815>  (0x95838b):    aldc_ind_quick #106
<817>  (0x95838d):    invokenonvirtual_quick #46 <java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<820>  (0x958390):    invokenonvirtual_quick #48 <java.lang.StringBuffer.toString()Ljava/lang/String;>
<823>  (0x958393):    invokevirtual_quick_w #33 <com.sun.mep.bench.Chess.DebugTextManager.set(Ljava/lang/String;)V>
<826>  (0x958396):    aload_0 
<827>  (0x958397):    iconst_0 
<828>  (0x958398):    putfield_quick #18
<831>  (0x95839b):    aload_0 
<832>  (0x95839c):    agetfield_quick #2
<835>  (0x95839f):    iconst_1 
<836>  (0x9583a0):    putfield_quick #13
<839>  (0x9583a3):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 2 3 8 10 
*************************************************

Number and size of USED nodes in phi array: 2 2

   <(ID: 643) MAP_PC (NONE)   783>

   <(ID: 646) ASSIGN (32-bit field) 
      <(ID: 645) FIELD_REF (32-bit field) 
         <(ID: 597) USED (reference) 
         spillLocation: 0
         registerSpillOk: 1

         <(ID: 644) CONST_FIELD_OFFSET (NONE)  (11)
      <(ID: 599) USED (int) 
      spillLocation: 1
      registerSpillOk: 1


   <(ID: 650) IDENTITY (reference)  (ref count: 2)
      <(ID: 654) FETCH (reference) 
         <(ID: 649) FIELD_REF (reference) 
            <(ID: 647) IDENTITY (reference)  (ref count: 4)
               <(ID: 671) LOCAL (reference)   0>
            <(ID: 648) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 653) IDENTITY (reference)  (ref count: 3)
      <(ID: 704) FETCH (reference) 
         <(ID: 652) FIELD_REF (reference) 
            <(ID: 650) IDENTITY (reference)  (ref count: 2)
            <(ID: 651) CONST_FIELD_OFFSET (NONE)  (18)

   <(ID: 656) IDENTITY (reference)  (ref count: 3)
      <(ID: 661) NEW_OBJECT (reference) 
         <(ID: 655) CONST_CB (address field)  (java.lang.StringBuffer)

   <(ID: 660) INVOKE (v) 
      <(ID: 659) PARAMETER (reference) 
         <(ID: 656) IDENTITY (reference)  (ref count: 3)
         <(ID: 658) NULL_PARAMETER (NONE) 
      <(ID: 657) CONST_MB (address field)  (java.lang.StringBuffer.<init>()V)

   <(ID: 667) IDENTITY (reference)  (ref count: 3)
      <(ID: 705) INVOKE (reference) 
         <(ID: 666) PARAMETER (reference) 
            <(ID: 656) IDENTITY (reference)  (ref count: 3)
            <(ID: 665) PARAMETER (reference) 
               <(ID: 662) CONST_STRING_ICELL (reference)  (stringICell 0x90e3dc)

               <(ID: 664) NULL_PARAMETER (NONE) 
         <(ID: 663) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)

   <(ID: 670) IDENTITY (reference)  (ref count: 2)
      <(ID: 675) FETCH (reference) 
         <(ID: 669) FIELD_REF (reference) 
            <(ID: 647) IDENTITY (reference)  (ref count: 4)
            <(ID: 668) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 674) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 706) FETCH (32-bit field) 
         <(ID: 673) FIELD_REF (32-bit field) 
            <(ID: 670) IDENTITY (reference)  (ref count: 2)
            <(ID: 672) CONST_FIELD_OFFSET (NONE)  (15)

   <(ID: 703) INVOKE (v) 
      <(ID: 700) PARAMETER (reference) 
         <(ID: 653) IDENTITY (reference)  (ref count: 3)
         <(ID: 699) PARAMETER (reference) 
            <(ID: 696) INVOKE (reference) 
               <(ID: 693) PARAMETER (reference) 
                  <(ID: 690) IDENTITY (reference)  (ref count: 2)
                     <(ID: 708) INVOKE (reference) 
                        <(ID: 687) PARAMETER (reference) 
                           <(ID: 682) IDENTITY (reference)  (ref count: 2)
                              <(ID: 707) INVOKE (reference) 
                                 <(ID: 679) PARAMETER (reference) 
                                    <(ID: 667) IDENTITY (reference)  (ref count: 3)
                                    <(ID: 678) PARAMETER (32-bit field) 
                                       <(ID: 674) IDENTITY (32-bit field)  (ref count: 2)
                                       <(ID: 677) NULL_PARAMETER (NONE) 
                                 <(ID: 681) SEQUENCE_R (address field) 
                                    <(ID: 680) NULL_CHECK (reference) 
                                       <(ID: 667) IDENTITY (reference)  (ref count: 3)
                                    <(ID: 676) CONST_MB (address field)  (java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;)
                           <(ID: 686) PARAMETER (reference) 
                              <(ID: 683) CONST_STRING_ICELL (reference)  (stringICell 0x90e234)

                              <(ID: 685) NULL_PARAMETER (NONE) 
                        <(ID: 689) SEQUENCE_R (address field) 
                           <(ID: 688) NULL_CHECK (reference) 
                              <(ID: 682) IDENTITY (reference)  (ref count: 2)
                           <(ID: 684) CONST_MB (address field)  (java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;)
                  <(ID: 692) NULL_PARAMETER (NONE) 
               <(ID: 695) SEQUENCE_R (address field) 
                  <(ID: 694) NULL_CHECK (reference) 
                     <(ID: 690) IDENTITY (reference)  (ref count: 2)
                  <(ID: 691) CONST_MB (address field)  (java.lang.StringBuffer.toString()Ljava/lang/String;)
            <(ID: 698) NULL_PARAMETER (NONE) 
      <(ID: 702) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 701) GET_VTBL (NONE) 
            <(ID: 653) IDENTITY (reference)  (ref count: 3)
         <(ID: 697) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 712) ASSIGN (32-bit field) 
      <(ID: 711) FIELD_REF (32-bit field) 
         <(ID: 647) IDENTITY (reference)  (ref count: 4)
         <(ID: 710) CONST_FIELD_OFFSET (NONE)  (18)
      <(ID: 709) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 715) IDENTITY (reference)  (ref count: 2)
      <(ID: 720) FETCH (reference) 
         <(ID: 714) FIELD_REF (reference) 
            <(ID: 647) IDENTITY (reference)  (ref count: 4)
            <(ID: 713) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 719) ASSIGN (32-bit field) 
      <(ID: 718) FIELD_REF (32-bit field) 
         <(ID: 715) IDENTITY (reference)  (ref count: 2)
         <(ID: 717) CONST_FIELD_OFFSET (NONE)  (13)
      <(ID: 716) CONST_JAVA_NUMERIC32 (int)  (1)

   <(ID: 721) RETURN (v) 


NUM BARRIER BYTES = 32
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 3404
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 5048
ESTIMATED BUFFER SIZE = 8696
CODE BUFFER ADDRESS = 0x2bcc2684
PC MAP TABLE ADDRESS = 0x2bcc268c
GC CHECK PCS ADDRESS = 0x2bcc26e4
CODE ENTRY ADDRESS = 0x2bcc2720
          		@ Method prologue
0x2bcc2720	0:	addiu	a1, JSP, 104	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc2724	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc2728	8:	sltu	t7, a1, CHUNKEND
0x2bcc272c	12:	bne	t7, zero, PC=0x2bcc2720	@ goto .skip
0x2bcc2730	16:	nop
0x2bcc2734	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc2738	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc272c) >>>>>>>>
0x2bcc272c	12:	bne	t7, zero, PC=0x2bcc273c	@ goto .skip
0x2bcc2730	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc273c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc273c	28:	sw	JFP, 48(JSP)	@ Store curr JFP into new frame
0x2bcc2740	32:	addiu	JFP, JSP, 48	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc2744	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc2748	40:	addiu	a3, zero, 0
0x2bcc274c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc2750	48:	addiu	a3, zero, -1
0x2bcc2754	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc2758	56:	move	a0, EE
0x2bcc275c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc2760	64:	lui	t9, hi16(0x65)
0x2bcc2764	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc2768	72:	jalr	t9
0x2bcc276c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc2770	80:	addiu	JSP, JFP, 36	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc2774	84:	nop
0x2bcc2778	88:	nop
0x2bcc277c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=96
0x2bcc2780	96:	lw	a1, 0(CP)	@ cb java.lang.StringBuffer
          		@ Do new:
          		@ cb: java.lang.StringBuffer
0x2bcc2784	100:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc2788	104:	nop
          		@ Captured a stackmap here.
0x2bcc278c	108:	sw	v0, 0(JSP)
0x2bcc2790	112:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc2794	116:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc2798	120:	sw	v0, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc279c	124:	lw	s7, 0(a0)	@ call method through mb
0x2bcc27a0	128:	jalr	s7
0x2bcc27a4	132:	nop
          		@ Captured a stackmap here.
0x2bcc27a8	136:	lw	s7, 36(JFP)	@ Java temp cell # 2
0x2bcc27ac	140:	sw	s7, 0(JSP)
0x2bcc27b0	144:	lw	ra, -52(JFP)	@ Java local cell # 1
0x2bcc27b4	148:	sw	ra, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc27b8	152:	lw	s7, 0(ra)	@ Get object.cb
0x2bcc27bc	156:	addiu	t7, zero, -4
0x2bcc27c0	160:	and	s7, s7, t7
0x2bcc27c4	164:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc27c8	168:	lw	a0, 152(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc27cc	172:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc27d0	176:	lw	s7, 0(a0)	@ call method through mb
0x2bcc27d4	180:	jalr	s7
0x2bcc27d8	184:	nop
          		@ Captured a stackmap here.
0x2bcc27dc	188:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.ChessPiece.getPieceType(I)Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcc27e0	192:	lw	s7, 0(a0)	@ call method through mb
0x2bcc27e4	196:	jalr	s7
0x2bcc27e8	200:	nop
          		@ Captured a stackmap here.
0x2bcc27ec	204:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc27f0	208:	lw	s7, 0(a0)	@ call method through mb
0x2bcc27f4	212:	jalr	s7
0x2bcc27f8	216:	nop
          		@ Captured a stackmap here.
0x2bcc27fc	220:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2800	224:	lw	s7, 0(JSP)
0x2bcc2804	228:	sw	s7, 0(JSP)
0x2bcc2808	232:	lw	s5, 0(CP)	@ StringICell
0x2bcc280c	236:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcc2810	240:	sw	s6, 4(JSP)
0x2bcc2814	244:	lw	s6, 0(s7)	@ NULL check
0x2bcc2818	248:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc281c	252:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc2820	256:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2824	260:	jalr	s7
0x2bcc2828	264:	nop
          		@ Captured a stackmap here.
0x2bcc282c	268:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2830	272:	lw	s7, 0(JSP)
0x2bcc2834	276:	sw	s7, 0(JSP)
0x2bcc2838	280:	lw	s6, 0(s7)	@ NULL check
0x2bcc283c	284:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2840	288:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc2844	292:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2848	296:	jalr	s7
0x2bcc284c	300:	nop
          		@ Captured a stackmap here.
0x2bcc2850	304:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2854	308:	lw	s7, 0(JSP)
0x2bcc2858	312:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.GameState
          		@ Do new:
0x2bcc285c	316:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
          		@ cb: com.sun.mep.bench.Chess.GameState
0x2bcc2860	320:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc2864	324:	nop
          		@ Captured a stackmap here.
0x2bcc2868	328:	lw	ra, -56(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcc286c	332:	lw	s7, 108(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc2870	336:	sw	v0, 0(JSP)
0x2bcc2874	340:	sw	s7, 4(JSP)
0x2bcc2878	344:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.GameState.<init>(Lcom/sun/mep/bench/Chess/ChessGame;)V
          		@ Invoke a method w/ a void return type
0x2bcc287c	348:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc2880	352:	sw	v0, 40(JFP)	@ REF spill Java temp cell # 3
0x2bcc2884	356:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2888	360:	jalr	s7
0x2bcc288c	364:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcc2890	368:	lw	s6, -56(JFP)	@ Java local cell # 0
0x2bcc2894	372:	lw	s7, 8(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc2898	376:	lw	s5, 48(s7)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc289c	380:	lw	s7, 36(JFP)	@ Java temp cell # 2
0x2bcc28a0	384:	sw	s7, -48(JFP)	@ Java local cell # 2
0x2bcc28a4	388:	lw	s4, 40(JFP)	@ Java temp cell # 3
0x2bcc28a8	392:	sw	s4, -44(JFP)	@ Java local cell # 3
			@ Outgoing local(0) reg(21): in wrong register
0x2bcc28ac	396:	sw	s5, 44(JFP)	@ spill Java temp cell # 4
0x2bcc28b0	400:	move	s5, s6
0x2bcc28b4	404:	lw	s6, 44(JFP)	@ Java temp cell # 4
          		@ deferred comparison: 
0x2bcc28b8	408:	beq	s6, zero, PC=0x2bcc28b8	@ branch to block L1
0x2bcc28bc	412:	nop
          		@ Resolving a class:
0x2bcc28c0	416:	lui	a2, hi16(0x2bcc)
0x2bcc28c4	420:	lw	a2, 10432(a2)	@ load cachedConstant
0x2bcc28c8	424:	addiu	a2, zero, 53	@ ARG3 = cpIndex
0x2bcc28cc	428:	jal	PC=(0x2bcb83d4)	@ call CVMCCMruntimeResolveClassBlock
0x2bcc28d0	432:	nop
>>>>>>>>>Push Code Buffer to PC = 416 (0x2bcc28c0) >>>>>>>>
0x2bcc28c0	416:	lui	a2, hi16(0x2bcc)
0x2bcc28c4	420:	lw	a2, 10452(a2)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 436 (0x2bcc28d4) <<<<<<<<<
0x2bcc28d4	436:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc28d8	440:	lui	a2, hi16(0x2bcc)
0x2bcc28dc	444:	lw	a2, 10452(a2)	@ load cachedConstant
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcc28e0	448:	lw	s7, -52(JFP)	@ Java local cell # 1
0x2bcc28e4	452:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcc28e8	456:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcc28ec	460:	nop
0x2bcc28f0	464:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
          		@ Resolving an instance field:
0x2bcc28f4	468:	lui	s7, hi16(0x2bcc)
0x2bcc28f8	472:	lw	s7, 10484(s7)	@ load cachedConstant
0x2bcc28fc	476:	addiu	a2, zero, 54	@ ARG3 = cpIndex
0x2bcc2900	480:	jal	PC=(0x2bcb83ec)	@ call CVMCCMruntimeResolveGetfieldFieldOffset
0x2bcc2904	484:	nop
>>>>>>>>>Push Code Buffer to PC = 468 (0x2bcc28f4) >>>>>>>>
0x2bcc28f4	468:	lui	s7, hi16(0x2bcc)
0x2bcc28f8	472:	lw	s7, 10504(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 488 (0x2bcc2908) <<<<<<<<<
0x2bcc2908	488:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc290c	492:	lui	s7, hi16(0x2bcc)
0x2bcc2910	496:	lw	s7, 10504(s7)	@ load cachedConstant
          		@ Do getfield:
0x2bcc2914	500:	lw	s5, -52(JFP)	@ Java local cell # 1
0x2bcc2918	504:	addu	t7, s5, s7	@ valueObj = getfield(obj, fieldIdx); add indexReg and baseReg
0x2bcc291c	508:	lw	s6, 0(t7)
0x2bcc2920	512:	sw	s6, 0(JSP)
0x2bcc2924	516:	lw	s4, 0(CP)	@ StringICell
0x2bcc2928	520:	lw	s7, 0(s4)	@ StringObject from StringICell
0x2bcc292c	524:	sw	s7, 4(JSP)
0x2bcc2930	528:	addiu	JSP, JSP, 8	@ adjust JSP before method call
          		@ Resolving a method table index:
0x2bcc2934	532:	sw	s6, 44(JFP)	@ REF spill Java temp cell # 4
0x2bcc2938	536:	lui	s7, hi16(0x2bcc)
0x2bcc293c	540:	lw	s7, 10552(s7)	@ load cachedConstant
0x2bcc2940	544:	addiu	a2, zero, 56	@ ARG3 = cpIndex
0x2bcc2944	548:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc2948	552:	nop
0x2bcc294c	556:	move	v0, v0	@ return MB directly
0x2bcc2950	560:	b	PC=0x2bcc2950
0x2bcc2954	564:	nop
>>>>>>>>>Push Code Buffer to PC = 536 (0x2bcc2938) >>>>>>>>
0x2bcc2938	536:	lui	s7, hi16(0x2bcc)
0x2bcc293c	540:	lw	s7, 10584(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 568 (0x2bcc2958) <<<<<<<<<
0x2bcc2958	568:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc295c	572:	lui	s7, hi16(0x2bcc)
0x2bcc2960	576:	lw	s7, 10584(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc2964	580:	lw	s5, 44(JFP)	@ Java temp cell # 4
0x2bcc2968	584:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc296c	588:	addiu	t7, zero, -4
0x2bcc2970	592:	and	s6, s6, t7
0x2bcc2974	596:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc2978	600:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc297c	604:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 556 (0x2bcc294c) >>>>>>>>
0x2bcc294c	556:	move	a0, v0
0x2bcc2950	560:	b	PC=0x2bcc2980
0x2bcc2954	564:	nop
<<<<<<<<<Pop Code Buffer to PC = 608 (0x2bcc2980) <<<<<<<<<
          		@ Invoke a method w/ a 32bit return type
0x2bcc2980	608:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2984	612:	jalr	s7
0x2bcc2988	616:	nop
          		@ Captured a stackmap here.
0x2bcc298c	620:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2990	624:	lw	s7, 0(JSP)
          		@ deferred comparison: 
0x2bcc2994	628:	beq	s7, zero, PC=0x2bcc2994	@ branch to block L2
0x2bcc2998	632:	nop
0x2bcc299c	636:	lw	a1, 0(CP)	@ cb java.lang.StringBuffer
          		@ Do new:
          		@ cb: java.lang.StringBuffer
0x2bcc29a0	640:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc29a4	644:	nop
          		@ Captured a stackmap here.
0x2bcc29a8	648:	sw	v0, 0(JSP)
0x2bcc29ac	652:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc29b0	656:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc29b4	660:	sw	v0, 44(JFP)	@ REF spill Java temp cell # 4
0x2bcc29b8	664:	lw	s7, 0(a0)	@ call method through mb
0x2bcc29bc	668:	jalr	s7
0x2bcc29c0	672:	nop
          		@ Captured a stackmap here.
0x2bcc29c4	676:	lw	s7, 44(JFP)	@ Java temp cell # 4
0x2bcc29c8	680:	sw	s7, 0(JSP)
0x2bcc29cc	684:	lw	s7, -48(JFP)	@ Java local cell # 2
0x2bcc29d0	688:	sw	s7, 4(JSP)
0x2bcc29d4	692:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc29d8	696:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc29dc	700:	lw	s7, 0(a0)	@ call method through mb
0x2bcc29e0	704:	jalr	s7
0x2bcc29e4	708:	nop
          		@ Captured a stackmap here.
0x2bcc29e8	712:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc29ec	716:	lw	s7, 0(JSP)
0x2bcc29f0	720:	sw	s7, 0(JSP)
0x2bcc29f4	724:	lw	s5, 0(CP)	@ StringICell
0x2bcc29f8	728:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcc29fc	732:	sw	s6, 4(JSP)
0x2bcc2a00	736:	lw	s6, 0(s7)	@ NULL check
0x2bcc2a04	740:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2a08	744:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc2a0c	748:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2a10	752:	jalr	s7
0x2bcc2a14	756:	nop
          		@ Captured a stackmap here.
0x2bcc2a18	760:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2a1c	764:	lw	s7, 0(JSP)
0x2bcc2a20	768:	sw	s7, 0(JSP)
0x2bcc2a24	772:	lw	s6, 0(s7)	@ NULL check
0x2bcc2a28	776:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2a2c	780:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc2a30	784:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2a34	788:	jalr	s7
0x2bcc2a38	792:	nop
          		@ Captured a stackmap here.
0x2bcc2a3c	796:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2a40	800:	lw	s7, 0(JSP)
0x2bcc2a44	804:	sw	s7, -48(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(20): not in register
0x2bcc2a48	808:	lw	s4, -56(JFP)	@ Java local cell # 0
0x2bcc2a4c	812:	b	PC=0x2bcc2a4c	@ branch to block L3
0x2bcc2a50	816:	nop
			@ Initial Temp REF set is 
	L2:	820:	@ entry point for branches
--->Fixed instruction at 628(0x2bcc2994) to reference 820
          		@ MAP_PC idepth=0 javaPc=86 compiledPc=820
0x2bcc2a54	820:	lw	a1, 0(CP)	@ cb java.lang.StringBuffer
          		@ Do new:
          		@ cb: java.lang.StringBuffer
0x2bcc2a58	824:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc2a5c	828:	nop
          		@ Captured a stackmap here.
0x2bcc2a60	832:	sw	v0, 0(JSP)
0x2bcc2a64	836:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc2a68	840:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc2a6c	844:	sw	v0, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc2a70	848:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2a74	852:	jalr	s7
0x2bcc2a78	856:	nop
          		@ Captured a stackmap here.
0x2bcc2a7c	860:	lw	s7, 36(JFP)	@ Java temp cell # 2
0x2bcc2a80	864:	sw	s7, 0(JSP)
0x2bcc2a84	868:	lw	ra, -48(JFP)	@ Java local cell # 2
0x2bcc2a88	872:	sw	ra, 4(JSP)
0x2bcc2a8c	876:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2a90	880:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc2a94	884:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2a98	888:	jalr	s7
0x2bcc2a9c	892:	nop
          		@ Captured a stackmap here.
0x2bcc2aa0	896:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2aa4	900:	lw	s7, 0(JSP)
0x2bcc2aa8	904:	sw	s7, 0(JSP)
0x2bcc2aac	908:	lw	s5, 0(CP)	@ StringICell
0x2bcc2ab0	912:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcc2ab4	916:	sw	s6, 4(JSP)
0x2bcc2ab8	920:	lw	s6, 0(s7)	@ NULL check
0x2bcc2abc	924:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2ac0	928:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc2ac4	932:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2ac8	936:	jalr	s7
0x2bcc2acc	940:	nop
          		@ Captured a stackmap here.
0x2bcc2ad0	944:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2ad4	948:	lw	s7, 0(JSP)
0x2bcc2ad8	952:	sw	s7, 0(JSP)
0x2bcc2adc	956:	lw	s6, 0(s7)	@ NULL check
0x2bcc2ae0	960:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2ae4	964:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc2ae8	968:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2aec	972:	jalr	s7
0x2bcc2af0	976:	nop
          		@ Captured a stackmap here.
0x2bcc2af4	980:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2af8	984:	lw	s7, 0(JSP)
0x2bcc2afc	988:	sw	s7, -48(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(20): not in register
0x2bcc2b00	992:	lw	s4, -56(JFP)	@ Java local cell # 0
			@ Initial Temp REF set is 
	L3:	996:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
--->Fixed instruction at 812(0x2bcc2a4c) to reference 996
          		@ MAP_PC idepth=0 javaPc=106 compiledPc=996
          		@ Resolving an instance field:
0x2bcc2b04	996:	lui	s7, hi16(0x2bcc)
0x2bcc2b08	1000:	lw	s7, 11012(s7)	@ load cachedConstant
0x2bcc2b0c	1004:	addiu	a2, zero, 59	@ ARG3 = cpIndex
0x2bcc2b10	1008:	jal	PC=(0x2bcb83ec)	@ call CVMCCMruntimeResolveGetfieldFieldOffset
0x2bcc2b14	1012:	nop
>>>>>>>>>Push Code Buffer to PC = 996 (0x2bcc2b04) >>>>>>>>
0x2bcc2b04	996:	lui	s7, hi16(0x2bcc)
0x2bcc2b08	1000:	lw	s7, 11032(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 1016 (0x2bcc2b18) <<<<<<<<<
0x2bcc2b18	1016:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc2b1c	1020:	lui	s7, hi16(0x2bcc)
0x2bcc2b20	1024:	lw	s7, 11032(s7)	@ load cachedConstant
          		@ Do getfield:
0x2bcc2b24	1028:	lw	s5, -56(JFP)	@ Java local cell # 0
0x2bcc2b28	1032:	addu	t7, s5, s7	@ valueObj = getfield(obj, fieldIdx); add indexReg and baseReg
0x2bcc2b2c	1036:	lw	s6, 0(t7)
          		@ Do putfield:
0x2bcc2b30	1040:	sw	zero, 48(s6)	@ putfield(obj, fieldOffset, value{I|F});
			@ Outgoing local(0) reg(20): in wrong register
0x2bcc2b34	1044:	move	s4, s5
0x2bcc2b38	1048:	b	PC=0x2bcc2b38	@ branch to block L4
0x2bcc2b3c	1052:	nop
			@ Initial Temp REF set is 
	L1:	1056:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 408(0x2bcc28b8) to reference 1056
          		@ MAP_PC idepth=0 javaPc=117 compiledPc=1056
          		@ Do getfield:
0x2bcc2b40	1056:	lw	s7, 8(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc2b44	1060:	lw	s6, 40(s7)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ deferred comparison: 
0x2bcc2b48	1064:	beq	s6, zero, PC=0x2bcc2b48	@ branch to block L5
0x2bcc2b4c	1068:	nop
0x2bcc2b50	1072:	lw	a1, 0(CP)	@ cb java.lang.StringBuffer
          		@ Do new:
          		@ cb: java.lang.StringBuffer
0x2bcc2b54	1076:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc2b58	1080:	nop
          		@ Captured a stackmap here.
0x2bcc2b5c	1084:	sw	v0, 0(JSP)
0x2bcc2b60	1088:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc2b64	1092:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc2b68	1096:	sw	v0, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc2b6c	1100:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2b70	1104:	jalr	s7
0x2bcc2b74	1108:	nop
          		@ Captured a stackmap here.
0x2bcc2b78	1112:	lw	s7, 36(JFP)	@ Java temp cell # 2
0x2bcc2b7c	1116:	sw	s7, 0(JSP)
0x2bcc2b80	1120:	lw	ra, -48(JFP)	@ Java local cell # 2
0x2bcc2b84	1124:	sw	ra, 4(JSP)
0x2bcc2b88	1128:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2b8c	1132:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc2b90	1136:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2b94	1140:	jalr	s7
0x2bcc2b98	1144:	nop
          		@ Captured a stackmap here.
0x2bcc2b9c	1148:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2ba0	1152:	lw	s7, 0(JSP)
0x2bcc2ba4	1156:	lw	ra, -52(JFP)	@ Java local cell # 1
          		@ Do getfield:
0x2bcc2ba8	1160:	lw	s6, 88(ra)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc2bac	1164:	sw	s7, 0(JSP)
0x2bcc2bb0	1168:	lw	s5, -56(JFP)	@ Java local cell # 0
0x2bcc2bb4	1172:	sw	s5, 4(JSP)
0x2bcc2bb8	1176:	sw	s6, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcc2bbc	1180:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc2bc0	1184:	addiu	t7, zero, -4
0x2bcc2bc4	1188:	and	s6, s6, t7
0x2bcc2bc8	1192:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc2bcc	1196:	lw	a0, 156(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc2bd0	1200:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcc2bd4	1204:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc2bd8	1208:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2bdc	1212:	jalr	s7
0x2bcc2be0	1216:	nop
          		@ Captured a stackmap here.
0x2bcc2be4	1220:	lw	s7, 36(JFP)	@ Java temp cell # 2
0x2bcc2be8	1224:	lw	s6, 0(s7)	@ NULL check
0x2bcc2bec	1228:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2bf0	1232:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2bf4	1236:	jalr	s7
0x2bcc2bf8	1240:	nop
          		@ Captured a stackmap here.
0x2bcc2bfc	1244:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2c00	1248:	lw	s7, 0(JSP)
          		@ Do getfield:
0x2bcc2c04	1252:	lw	s5, -52(JFP)	@ Java local cell # 1
0x2bcc2c08	1256:	lw	s6, 84(s5)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc2c0c	1260:	sw	s7, 0(JSP)
0x2bcc2c10	1264:	addiu	s4, zero, 8	@ const 8
0x2bcc2c14	1268:	subu	ra, s4, s6
0x2bcc2c18	1272:	sw	ra, 4(JSP)
0x2bcc2c1c	1276:	lw	s6, 0(s7)	@ NULL check
0x2bcc2c20	1280:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2c24	1284:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc2c28	1288:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2c2c	1292:	jalr	s7
0x2bcc2c30	1296:	nop
          		@ Captured a stackmap here.
0x2bcc2c34	1300:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2c38	1304:	lw	s7, 0(JSP)
0x2bcc2c3c	1308:	sw	s7, 0(JSP)
0x2bcc2c40	1312:	lw	s5, 0(CP)	@ StringICell
0x2bcc2c44	1316:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcc2c48	1320:	sw	s6, 4(JSP)
0x2bcc2c4c	1324:	lw	s6, 0(s7)	@ NULL check
0x2bcc2c50	1328:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2c54	1332:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc2c58	1336:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2c5c	1340:	jalr	s7
0x2bcc2c60	1344:	nop
          		@ Captured a stackmap here.
0x2bcc2c64	1348:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2c68	1352:	lw	s7, 0(JSP)
          		@ Do getfield:
0x2bcc2c6c	1356:	lw	s5, -52(JFP)	@ Java local cell # 1
0x2bcc2c70	1360:	lw	s6, 80(s5)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc2c74	1364:	sw	s7, 0(JSP)
0x2bcc2c78	1368:	lw	s4, -56(JFP)	@ Java local cell # 0
0x2bcc2c7c	1372:	sw	s4, 4(JSP)
0x2bcc2c80	1376:	sw	s6, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcc2c84	1380:	lw	s6, 0(s4)	@ Get object.cb
0x2bcc2c88	1384:	addiu	t7, zero, -4
0x2bcc2c8c	1388:	and	s6, s6, t7
0x2bcc2c90	1392:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc2c94	1396:	lw	a0, 156(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc2c98	1400:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcc2c9c	1404:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc2ca0	1408:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2ca4	1412:	jalr	s7
0x2bcc2ca8	1416:	nop
          		@ Captured a stackmap here.
0x2bcc2cac	1420:	lw	s7, 36(JFP)	@ Java temp cell # 2
0x2bcc2cb0	1424:	lw	s6, 0(s7)	@ NULL check
0x2bcc2cb4	1428:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2cb8	1432:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2cbc	1436:	jalr	s7
0x2bcc2cc0	1440:	nop
          		@ Captured a stackmap here.
0x2bcc2cc4	1444:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2cc8	1448:	lw	s7, 0(JSP)
          		@ Do getfield:
0x2bcc2ccc	1452:	lw	s5, -52(JFP)	@ Java local cell # 1
0x2bcc2cd0	1456:	lw	s6, 76(s5)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc2cd4	1460:	sw	s7, 0(JSP)
0x2bcc2cd8	1464:	addiu	s4, zero, 8	@ const 8
0x2bcc2cdc	1468:	subu	ra, s4, s6
0x2bcc2ce0	1472:	sw	ra, 4(JSP)
0x2bcc2ce4	1476:	lw	s6, 0(s7)	@ NULL check
0x2bcc2ce8	1480:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2cec	1484:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc2cf0	1488:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2cf4	1492:	jalr	s7
0x2bcc2cf8	1496:	nop
          		@ Captured a stackmap here.
0x2bcc2cfc	1500:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2d00	1504:	lw	s7, 0(JSP)
0x2bcc2d04	1508:	sw	s7, 0(JSP)
0x2bcc2d08	1512:	lw	s6, 0(s7)	@ NULL check
0x2bcc2d0c	1516:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2d10	1520:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc2d14	1524:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2d18	1528:	jalr	s7
0x2bcc2d1c	1532:	nop
          		@ Captured a stackmap here.
0x2bcc2d20	1536:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2d24	1540:	lw	s7, 0(JSP)
0x2bcc2d28	1544:	sw	s7, -48(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(20): not in register
0x2bcc2d2c	1548:	lw	s4, -56(JFP)	@ Java local cell # 0
0x2bcc2d30	1552:	b	PC=0x2bcc2d30	@ branch to block L4
0x2bcc2d34	1556:	nop
			@ Initial Temp REF set is 
	L5:	1560:	@ entry point for branches
--->Fixed instruction at 1064(0x2bcc2b48) to reference 1560
          		@ MAP_PC idepth=0 javaPc=192 compiledPc=1560
0x2bcc2d38	1560:	lw	a1, 0(CP)	@ cb java.lang.StringBuffer
          		@ Do new:
          		@ cb: java.lang.StringBuffer
0x2bcc2d3c	1564:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc2d40	1568:	nop
          		@ Captured a stackmap here.
0x2bcc2d44	1572:	sw	v0, 0(JSP)
0x2bcc2d48	1576:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc2d4c	1580:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc2d50	1584:	sw	v0, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc2d54	1588:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2d58	1592:	jalr	s7
0x2bcc2d5c	1596:	nop
          		@ Captured a stackmap here.
0x2bcc2d60	1600:	lw	s7, 36(JFP)	@ Java temp cell # 2
0x2bcc2d64	1604:	sw	s7, 0(JSP)
0x2bcc2d68	1608:	lw	ra, -48(JFP)	@ Java local cell # 2
0x2bcc2d6c	1612:	sw	ra, 4(JSP)
0x2bcc2d70	1616:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2d74	1620:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc2d78	1624:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2d7c	1628:	jalr	s7
0x2bcc2d80	1632:	nop
          		@ Captured a stackmap here.
0x2bcc2d84	1636:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2d88	1640:	lw	s7, 0(JSP)
0x2bcc2d8c	1644:	lw	ra, -52(JFP)	@ Java local cell # 1
          		@ Do getfield:
0x2bcc2d90	1648:	lw	s6, 88(ra)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc2d94	1652:	sw	s7, 0(JSP)
0x2bcc2d98	1656:	lw	t9, -56(JFP)	@ Java local cell # 0
0x2bcc2d9c	1660:	sw	t9, 4(JSP)
0x2bcc2da0	1664:	sw	s6, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcc2da4	1668:	lw	s6, 0(t9)	@ Get object.cb
0x2bcc2da8	1672:	addiu	t7, zero, -4
0x2bcc2dac	1676:	and	s6, s6, t7
0x2bcc2db0	1680:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc2db4	1684:	lw	a0, 156(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc2db8	1688:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcc2dbc	1692:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc2dc0	1696:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2dc4	1700:	jalr	s7
0x2bcc2dc8	1704:	nop
          		@ Captured a stackmap here.
0x2bcc2dcc	1708:	lw	s7, 36(JFP)	@ Java temp cell # 2
0x2bcc2dd0	1712:	lw	s6, 0(s7)	@ NULL check
0x2bcc2dd4	1716:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2dd8	1720:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2ddc	1724:	jalr	s7
0x2bcc2de0	1728:	nop
          		@ Captured a stackmap here.
0x2bcc2de4	1732:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2de8	1736:	lw	s7, 0(JSP)
          		@ Do getfield:
0x2bcc2dec	1740:	lw	s5, -52(JFP)	@ Java local cell # 1
0x2bcc2df0	1744:	lw	s6, 84(s5)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc2df4	1748:	sw	s7, 0(JSP)
0x2bcc2df8	1752:	addiu	s4, zero, 8	@ const 8
0x2bcc2dfc	1756:	subu	ra, s4, s6
0x2bcc2e00	1760:	sw	ra, 4(JSP)
0x2bcc2e04	1764:	lw	s6, 0(s7)	@ NULL check
0x2bcc2e08	1768:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2e0c	1772:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc2e10	1776:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2e14	1780:	jalr	s7
0x2bcc2e18	1784:	nop
          		@ Captured a stackmap here.
0x2bcc2e1c	1788:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2e20	1792:	lw	s7, 0(JSP)
0x2bcc2e24	1796:	sw	s7, 0(JSP)
0x2bcc2e28	1800:	lw	s5, 0(CP)	@ StringICell
0x2bcc2e2c	1804:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcc2e30	1808:	sw	s6, 4(JSP)
0x2bcc2e34	1812:	lw	s6, 0(s7)	@ NULL check
0x2bcc2e38	1816:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2e3c	1820:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc2e40	1824:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2e44	1828:	jalr	s7
0x2bcc2e48	1832:	nop
          		@ Captured a stackmap here.
0x2bcc2e4c	1836:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2e50	1840:	lw	s7, 0(JSP)
          		@ Do getfield:
0x2bcc2e54	1844:	lw	s5, -52(JFP)	@ Java local cell # 1
0x2bcc2e58	1848:	lw	s6, 80(s5)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc2e5c	1852:	sw	s7, 0(JSP)
0x2bcc2e60	1856:	lw	s4, -56(JFP)	@ Java local cell # 0
0x2bcc2e64	1860:	sw	s4, 4(JSP)
0x2bcc2e68	1864:	sw	s6, 8(JSP)
          		@ Fetch mb from vtable:
0x2bcc2e6c	1868:	lw	s6, 0(s4)	@ Get object.cb
0x2bcc2e70	1872:	addiu	t7, zero, -4
0x2bcc2e74	1876:	and	s6, s6, t7
0x2bcc2e78	1880:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc2e7c	1884:	lw	a0, 156(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc2e80	1888:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcc2e84	1892:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc2e88	1896:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2e8c	1900:	jalr	s7
0x2bcc2e90	1904:	nop
          		@ Captured a stackmap here.
0x2bcc2e94	1908:	lw	s7, 36(JFP)	@ Java temp cell # 2
0x2bcc2e98	1912:	lw	s6, 0(s7)	@ NULL check
0x2bcc2e9c	1916:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2ea0	1920:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2ea4	1924:	jalr	s7
0x2bcc2ea8	1928:	nop
          		@ Captured a stackmap here.
0x2bcc2eac	1932:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2eb0	1936:	lw	s7, 0(JSP)
          		@ Do getfield:
0x2bcc2eb4	1940:	lw	s5, -52(JFP)	@ Java local cell # 1
0x2bcc2eb8	1944:	lw	s6, 76(s5)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc2ebc	1948:	sw	s7, 0(JSP)
0x2bcc2ec0	1952:	addiu	s4, zero, 8	@ const 8
0x2bcc2ec4	1956:	subu	ra, s4, s6
0x2bcc2ec8	1960:	sw	ra, 4(JSP)
0x2bcc2ecc	1964:	lw	s6, 0(s7)	@ NULL check
0x2bcc2ed0	1968:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2ed4	1972:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc2ed8	1976:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2edc	1980:	jalr	s7
0x2bcc2ee0	1984:	nop
          		@ Captured a stackmap here.
0x2bcc2ee4	1988:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2ee8	1992:	lw	s7, 0(JSP)
0x2bcc2eec	1996:	sw	s7, 0(JSP)
0x2bcc2ef0	2000:	lw	s6, 0(s7)	@ NULL check
0x2bcc2ef4	2004:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcc2ef8	2008:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc2efc	2012:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2f00	2016:	jalr	s7
0x2bcc2f04	2020:	nop
          		@ Captured a stackmap here.
0x2bcc2f08	2024:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc2f0c	2028:	lw	s7, 0(JSP)
0x2bcc2f10	2032:	sw	s7, -48(JFP)	@ Java local cell # 2
			@ Outgoing local(0) reg(20): not in register
0x2bcc2f14	2036:	lw	s4, -56(JFP)	@ Java local cell # 0
			@ Initial Temp REF set is 
	L4:	2040:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
--->Fixed instruction at 1552(0x2bcc2d30) to reference 2040
--->Fixed instruction at 1048(0x2bcc2b38) to reference 2040
          		@ MAP_PC idepth=0 javaPc=254 compiledPc=2040
          		@ Do getfield:
0x2bcc2f18	2040:	lw	s7, 108(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc2f1c	2044:	lw	s6, 64(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc2f20	2048:	sw	s6, 0(JSP)
0x2bcc2f24	2052:	lw	ra, -48(JFP)	@ Java local cell # 2
0x2bcc2f28	2056:	sw	ra, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc2f2c	2060:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc2f30	2064:	addiu	t7, zero, -4
0x2bcc2f34	2068:	and	s7, s7, t7
0x2bcc2f38	2072:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc2f3c	2076:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc2f40	2080:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc2f44	2084:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2f48	2088:	jalr	s7
0x2bcc2f4c	2092:	nop
          		@ Captured a stackmap here.
0x2bcc2f50	2096:	lw	ra, -44(JFP)	@ Java local cell # 3
0x2bcc2f54	2100:	sw	ra, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc2f58	2104:	lw	s7, 0(ra)	@ Get object.cb
0x2bcc2f5c	2108:	addiu	t7, zero, -4
0x2bcc2f60	2112:	and	s7, s7, t7
0x2bcc2f64	2116:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc2f68	2120:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc2f6c	2124:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc2f70	2128:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2f74	2132:	jalr	s7
0x2bcc2f78	2136:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcc2f7c	2140:	lw	s6, -56(JFP)	@ Java local cell # 0
0x2bcc2f80	2144:	lw	s7, 108(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc2f84	2148:	lw	s5, 200(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc2f88	2152:	lw	s7, -44(JFP)	@ Java local cell # 3
0x2bcc2f8c	2156:	sw	s7, 0(JSP)
0x2bcc2f90	2160:	sw	s5, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc2f94	2164:	lw	s5, 0(s7)	@ Get object.cb
0x2bcc2f98	2168:	addiu	t7, zero, -4
0x2bcc2f9c	2172:	and	s5, s5, t7
0x2bcc2fa0	2176:	lw	s5, 76(s5)	@ Get cb.vtbl
0x2bcc2fa4	2180:	lw	a0, 52(s5)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc2fa8	2184:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc2fac	2188:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2fb0	2192:	jalr	s7
0x2bcc2fb4	2196:	nop
          		@ Captured a stackmap here.
0x2bcc2fb8	2200:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Check4Mate
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Check4Mate
0x2bcc2fbc	2204:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc2fc0	2208:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcc2fc4	2212:	lw	s6, -56(JFP)	@ Java local cell # 0
0x2bcc2fc8	2216:	lw	s7, 108(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc2fcc	2220:	sw	v0, 0(JSP)
0x2bcc2fd0	2224:	lw	s5, -44(JFP)	@ Java local cell # 3
0x2bcc2fd4	2228:	sw	s5, 4(JSP)
0x2bcc2fd8	2232:	sw	s7, 8(JSP)
0x2bcc2fdc	2236:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Check4Mate.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V
          		@ Invoke a method w/ a void return type
0x2bcc2fe0	2240:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcc2fe4	2244:	sw	v0, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc2fe8	2248:	lw	s7, 0(a0)	@ call method through mb
0x2bcc2fec	2252:	jalr	s7
0x2bcc2ff0	2256:	nop
          		@ Captured a stackmap here.
0x2bcc2ff4	2260:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Move
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Move
0x2bcc2ff8	2264:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc2ffc	2268:	nop
          		@ Captured a stackmap here.
0x2bcc3000	2272:	sw	v0, 0(JSP)
0x2bcc3004	2276:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Move.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc3008	2280:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc300c	2284:	sw	v0, 40(JFP)	@ REF spill Java temp cell # 3
0x2bcc3010	2288:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3014	2292:	jalr	s7
0x2bcc3018	2296:	nop
          		@ Captured a stackmap here.
0x2bcc301c	2300:	addiu	s5, zero, 1	@ const 1
0x2bcc3020	2304:	sw	s5, -28(JFP)	@ Java local cell # 7
0x2bcc3024	2308:	lw	ra, -52(JFP)	@ Java local cell # 1
0x2bcc3028	2312:	sw	ra, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc302c	2316:	lw	s7, 0(ra)	@ Get object.cb
0x2bcc3030	2320:	addiu	t7, zero, -4
0x2bcc3034	2324:	and	s7, s7, t7
0x2bcc3038	2328:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc303c	2332:	lw	a0, 164(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc3040	2336:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc3044	2340:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3048	2344:	jalr	s7
0x2bcc304c	2348:	nop
          		@ Captured a stackmap here.
0x2bcc3050	2352:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3054	2356:	lw	s7, 0(JSP)
0x2bcc3058	2360:	lw	s6, 36(JFP)	@ Java temp cell # 2
0x2bcc305c	2364:	sw	s6, -24(JFP)	@ Java local cell # 8
0x2bcc3060	2368:	lw	s5, 40(JFP)	@ Java temp cell # 3
0x2bcc3064	2372:	sw	s5, -16(JFP)	@ Java local cell # 10
			@ Outgoing local(1) reg(20): not in register
0x2bcc3068	2376:	lw	s4, -52(JFP)	@ Java local cell # 1
          		@ deferred comparison: 
0x2bcc306c	2380:	addiu	t7, zero, 119
0x2bcc3070	2384:	bne	s7, t7, PC=0x2bcc306c	@ branch to block L6
0x2bcc3074	2388:	nop
0x2bcc3078	2392:	sw	s6, 0(JSP)
0x2bcc307c	2396:	addiu	s7, zero, 1	@ const 1
0x2bcc3080	2400:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc3084	2404:	lw	ra, 0(s6)	@ Get object.cb
0x2bcc3088	2408:	addiu	t7, zero, -4
0x2bcc308c	2412:	and	ra, ra, t7
0x2bcc3090	2416:	lw	ra, 76(ra)	@ Get cb.vtbl
0x2bcc3094	2420:	lw	a0, 44(ra)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc3098	2424:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc309c	2428:	lw	s7, 0(a0)	@ call method through mb
0x2bcc30a0	2432:	jalr	s7
0x2bcc30a4	2436:	nop
          		@ Captured a stackmap here.
0x2bcc30a8	2440:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc30ac	2444:	lw	s7, 0(JSP)
0x2bcc30b0	2448:	addiu	s6, zero, 1	@ const 1
0x2bcc30b4	2452:	sw	s6, -36(JFP)	@ Java local cell # 5
			@ Outgoing local(0) reg(22): not in register
0x2bcc30b8	2456:	lw	s6, -56(JFP)	@ Java local cell # 0
          		@ deferred comparison: 
0x2bcc30bc	2460:	beq	s7, zero, PC=0x2bcc30bc	@ branch to block L7
0x2bcc30c0	2464:	nop
          		@ Do getfield:
0x2bcc30c4	2468:	lw	s7, 108(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Resolving an instance field:
0x2bcc30c8	2472:	sw	s7, 44(JFP)	@ REF spill Java temp cell # 4
0x2bcc30cc	2476:	lui	s7, hi16(0x2bcc)
0x2bcc30d0	2480:	lw	s7, 12492(s7)	@ load cachedConstant
0x2bcc30d4	2484:	addiu	a2, zero, 77	@ ARG3 = cpIndex
0x2bcc30d8	2488:	jal	PC=(0x2bcb83ec)	@ call CVMCCMruntimeResolveGetfieldFieldOffset
0x2bcc30dc	2492:	nop
>>>>>>>>>Push Code Buffer to PC = 2476 (0x2bcc30cc) >>>>>>>>
0x2bcc30cc	2476:	lui	s7, hi16(0x2bcc)
0x2bcc30d0	2480:	lw	s7, 12512(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 2496 (0x2bcc30e0) <<<<<<<<<
0x2bcc30e0	2496:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc30e4	2500:	lui	s7, hi16(0x2bcc)
0x2bcc30e8	2504:	lw	s7, 12512(s7)	@ load cachedConstant
          		@ Do getfield:
0x2bcc30ec	2508:	lw	s5, 44(JFP)	@ Java temp cell # 4
0x2bcc30f0	2512:	addu	t7, s5, s7	@ valueObj = getfield(obj, fieldIdx); add indexReg and baseReg
0x2bcc30f4	2516:	lw	s6, 0(t7)
0x2bcc30f8	2520:	sw	s6, 0(JSP)
0x2bcc30fc	2524:	lw	s7, -44(JFP)	@ Java local cell # 3
0x2bcc3100	2528:	sw	s7, 4(JSP)
0x2bcc3104	2532:	addiu	JSP, JSP, 8	@ adjust JSP before method call
          		@ Resolving a method table index:
0x2bcc3108	2536:	sw	s6, 44(JFP)	@ REF spill Java temp cell # 4
0x2bcc310c	2540:	lui	s7, hi16(0x2bcc)
0x2bcc3110	2544:	lw	s7, 12556(s7)	@ load cachedConstant
0x2bcc3114	2548:	addiu	a2, zero, 78	@ ARG3 = cpIndex
0x2bcc3118	2552:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc311c	2556:	nop
0x2bcc3120	2560:	move	v0, v0	@ return MB directly
0x2bcc3124	2564:	b	PC=0x2bcc3124
0x2bcc3128	2568:	nop
>>>>>>>>>Push Code Buffer to PC = 2540 (0x2bcc310c) >>>>>>>>
0x2bcc310c	2540:	lui	s7, hi16(0x2bcc)
0x2bcc3110	2544:	lw	s7, 12588(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 2572 (0x2bcc312c) <<<<<<<<<
0x2bcc312c	2572:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3130	2576:	lui	s7, hi16(0x2bcc)
0x2bcc3134	2580:	lw	s7, 12588(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc3138	2584:	lw	s5, 44(JFP)	@ Java temp cell # 4
0x2bcc313c	2588:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc3140	2592:	addiu	t7, zero, -4
0x2bcc3144	2596:	and	s6, s6, t7
0x2bcc3148	2600:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc314c	2604:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc3150	2608:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 2560 (0x2bcc3120) >>>>>>>>
0x2bcc3120	2560:	move	a0, v0
0x2bcc3124	2564:	b	PC=0x2bcc3154
0x2bcc3128	2568:	nop
<<<<<<<<<Pop Code Buffer to PC = 2612 (0x2bcc3154) <<<<<<<<<
          		@ Invoke a method w/ a 32bit return type
0x2bcc3154	2612:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3158	2616:	jalr	s7
0x2bcc315c	2620:	nop
          		@ Captured a stackmap here.
0x2bcc3160	2624:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3164	2628:	lw	s7, 0(JSP)
0x2bcc3168	2632:	sw	s7, 0(JSP)
0x2bcc316c	2636:	addiu	JSP, JSP, 4	@ adjust JSP before method call
          		@ Resolving a method table index:
0x2bcc3170	2640:	sw	s7, 44(JFP)	@ REF spill Java temp cell # 4
0x2bcc3174	2644:	lui	s7, hi16(0x2bcc)
0x2bcc3178	2648:	lw	s7, 12660(s7)	@ load cachedConstant
0x2bcc317c	2652:	addiu	a2, zero, 79	@ ARG3 = cpIndex
0x2bcc3180	2656:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc3184	2660:	nop
0x2bcc3188	2664:	move	v0, v0	@ return MB directly
0x2bcc318c	2668:	b	PC=0x2bcc318c
0x2bcc3190	2672:	nop
>>>>>>>>>Push Code Buffer to PC = 2644 (0x2bcc3174) >>>>>>>>
0x2bcc3174	2644:	lui	s7, hi16(0x2bcc)
0x2bcc3178	2648:	lw	s7, 12692(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 2676 (0x2bcc3194) <<<<<<<<<
0x2bcc3194	2676:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3198	2680:	lui	s7, hi16(0x2bcc)
0x2bcc319c	2684:	lw	s7, 12692(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc31a0	2688:	lw	s5, 44(JFP)	@ Java temp cell # 4
0x2bcc31a4	2692:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc31a8	2696:	addiu	t7, zero, -4
0x2bcc31ac	2700:	and	s6, s6, t7
0x2bcc31b0	2704:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc31b4	2708:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc31b8	2712:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 2664 (0x2bcc3188) >>>>>>>>
0x2bcc3188	2664:	move	a0, v0
0x2bcc318c	2668:	b	PC=0x2bcc31bc
0x2bcc3190	2672:	nop
<<<<<<<<<Pop Code Buffer to PC = 2716 (0x2bcc31bc) <<<<<<<<<
          		@ Invoke a method w/ a 32bit return type
0x2bcc31bc	2716:	lw	s7, 0(a0)	@ call method through mb
0x2bcc31c0	2720:	jalr	s7
0x2bcc31c4	2724:	nop
          		@ Captured a stackmap here.
0x2bcc31c8	2728:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc31cc	2732:	lw	s7, 0(JSP)
0x2bcc31d0	2736:	sw	s7, -32(JFP)	@ Java local cell # 6
0x2bcc31d4	2740:	lw	s6, 44(JFP)	@ Java temp cell # 4
0x2bcc31d8	2744:	sw	s6, -12(JFP)	@ Java local cell # 11
0x2bcc31dc	2748:	sw	zero, -8(JFP)	@ Java local cell # 12
			@ Outgoing local(0) reg(20): not in register
0x2bcc31e0	2752:	lw	s4, -56(JFP)	@ Java local cell # 0
			@ Outgoing local(7) reg(21): not in register
0x2bcc31e4	2756:	addiu	s5, zero, 1	@ const 1
			@ Outgoing local(3) reg(22): not in register
0x2bcc31e8	2760:	lw	s6, -44(JFP)	@ Java local cell # 3
			@ Outgoing local(12) reg(23): in wrong register
0x2bcc31ec	2764:	move	s7, zero
0x2bcc31f0	2768:	b	PC=0x2bcc31f0	@ branch to block L8
0x2bcc31f4	2772:	nop
			@ Initial Temp REF set is 
	L9:	2776:	@ Patchable GC Check point
0x2bcc31f8	2776:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcc31f8	2776:	nop
0x2bcc31fc	2780:	nop
          		@ Captured a stackmap here.
	L9:	2784:	@ entry point when locals need to be loaded
			@ Preloading incoming local(3) reg(22)
0x2bcc3200	2784:	lw	s6, -44(JFP)	@ Java local cell # 3
	L9:	2788:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=354 compiledPc=2784
0x2bcc3204	2788:	sw	s6, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc3208	2792:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc320c	2796:	addiu	t7, zero, -4
0x2bcc3210	2800:	and	s7, s7, t7
0x2bcc3214	2804:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc3218	2808:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc321c	2812:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc3220	2816:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3224	2820:	jalr	s7
0x2bcc3228	2824:	nop
          		@ Captured a stackmap here.
0x2bcc322c	2828:	lw	ra, -12(JFP)	@ Java local cell # 11
0x2bcc3230	2832:	sw	ra, 0(JSP)
0x2bcc3234	2836:	lw	t9, -8(JFP)	@ Java local cell # 12
0x2bcc3238	2840:	sw	t9, 4(JSP)
0x2bcc323c	2844:	addiu	JSP, JSP, 8	@ adjust JSP before method call
          		@ Resolving a method table index:
0x2bcc3240	2848:	lui	s7, hi16(0x2bcc)
0x2bcc3244	2852:	lw	s7, 12864(s7)	@ load cachedConstant
0x2bcc3248	2856:	addiu	a2, zero, 80	@ ARG3 = cpIndex
0x2bcc324c	2860:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc3250	2864:	nop
0x2bcc3254	2868:	move	v0, v0	@ return MB directly
0x2bcc3258	2872:	b	PC=0x2bcc3258
0x2bcc325c	2876:	nop
>>>>>>>>>Push Code Buffer to PC = 2848 (0x2bcc3240) >>>>>>>>
0x2bcc3240	2848:	lui	s7, hi16(0x2bcc)
0x2bcc3244	2852:	lw	s7, 12896(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 2880 (0x2bcc3260) <<<<<<<<<
0x2bcc3260	2880:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3264	2884:	lui	s7, hi16(0x2bcc)
0x2bcc3268	2888:	lw	s7, 12896(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc326c	2892:	lw	s5, -12(JFP)	@ Java local cell # 11
0x2bcc3270	2896:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc3274	2900:	addiu	t7, zero, -4
0x2bcc3278	2904:	and	s6, s6, t7
0x2bcc327c	2908:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc3280	2912:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc3284	2916:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 2868 (0x2bcc3254) >>>>>>>>
0x2bcc3254	2868:	move	a0, v0
0x2bcc3258	2872:	b	PC=0x2bcc3288
0x2bcc325c	2876:	nop
<<<<<<<<<Pop Code Buffer to PC = 2920 (0x2bcc3288) <<<<<<<<<
          		@ Invoke a method w/ a 32bit return type
0x2bcc3288	2920:	lw	s7, 0(a0)	@ call method through mb
0x2bcc328c	2924:	jalr	s7
0x2bcc3290	2928:	nop
          		@ Captured a stackmap here.
0x2bcc3294	2932:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3298	2936:	lw	s7, 0(JSP)
          		@ Resolving a class:
0x2bcc329c	2940:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc32a0	2944:	lui	a2, hi16(0x2bcc)
0x2bcc32a4	2948:	lw	a2, 12960(a2)	@ load cachedConstant
0x2bcc32a8	2952:	addiu	a2, zero, 81	@ ARG3 = cpIndex
0x2bcc32ac	2956:	jal	PC=(0x2bcb83d4)	@ call CVMCCMruntimeResolveClassBlock
0x2bcc32b0	2960:	nop
>>>>>>>>>Push Code Buffer to PC = 2944 (0x2bcc32a0) >>>>>>>>
0x2bcc32a0	2944:	lui	a2, hi16(0x2bcc)
0x2bcc32a4	2948:	lw	a2, 12980(a2)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 2964 (0x2bcc32b4) <<<<<<<<<
0x2bcc32b4	2964:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc32b8	2968:	lui	a2, hi16(0x2bcc)
0x2bcc32bc	2972:	lw	a2, 12980(a2)	@ load cachedConstant
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcc32c0	2976:	lw	s7, 36(JFP)	@ Java temp cell # 2
0x2bcc32c4	2980:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcc32c8	2984:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcc32cc	2988:	nop
0x2bcc32d0	2992:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
0x2bcc32d4	2996:	lw	s6, -16(JFP)	@ Java local cell # 10
          		@ Resolving an instance field:
0x2bcc32d8	3000:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc32dc	3004:	lui	s7, hi16(0x2bcc)
0x2bcc32e0	3008:	lw	s7, 13020(s7)	@ load cachedConstant
0x2bcc32e4	3012:	addiu	a2, zero, 82	@ ARG3 = cpIndex
0x2bcc32e8	3016:	jal	PC=(0x2bcb83f8)	@ call CVMCCMruntimeResolvePutfieldFieldOffset
0x2bcc32ec	3020:	nop
>>>>>>>>>Push Code Buffer to PC = 3004 (0x2bcc32dc) >>>>>>>>
0x2bcc32dc	3004:	lui	s7, hi16(0x2bcc)
0x2bcc32e0	3008:	lw	s7, 13040(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 3024 (0x2bcc32f0) <<<<<<<<<
0x2bcc32f0	3024:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc32f4	3028:	lui	s7, hi16(0x2bcc)
0x2bcc32f8	3032:	lw	s7, 13040(s7)	@ load cachedConstant
          		@ Do putfield:
0x2bcc32fc	3036:	lw	s6, -16(JFP)	@ Java local cell # 10
0x2bcc3300	3040:	addu	s5, s6, s7	@ fieldAddr = obj + fieldOffset;
0x2bcc3304	3044:	lw	s7, 36(JFP)	@ Java temp cell # 2
0x2bcc3308	3048:	sw	s7, 0(s5)	@ putfield(fieldAddr, valueObj);
0x2bcc330c	3052:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc3310	3056:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc3314	3060:	srl	t7, s5, 9	@ mark card table
0x2bcc3318	3064:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc331c	3068:	sb	ra, 0(t7)
0x2bcc3320	3072:	lw	t9, -56(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcc3324	3076:	lw	s5, 108(t9)	@ valueObj = getfield(obj, fieldIdx);
          		@ Resolving an instance field:
0x2bcc3328	3080:	sw	s5, 40(JFP)	@ REF spill Java temp cell # 3
0x2bcc332c	3084:	lui	s7, hi16(0x2bcc)
0x2bcc3330	3088:	lw	s7, 13100(s7)	@ load cachedConstant
0x2bcc3334	3092:	addiu	a2, zero, 77	@ ARG3 = cpIndex
0x2bcc3338	3096:	jal	PC=(0x2bcb83ec)	@ call CVMCCMruntimeResolveGetfieldFieldOffset
0x2bcc333c	3100:	nop
>>>>>>>>>Push Code Buffer to PC = 3084 (0x2bcc332c) >>>>>>>>
0x2bcc332c	3084:	lui	s7, hi16(0x2bcc)
0x2bcc3330	3088:	lw	s7, 13120(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 3104 (0x2bcc3340) <<<<<<<<<
0x2bcc3340	3104:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3344	3108:	lui	s7, hi16(0x2bcc)
0x2bcc3348	3112:	lw	s7, 13120(s7)	@ load cachedConstant
          		@ Do getfield:
0x2bcc334c	3116:	lw	s5, 40(JFP)	@ Java temp cell # 3
0x2bcc3350	3120:	addu	t7, s5, s7	@ valueObj = getfield(obj, fieldIdx); add indexReg and baseReg
0x2bcc3354	3124:	lw	s6, 0(t7)
0x2bcc3358	3128:	sw	s6, 0(JSP)
0x2bcc335c	3132:	lw	s7, -44(JFP)	@ Java local cell # 3
0x2bcc3360	3136:	sw	s7, 4(JSP)
0x2bcc3364	3140:	lw	s5, -16(JFP)	@ Java local cell # 10
0x2bcc3368	3144:	sw	s5, 8(JSP)
0x2bcc336c	3148:	lw	ra, -36(JFP)	@ Java local cell # 5
0x2bcc3370	3152:	sw	ra, 12(JSP)
0x2bcc3374	3156:	addiu	JSP, JSP, 16	@ adjust JSP before method call
          		@ Resolving a method table index:
0x2bcc3378	3160:	sw	s6, 40(JFP)	@ REF spill Java temp cell # 3
0x2bcc337c	3164:	lui	s7, hi16(0x2bcc)
0x2bcc3380	3168:	lw	s7, 13180(s7)	@ load cachedConstant
0x2bcc3384	3172:	addiu	a2, zero, 83	@ ARG3 = cpIndex
0x2bcc3388	3176:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc338c	3180:	nop
0x2bcc3390	3184:	move	v0, v0	@ return MB directly
0x2bcc3394	3188:	b	PC=0x2bcc3394
0x2bcc3398	3192:	nop
>>>>>>>>>Push Code Buffer to PC = 3164 (0x2bcc337c) >>>>>>>>
0x2bcc337c	3164:	lui	s7, hi16(0x2bcc)
0x2bcc3380	3168:	lw	s7, 13212(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 3196 (0x2bcc339c) <<<<<<<<<
0x2bcc339c	3196:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc33a0	3200:	lui	s7, hi16(0x2bcc)
0x2bcc33a4	3204:	lw	s7, 13212(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc33a8	3208:	lw	s5, 40(JFP)	@ Java temp cell # 3
0x2bcc33ac	3212:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc33b0	3216:	addiu	t7, zero, -4
0x2bcc33b4	3220:	and	s6, s6, t7
0x2bcc33b8	3224:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc33bc	3228:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc33c0	3232:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 3184 (0x2bcc3390) >>>>>>>>
0x2bcc3390	3184:	move	a0, v0
0x2bcc3394	3188:	b	PC=0x2bcc33c4
0x2bcc3398	3192:	nop
<<<<<<<<<Pop Code Buffer to PC = 3236 (0x2bcc33c4) <<<<<<<<<
          		@ Invoke a method w/ a 32bit return type
0x2bcc33c4	3236:	lw	s7, 0(a0)	@ call method through mb
0x2bcc33c8	3240:	jalr	s7
0x2bcc33cc	3244:	nop
          		@ Captured a stackmap here.
0x2bcc33d0	3248:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc33d4	3252:	lw	s7, 0(JSP)
0x2bcc33d8	3256:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Check4Mate
          		@ Do new:
0x2bcc33dc	3260:	sw	s7, 40(JFP)	@ REF spill Java temp cell # 3
          		@ cb: com.sun.mep.bench.Chess.Check4Mate
0x2bcc33e0	3264:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc33e4	3268:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcc33e8	3272:	lw	s6, -56(JFP)	@ Java local cell # 0
0x2bcc33ec	3276:	lw	s7, 108(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc33f0	3280:	sw	v0, 0(JSP)
0x2bcc33f4	3284:	lw	s5, 40(JFP)	@ Java temp cell # 3
0x2bcc33f8	3288:	sw	s5, 4(JSP)
0x2bcc33fc	3292:	sw	s7, 8(JSP)
0x2bcc3400	3296:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Check4Mate.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V
          		@ Invoke a method w/ a void return type
0x2bcc3404	3300:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcc3408	3304:	sw	v0, 44(JFP)	@ REF spill Java temp cell # 4
0x2bcc340c	3308:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3410	3312:	jalr	s7
0x2bcc3414	3316:	nop
          		@ Captured a stackmap here.
0x2bcc3418	3320:	lw	s7, 44(JFP)	@ Java temp cell # 4
0x2bcc341c	3324:	sw	s7, 0(JSP)
0x2bcc3420	3328:	lw	s6, -36(JFP)	@ Java local cell # 5
0x2bcc3424	3332:	sw	s6, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc3428	3336:	lw	s5, 0(s7)	@ Get object.cb
0x2bcc342c	3340:	addiu	t7, zero, -4
0x2bcc3430	3344:	and	s5, s5, t7
0x2bcc3434	3348:	lw	s5, 76(s5)	@ Get cb.vtbl
0x2bcc3438	3352:	lw	a0, 44(s5)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc343c	3356:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc3440	3360:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3444	3364:	jalr	s7
0x2bcc3448	3368:	nop
          		@ Captured a stackmap here.
0x2bcc344c	3372:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3450	3376:	lw	s5, 0(JSP)
0x2bcc3454	3380:	lw	s7, 40(JFP)	@ Java temp cell # 3
0x2bcc3458	3384:	sw	s7, -40(JFP)	@ Java local cell # 4
0x2bcc345c	3388:	sw	s5, -28(JFP)	@ Java local cell # 7
0x2bcc3460	3392:	lw	s6, 36(JFP)	@ Java temp cell # 2
0x2bcc3464	3396:	sw	s6, -20(JFP)	@ Java local cell # 9
0x2bcc3468	3400:	lw	s4, 44(JFP)	@ Java temp cell # 4
0x2bcc346c	3404:	sw	s4, -4(JFP)	@ Java local cell # 13
			@ Outgoing local(0) reg(20): not in register
0x2bcc3470	3408:	lw	s4, -56(JFP)	@ Java local cell # 0
			@ Outgoing local(7) reg(21): in correct register
			@ Outgoing local(3) reg(22): not in register
0x2bcc3474	3412:	lw	s6, -44(JFP)	@ Java local cell # 3
			@ Outgoing local(12) reg(23): not in register
0x2bcc3478	3416:	lw	s7, -8(JFP)	@ Java local cell # 12
          		@ deferred comparison: 
0x2bcc347c	3420:	bne	s5, zero, PC=0x2bcc347c	@ branch to block L10
0x2bcc3480	3424:	nop
          		@ Do getfield:
0x2bcc3484	3428:	lw	ra, 108(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Resolving an instance field:
0x2bcc3488	3432:	sw	ra, 48(JFP)	@ REF spill Java temp cell # 5
0x2bcc348c	3436:	lui	s7, hi16(0x2bcc)
0x2bcc3490	3440:	lw	s7, 13452(s7)	@ load cachedConstant
0x2bcc3494	3444:	addiu	a2, zero, 84	@ ARG3 = cpIndex
0x2bcc3498	3448:	jal	PC=(0x2bcb83ec)	@ call CVMCCMruntimeResolveGetfieldFieldOffset
0x2bcc349c	3452:	nop
>>>>>>>>>Push Code Buffer to PC = 3436 (0x2bcc348c) >>>>>>>>
0x2bcc348c	3436:	lui	s7, hi16(0x2bcc)
0x2bcc3490	3440:	lw	s7, 13472(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 3456 (0x2bcc34a0) <<<<<<<<<
0x2bcc34a0	3456:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc34a4	3460:	lui	s7, hi16(0x2bcc)
0x2bcc34a8	3464:	lw	s7, 13472(s7)	@ load cachedConstant
          		@ Do getfield:
0x2bcc34ac	3468:	lw	s5, 48(JFP)	@ Java temp cell # 5
0x2bcc34b0	3472:	addu	t7, s5, s7	@ valueObj = getfield(obj, fieldIdx); add indexReg and baseReg
0x2bcc34b4	3476:	lw	s6, 0(t7)
0x2bcc34b8	3480:	lw	a1, 0(CP)	@ cb java.lang.StringBuffer
          		@ Do new:
0x2bcc34bc	3484:	sw	s6, 48(JFP)	@ REF spill Java temp cell # 5
          		@ cb: java.lang.StringBuffer
0x2bcc34c0	3488:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc34c4	3492:	nop
          		@ Captured a stackmap here.
0x2bcc34c8	3496:	sw	v0, 0(JSP)
0x2bcc34cc	3500:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc34d0	3504:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc34d4	3508:	sw	v0, 52(JFP)	@ REF spill Java temp cell # 6
0x2bcc34d8	3512:	lw	s7, 0(a0)	@ call method through mb
0x2bcc34dc	3516:	jalr	s7
0x2bcc34e0	3520:	nop
          		@ Captured a stackmap here.
0x2bcc34e4	3524:	lw	s7, 48(JFP)	@ Java temp cell # 5
0x2bcc34e8	3528:	sw	s7, 0(JSP)
0x2bcc34ec	3532:	lw	s6, 52(JFP)	@ Java temp cell # 6
0x2bcc34f0	3536:	sw	s6, 4(JSP)
0x2bcc34f4	3540:	lw	s5, 0(CP)	@ StringICell
0x2bcc34f8	3544:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcc34fc	3548:	sw	s6, 8(JSP)
0x2bcc3500	3552:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc3504	3556:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcc3508	3560:	lw	s7, 0(a0)	@ call method through mb
0x2bcc350c	3564:	jalr	s7
0x2bcc3510	3568:	nop
          		@ Captured a stackmap here.
0x2bcc3514	3572:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3518	3576:	lw	s7, 0(JSP)
0x2bcc351c	3580:	sw	s7, 0(JSP)
0x2bcc3520	3584:	lw	s6, -20(JFP)	@ Java local cell # 9
0x2bcc3524	3588:	sw	s6, 4(JSP)
0x2bcc3528	3592:	addiu	JSP, JSP, 8	@ adjust JSP before method call
          		@ Resolving a method table index:
0x2bcc352c	3596:	sw	s7, 52(JFP)	@ REF spill Java temp cell # 6
0x2bcc3530	3600:	lui	s7, hi16(0x2bcc)
0x2bcc3534	3604:	lw	s7, 13616(s7)	@ load cachedConstant
0x2bcc3538	3608:	addiu	a2, zero, 86	@ ARG3 = cpIndex
0x2bcc353c	3612:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc3540	3616:	nop
0x2bcc3544	3620:	move	v0, v0	@ return MB directly
0x2bcc3548	3624:	b	PC=0x2bcc3548
0x2bcc354c	3628:	nop
>>>>>>>>>Push Code Buffer to PC = 3600 (0x2bcc3530) >>>>>>>>
0x2bcc3530	3600:	lui	s7, hi16(0x2bcc)
0x2bcc3534	3604:	lw	s7, 13648(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 3632 (0x2bcc3550) <<<<<<<<<
0x2bcc3550	3632:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3554	3636:	lui	s7, hi16(0x2bcc)
0x2bcc3558	3640:	lw	s7, 13648(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc355c	3644:	lw	s5, 52(JFP)	@ Java temp cell # 6
0x2bcc3560	3648:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc3564	3652:	addiu	t7, zero, -4
0x2bcc3568	3656:	and	s6, s6, t7
0x2bcc356c	3660:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc3570	3664:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc3574	3668:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 3620 (0x2bcc3544) >>>>>>>>
0x2bcc3544	3620:	move	a0, v0
0x2bcc3548	3624:	b	PC=0x2bcc3578
0x2bcc354c	3628:	nop
<<<<<<<<<Pop Code Buffer to PC = 3672 (0x2bcc3578) <<<<<<<<<
          		@ Invoke a method w/ a 32bit return type
0x2bcc3578	3672:	lw	s7, 0(a0)	@ call method through mb
0x2bcc357c	3676:	jalr	s7
0x2bcc3580	3680:	nop
          		@ Captured a stackmap here.
0x2bcc3584	3684:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3588	3688:	lw	s7, 0(JSP)
0x2bcc358c	3692:	sw	s7, 0(JSP)
0x2bcc3590	3696:	lw	s5, 0(CP)	@ StringICell
0x2bcc3594	3700:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcc3598	3704:	sw	s6, 4(JSP)
0x2bcc359c	3708:	lw	s6, 0(s7)	@ NULL check
0x2bcc35a0	3712:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc35a4	3716:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc35a8	3720:	lw	s7, 0(a0)	@ call method through mb
0x2bcc35ac	3724:	jalr	s7
0x2bcc35b0	3728:	nop
          		@ Captured a stackmap here.
0x2bcc35b4	3732:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc35b8	3736:	lw	s7, 0(JSP)
0x2bcc35bc	3740:	sw	s7, 0(JSP)
0x2bcc35c0	3744:	lw	s6, -8(JFP)	@ Java local cell # 12
0x2bcc35c4	3748:	sw	s6, 4(JSP)
0x2bcc35c8	3752:	lw	s5, 0(s7)	@ NULL check
0x2bcc35cc	3756:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc35d0	3760:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc35d4	3764:	lw	s7, 0(a0)	@ call method through mb
0x2bcc35d8	3768:	jalr	s7
0x2bcc35dc	3772:	nop
          		@ Captured a stackmap here.
0x2bcc35e0	3776:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc35e4	3780:	lw	s7, 0(JSP)
0x2bcc35e8	3784:	sw	s7, 0(JSP)
0x2bcc35ec	3788:	lw	s5, 0(CP)	@ StringICell
0x2bcc35f0	3792:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcc35f4	3796:	sw	s6, 4(JSP)
0x2bcc35f8	3800:	lw	s6, 0(s7)	@ NULL check
0x2bcc35fc	3804:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc3600	3808:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc3604	3812:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3608	3816:	jalr	s7
0x2bcc360c	3820:	nop
          		@ Captured a stackmap here.
0x2bcc3610	3824:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3614	3828:	lw	s7, 0(JSP)
0x2bcc3618	3832:	sw	s7, 0(JSP)
0x2bcc361c	3836:	lw	s6, 0(s7)	@ NULL check
0x2bcc3620	3840:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcc3624	3844:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc3628	3848:	lw	s7, 0(a0)	@ call method through mb
0x2bcc362c	3852:	jalr	s7
0x2bcc3630	3856:	nop
          		@ Captured a stackmap here.
          		@ Fetch mb from vtable:
0x2bcc3634	3860:	lw	s6, 48(JFP)	@ Java temp cell # 5
0x2bcc3638	3864:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc363c	3868:	addiu	t7, zero, -4
0x2bcc3640	3872:	and	s7, s7, t7
0x2bcc3644	3876:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc3648	3880:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc364c	3884:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3650	3888:	jalr	s7
0x2bcc3654	3892:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(0) reg(20): not in register
0x2bcc3658	3896:	lw	s4, -56(JFP)	@ Java local cell # 0
			@ Outgoing local(7) reg(21): not in register
0x2bcc365c	3900:	lw	s5, -28(JFP)	@ Java local cell # 7
			@ Outgoing local(3) reg(22): not in register
0x2bcc3660	3904:	lw	s6, -44(JFP)	@ Java local cell # 3
			@ Outgoing local(12) reg(23): not in register
0x2bcc3664	3908:	lw	s7, -8(JFP)	@ Java local cell # 12
			@ Initial Temp REF set is 
	L10:	3912:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(7) to reg(21)
			@ Binding Incoming Local(3) to reg(22)
			@ Binding Incoming Local(12) to reg(23)
--->Fixed instruction at 3420(0x2bcc347c) to reference 3912
          		@ MAP_PC idepth=0 javaPc=468 compiledPc=3912
0x2bcc3668	3912:	addiu	s7, s7, 1
0x2bcc366c	3916:	sw	s7, -8(JFP)	@ Java local cell # 12
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(7) reg(21): in correct register
			@ Outgoing local(3) reg(22): in correct register
			@ Outgoing local(12) reg(23): in correct register
			@ Initial Temp REF set is 
	L8:	3920:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(7) to reg(21)
			@ Binding Incoming Local(3) to reg(22)
			@ Binding Incoming Local(12) to reg(23)
--->Fixed instruction at 2768(0x2bcc31f0) to reference 3920
          		@ MAP_PC idepth=0 javaPc=471 compiledPc=3920
0x2bcc3670	3920:	lw	ra, -32(JFP)	@ Java local cell # 6
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(7) reg(21): in correct register
          		@ deferred comparison: 
0x2bcc3674	3924:	slt	t7, s7, ra
0x2bcc3678	3928:	beq	t7, zero, PC=0x2bcc3674	@ branch to block L11
0x2bcc367c	3932:	nop
			@ Outgoing local(3) reg(22): in correct register
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcc3680	3936:	bne	s5, zero, PC=0x2bcc31f8	@ branch to block L9
0x2bcc3684	3940:	nop
0x2bcc3680	3936:	bne	s5, zero, PC=0x2bcc3204	@ branch to block L9, skip GC
0x2bcc3684	3940:	nop
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(7) reg(21): in correct register
			@ Initial Temp REF set is 
	L11:	3944:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(7) to reg(21)
--->Fixed instruction at 3928(0x2bcc3678) to reference 3944
          		@ MAP_PC idepth=0 javaPc=483 compiledPc=3944
			@ Outgoing local(0) reg(20): in correct register
          		@ deferred comparison: 
0x2bcc3688	3944:	beq	s5, zero, PC=0x2bcc3688	@ branch to block L12
0x2bcc368c	3948:	nop
          		@ Do getfield:
0x2bcc3690	3952:	lw	s7, 108(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Resolving an instance field:
0x2bcc3694	3956:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc3698	3960:	lui	s7, hi16(0x2bcc)
0x2bcc369c	3964:	lw	s7, 13976(s7)	@ load cachedConstant
0x2bcc36a0	3968:	addiu	a2, zero, 89	@ ARG3 = cpIndex
0x2bcc36a4	3972:	jal	PC=(0x2bcb83ec)	@ call CVMCCMruntimeResolveGetfieldFieldOffset
0x2bcc36a8	3976:	nop
>>>>>>>>>Push Code Buffer to PC = 3960 (0x2bcc3698) >>>>>>>>
0x2bcc3698	3960:	lui	s7, hi16(0x2bcc)
0x2bcc369c	3964:	lw	s7, 13996(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 3980 (0x2bcc36ac) <<<<<<<<<
0x2bcc36ac	3980:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc36b0	3984:	lui	s7, hi16(0x2bcc)
0x2bcc36b4	3988:	lw	s7, 13996(s7)	@ load cachedConstant
          		@ Do getfield:
0x2bcc36b8	3992:	lw	s5, 36(JFP)	@ Java temp cell # 2
0x2bcc36bc	3996:	addu	t7, s5, s7	@ valueObj = getfield(obj, fieldIdx); add indexReg and baseReg
0x2bcc36c0	4000:	lw	s6, 0(t7)
0x2bcc36c4	4004:	sw	s6, 0(JSP)
0x2bcc36c8	4008:	lw	s5, 0(CP)	@ StringICell
0x2bcc36cc	4012:	lw	s7, 0(s5)	@ StringObject from StringICell
0x2bcc36d0	4016:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc36d4	4020:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc36d8	4024:	addiu	t7, zero, -4
0x2bcc36dc	4028:	and	s7, s7, t7
0x2bcc36e0	4032:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc36e4	4036:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc36e8	4040:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc36ec	4044:	lw	s7, 0(a0)	@ call method through mb
0x2bcc36f0	4048:	jalr	s7
0x2bcc36f4	4052:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcc36f8	4056:	lw	s6, -56(JFP)	@ Java local cell # 0
0x2bcc36fc	4060:	lw	s7, 108(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc3700	4064:	sw	s7, 0(JSP)
0x2bcc3704	4068:	lw	ra, -52(JFP)	@ Java local cell # 1
0x2bcc3708	4072:	sw	ra, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc370c	4076:	lw	s5, 0(ra)	@ Get object.cb
0x2bcc3710	4080:	addiu	t7, zero, -4
0x2bcc3714	4084:	and	s5, s5, t7
0x2bcc3718	4088:	lw	s5, 76(s5)	@ Get cb.vtbl
0x2bcc371c	4092:	lw	a0, 164(s5)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc3720	4096:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc3724	4100:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc3728	4104:	lw	s7, 0(a0)	@ call method through mb
0x2bcc372c	4108:	jalr	s7
0x2bcc3730	4112:	nop
          		@ Captured a stackmap here.
          		@ Resolving a method table index:
0x2bcc3734	4116:	lui	s7, hi16(0x2bcc)
0x2bcc3738	4120:	lw	s7, 14132(s7)	@ load cachedConstant
0x2bcc373c	4124:	addiu	a2, zero, 91	@ ARG3 = cpIndex
0x2bcc3740	4128:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc3744	4132:	nop
0x2bcc3748	4136:	move	v0, v0	@ return MB directly
0x2bcc374c	4140:	b	PC=0x2bcc374c
0x2bcc3750	4144:	nop
>>>>>>>>>Push Code Buffer to PC = 4116 (0x2bcc3734) >>>>>>>>
0x2bcc3734	4116:	lui	s7, hi16(0x2bcc)
0x2bcc3738	4120:	lw	s7, 14164(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 4148 (0x2bcc3754) <<<<<<<<<
0x2bcc3754	4148:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3758	4152:	lui	s7, hi16(0x2bcc)
0x2bcc375c	4156:	lw	s7, 14164(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc3760	4160:	lw	s5, 36(JFP)	@ Java temp cell # 2
0x2bcc3764	4164:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc3768	4168:	addiu	t7, zero, -4
0x2bcc376c	4172:	and	s6, s6, t7
0x2bcc3770	4176:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc3774	4180:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc3778	4184:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 4136 (0x2bcc3748) >>>>>>>>
0x2bcc3748	4136:	move	a0, v0
0x2bcc374c	4140:	b	PC=0x2bcc377c
0x2bcc3750	4144:	nop
<<<<<<<<<Pop Code Buffer to PC = 4188 (0x2bcc377c) <<<<<<<<<
          		@ Invoke a method w/ a void return type
0x2bcc377c	4188:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3780	4192:	jalr	s7
0x2bcc3784	4196:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(0) reg(22): not in register
0x2bcc3788	4200:	lw	s6, -56(JFP)	@ Java local cell # 0
0x2bcc378c	4204:	b	PC=0x2bcc378c	@ branch to block L7
0x2bcc3790	4208:	nop
			@ Initial Temp REF set is 
	L12:	4212:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
--->Fixed instruction at 3944(0x2bcc3688) to reference 4212
          		@ MAP_PC idepth=0 javaPc=514 compiledPc=4212
          		@ Do getfield:
0x2bcc3794	4212:	lw	s7, 108(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Resolving an instance field:
0x2bcc3798	4216:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc379c	4220:	lui	s7, hi16(0x2bcc)
0x2bcc37a0	4224:	lw	s7, 14236(s7)	@ load cachedConstant
0x2bcc37a4	4228:	addiu	a2, zero, 92	@ ARG3 = cpIndex
0x2bcc37a8	4232:	jal	PC=(0x2bcb83ec)	@ call CVMCCMruntimeResolveGetfieldFieldOffset
0x2bcc37ac	4236:	nop
>>>>>>>>>Push Code Buffer to PC = 4220 (0x2bcc379c) >>>>>>>>
0x2bcc379c	4220:	lui	s7, hi16(0x2bcc)
0x2bcc37a0	4224:	lw	s7, 14256(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 4240 (0x2bcc37b0) <<<<<<<<<
0x2bcc37b0	4240:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc37b4	4244:	lui	s7, hi16(0x2bcc)
0x2bcc37b8	4248:	lw	s7, 14256(s7)	@ load cachedConstant
          		@ Do getfield:
0x2bcc37bc	4252:	lw	s5, 36(JFP)	@ Java temp cell # 2
0x2bcc37c0	4256:	addu	t7, s5, s7	@ valueObj = getfield(obj, fieldIdx); add indexReg and baseReg
0x2bcc37c4	4260:	lw	s6, 0(t7)
0x2bcc37c8	4264:	sw	s6, 0(JSP)
0x2bcc37cc	4268:	lw	s5, 0(CP)	@ StringICell
0x2bcc37d0	4272:	lw	s7, 0(s5)	@ StringObject from StringICell
0x2bcc37d4	4276:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc37d8	4280:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc37dc	4284:	addiu	t7, zero, -4
0x2bcc37e0	4288:	and	s7, s7, t7
0x2bcc37e4	4292:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc37e8	4296:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc37ec	4300:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc37f0	4304:	lw	s7, 0(a0)	@ call method through mb
0x2bcc37f4	4308:	jalr	s7
0x2bcc37f8	4312:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(0) reg(22): not in register
0x2bcc37fc	4316:	lw	s6, -56(JFP)	@ Java local cell # 0
0x2bcc3800	4320:	b	PC=0x2bcc3800	@ branch to block L7
0x2bcc3804	4324:	nop
			@ Initial Temp REF set is 
	L6:	4328:	@ entry point for branches
			@ Binding Incoming Local(1) to reg(20)
--->Fixed instruction at 2384(0x2bcc3070) to reference 4328
          		@ MAP_PC idepth=0 javaPc=529 compiledPc=4328
0x2bcc3808	4328:	sw	s4, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc380c	4332:	lw	s7, 0(s4)	@ Get object.cb
0x2bcc3810	4336:	addiu	t7, zero, -4
0x2bcc3814	4340:	and	s7, s7, t7
0x2bcc3818	4344:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc381c	4348:	lw	a0, 164(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc3820	4352:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc3824	4356:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3828	4360:	jalr	s7
0x2bcc382c	4364:	nop
          		@ Captured a stackmap here.
0x2bcc3830	4368:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3834	4372:	lw	s7, 0(JSP)
			@ Outgoing local(0) reg(21): not in register
0x2bcc3838	4376:	lw	s5, -56(JFP)	@ Java local cell # 0
          		@ deferred comparison: 
0x2bcc383c	4380:	addiu	t7, zero, 98
0x2bcc3840	4384:	bne	s7, t7, PC=0x2bcc383c	@ branch to block L13
0x2bcc3844	4388:	nop
0x2bcc3848	4392:	lw	ra, -24(JFP)	@ Java local cell # 8
0x2bcc384c	4396:	sw	ra, 0(JSP)
0x2bcc3850	4400:	addiu	s7, zero, -1	@ const -1
0x2bcc3854	4404:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc3858	4408:	lw	s6, 0(ra)	@ Get object.cb
0x2bcc385c	4412:	addiu	t7, zero, -4
0x2bcc3860	4416:	and	s6, s6, t7
0x2bcc3864	4420:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc3868	4424:	lw	a0, 44(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc386c	4428:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc3870	4432:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3874	4436:	jalr	s7
0x2bcc3878	4440:	nop
          		@ Captured a stackmap here.
0x2bcc387c	4444:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3880	4448:	lw	s7, 0(JSP)
0x2bcc3884	4452:	addiu	s6, zero, -1	@ const -1
0x2bcc3888	4456:	sw	s6, -36(JFP)	@ Java local cell # 5
			@ Outgoing local(0) reg(22): not in register
0x2bcc388c	4460:	lw	s6, -56(JFP)	@ Java local cell # 0
          		@ deferred comparison: 
0x2bcc3890	4464:	beq	s7, zero, PC=0x2bcc3890	@ branch to block L7
0x2bcc3894	4468:	nop
          		@ Do getfield:
0x2bcc3898	4472:	lw	s7, 108(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Resolving an instance field:
0x2bcc389c	4476:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc38a0	4480:	lui	s7, hi16(0x2bcc)
0x2bcc38a4	4484:	lw	s7, 14496(s7)	@ load cachedConstant
0x2bcc38a8	4488:	addiu	a2, zero, 77	@ ARG3 = cpIndex
0x2bcc38ac	4492:	jal	PC=(0x2bcb83ec)	@ call CVMCCMruntimeResolveGetfieldFieldOffset
0x2bcc38b0	4496:	nop
>>>>>>>>>Push Code Buffer to PC = 4480 (0x2bcc38a0) >>>>>>>>
0x2bcc38a0	4480:	lui	s7, hi16(0x2bcc)
0x2bcc38a4	4484:	lw	s7, 14516(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 4500 (0x2bcc38b4) <<<<<<<<<
0x2bcc38b4	4500:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc38b8	4504:	lui	s7, hi16(0x2bcc)
0x2bcc38bc	4508:	lw	s7, 14516(s7)	@ load cachedConstant
          		@ Do getfield:
0x2bcc38c0	4512:	lw	s5, 36(JFP)	@ Java temp cell # 2
0x2bcc38c4	4516:	addu	t7, s5, s7	@ valueObj = getfield(obj, fieldIdx); add indexReg and baseReg
0x2bcc38c8	4520:	lw	s6, 0(t7)
0x2bcc38cc	4524:	sw	s6, 0(JSP)
0x2bcc38d0	4528:	lw	s7, -44(JFP)	@ Java local cell # 3
0x2bcc38d4	4532:	sw	s7, 4(JSP)
0x2bcc38d8	4536:	addiu	JSP, JSP, 8	@ adjust JSP before method call
          		@ Resolving a method table index:
0x2bcc38dc	4540:	sw	s6, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc38e0	4544:	lui	s7, hi16(0x2bcc)
0x2bcc38e4	4548:	lw	s7, 14560(s7)	@ load cachedConstant
0x2bcc38e8	4552:	addiu	a2, zero, 94	@ ARG3 = cpIndex
0x2bcc38ec	4556:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc38f0	4560:	nop
0x2bcc38f4	4564:	move	v0, v0	@ return MB directly
0x2bcc38f8	4568:	b	PC=0x2bcc38f8
0x2bcc38fc	4572:	nop
>>>>>>>>>Push Code Buffer to PC = 4544 (0x2bcc38e0) >>>>>>>>
0x2bcc38e0	4544:	lui	s7, hi16(0x2bcc)
0x2bcc38e4	4548:	lw	s7, 14592(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 4576 (0x2bcc3900) <<<<<<<<<
0x2bcc3900	4576:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3904	4580:	lui	s7, hi16(0x2bcc)
0x2bcc3908	4584:	lw	s7, 14592(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc390c	4588:	lw	s5, 36(JFP)	@ Java temp cell # 2
0x2bcc3910	4592:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc3914	4596:	addiu	t7, zero, -4
0x2bcc3918	4600:	and	s6, s6, t7
0x2bcc391c	4604:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc3920	4608:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc3924	4612:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 4564 (0x2bcc38f4) >>>>>>>>
0x2bcc38f4	4564:	move	a0, v0
0x2bcc38f8	4568:	b	PC=0x2bcc3928
0x2bcc38fc	4572:	nop
<<<<<<<<<Pop Code Buffer to PC = 4616 (0x2bcc3928) <<<<<<<<<
          		@ Invoke a method w/ a 32bit return type
0x2bcc3928	4616:	lw	s7, 0(a0)	@ call method through mb
0x2bcc392c	4620:	jalr	s7
0x2bcc3930	4624:	nop
          		@ Captured a stackmap here.
0x2bcc3934	4628:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3938	4632:	lw	s7, 0(JSP)
0x2bcc393c	4636:	sw	s7, 0(JSP)
0x2bcc3940	4640:	addiu	JSP, JSP, 4	@ adjust JSP before method call
          		@ Resolving a method table index:
0x2bcc3944	4644:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc3948	4648:	lui	s7, hi16(0x2bcc)
0x2bcc394c	4652:	lw	s7, 14664(s7)	@ load cachedConstant
0x2bcc3950	4656:	addiu	a2, zero, 79	@ ARG3 = cpIndex
0x2bcc3954	4660:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc3958	4664:	nop
0x2bcc395c	4668:	move	v0, v0	@ return MB directly
0x2bcc3960	4672:	b	PC=0x2bcc3960
0x2bcc3964	4676:	nop
>>>>>>>>>Push Code Buffer to PC = 4648 (0x2bcc3948) >>>>>>>>
0x2bcc3948	4648:	lui	s7, hi16(0x2bcc)
0x2bcc394c	4652:	lw	s7, 14696(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 4680 (0x2bcc3968) <<<<<<<<<
0x2bcc3968	4680:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc396c	4684:	lui	s7, hi16(0x2bcc)
0x2bcc3970	4688:	lw	s7, 14696(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc3974	4692:	lw	s5, 36(JFP)	@ Java temp cell # 2
0x2bcc3978	4696:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc397c	4700:	addiu	t7, zero, -4
0x2bcc3980	4704:	and	s6, s6, t7
0x2bcc3984	4708:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc3988	4712:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc398c	4716:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 4668 (0x2bcc395c) >>>>>>>>
0x2bcc395c	4668:	move	a0, v0
0x2bcc3960	4672:	b	PC=0x2bcc3990
0x2bcc3964	4676:	nop
<<<<<<<<<Pop Code Buffer to PC = 4720 (0x2bcc3990) <<<<<<<<<
          		@ Invoke a method w/ a 32bit return type
0x2bcc3990	4720:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3994	4724:	jalr	s7
0x2bcc3998	4728:	nop
          		@ Captured a stackmap here.
0x2bcc399c	4732:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc39a0	4736:	lw	s7, 0(JSP)
0x2bcc39a4	4740:	sw	s7, -32(JFP)	@ Java local cell # 6
0x2bcc39a8	4744:	lw	s6, 36(JFP)	@ Java temp cell # 2
0x2bcc39ac	4748:	sw	s6, -12(JFP)	@ Java local cell # 11
0x2bcc39b0	4752:	sw	zero, -8(JFP)	@ Java local cell # 12
			@ Outgoing local(7) reg(21): not in register
0x2bcc39b4	4756:	lw	s5, -28(JFP)	@ Java local cell # 7
			@ Outgoing local(3) reg(22): not in register
0x2bcc39b8	4760:	lw	s6, -44(JFP)	@ Java local cell # 3
			@ Outgoing local(12) reg(23): not in register
0x2bcc39bc	4764:	lw	s7, -8(JFP)	@ Java local cell # 12
0x2bcc39c0	4768:	b	PC=0x2bcc39c0	@ branch to block L14
0x2bcc39c4	4772:	nop
			@ Initial Temp REF set is 
	L15:	4776:	@ Patchable GC Check point
0x2bcc39c8	4776:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcc39c8	4776:	nop
0x2bcc39cc	4780:	nop
          		@ Captured a stackmap here.
	L15:	4784:	@ entry point when locals need to be loaded
			@ Preloading incoming local(3) reg(22)
0x2bcc39d0	4784:	lw	s6, -44(JFP)	@ Java local cell # 3
	L15:	4788:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=577 compiledPc=4784
0x2bcc39d4	4788:	sw	s6, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc39d8	4792:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc39dc	4796:	addiu	t7, zero, -4
0x2bcc39e0	4800:	and	s7, s7, t7
0x2bcc39e4	4804:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc39e8	4808:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc39ec	4812:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc39f0	4816:	lw	s7, 0(a0)	@ call method through mb
0x2bcc39f4	4820:	jalr	s7
0x2bcc39f8	4824:	nop
          		@ Captured a stackmap here.
0x2bcc39fc	4828:	lw	ra, -12(JFP)	@ Java local cell # 11
0x2bcc3a00	4832:	sw	ra, 0(JSP)
0x2bcc3a04	4836:	lw	t9, -8(JFP)	@ Java local cell # 12
0x2bcc3a08	4840:	sw	t9, 4(JSP)
0x2bcc3a0c	4844:	addiu	JSP, JSP, 8	@ adjust JSP before method call
          		@ Resolving a method table index:
0x2bcc3a10	4848:	lui	s7, hi16(0x2bcc)
0x2bcc3a14	4852:	lw	s7, 14864(s7)	@ load cachedConstant
0x2bcc3a18	4856:	addiu	a2, zero, 80	@ ARG3 = cpIndex
0x2bcc3a1c	4860:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc3a20	4864:	nop
0x2bcc3a24	4868:	move	v0, v0	@ return MB directly
0x2bcc3a28	4872:	b	PC=0x2bcc3a28
0x2bcc3a2c	4876:	nop
>>>>>>>>>Push Code Buffer to PC = 4848 (0x2bcc3a10) >>>>>>>>
0x2bcc3a10	4848:	lui	s7, hi16(0x2bcc)
0x2bcc3a14	4852:	lw	s7, 14896(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 4880 (0x2bcc3a30) <<<<<<<<<
0x2bcc3a30	4880:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3a34	4884:	lui	s7, hi16(0x2bcc)
0x2bcc3a38	4888:	lw	s7, 14896(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc3a3c	4892:	lw	s5, -12(JFP)	@ Java local cell # 11
0x2bcc3a40	4896:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc3a44	4900:	addiu	t7, zero, -4
0x2bcc3a48	4904:	and	s6, s6, t7
0x2bcc3a4c	4908:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc3a50	4912:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc3a54	4916:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 4868 (0x2bcc3a24) >>>>>>>>
0x2bcc3a24	4868:	move	a0, v0
0x2bcc3a28	4872:	b	PC=0x2bcc3a58
0x2bcc3a2c	4876:	nop
<<<<<<<<<Pop Code Buffer to PC = 4920 (0x2bcc3a58) <<<<<<<<<
          		@ Invoke a method w/ a 32bit return type
0x2bcc3a58	4920:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3a5c	4924:	jalr	s7
0x2bcc3a60	4928:	nop
          		@ Captured a stackmap here.
0x2bcc3a64	4932:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3a68	4936:	lw	s7, 0(JSP)
          		@ Resolving a class:
0x2bcc3a6c	4940:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc3a70	4944:	lui	a2, hi16(0x2bcc)
0x2bcc3a74	4948:	lw	a2, 14960(a2)	@ load cachedConstant
0x2bcc3a78	4952:	addiu	a2, zero, 81	@ ARG3 = cpIndex
0x2bcc3a7c	4956:	jal	PC=(0x2bcb83d4)	@ call CVMCCMruntimeResolveClassBlock
0x2bcc3a80	4960:	nop
>>>>>>>>>Push Code Buffer to PC = 4944 (0x2bcc3a70) >>>>>>>>
0x2bcc3a70	4944:	lui	a2, hi16(0x2bcc)
0x2bcc3a74	4948:	lw	a2, 14980(a2)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 4964 (0x2bcc3a84) <<<<<<<<<
0x2bcc3a84	4964:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3a88	4968:	lui	a2, hi16(0x2bcc)
0x2bcc3a8c	4972:	lw	a2, 14980(a2)	@ load cachedConstant
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcc3a90	4976:	lw	s7, 36(JFP)	@ Java temp cell # 2
0x2bcc3a94	4980:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcc3a98	4984:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcc3a9c	4988:	nop
0x2bcc3aa0	4992:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
0x2bcc3aa4	4996:	lw	s6, -16(JFP)	@ Java local cell # 10
          		@ Resolving an instance field:
0x2bcc3aa8	5000:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc3aac	5004:	lui	s7, hi16(0x2bcc)
0x2bcc3ab0	5008:	lw	s7, 15020(s7)	@ load cachedConstant
0x2bcc3ab4	5012:	addiu	a2, zero, 82	@ ARG3 = cpIndex
0x2bcc3ab8	5016:	jal	PC=(0x2bcb83f8)	@ call CVMCCMruntimeResolvePutfieldFieldOffset
0x2bcc3abc	5020:	nop
>>>>>>>>>Push Code Buffer to PC = 5004 (0x2bcc3aac) >>>>>>>>
0x2bcc3aac	5004:	lui	s7, hi16(0x2bcc)
0x2bcc3ab0	5008:	lw	s7, 15040(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 5024 (0x2bcc3ac0) <<<<<<<<<
0x2bcc3ac0	5024:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3ac4	5028:	lui	s7, hi16(0x2bcc)
0x2bcc3ac8	5032:	lw	s7, 15040(s7)	@ load cachedConstant
          		@ Do putfield:
0x2bcc3acc	5036:	lw	s6, -16(JFP)	@ Java local cell # 10
0x2bcc3ad0	5040:	addu	s5, s6, s7	@ fieldAddr = obj + fieldOffset;
0x2bcc3ad4	5044:	lw	s7, 36(JFP)	@ Java temp cell # 2
0x2bcc3ad8	5048:	sw	s7, 0(s5)	@ putfield(fieldAddr, valueObj);
0x2bcc3adc	5052:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc3ae0	5056:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc3ae4	5060:	srl	t7, s5, 9	@ mark card table
0x2bcc3ae8	5064:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc3aec	5068:	sb	ra, 0(t7)
0x2bcc3af0	5072:	lw	t9, -56(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcc3af4	5076:	lw	s5, 108(t9)	@ valueObj = getfield(obj, fieldIdx);
          		@ Resolving an instance field:
0x2bcc3af8	5080:	sw	s5, 40(JFP)	@ REF spill Java temp cell # 3
0x2bcc3afc	5084:	lui	s7, hi16(0x2bcc)
0x2bcc3b00	5088:	lw	s7, 15100(s7)	@ load cachedConstant
0x2bcc3b04	5092:	addiu	a2, zero, 77	@ ARG3 = cpIndex
0x2bcc3b08	5096:	jal	PC=(0x2bcb83ec)	@ call CVMCCMruntimeResolveGetfieldFieldOffset
0x2bcc3b0c	5100:	nop
>>>>>>>>>Push Code Buffer to PC = 5084 (0x2bcc3afc) >>>>>>>>
0x2bcc3afc	5084:	lui	s7, hi16(0x2bcc)
0x2bcc3b00	5088:	lw	s7, 15120(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 5104 (0x2bcc3b10) <<<<<<<<<
0x2bcc3b10	5104:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3b14	5108:	lui	s7, hi16(0x2bcc)
0x2bcc3b18	5112:	lw	s7, 15120(s7)	@ load cachedConstant
          		@ Do getfield:
0x2bcc3b1c	5116:	lw	s5, 40(JFP)	@ Java temp cell # 3
0x2bcc3b20	5120:	addu	t7, s5, s7	@ valueObj = getfield(obj, fieldIdx); add indexReg and baseReg
0x2bcc3b24	5124:	lw	s6, 0(t7)
0x2bcc3b28	5128:	sw	s6, 0(JSP)
0x2bcc3b2c	5132:	lw	s7, -44(JFP)	@ Java local cell # 3
0x2bcc3b30	5136:	sw	s7, 4(JSP)
0x2bcc3b34	5140:	lw	s5, -16(JFP)	@ Java local cell # 10
0x2bcc3b38	5144:	sw	s5, 8(JSP)
0x2bcc3b3c	5148:	lw	ra, -36(JFP)	@ Java local cell # 5
0x2bcc3b40	5152:	sw	ra, 12(JSP)
0x2bcc3b44	5156:	addiu	JSP, JSP, 16	@ adjust JSP before method call
          		@ Resolving a method table index:
0x2bcc3b48	5160:	sw	s6, 40(JFP)	@ REF spill Java temp cell # 3
0x2bcc3b4c	5164:	lui	s7, hi16(0x2bcc)
0x2bcc3b50	5168:	lw	s7, 15180(s7)	@ load cachedConstant
0x2bcc3b54	5172:	addiu	a2, zero, 83	@ ARG3 = cpIndex
0x2bcc3b58	5176:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc3b5c	5180:	nop
0x2bcc3b60	5184:	move	v0, v0	@ return MB directly
0x2bcc3b64	5188:	b	PC=0x2bcc3b64
0x2bcc3b68	5192:	nop
>>>>>>>>>Push Code Buffer to PC = 5164 (0x2bcc3b4c) >>>>>>>>
0x2bcc3b4c	5164:	lui	s7, hi16(0x2bcc)
0x2bcc3b50	5168:	lw	s7, 15212(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 5196 (0x2bcc3b6c) <<<<<<<<<
0x2bcc3b6c	5196:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3b70	5200:	lui	s7, hi16(0x2bcc)
0x2bcc3b74	5204:	lw	s7, 15212(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc3b78	5208:	lw	s5, 40(JFP)	@ Java temp cell # 3
0x2bcc3b7c	5212:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc3b80	5216:	addiu	t7, zero, -4
0x2bcc3b84	5220:	and	s6, s6, t7
0x2bcc3b88	5224:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc3b8c	5228:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc3b90	5232:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 5184 (0x2bcc3b60) >>>>>>>>
0x2bcc3b60	5184:	move	a0, v0
0x2bcc3b64	5188:	b	PC=0x2bcc3b94
0x2bcc3b68	5192:	nop
<<<<<<<<<Pop Code Buffer to PC = 5236 (0x2bcc3b94) <<<<<<<<<
          		@ Invoke a method w/ a 32bit return type
0x2bcc3b94	5236:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3b98	5240:	jalr	s7
0x2bcc3b9c	5244:	nop
          		@ Captured a stackmap here.
0x2bcc3ba0	5248:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3ba4	5252:	lw	s7, 0(JSP)
0x2bcc3ba8	5256:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Check4Mate
          		@ Do new:
0x2bcc3bac	5260:	sw	s7, 40(JFP)	@ REF spill Java temp cell # 3
          		@ cb: com.sun.mep.bench.Chess.Check4Mate
0x2bcc3bb0	5264:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc3bb4	5268:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcc3bb8	5272:	lw	s6, -56(JFP)	@ Java local cell # 0
0x2bcc3bbc	5276:	lw	s7, 108(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc3bc0	5280:	sw	v0, 0(JSP)
0x2bcc3bc4	5284:	lw	s5, 40(JFP)	@ Java temp cell # 3
0x2bcc3bc8	5288:	sw	s5, 4(JSP)
0x2bcc3bcc	5292:	sw	s7, 8(JSP)
0x2bcc3bd0	5296:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Check4Mate.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V
          		@ Invoke a method w/ a void return type
0x2bcc3bd4	5300:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcc3bd8	5304:	sw	v0, 44(JFP)	@ REF spill Java temp cell # 4
0x2bcc3bdc	5308:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3be0	5312:	jalr	s7
0x2bcc3be4	5316:	nop
          		@ Captured a stackmap here.
0x2bcc3be8	5320:	lw	s7, 44(JFP)	@ Java temp cell # 4
0x2bcc3bec	5324:	sw	s7, 0(JSP)
0x2bcc3bf0	5328:	lw	s6, -36(JFP)	@ Java local cell # 5
0x2bcc3bf4	5332:	sw	s6, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc3bf8	5336:	lw	s5, 0(s7)	@ Get object.cb
0x2bcc3bfc	5340:	addiu	t7, zero, -4
0x2bcc3c00	5344:	and	s5, s5, t7
0x2bcc3c04	5348:	lw	s5, 76(s5)	@ Get cb.vtbl
0x2bcc3c08	5352:	lw	a0, 44(s5)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc3c0c	5356:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc3c10	5360:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3c14	5364:	jalr	s7
0x2bcc3c18	5368:	nop
          		@ Captured a stackmap here.
0x2bcc3c1c	5372:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3c20	5376:	lw	s5, 0(JSP)
0x2bcc3c24	5380:	lw	s7, 40(JFP)	@ Java temp cell # 3
0x2bcc3c28	5384:	sw	s7, -40(JFP)	@ Java local cell # 4
0x2bcc3c2c	5388:	sw	s5, -28(JFP)	@ Java local cell # 7
0x2bcc3c30	5392:	lw	s6, 36(JFP)	@ Java temp cell # 2
0x2bcc3c34	5396:	sw	s6, -20(JFP)	@ Java local cell # 9
0x2bcc3c38	5400:	lw	s4, 44(JFP)	@ Java temp cell # 4
0x2bcc3c3c	5404:	sw	s4, -4(JFP)	@ Java local cell # 13
			@ Outgoing local(0) reg(20): not in register
0x2bcc3c40	5408:	lw	s4, -56(JFP)	@ Java local cell # 0
			@ Outgoing local(3) reg(22): not in register
0x2bcc3c44	5412:	lw	s6, -44(JFP)	@ Java local cell # 3
			@ Outgoing local(12) reg(23): not in register
0x2bcc3c48	5416:	lw	s7, -8(JFP)	@ Java local cell # 12
          		@ deferred comparison: 
0x2bcc3c4c	5420:	bne	s5, zero, PC=0x2bcc3c4c	@ branch to block L16
0x2bcc3c50	5424:	nop
          		@ Do getfield:
0x2bcc3c54	5428:	lw	ra, 108(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Resolving an instance field:
0x2bcc3c58	5432:	sw	ra, 48(JFP)	@ REF spill Java temp cell # 5
0x2bcc3c5c	5436:	lui	s7, hi16(0x2bcc)
0x2bcc3c60	5440:	lw	s7, 15452(s7)	@ load cachedConstant
0x2bcc3c64	5444:	addiu	a2, zero, 95	@ ARG3 = cpIndex
0x2bcc3c68	5448:	jal	PC=(0x2bcb83ec)	@ call CVMCCMruntimeResolveGetfieldFieldOffset
0x2bcc3c6c	5452:	nop
>>>>>>>>>Push Code Buffer to PC = 5436 (0x2bcc3c5c) >>>>>>>>
0x2bcc3c5c	5436:	lui	s7, hi16(0x2bcc)
0x2bcc3c60	5440:	lw	s7, 15472(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 5456 (0x2bcc3c70) <<<<<<<<<
0x2bcc3c70	5456:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3c74	5460:	lui	s7, hi16(0x2bcc)
0x2bcc3c78	5464:	lw	s7, 15472(s7)	@ load cachedConstant
          		@ Do getfield:
0x2bcc3c7c	5468:	lw	s5, 48(JFP)	@ Java temp cell # 5
0x2bcc3c80	5472:	addu	t7, s5, s7	@ valueObj = getfield(obj, fieldIdx); add indexReg and baseReg
0x2bcc3c84	5476:	lw	s6, 0(t7)
0x2bcc3c88	5480:	lw	a1, 0(CP)	@ cb java.lang.StringBuffer
          		@ Do new:
0x2bcc3c8c	5484:	sw	s6, 48(JFP)	@ REF spill Java temp cell # 5
          		@ cb: java.lang.StringBuffer
0x2bcc3c90	5488:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc3c94	5492:	nop
          		@ Captured a stackmap here.
0x2bcc3c98	5496:	sw	v0, 0(JSP)
0x2bcc3c9c	5500:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc3ca0	5504:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc3ca4	5508:	sw	v0, 52(JFP)	@ REF spill Java temp cell # 6
0x2bcc3ca8	5512:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3cac	5516:	jalr	s7
0x2bcc3cb0	5520:	nop
          		@ Captured a stackmap here.
0x2bcc3cb4	5524:	lw	s7, 48(JFP)	@ Java temp cell # 5
0x2bcc3cb8	5528:	sw	s7, 0(JSP)
0x2bcc3cbc	5532:	lw	s6, 52(JFP)	@ Java temp cell # 6
0x2bcc3cc0	5536:	sw	s6, 4(JSP)
0x2bcc3cc4	5540:	lw	s5, 0(CP)	@ StringICell
0x2bcc3cc8	5544:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcc3ccc	5548:	sw	s6, 8(JSP)
0x2bcc3cd0	5552:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc3cd4	5556:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcc3cd8	5560:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3cdc	5564:	jalr	s7
0x2bcc3ce0	5568:	nop
          		@ Captured a stackmap here.
0x2bcc3ce4	5572:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3ce8	5576:	lw	s7, 0(JSP)
0x2bcc3cec	5580:	sw	s7, 0(JSP)
0x2bcc3cf0	5584:	lw	s6, -20(JFP)	@ Java local cell # 9
0x2bcc3cf4	5588:	sw	s6, 4(JSP)
0x2bcc3cf8	5592:	addiu	JSP, JSP, 8	@ adjust JSP before method call
          		@ Resolving a method table index:
0x2bcc3cfc	5596:	sw	s7, 52(JFP)	@ REF spill Java temp cell # 6
0x2bcc3d00	5600:	lui	s7, hi16(0x2bcc)
0x2bcc3d04	5604:	lw	s7, 15616(s7)	@ load cachedConstant
0x2bcc3d08	5608:	addiu	a2, zero, 86	@ ARG3 = cpIndex
0x2bcc3d0c	5612:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc3d10	5616:	nop
0x2bcc3d14	5620:	move	v0, v0	@ return MB directly
0x2bcc3d18	5624:	b	PC=0x2bcc3d18
0x2bcc3d1c	5628:	nop
>>>>>>>>>Push Code Buffer to PC = 5600 (0x2bcc3d00) >>>>>>>>
0x2bcc3d00	5600:	lui	s7, hi16(0x2bcc)
0x2bcc3d04	5604:	lw	s7, 15648(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 5632 (0x2bcc3d20) <<<<<<<<<
0x2bcc3d20	5632:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3d24	5636:	lui	s7, hi16(0x2bcc)
0x2bcc3d28	5640:	lw	s7, 15648(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc3d2c	5644:	lw	s5, 52(JFP)	@ Java temp cell # 6
0x2bcc3d30	5648:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc3d34	5652:	addiu	t7, zero, -4
0x2bcc3d38	5656:	and	s6, s6, t7
0x2bcc3d3c	5660:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc3d40	5664:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc3d44	5668:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 5620 (0x2bcc3d14) >>>>>>>>
0x2bcc3d14	5620:	move	a0, v0
0x2bcc3d18	5624:	b	PC=0x2bcc3d48
0x2bcc3d1c	5628:	nop
<<<<<<<<<Pop Code Buffer to PC = 5672 (0x2bcc3d48) <<<<<<<<<
          		@ Invoke a method w/ a 32bit return type
0x2bcc3d48	5672:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3d4c	5676:	jalr	s7
0x2bcc3d50	5680:	nop
          		@ Captured a stackmap here.
0x2bcc3d54	5684:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3d58	5688:	lw	s7, 0(JSP)
0x2bcc3d5c	5692:	sw	s7, 0(JSP)
0x2bcc3d60	5696:	lw	s5, 0(CP)	@ StringICell
0x2bcc3d64	5700:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcc3d68	5704:	sw	s6, 4(JSP)
0x2bcc3d6c	5708:	lw	s6, 0(s7)	@ NULL check
0x2bcc3d70	5712:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc3d74	5716:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc3d78	5720:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3d7c	5724:	jalr	s7
0x2bcc3d80	5728:	nop
          		@ Captured a stackmap here.
0x2bcc3d84	5732:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3d88	5736:	lw	s7, 0(JSP)
0x2bcc3d8c	5740:	sw	s7, 0(JSP)
0x2bcc3d90	5744:	lw	s6, -8(JFP)	@ Java local cell # 12
0x2bcc3d94	5748:	sw	s6, 4(JSP)
0x2bcc3d98	5752:	lw	s5, 0(s7)	@ NULL check
0x2bcc3d9c	5756:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc3da0	5760:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc3da4	5764:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3da8	5768:	jalr	s7
0x2bcc3dac	5772:	nop
          		@ Captured a stackmap here.
0x2bcc3db0	5776:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3db4	5780:	lw	s7, 0(JSP)
0x2bcc3db8	5784:	sw	s7, 0(JSP)
0x2bcc3dbc	5788:	lw	s5, 0(CP)	@ StringICell
0x2bcc3dc0	5792:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcc3dc4	5796:	sw	s6, 4(JSP)
0x2bcc3dc8	5800:	lw	s6, 0(s7)	@ NULL check
0x2bcc3dcc	5804:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc3dd0	5808:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc3dd4	5812:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3dd8	5816:	jalr	s7
0x2bcc3ddc	5820:	nop
          		@ Captured a stackmap here.
0x2bcc3de0	5824:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc3de4	5828:	lw	s7, 0(JSP)
0x2bcc3de8	5832:	sw	s7, 0(JSP)
0x2bcc3dec	5836:	lw	s6, 0(s7)	@ NULL check
0x2bcc3df0	5840:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcc3df4	5844:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc3df8	5848:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3dfc	5852:	jalr	s7
0x2bcc3e00	5856:	nop
          		@ Captured a stackmap here.
          		@ Fetch mb from vtable:
0x2bcc3e04	5860:	lw	s6, 48(JFP)	@ Java temp cell # 5
0x2bcc3e08	5864:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc3e0c	5868:	addiu	t7, zero, -4
0x2bcc3e10	5872:	and	s7, s7, t7
0x2bcc3e14	5876:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc3e18	5880:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc3e1c	5884:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3e20	5888:	jalr	s7
0x2bcc3e24	5892:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(0) reg(20): not in register
0x2bcc3e28	5896:	lw	s4, -56(JFP)	@ Java local cell # 0
			@ Outgoing local(3) reg(22): not in register
0x2bcc3e2c	5900:	lw	s6, -44(JFP)	@ Java local cell # 3
			@ Outgoing local(12) reg(23): not in register
0x2bcc3e30	5904:	lw	s7, -8(JFP)	@ Java local cell # 12
			@ Initial Temp REF set is 
	L16:	5908:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(3) to reg(22)
			@ Binding Incoming Local(12) to reg(23)
--->Fixed instruction at 5420(0x2bcc3c4c) to reference 5908
          		@ MAP_PC idepth=0 javaPc=691 compiledPc=5908
0x2bcc3e34	5908:	addiu	s7, s7, 1
0x2bcc3e38	5912:	sw	s7, -8(JFP)	@ Java local cell # 12
			@ Outgoing local(7) reg(21): not in register
0x2bcc3e3c	5916:	lw	s5, -28(JFP)	@ Java local cell # 7
			@ Outgoing local(3) reg(22): in correct register
			@ Outgoing local(12) reg(23): in correct register
			@ Initial Temp REF set is 
	L14:	5920:	@ entry point for branches
			@ Binding Incoming Local(7) to reg(21)
			@ Binding Incoming Local(3) to reg(22)
			@ Binding Incoming Local(12) to reg(23)
--->Fixed instruction at 4768(0x2bcc39c0) to reference 5920
          		@ MAP_PC idepth=0 javaPc=694 compiledPc=5920
0x2bcc3e40	5920:	lw	ra, -32(JFP)	@ Java local cell # 6
			@ Outgoing local(0) reg(20): not in register
0x2bcc3e44	5924:	lw	s4, -56(JFP)	@ Java local cell # 0
			@ Outgoing local(7) reg(21): in correct register
          		@ deferred comparison: 
0x2bcc3e48	5928:	slt	t7, s7, ra
0x2bcc3e4c	5932:	beq	t7, zero, PC=0x2bcc3e48	@ branch to block L17
0x2bcc3e50	5936:	nop
			@ Outgoing local(3) reg(22): in correct register
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcc3e54	5940:	bne	s5, zero, PC=0x2bcc39c8	@ branch to block L15
0x2bcc3e58	5944:	nop
0x2bcc3e54	5940:	bne	s5, zero, PC=0x2bcc39d4	@ branch to block L15, skip GC
0x2bcc3e58	5944:	nop
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(7) reg(21): in correct register
			@ Initial Temp REF set is 
	L17:	5948:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(7) to reg(21)
--->Fixed instruction at 5932(0x2bcc3e4c) to reference 5948
          		@ MAP_PC idepth=0 javaPc=706 compiledPc=5948
			@ Outgoing local(0) reg(20): in correct register
          		@ deferred comparison: 
0x2bcc3e5c	5948:	beq	s5, zero, PC=0x2bcc3e5c	@ branch to block L18
0x2bcc3e60	5952:	nop
          		@ Do getfield:
0x2bcc3e64	5956:	lw	s7, 108(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Resolving an instance field:
0x2bcc3e68	5960:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc3e6c	5964:	lui	s7, hi16(0x2bcc)
0x2bcc3e70	5968:	lw	s7, 15980(s7)	@ load cachedConstant
0x2bcc3e74	5972:	addiu	a2, zero, 96	@ ARG3 = cpIndex
0x2bcc3e78	5976:	jal	PC=(0x2bcb83ec)	@ call CVMCCMruntimeResolveGetfieldFieldOffset
0x2bcc3e7c	5980:	nop
>>>>>>>>>Push Code Buffer to PC = 5964 (0x2bcc3e6c) >>>>>>>>
0x2bcc3e6c	5964:	lui	s7, hi16(0x2bcc)
0x2bcc3e70	5968:	lw	s7, 16000(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 5984 (0x2bcc3e80) <<<<<<<<<
0x2bcc3e80	5984:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3e84	5988:	lui	s7, hi16(0x2bcc)
0x2bcc3e88	5992:	lw	s7, 16000(s7)	@ load cachedConstant
          		@ Do getfield:
0x2bcc3e8c	5996:	lw	s5, 36(JFP)	@ Java temp cell # 2
0x2bcc3e90	6000:	addu	t7, s5, s7	@ valueObj = getfield(obj, fieldIdx); add indexReg and baseReg
0x2bcc3e94	6004:	lw	s6, 0(t7)
0x2bcc3e98	6008:	sw	s6, 0(JSP)
0x2bcc3e9c	6012:	lw	s5, 0(CP)	@ StringICell
0x2bcc3ea0	6016:	lw	s7, 0(s5)	@ StringObject from StringICell
0x2bcc3ea4	6020:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc3ea8	6024:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc3eac	6028:	addiu	t7, zero, -4
0x2bcc3eb0	6032:	and	s7, s7, t7
0x2bcc3eb4	6036:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc3eb8	6040:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc3ebc	6044:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc3ec0	6048:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3ec4	6052:	jalr	s7
0x2bcc3ec8	6056:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcc3ecc	6060:	lw	s6, -56(JFP)	@ Java local cell # 0
0x2bcc3ed0	6064:	lw	s7, 108(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc3ed4	6068:	sw	s7, 0(JSP)
0x2bcc3ed8	6072:	lw	ra, -52(JFP)	@ Java local cell # 1
0x2bcc3edc	6076:	sw	ra, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc3ee0	6080:	lw	s5, 0(ra)	@ Get object.cb
0x2bcc3ee4	6084:	addiu	t7, zero, -4
0x2bcc3ee8	6088:	and	s5, s5, t7
0x2bcc3eec	6092:	lw	s5, 76(s5)	@ Get cb.vtbl
0x2bcc3ef0	6096:	lw	a0, 164(s5)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc3ef4	6100:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc3ef8	6104:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc3efc	6108:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3f00	6112:	jalr	s7
0x2bcc3f04	6116:	nop
          		@ Captured a stackmap here.
          		@ Resolving a method table index:
0x2bcc3f08	6120:	lui	s7, hi16(0x2bcc)
0x2bcc3f0c	6124:	lw	s7, 16136(s7)	@ load cachedConstant
0x2bcc3f10	6128:	addiu	a2, zero, 91	@ ARG3 = cpIndex
0x2bcc3f14	6132:	jal	PC=(0x2bcb841c)	@ call CVMCCMruntimeResolveMethodTableOffset
0x2bcc3f18	6136:	nop
0x2bcc3f1c	6140:	move	v0, v0	@ return MB directly
0x2bcc3f20	6144:	b	PC=0x2bcc3f20
0x2bcc3f24	6148:	nop
>>>>>>>>>Push Code Buffer to PC = 6120 (0x2bcc3f08) >>>>>>>>
0x2bcc3f08	6120:	lui	s7, hi16(0x2bcc)
0x2bcc3f0c	6124:	lw	s7, 16168(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 6152 (0x2bcc3f28) <<<<<<<<<
0x2bcc3f28	6152:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3f2c	6156:	lui	s7, hi16(0x2bcc)
0x2bcc3f30	6160:	lw	s7, 16168(s7)	@ load cachedConstant
          		@ Fetch mb from vtable:
0x2bcc3f34	6164:	lw	s5, 36(JFP)	@ Java temp cell # 2
0x2bcc3f38	6168:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc3f3c	6172:	addiu	t7, zero, -4
0x2bcc3f40	6176:	and	s6, s6, t7
0x2bcc3f44	6180:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc3f48	6184:	addu	t7, s6, s7	@ method = cb.vtbl[methodIdx] add indexReg and baseReg
0x2bcc3f4c	6188:	lw	a0, 0(t7)
>>>>>>>>>Push Code Buffer to PC = 6140 (0x2bcc3f1c) >>>>>>>>
0x2bcc3f1c	6140:	move	a0, v0
0x2bcc3f20	6144:	b	PC=0x2bcc3f50
0x2bcc3f24	6148:	nop
<<<<<<<<<Pop Code Buffer to PC = 6192 (0x2bcc3f50) <<<<<<<<<
          		@ Invoke a method w/ a void return type
0x2bcc3f50	6192:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3f54	6196:	jalr	s7
0x2bcc3f58	6200:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(0) reg(22): not in register
0x2bcc3f5c	6204:	lw	s6, -56(JFP)	@ Java local cell # 0
0x2bcc3f60	6208:	b	PC=0x2bcc3f60	@ branch to block L7
0x2bcc3f64	6212:	nop
			@ Initial Temp REF set is 
	L18:	6216:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
--->Fixed instruction at 5948(0x2bcc3e5c) to reference 6216
          		@ MAP_PC idepth=0 javaPc=737 compiledPc=6216
          		@ Do getfield:
0x2bcc3f68	6216:	lw	s7, 108(s4)	@ valueObj = getfield(obj, fieldIdx);
          		@ Resolving an instance field:
0x2bcc3f6c	6220:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc3f70	6224:	lui	s7, hi16(0x2bcc)
0x2bcc3f74	6228:	lw	s7, 16240(s7)	@ load cachedConstant
0x2bcc3f78	6232:	addiu	a2, zero, 97	@ ARG3 = cpIndex
0x2bcc3f7c	6236:	jal	PC=(0x2bcb83ec)	@ call CVMCCMruntimeResolveGetfieldFieldOffset
0x2bcc3f80	6240:	nop
>>>>>>>>>Push Code Buffer to PC = 6224 (0x2bcc3f70) >>>>>>>>
0x2bcc3f70	6224:	lui	s7, hi16(0x2bcc)
0x2bcc3f74	6228:	lw	s7, 16260(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 6244 (0x2bcc3f84) <<<<<<<<<
0x2bcc3f84	6244:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3f88	6248:	lui	s7, hi16(0x2bcc)
0x2bcc3f8c	6252:	lw	s7, 16260(s7)	@ load cachedConstant
          		@ Do getfield:
0x2bcc3f90	6256:	lw	s5, 36(JFP)	@ Java temp cell # 2
0x2bcc3f94	6260:	addu	t7, s5, s7	@ valueObj = getfield(obj, fieldIdx); add indexReg and baseReg
0x2bcc3f98	6264:	lw	s6, 0(t7)
0x2bcc3f9c	6268:	sw	s6, 0(JSP)
0x2bcc3fa0	6272:	lw	s5, 0(CP)	@ StringICell
0x2bcc3fa4	6276:	lw	s7, 0(s5)	@ StringObject from StringICell
0x2bcc3fa8	6280:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc3fac	6284:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc3fb0	6288:	addiu	t7, zero, -4
0x2bcc3fb4	6292:	and	s7, s7, t7
0x2bcc3fb8	6296:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc3fbc	6300:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc3fc0	6304:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc3fc4	6308:	lw	s7, 0(a0)	@ call method through mb
0x2bcc3fc8	6312:	jalr	s7
0x2bcc3fcc	6316:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(0) reg(22): not in register
0x2bcc3fd0	6320:	lw	s6, -56(JFP)	@ Java local cell # 0
0x2bcc3fd4	6324:	b	PC=0x2bcc3fd4	@ branch to block L7
0x2bcc3fd8	6328:	nop
			@ Initial Temp REF set is 
	L13:	6332:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 4384(0x2bcc3840) to reference 6332
          		@ MAP_PC idepth=0 javaPc=752 compiledPc=6332
          		@ Do getfield:
0x2bcc3fdc	6332:	lw	s7, 108(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Resolving an instance field:
0x2bcc3fe0	6336:	sw	s7, 36(JFP)	@ REF spill Java temp cell # 2
0x2bcc3fe4	6340:	lui	s7, hi16(0x2bcc)
0x2bcc3fe8	6344:	lw	s7, 16356(s7)	@ load cachedConstant
0x2bcc3fec	6348:	addiu	a2, zero, 98	@ ARG3 = cpIndex
0x2bcc3ff0	6352:	jal	PC=(0x2bcb83ec)	@ call CVMCCMruntimeResolveGetfieldFieldOffset
0x2bcc3ff4	6356:	nop
>>>>>>>>>Push Code Buffer to PC = 6340 (0x2bcc3fe4) >>>>>>>>
0x2bcc3fe4	6340:	lui	s7, hi16(0x2bcc)
0x2bcc3fe8	6344:	lw	s7, 16376(s7)	@ load cachedConstant
<<<<<<<<<Pop Code Buffer to PC = 6360 (0x2bcc3ff8) <<<<<<<<<
0x2bcc3ff8	6360:	.word	-1	@ cachedConstant
          		@ Captured a stackmap here.
0x2bcc3ffc	6364:	lui	s7, hi16(0x2bcc)
0x2bcc4000	6368:	lw	s7, 16376(s7)	@ load cachedConstant
          		@ Do getfield:
0x2bcc4004	6372:	lw	s5, 36(JFP)	@ Java temp cell # 2
0x2bcc4008	6376:	addu	t7, s5, s7	@ valueObj = getfield(obj, fieldIdx); add indexReg and baseReg
0x2bcc400c	6380:	lw	s6, 0(t7)
0x2bcc4010	6384:	sw	s6, 0(JSP)
0x2bcc4014	6388:	lw	s5, 0(CP)	@ StringICell
0x2bcc4018	6392:	lw	s7, 0(s5)	@ StringObject from StringICell
0x2bcc401c	6396:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc4020	6400:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc4024	6404:	addiu	t7, zero, -4
0x2bcc4028	6408:	and	s7, s7, t7
0x2bcc402c	6412:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc4030	6416:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc4034	6420:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc4038	6424:	lw	s7, 0(a0)	@ call method through mb
0x2bcc403c	6428:	jalr	s7
0x2bcc4040	6432:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(0) reg(22): not in register
0x2bcc4044	6436:	lw	s6, -56(JFP)	@ Java local cell # 0
			@ Initial Temp REF set is 
	L7:	6440:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(22)
--->Fixed instruction at 6324(0x2bcc3fd4) to reference 6440
--->Fixed instruction at 6208(0x2bcc3f60) to reference 6440
--->Fixed instruction at 4320(0x2bcc3800) to reference 6440
--->Fixed instruction at 4204(0x2bcc378c) to reference 6440
--->Fixed instruction at 4464(0x2bcc3890) to reference 6440
--->Fixed instruction at 2460(0x2bcc30bc) to reference 6440
          		@ MAP_PC idepth=0 javaPc=764 compiledPc=6440
          		@ Do getfield:
0x2bcc4048	6440:	lw	s4, 108(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc404c	6444:	lw	s7, 8(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc4050	6448:	lw	s5, 44(s7)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Processing DEFINE(0) reg(20): in correct register
			@ Loading DEFINE(0) register(20): in correct register
          		@ deferred comparison: 
0x2bcc4054	6452:	bne	s5, zero, PC=0x2bcc4054	@ branch to block L19
0x2bcc4058	6456:	nop
			@ Processing DEFINE(0) reg(20): in correct register
			@ Processing DEFINE(1) reg(21): not in register
			@ Loading DEFINE(0) register(20): in correct register
			@ Loading DEFINE(1) register(21): not in register
0x2bcc405c	6460:	addiu	s5, zero, 1	@ const 1
0x2bcc4060	6464:	b	PC=0x2bcc4060	@ branch to block L20
0x2bcc4064	6468:	nop
			@ Initial Temp REF set is 
	L19:	6472:	@ entry point for branches
--->Fixed instruction at 6452(0x2bcc4054) to reference 6472
          		@ MAP_PC idepth=0 javaPc=782 compiledPc=6472
			@ Processing DEFINE(0) reg(20): in correct register
			@ Processing DEFINE(1) reg(21): in wrong register
			@ Loading DEFINE(0) register(20): in correct register
			@ Loading DEFINE(1) register(21): in wrong register
0x2bcc4068	6472:	move	s5, zero
			@ Initial Temp REF set is 
	L20:	6476:	@ entry point for branches
--->Fixed instruction at 6464(0x2bcc4060) to reference 6476
          		@ MAP_PC idepth=0 javaPc=783 compiledPc=6476
          		@ Do putfield:
0x2bcc406c	6476:	sw	s5, 44(s4)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcc4070	6480:	lw	ra, -56(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcc4074	6484:	lw	s7, 108(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc4078	6488:	lw	s6, 72(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc407c	6492:	lw	a1, 0(CP)	@ cb java.lang.StringBuffer
          		@ Do new:
0x2bcc4080	6496:	sw	s6, 36(JFP)	@ REF spill Java temp cell # 2
          		@ cb: java.lang.StringBuffer
0x2bcc4084	6500:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4088	6504:	nop
          		@ Captured a stackmap here.
0x2bcc408c	6508:	sw	v0, 0(JSP)
0x2bcc4090	6512:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc4094	6516:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc4098	6520:	sw	v0, 40(JFP)	@ REF spill Java temp cell # 3
0x2bcc409c	6524:	lw	s7, 0(a0)	@ call method through mb
0x2bcc40a0	6528:	jalr	s7
0x2bcc40a4	6532:	nop
          		@ Captured a stackmap here.
0x2bcc40a8	6536:	lw	s7, 40(JFP)	@ Java temp cell # 3
0x2bcc40ac	6540:	sw	s7, 0(JSP)
0x2bcc40b0	6544:	lw	s6, 0(CP)	@ StringICell
0x2bcc40b4	6548:	lw	s7, 0(s6)	@ StringObject from StringICell
0x2bcc40b8	6552:	sw	s7, 4(JSP)
0x2bcc40bc	6556:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc40c0	6560:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc40c4	6564:	lw	s7, 0(a0)	@ call method through mb
0x2bcc40c8	6568:	jalr	s7
0x2bcc40cc	6572:	nop
          		@ Captured a stackmap here.
0x2bcc40d0	6576:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc40d4	6580:	lw	s7, 0(JSP)
          		@ Do getfield:
0x2bcc40d8	6584:	lw	s5, -56(JFP)	@ Java local cell # 0
0x2bcc40dc	6588:	lw	s6, 8(s5)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc40e0	6592:	lw	s4, 60(s6)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc40e4	6596:	lw	s6, 36(JFP)	@ Java temp cell # 2
0x2bcc40e8	6600:	sw	s6, 0(JSP)
0x2bcc40ec	6604:	sw	s7, 4(JSP)
0x2bcc40f0	6608:	sw	s4, 8(JSP)
0x2bcc40f4	6612:	lw	s4, 0(s7)	@ NULL check
0x2bcc40f8	6616:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc40fc	6620:	addiu	JSP, JSP, 12	@ adjust JSP before method call
0x2bcc4100	6624:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4104	6628:	jalr	s7
0x2bcc4108	6632:	nop
          		@ Captured a stackmap here.
0x2bcc410c	6636:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc4110	6640:	lw	s7, 0(JSP)
0x2bcc4114	6644:	sw	s7, 0(JSP)
0x2bcc4118	6648:	lw	s5, 0(CP)	@ StringICell
0x2bcc411c	6652:	lw	s6, 0(s5)	@ StringObject from StringICell
0x2bcc4120	6656:	sw	s6, 4(JSP)
0x2bcc4124	6660:	lw	s6, 0(s7)	@ NULL check
0x2bcc4128	6664:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
          		@ Invoke a method w/ a 32bit return type
0x2bcc412c	6668:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc4130	6672:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4134	6676:	jalr	s7
0x2bcc4138	6680:	nop
          		@ Captured a stackmap here.
0x2bcc413c	6684:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc4140	6688:	lw	s7, 0(JSP)
0x2bcc4144	6692:	sw	s7, 0(JSP)
0x2bcc4148	6696:	lw	s6, 0(s7)	@ NULL check
0x2bcc414c	6700:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
          		@ Invoke a method w/ a 32bit return type
0x2bcc4150	6704:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc4154	6708:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4158	6712:	jalr	s7
0x2bcc415c	6716:	nop
          		@ Captured a stackmap here.
          		@ Fetch mb from vtable:
0x2bcc4160	6720:	lw	s6, 36(JFP)	@ Java temp cell # 2
0x2bcc4164	6724:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc4168	6728:	addiu	t7, zero, -4
0x2bcc416c	6732:	and	s7, s7, t7
0x2bcc4170	6736:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc4174	6740:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc4178	6744:	lw	s7, 0(a0)	@ call method through mb
0x2bcc417c	6748:	jalr	s7
0x2bcc4180	6752:	nop
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcc4184	6756:	lw	s7, -56(JFP)	@ Java local cell # 0
0x2bcc4188	6760:	sw	zero, 72(s7)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do getfield:
0x2bcc418c	6764:	lw	s6, 8(s7)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do putfield:
0x2bcc4190	6768:	addiu	s5, zero, 1	@ const 1
0x2bcc4194	6772:	sw	s5, 52(s6)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcc4198	6776:	addiu	JSP, JFP, -56
0x2bcc419c	6780:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc41a0	6784:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc41a4	6788:	nop
0x2bcc41a8	6792:	.word	9495092	@ StringICell
--->Fixed instruction at 6648(0x2bcc4118) to reference 6792
0x2bcc41ac	6796:	.word	9495516	@ StringICell
--->Fixed instruction at 6544(0x2bcc40b0) to reference 6796
0x2bcc41b0	6800:	.word	9493740	@ StringICell
--->Fixed instruction at 6388(0x2bcc4014) to reference 6800
0x2bcc41b4	6804:	.word	9495268	@ StringICell
--->Fixed instruction at 6272(0x2bcc3fa0) to reference 6804
--->Fixed instruction at 4268(0x2bcc37cc) to reference 6804
0x2bcc41b8	6808:	.word	9496260	@ StringICell
--->Fixed instruction at 6012(0x2bcc3e9c) to reference 6808
--->Fixed instruction at 4008(0x2bcc36c8) to reference 6808
0x2bcc41bc	6812:	.word	9493668	@ StringICell
--->Fixed instruction at 5788(0x2bcc3dbc) to reference 6812
--->Fixed instruction at 3788(0x2bcc35ec) to reference 6812
0x2bcc41c0	6816:	.word	8436288	@ StringICell
--->Fixed instruction at 5696(0x2bcc3d60) to reference 6816
--->Fixed instruction at 3696(0x2bcc3590) to reference 6816
0x2bcc41c4	6820:	.word	9494048	@ StringICell
--->Fixed instruction at 5540(0x2bcc3cc4) to reference 6820
--->Fixed instruction at 3540(0x2bcc34f4) to reference 6820
0x2bcc41c8	6824:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 5052(0x2bcc3adc) to reference 6824
--->Fixed instruction at 3052(0x2bcc330c) to reference 6824
0x2bcc41cc	6828:	.word	9792944	@ mb com.sun.mep.bench.Chess.Move.<init>()V
--->Fixed instruction at 2276(0x2bcc3004) to reference 6828
0x2bcc41d0	6832:	.word	9792720	@ cb com.sun.mep.bench.Chess.Move
--->Fixed instruction at 2260(0x2bcc2ff4) to reference 6832
0x2bcc41d4	6836:	.word	9760804	@ mb com.sun.mep.bench.Chess.Check4Mate.<init>(Lcom/sun/mep/bench/Chess/GameState;Lcom/sun/mep/bench/Chess/ChessGame;)V
--->Fixed instruction at 5296(0x2bcc3bd0) to reference 6836
--->Fixed instruction at 3296(0x2bcc3400) to reference 6836
--->Fixed instruction at 2236(0x2bcc2fdc) to reference 6836
0x2bcc41d8	6840:	.word	9760504	@ cb com.sun.mep.bench.Chess.Check4Mate
--->Fixed instruction at 5256(0x2bcc3ba8) to reference 6840
--->Fixed instruction at 3256(0x2bcc33d8) to reference 6840
--->Fixed instruction at 2200(0x2bcc2fb8) to reference 6840
0x2bcc41dc	6844:	.word	8441112	@ StringICell
--->Fixed instruction at 1800(0x2bcc2e28) to reference 6844
0x2bcc41e0	6848:	.word	9494304	@ StringICell
--->Fixed instruction at 1312(0x2bcc2c40) to reference 6848
0x2bcc41e4	6852:	.word	9109640	@ mb java.lang.StringBuffer.append(I)Ljava/lang/StringBuffer;
--->Fixed instruction at 6616(0x2bcc40f8) to reference 6852
--->Fixed instruction at 5756(0x2bcc3d9c) to reference 6852
--->Fixed instruction at 3756(0x2bcc35cc) to reference 6852
--->Fixed instruction at 1968(0x2bcc2ed0) to reference 6852
--->Fixed instruction at 1768(0x2bcc2e08) to reference 6852
--->Fixed instruction at 1480(0x2bcc2ce8) to reference 6852
--->Fixed instruction at 1280(0x2bcc2c20) to reference 6852
0x2bcc41e8	6856:	.word	9109584	@ mb java.lang.StringBuffer.append(C)Ljava/lang/StringBuffer;
--->Fixed instruction at 1916(0x2bcc2e9c) to reference 6856
--->Fixed instruction at 1716(0x2bcc2dd4) to reference 6856
--->Fixed instruction at 1428(0x2bcc2cb4) to reference 6856
--->Fixed instruction at 1228(0x2bcc2bec) to reference 6856
0x2bcc41ec	6860:	.word	9493692	@ StringICell
--->Fixed instruction at 908(0x2bcc2aac) to reference 6860
0x2bcc41f0	6864:	.word	9496888	@ StringICell
--->Fixed instruction at 724(0x2bcc29f4) to reference 6864
0x2bcc41f4	6868:	.word	9493972	@ StringICell
--->Fixed instruction at 516(0x2bcc2924) to reference 6868
0x2bcc41f8	6872:	.word	9751180	@ mb com.sun.mep.bench.Chess.GameState.<init>(Lcom/sun/mep/bench/Chess/ChessGame;)V
--->Fixed instruction at 344(0x2bcc2878) to reference 6872
0x2bcc41fc	6876:	.word	9750888	@ cb com.sun.mep.bench.Chess.GameState
--->Fixed instruction at 312(0x2bcc2858) to reference 6876
0x2bcc4200	6880:	.word	9110340	@ mb java.lang.StringBuffer.toString()Ljava/lang/String;
--->Fixed instruction at 6700(0x2bcc414c) to reference 6880
--->Fixed instruction at 5840(0x2bcc3df0) to reference 6880
--->Fixed instruction at 3840(0x2bcc3620) to reference 6880
--->Fixed instruction at 2004(0x2bcc2ef4) to reference 6880
--->Fixed instruction at 1516(0x2bcc2d0c) to reference 6880
--->Fixed instruction at 960(0x2bcc2ae0) to reference 6880
--->Fixed instruction at 776(0x2bcc2a28) to reference 6880
--->Fixed instruction at 284(0x2bcc283c) to reference 6880
0x2bcc4204	6884:	.word	8444960	@ StringICell
--->Fixed instruction at 232(0x2bcc2808) to reference 6884
0x2bcc4208	6888:	.word	9109444	@ mb java.lang.StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;
--->Fixed instruction at 6664(0x2bcc4128) to reference 6888
--->Fixed instruction at 6556(0x2bcc40bc) to reference 6888
--->Fixed instruction at 5804(0x2bcc3dcc) to reference 6888
--->Fixed instruction at 5712(0x2bcc3d70) to reference 6888
--->Fixed instruction at 5552(0x2bcc3cd0) to reference 6888
--->Fixed instruction at 3804(0x2bcc35fc) to reference 6888
--->Fixed instruction at 3712(0x2bcc35a0) to reference 6888
--->Fixed instruction at 3552(0x2bcc3500) to reference 6888
--->Fixed instruction at 1816(0x2bcc2e38) to reference 6888
--->Fixed instruction at 1616(0x2bcc2d70) to reference 6888
--->Fixed instruction at 1328(0x2bcc2c50) to reference 6888
--->Fixed instruction at 1128(0x2bcc2b88) to reference 6888
--->Fixed instruction at 924(0x2bcc2abc) to reference 6888
--->Fixed instruction at 876(0x2bcc2a8c) to reference 6888
--->Fixed instruction at 740(0x2bcc2a04) to reference 6888
--->Fixed instruction at 692(0x2bcc29d4) to reference 6888
--->Fixed instruction at 248(0x2bcc2818) to reference 6888
--->Fixed instruction at 204(0x2bcc27ec) to reference 6888
0x2bcc420c	6892:	.word	9778364	@ mb com.sun.mep.bench.Chess.ChessPiece.getPieceType(I)Ljava/lang/String;
--->Fixed instruction at 188(0x2bcc27dc) to reference 6892
0x2bcc4210	6896:	.word	9108968	@ mb java.lang.StringBuffer.<init>()V
--->Fixed instruction at 6512(0x2bcc4090) to reference 6896
--->Fixed instruction at 5500(0x2bcc3c9c) to reference 6896
--->Fixed instruction at 3500(0x2bcc34cc) to reference 6896
--->Fixed instruction at 1576(0x2bcc2d48) to reference 6896
--->Fixed instruction at 1088(0x2bcc2b60) to reference 6896
--->Fixed instruction at 836(0x2bcc2a64) to reference 6896
--->Fixed instruction at 652(0x2bcc29ac) to reference 6896
--->Fixed instruction at 112(0x2bcc2790) to reference 6896
0x2bcc4214	6900:	.word	8642484	@ cb java.lang.StringBuffer
--->Fixed instruction at 6492(0x2bcc407c) to reference 6900
--->Fixed instruction at 5480(0x2bcc3c88) to reference 6900
--->Fixed instruction at 3480(0x2bcc34b8) to reference 6900
--->Fixed instruction at 1560(0x2bcc2d38) to reference 6900
--->Fixed instruction at 1072(0x2bcc2b50) to reference 6900
--->Fixed instruction at 820(0x2bcc2a54) to reference 6900
--->Fixed instruction at 636(0x2bcc299c) to reference 6900
--->Fixed instruction at 96(0x2bcc2780) to reference 6900
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc2720) >>>>>>>>
          		@ Capacity is 33 word(s)
0x2bcc2720	0:	addiu	a1, JSP, 124
<<<<<<<<<Pop Code Buffer to PC = 6904 (0x2bcc4218) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc2770) >>>>>>>>
          		@ spillSize is 7 word(s), add to JFP+28
0x2bcc2770	80:	addiu	JSP, JFP, 56
          		@ setup cp base register
0x2bcc2774	84:	lui	CP, hi16(0x2bcc)
0x2bcc2778	88:	ori	CP, CP, lo16(0x2bcc41a8)
0x2bcc277c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 6904 (0x2bcc4218) <<<<<<<<<
JS: COMPILED: size=9016 startPC=0x2bcc2720 com.sun.mep.bench.Chess.ChessPiece.EndMove(Lcom/sun/mep/bench/Chess/ChessPiece;)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.ChessGame.initialise()V
JS: COMPILING com.sun.mep.bench.Chess.ChessGame.initialise()V
CSE: Local 2 changed: Forgetting CSE'd array expressions referring to it
orig bkID(5) Incoming Locals(2 0x0): 4- 0- 
o1   bkID(5) Incoming Locals(1 0x0): 4- 
s1   bkID(5) Incoming Locals(2 0x0): 4- 1- 
s1   bkID(5) Incoming Locals(2 0x0): 4- 1- 
o1   bkID(5) Incoming Locals(3 0x0): 4- 1- 0- 
orig bkID(6) Incoming Locals(2 0x0): 1- 4- 
o1   bkID(6) Incoming Locals(2 0x0): 1- 4- 
orig bkID(3) Incoming Locals(2 0x0): 3- 0- 
o1   bkID(3) Incoming Locals(1 0x0): 3- 
s1   bkID(3) Incoming Locals(2 0x0): 3- 1- 
s1   bkID(3) Incoming Locals(2 0x0): 3- 1- 
o1   bkID(3) Incoming Locals(3 0x0): 3- 1- 0- 
orig bkID(4) Incoming Locals(2 0x0): 1- 3- 
o1   bkID(4) Incoming Locals(2 0x0): 1- 3- 
orig bkID(1) Incoming Locals(2 0x0): 2- 0- 
o1   bkID(1) Incoming Locals(1 0x0): 2- 
s1   bkID(1) Incoming Locals(2 0x0): 2- 0- 
s1   bkID(1) Incoming Locals(2 0x0): 2- 0- 
o1   bkID(1) Incoming Locals(2 0x0): 2- 0- 
orig bkID(2) Incoming Locals(2 0x0): 0- 2- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 2- 
s1   bkID(2) Incoming Locals(2 0x0): 0- 2- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 2- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(5) Incoming Locals(3 0x0): 4- 1- 0- 
o1   bkID(5) Incoming Locals(1 0x0): 4- 
s1   bkID(5) Incoming Locals(2 0x0): 4- 1- 
s1   bkID(5) Incoming Locals(2 0x0): 4- 1- 
o1   bkID(5) Incoming Locals(3 0x0): 4- 1- 0- 
orig bkID(6) Incoming Locals(2 0x0): 1- 4- 
o1   bkID(6) Incoming Locals(2 0x0): 1- 4- 
orig bkID(3) Incoming Locals(3 0x0): 3- 1- 0- 
o1   bkID(3) Incoming Locals(1 0x0): 3- 
s1   bkID(3) Incoming Locals(2 0x0): 3- 1- 
s1   bkID(3) Incoming Locals(2 0x0): 3- 1- 
o1   bkID(3) Incoming Locals(3 0x0): 3- 1- 0- 
orig bkID(4) Incoming Locals(2 0x0): 1- 3- 
o1   bkID(4) Incoming Locals(2 0x0): 1- 3- 
orig bkID(1) Incoming Locals(2 0x0): 2- 0- 
o1   bkID(1) Incoming Locals(1 0x0): 2- 
s1   bkID(1) Incoming Locals(2 0x0): 2- 0- 
s1   bkID(1) Incoming Locals(2 0x0): 2- 0- 
o1   bkID(1) Incoming Locals(2 0x0): 2- 0- 
orig bkID(2) Incoming Locals(2 0x0): 0- 2- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 2- 
s1   bkID(2) Incoming Locals(2 0x0): 0- 2- 
o1   bkID(2) Incoming Locals(2 0x0): 0- 2- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
bkID(5) local(0 #4)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(5) Incoming Locals(3 0x0): 4- 1- 0- 
+bk  bkID(5) Incoming Locals(3 0x1): 4+ 1- 0- 
-gbk bkID(6) Incoming Locals(2 0x0): 1- 4- 
+gbk bkID(6) Incoming Locals(2 0x1): 4+ 1- 
bkID(5) local(0 #4)  ordered in goalBk(6)
-bk  bkID(5) Incoming Locals(3 0x1): 4+ 1- 0- 
dstBk(5) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(5) Incoming Locals(3 0x1): 4+ 1- 0- 
 ordered in bk
-gbk bkID(6) Incoming Locals(2 0x1): 4+ 1- 
dstBk(6) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(6) Incoming Locals(2 0x1): 4+ 1- 
bkID(5) local(1 #1)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(5) Incoming Locals(3 0x1): 4+ 1- 0- 
+bk  bkID(5) Incoming Locals(3 0x3): 4+ 1+ 0- 
-gbk bkID(6) Incoming Locals(2 0x1): 4+ 1- 
+gbk bkID(6) Incoming Locals(2 0x3): 4+ 1+ 
bkID(5) local(1 #1)  ordered in goalBk(6)
-bk  bkID(5) Incoming Locals(3 0x3): 4+ 1+ 0- 
dstBk(5) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(5) Incoming Locals(3 0x3): 4+ 1+ 0- 
 ordered in bk
-gbk bkID(6) Incoming Locals(2 0x3): 4+ 1+ 
dstBk(6) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(6) Incoming Locals(2 0x3): 4+ 1+ 
bkID(5) local(2 #0)  not found in goalBk
Pushing blockID(6)
bkID(6) local(0 #4)  ordered in goalBk(6)
-bk  bkID(6) Incoming Locals(2 0x3): 4+ 1+ 
dstBk(6) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(6) Incoming Locals(2 0x3): 4+ 1+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(2 0x3): 4+ 1+ 
dstBk(6) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(6) Incoming Locals(2 0x3): 4+ 1+ 
bkID(6) local(1 #1)  ordered in goalBk(6)
-bk  bkID(6) Incoming Locals(2 0x3): 4+ 1+ 
dstBk(6) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(6) Incoming Locals(2 0x3): 4+ 1+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(2 0x3): 4+ 1+ 
dstBk(6) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(6) Incoming Locals(2 0x3): 4+ 1+ 
Popping blockID(6)
bkID(3) local(0 #3)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(3) Incoming Locals(3 0x0): 3- 1- 0- 
+bk  bkID(3) Incoming Locals(3 0x1): 3+ 1- 0- 
-gbk bkID(4) Incoming Locals(2 0x0): 1- 3- 
+gbk bkID(4) Incoming Locals(2 0x1): 3+ 1- 
bkID(3) local(0 #3)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(3 0x1): 3+ 1- 0- 
dstBk(3) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(3) Incoming Locals(3 0x1): 3+ 1- 0- 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x1): 3+ 1- 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(4) Incoming Locals(2 0x1): 3+ 1- 
bkID(3) local(1 #1)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(3) Incoming Locals(3 0x1): 3+ 1- 0- 
+bk  bkID(3) Incoming Locals(3 0x3): 3+ 1+ 0- 
-gbk bkID(4) Incoming Locals(2 0x1): 3+ 1- 
+gbk bkID(4) Incoming Locals(2 0x3): 3+ 1+ 
bkID(3) local(1 #1)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(3 0x3): 3+ 1+ 0- 
dstBk(3) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(3) Incoming Locals(3 0x3): 3+ 1+ 0- 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 3+ 1+ 
dstBk(4) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 3+ 1+ 
bkID(3) local(2 #0)  not found in goalBk
Pushing blockID(4)
bkID(4) local(0 #3)  ordered in goalBk(4)
-bk  bkID(4) Incoming Locals(2 0x3): 3+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 3+ 1+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 3+ 1+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 3+ 1+ 
bkID(4) local(1 #1)  ordered in goalBk(4)
-bk  bkID(4) Incoming Locals(2 0x3): 3+ 1+ 
dstBk(4) local(1 1) found in slot(1)
local(1 1) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 3+ 1+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 3+ 1+ 
dstBk(4) local(1 1) found in slot(1)
local(1 1) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 3+ 1+ 
Popping blockID(4)
bkID(1) local(0 #2)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(1) Incoming Locals(2 0x0): 2- 0- 
+bk  bkID(1) Incoming Locals(2 0x1): 2+ 0- 
-gbk bkID(2) Incoming Locals(2 0x0): 0- 2- 
+gbk bkID(2) Incoming Locals(2 0x1): 2+ 0- 
bkID(1) local(0 #2)  ordered in goalBk(2)
-bk  bkID(1) Incoming Locals(2 0x1): 2+ 0- 
dstBk(1) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(1) Incoming Locals(2 0x1): 2+ 0- 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x1): 2+ 0- 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(2) Incoming Locals(2 0x1): 2+ 0- 
bkID(1) local(1 #0)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(1) Incoming Locals(2 0x1): 2+ 0- 
+bk  bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(2) Incoming Locals(2 0x1): 2+ 0- 
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
bkID(1) local(1 #0)  ordered in goalBk(2)
-bk  bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
Pushing blockID(2)
bkID(2) local(0 #2)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(1) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
bkID(2) local(1 #0)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
-gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
bkID(2) local(0 #2)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
bkID(2) local(1 #0)  ordered in goalBk(2)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
bkID(2) local(0 #2)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(0 2) found in slot(0)
local(0 2) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(1) local(0 2) found in slot(0)
local(0 2) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
bkID(2) local(1 #0)  ordered in goalBk(1)
-bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(2) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(2) Incoming Locals(2 0x3): 2+ 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
Popping blockID(2)
bkID(0) local(0 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(1 0x0): 0- 
dstBk(0) local(1 0) found in slot(0)
local(#1) swapped with local(#0)
+bk  bkID(0) Incoming Locals(2 0x2): <null> 0+ 
bkID(0) local(1 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(2 0x2): <null> 0+ 
dstBk(0) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(0) Incoming Locals(2 0x2): <null> 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
dstBk(1) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(1) Incoming Locals(2 0x3): 2+ 0+ 
pre  bkID(3) Incoming Locals(3 0x3): 3+ 1+ 0- 
local(#2) swapped with local(#2)
post bkID(3) Incoming Locals(3 0x7): 3+ 1+ 0+ 
pre2  bkID(5) Incoming Locals(3 0x3): 4+ 1+ 0- 
local(#3) swapped with local(#2)
post2 bkID(5) Incoming Locals(4 0x7): 4+ 1+ <null> 0- 
pre  bkID(5) Incoming Locals(4 0x7): 4+ 1+ <null> 0- 
local(#3) swapped with local(#3)
post bkID(5) Incoming Locals(4 0xf): 4+ 1+ <null> 0+ 

#################################################

The maximum node counts per root node are 7
IR block list contains 7 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 3 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x2
* Source: com.sun.mep.bench.Chess.ChessGame.initialise()V(ChessGame.java:173)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<0>  (0x948854):    iconst_0 
<1>  (0x948855):    istore_2 
<2>  (0x948856):    goto <16>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Incoming Locals(2): 
	<null>
	local(0)	ID(29)
 
Assigned Locals(1): 
	ASSIGN(4): local(2)	ID(3)	rhsID(2)
 
Successor Blocks(1): 
	ID(1) LocalOrder(0) AssignOrder(1) RefsOK(1) Locals(2 0)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 4) ASSIGN (int)  (assignIdx: 0)
      <(ID: 3) LOCAL (int)   2>
      <(ID: 2) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 5) GOTO (NONE) 
   target: (BlockID: 1 BlockPC: 16)


*************************************************
*
* (block ID:2 block PC:5 )
* IR root list contains 4 root nodes: in block 
* flags: 0x361
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.ChessGame.initialise()V(ChessGame.java:175)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<5>  (0x948859):    aload_0 
<6>  (0x94885a):    agetfield_quick #41
<9>  (0x94885d):    iload_2 
<10>  (0x94885e):    bipush 99
<12>  (0x948860):    bastore 
<13>  (0x948861):    iinc 2 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(29)
 	local(2)	ID(33)
 
Incoming Locals(2): 
	local(2)	ID(33)
 	local(0)	ID(29)
 
Assigned Locals(1): 
	ASSIGN(43): local(2)	ID(42)	rhsID(41)
 
Successor Blocks(1): 
	ID(1) LocalOrder(2) AssignOrder(1) RefsOK(1) Locals(2 0)

   <(ID: 28) MAP_PC (NONE)   5>

   <(ID: 32) IDENTITY (reference)  (ref count: 3)
      <(ID: 39) FETCH (reference) 
         <(ID: 31) FIELD_REF (reference) 
            <(ID: 29) LOCAL (reference)   0>
            <(ID: 30) CONST_FIELD_OFFSET (NONE)  (41)

   <(ID: 38) ASSIGN (byte) 
      <(ID: 37) INDEX (int) 
         <(ID: 32) IDENTITY (reference)  (ref count: 3)
         <(ID: 36) BOUNDS_CHECK (int) 
            <(ID: 33) IDENTITY (int)  (ref count: 2)
               <(ID: 44) LOCAL (int)   2>
            <(ID: 35) ARRAY_LENGTH (int) 
               <(ID: 32) IDENTITY (reference)  (ref count: 3)
      <(ID: 34) CONST_JAVA_NUMERIC32 (int)  (99)

   <(ID: 43) ASSIGN (int)  (assignIdx: 0)
      <(ID: 42) LOCAL (int)   2>
      <(ID: 41) ADD (int) 
         <(ID: 33) IDENTITY (int)  (ref count: 2)
         <(ID: 40) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:1 block PC:16 )
* IR root list contains 8 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3
* Source: com.sun.mep.bench.Chess.ChessGame.initialise()V(ChessGame.java:173)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<16>  (0x948864):    iload_2 
<17>  (0x948865):    bipush 64
<19>  (0x948867):    if_icmplt <5>
<22>  (0x94886a):    iconst_0 
<23>  (0x94886b):    istore_1 
<24>  (0x94886c):    aload_0 
<25>  (0x94886d):    new_quick #40 <java.util.Vector>
<28>  (0x948870):    dup 
<29>  (0x948871):    invokenonvirtual_quick #41 <java.util.Vector.<init>()V>
<32>  (0x948874):    aputfield_quick #31
<35>  (0x948877):    iconst_0 
<36>  (0x948878):    istore_3 
<37>  (0x948879):    goto <57>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(2)	ID(7)
 	local(0)	ID(11)
 
Incoming Locals(2): 
	local(2)	ID(7)
 	local(0)	ID(29)
 
Assigned Locals(2): 
	ASSIGN(24): local(1)	ID(23)	rhsID(10)
 	ASSIGN(26): local(3)	ID(25)	rhsID(22)
 
Successor Blocks(2): 
	ID(2) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(2 0)
	ID(3) LocalOrder(2) AssignOrder(2) RefsOK(0) Locals(3 1 0)

   <(ID: 6) MAP_PC (NONE)   16>

   <(ID: 9) BCOND (int) 
   target: (BlockID: 2 BlockPC: 5)
   condition: LT
   flags: 0
      <(ID: 7) LOCAL (int)   2>
      <(ID: 8) CONST_JAVA_NUMERIC32 (int)  (64)


   <(ID: 13) IDENTITY (reference)  (ref count: 3)
      <(ID: 18) NEW_OBJECT (reference) 
         <(ID: 12) CONST_CB (address field)  (java.util.Vector)

   <(ID: 17) INVOKE (v) 
      <(ID: 16) PARAMETER (reference) 
         <(ID: 13) IDENTITY (reference)  (ref count: 3)
         <(ID: 15) NULL_PARAMETER (NONE) 
      <(ID: 14) CONST_MB (address field)  (java.util.Vector.<init>()V)

   <(ID: 21) ASSIGN (reference) 
      <(ID: 20) FIELD_REF (reference) 
         <(ID: 11) LOCAL (reference)   0>
         <(ID: 19) CONST_FIELD_OFFSET (NONE)  (31)
      <(ID: 13) IDENTITY (reference)  (ref count: 3)

   <(ID: 24) ASSIGN (int)  (assignIdx: 0)
      <(ID: 23) LOCAL (int)   1>
      <(ID: 10) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 26) ASSIGN (int)  (assignIdx: 1)
      <(ID: 25) LOCAL (int)   3>
      <(ID: 22) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 27) GOTO (NONE) 
   target: (BlockID: 3 BlockPC: 57)


*************************************************
*
* (block ID:4 block PC:40 )
* IR root list contains 4 root nodes: in block 
* flags: 0x361
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x7
* Source: com.sun.mep.bench.Chess.ChessGame.initialise()V(ChessGame.java:182)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<40>  (0x94887c):    new_quick #43 <com.sun.mep.bench.Chess.Pawn>
<43>  (0x94887f):    dup 
<44>  (0x948880):    aload_0 
<45>  (0x948881):    iload_1 
<46>  (0x948882):    bipush 48
<48>  (0x948884):    iload_3 
<49>  (0x948885):    iadd 
<50>  (0x948886):    invokenonvirtual_quick #44 <com.sun.mep.bench.Chess.Pawn.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<53>  (0x948889):    pop 
<54>  (0x94888a):    iinc 3 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(1)	ID(208)
 	local(3)	ID(210)
 
Incoming Locals(3): 
	local(3)	ID(210)
 	local(1)	ID(208)
 	<null>

Assigned Locals(1): 
	ASSIGN(223): local(3)	ID(222)	rhsID(221)
 
Successor Blocks(1): 
	ID(3) LocalOrder(2) AssignOrder(1) RefsOK(0) Locals(3 1 0)

   <(ID: 204) MAP_PC (NONE)   40>

   <(ID: 206) IDENTITY (reference)  (ref count: 2)
      <(ID: 219) NEW_OBJECT (reference) 
         <(ID: 205) CONST_CB (address field)  (com.sun.mep.bench.Chess.Pawn)

   <(ID: 218) INVOKE (v) 
      <(ID: 217) PARAMETER (reference) 
         <(ID: 206) IDENTITY (reference)  (ref count: 2)
         <(ID: 216) PARAMETER (reference) 
            <(ID: 207) LOCAL (reference)   0>
            <(ID: 215) PARAMETER (int) 
               <(ID: 208) LOCAL (int)   1>
               <(ID: 214) PARAMETER (int) 
                  <(ID: 211) ADD (int) 
                     <(ID: 210) IDENTITY (int)  (ref count: 2)
                        <(ID: 224) LOCAL (int)   3>
                     <(ID: 209) CONST_JAVA_NUMERIC32 (int)  (48)
                  <(ID: 213) NULL_PARAMETER (NONE) 
      <(ID: 212) CONST_MB (address field)  (com.sun.mep.bench.Chess.Pawn.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 223) ASSIGN (int)  (assignIdx: 0)
      <(ID: 222) LOCAL (int)   3>
      <(ID: 221) ADD (int) 
         <(ID: 210) IDENTITY (int)  (ref count: 2)
         <(ID: 220) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:3 block PC:57 )
* IR root list contains 37 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x7
* Source: com.sun.mep.bench.Chess.ChessGame.initialise()V(ChessGame.java:180)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<57>  (0x94888d):    iload_3 
<58>  (0x94888e):    bipush 8
<60>  (0x948890):    if_icmplt <40>
<63>  (0x948893):    iconst_1 
<64>  (0x948894):    istore_1 
<65>  (0x948895):    aload_0 
<66>  (0x948896):    new_quick #40 <java.util.Vector>
<69>  (0x948899):    dup 
<70>  (0x94889a):    invokenonvirtual_quick #41 <java.util.Vector.<init>()V>
<73>  (0x94889d):    aputfield_quick #35
<76>  (0x9488a0):    new_quick #46 <com.sun.mep.bench.Chess.Knight>
<79>  (0x9488a3):    dup 
<80>  (0x9488a4):    aload_0 
<81>  (0x9488a5):    iload_1 
<82>  (0x9488a6):    bipush 57
<84>  (0x9488a8):    invokenonvirtual_quick #47 <com.sun.mep.bench.Chess.Knight.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<87>  (0x9488ab):    pop 
<88>  (0x9488ac):    new_quick #46 <com.sun.mep.bench.Chess.Knight>
<91>  (0x9488af):    dup 
<92>  (0x9488b0):    aload_0 
<93>  (0x9488b1):    iload_1 
<94>  (0x9488b2):    bipush 62
<96>  (0x9488b4):    invokenonvirtual_quick #47 <com.sun.mep.bench.Chess.Knight.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<99>  (0x9488b7):    pop 
<100>  (0x9488b8):    iconst_2 
<101>  (0x9488b9):    istore_1 
<102>  (0x9488ba):    aload_0 
<103>  (0x9488bb):    new_quick #40 <java.util.Vector>
<106>  (0x9488be):    dup 
<107>  (0x9488bf):    invokenonvirtual_quick #41 <java.util.Vector.<init>()V>
<110>  (0x9488c2):    aputfield_quick #37
<113>  (0x9488c5):    new_quick #49 <com.sun.mep.bench.Chess.Bishop>
<116>  (0x9488c8):    dup 
<117>  (0x9488c9):    aload_0 
<118>  (0x9488ca):    iload_1 
<119>  (0x9488cb):    bipush 58
<121>  (0x9488cd):    invokenonvirtual_quick #50 <com.sun.mep.bench.Chess.Bishop.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<124>  (0x9488d0):    pop 
<125>  (0x9488d1):    new_quick #49 <com.sun.mep.bench.Chess.Bishop>
<128>  (0x9488d4):    dup 
<129>  (0x9488d5):    aload_0 
<130>  (0x9488d6):    iload_1 
<131>  (0x9488d7):    bipush 61
<133>  (0x9488d9):    invokenonvirtual_quick #50 <com.sun.mep.bench.Chess.Bishop.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<136>  (0x9488dc):    pop 
<137>  (0x9488dd):    iconst_3 
<138>  (0x9488de):    istore_1 
<139>  (0x9488df):    aload_0 
<140>  (0x9488e0):    new_quick #40 <java.util.Vector>
<143>  (0x9488e3):    dup 
<144>  (0x9488e4):    invokenonvirtual_quick #41 <java.util.Vector.<init>()V>
<147>  (0x9488e7):    aputfield_quick #33
<150>  (0x9488ea):    new_quick #52 <com.sun.mep.bench.Chess.Rook>
<153>  (0x9488ed):    dup 
<154>  (0x9488ee):    aload_0 
<155>  (0x9488ef):    iload_1 
<156>  (0x9488f0):    bipush 56
<158>  (0x9488f2):    invokenonvirtual_quick #53 <com.sun.mep.bench.Chess.Rook.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<161>  (0x9488f5):    pop 
<162>  (0x9488f6):    new_quick #52 <com.sun.mep.bench.Chess.Rook>
<165>  (0x9488f9):    dup 
<166>  (0x9488fa):    aload_0 
<167>  (0x9488fb):    iload_1 
<168>  (0x9488fc):    bipush 63
<170>  (0x9488fe):    invokenonvirtual_quick #53 <com.sun.mep.bench.Chess.Rook.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<173>  (0x948901):    pop 
<174>  (0x948902):    iconst_4 
<175>  (0x948903):    istore_1 
<176>  (0x948904):    aload_0 
<177>  (0x948905):    new_quick #40 <java.util.Vector>
<180>  (0x948908):    dup 
<181>  (0x948909):    invokenonvirtual_quick #41 <java.util.Vector.<init>()V>
<184>  (0x94890c):    aputfield_quick #39
<187>  (0x94890f):    new_quick #55 <com.sun.mep.bench.Chess.Queen>
<190>  (0x948912):    dup 
<191>  (0x948913):    aload_0 
<192>  (0x948914):    iload_1 
<193>  (0x948915):    bipush 59
<195>  (0x948917):    invokenonvirtual_quick #56 <com.sun.mep.bench.Chess.Queen.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<198>  (0x94891a):    pop 
<199>  (0x94891b):    iconst_5 
<200>  (0x94891c):    istore_1 
<201>  (0x94891d):    aload_0 
<202>  (0x94891e):    new_quick #57 <com.sun.mep.bench.Chess.King>
<205>  (0x948921):    dup 
<206>  (0x948922):    aload_0 
<207>  (0x948923):    iload_1 
<208>  (0x948924):    bipush 60
<210>  (0x948926):    invokenonvirtual_quick #58 <com.sun.mep.bench.Chess.King.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<213>  (0x948929):    aputfield_quick #29
<216>  (0x94892c):    bipush 6
<218>  (0x94892e):    istore_1 
<219>  (0x94892f):    aload_0 
<220>  (0x948930):    new_quick #40 <java.util.Vector>
<223>  (0x948933):    dup 
<224>  (0x948934):    invokenonvirtual_quick #41 <java.util.Vector.<init>()V>
<227>  (0x948937):    aputfield_quick #32
<230>  (0x94893a):    iconst_0 
<231>  (0x94893b):    istore 4
<233>  (0x94893d):    goto <254>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(3)	ID(46)
 	local(0)	ID(50)
 
Incoming Locals(3): 
	local(3)	ID(46)
 	local(1)	ID(208)
 	local(0)	ID(50)
 
Assigned Locals(2): 
	ASSIGN(200): local(1)	ID(199)	rhsID(187)
 	ASSIGN(202): local(4)	ID(201)	rhsID(198)
 
Successor Blocks(2): 
	ID(4) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(3 1 <null>)
	ID(5) LocalOrder(2) AssignOrder(2) RefsOK(0) Locals(4 1 <null> 0)

   <(ID: 45) MAP_PC (NONE)   57>

   <(ID: 48) BCOND (int) 
   target: (BlockID: 4 BlockPC: 40)
   condition: LT
   flags: 0
      <(ID: 46) LOCAL (int)   3>
      <(ID: 47) CONST_JAVA_NUMERIC32 (int)  (8)


   <(ID: 52) IDENTITY (reference)  (ref count: 3)
      <(ID: 57) NEW_OBJECT (reference) 
         <(ID: 51) CONST_CB (address field)  (java.util.Vector)

   <(ID: 56) INVOKE (v) 
      <(ID: 55) PARAMETER (reference) 
         <(ID: 52) IDENTITY (reference)  (ref count: 3)
         <(ID: 54) NULL_PARAMETER (NONE) 
      <(ID: 53) CONST_MB (address field)  (java.util.Vector.<init>()V)

   <(ID: 60) ASSIGN (reference) 
      <(ID: 59) FIELD_REF (reference) 
         <(ID: 50) IDENTITY (reference)  (ref count: 14)
            <(ID: 72) LOCAL (reference)   0>
         <(ID: 58) CONST_FIELD_OFFSET (NONE)  (35)
      <(ID: 52) IDENTITY (reference)  (ref count: 3)

   <(ID: 62) IDENTITY (reference)  (ref count: 2)
      <(ID: 71) NEW_OBJECT (reference) 
         <(ID: 61) CONST_CB (address field)  (com.sun.mep.bench.Chess.Knight)

   <(ID: 70) INVOKE (v) 
      <(ID: 69) PARAMETER (reference) 
         <(ID: 62) IDENTITY (reference)  (ref count: 2)
         <(ID: 68) PARAMETER (reference) 
            <(ID: 50) IDENTITY (reference)  (ref count: 14)
            <(ID: 67) PARAMETER (int) 
               <(ID: 49) CONST_JAVA_NUMERIC32 (int)  (ref count: 2) (1)
               <(ID: 66) PARAMETER (int) 
                  <(ID: 63) CONST_JAVA_NUMERIC32 (int)  (57)
                  <(ID: 65) NULL_PARAMETER (NONE) 
      <(ID: 64) CONST_MB (address field)  (com.sun.mep.bench.Chess.Knight.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 74) IDENTITY (reference)  (ref count: 2)
      <(ID: 83) NEW_OBJECT (reference) 
         <(ID: 73) CONST_CB (address field)  (com.sun.mep.bench.Chess.Knight)

   <(ID: 82) INVOKE (v) 
      <(ID: 81) PARAMETER (reference) 
         <(ID: 74) IDENTITY (reference)  (ref count: 2)
         <(ID: 80) PARAMETER (reference) 
            <(ID: 50) IDENTITY (reference)  (ref count: 14)
            <(ID: 79) PARAMETER (int) 
               <(ID: 49) CONST_JAVA_NUMERIC32 (int)  (ref count: 2)
               <(ID: 78) PARAMETER (int) 
                  <(ID: 75) CONST_JAVA_NUMERIC32 (int)  (62)
                  <(ID: 77) NULL_PARAMETER (NONE) 
      <(ID: 76) CONST_MB (address field)  (com.sun.mep.bench.Chess.Knight.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 86) IDENTITY (reference)  (ref count: 3)
      <(ID: 91) NEW_OBJECT (reference) 
         <(ID: 85) CONST_CB (address field)  (java.util.Vector)

   <(ID: 90) INVOKE (v) 
      <(ID: 89) PARAMETER (reference) 
         <(ID: 86) IDENTITY (reference)  (ref count: 3)
         <(ID: 88) NULL_PARAMETER (NONE) 
      <(ID: 87) CONST_MB (address field)  (java.util.Vector.<init>()V)

   <(ID: 94) ASSIGN (reference) 
      <(ID: 93) FIELD_REF (reference) 
         <(ID: 50) IDENTITY (reference)  (ref count: 14)
         <(ID: 92) CONST_FIELD_OFFSET (NONE)  (37)
      <(ID: 86) IDENTITY (reference)  (ref count: 3)

   <(ID: 96) IDENTITY (reference)  (ref count: 2)
      <(ID: 105) NEW_OBJECT (reference) 
         <(ID: 95) CONST_CB (address field)  (com.sun.mep.bench.Chess.Bishop)

   <(ID: 104) INVOKE (v) 
      <(ID: 103) PARAMETER (reference) 
         <(ID: 96) IDENTITY (reference)  (ref count: 2)
         <(ID: 102) PARAMETER (reference) 
            <(ID: 50) IDENTITY (reference)  (ref count: 14)
            <(ID: 101) PARAMETER (int) 
               <(ID: 84) CONST_JAVA_NUMERIC32 (int)  (ref count: 2) (2)
               <(ID: 100) PARAMETER (int) 
                  <(ID: 97) CONST_JAVA_NUMERIC32 (int)  (58)
                  <(ID: 99) NULL_PARAMETER (NONE) 
      <(ID: 98) CONST_MB (address field)  (com.sun.mep.bench.Chess.Bishop.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 107) IDENTITY (reference)  (ref count: 2)
      <(ID: 116) NEW_OBJECT (reference) 
         <(ID: 106) CONST_CB (address field)  (com.sun.mep.bench.Chess.Bishop)

   <(ID: 115) INVOKE (v) 
      <(ID: 114) PARAMETER (reference) 
         <(ID: 107) IDENTITY (reference)  (ref count: 2)
         <(ID: 113) PARAMETER (reference) 
            <(ID: 50) IDENTITY (reference)  (ref count: 14)
            <(ID: 112) PARAMETER (int) 
               <(ID: 84) CONST_JAVA_NUMERIC32 (int)  (ref count: 2)
               <(ID: 111) PARAMETER (int) 
                  <(ID: 108) CONST_JAVA_NUMERIC32 (int)  (61)
                  <(ID: 110) NULL_PARAMETER (NONE) 
      <(ID: 109) CONST_MB (address field)  (com.sun.mep.bench.Chess.Bishop.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 119) IDENTITY (reference)  (ref count: 3)
      <(ID: 124) NEW_OBJECT (reference) 
         <(ID: 118) CONST_CB (address field)  (java.util.Vector)

   <(ID: 123) INVOKE (v) 
      <(ID: 122) PARAMETER (reference) 
         <(ID: 119) IDENTITY (reference)  (ref count: 3)
         <(ID: 121) NULL_PARAMETER (NONE) 
      <(ID: 120) CONST_MB (address field)  (java.util.Vector.<init>()V)

   <(ID: 127) ASSIGN (reference) 
      <(ID: 126) FIELD_REF (reference) 
         <(ID: 50) IDENTITY (reference)  (ref count: 14)
         <(ID: 125) CONST_FIELD_OFFSET (NONE)  (33)
      <(ID: 119) IDENTITY (reference)  (ref count: 3)

   <(ID: 129) IDENTITY (reference)  (ref count: 2)
      <(ID: 138) NEW_OBJECT (reference) 
         <(ID: 128) CONST_CB (address field)  (com.sun.mep.bench.Chess.Rook)

   <(ID: 137) INVOKE (v) 
      <(ID: 136) PARAMETER (reference) 
         <(ID: 129) IDENTITY (reference)  (ref count: 2)
         <(ID: 135) PARAMETER (reference) 
            <(ID: 50) IDENTITY (reference)  (ref count: 14)
            <(ID: 134) PARAMETER (int) 
               <(ID: 117) CONST_JAVA_NUMERIC32 (int)  (ref count: 2) (3)
               <(ID: 133) PARAMETER (int) 
                  <(ID: 130) CONST_JAVA_NUMERIC32 (int)  (56)
                  <(ID: 132) NULL_PARAMETER (NONE) 
      <(ID: 131) CONST_MB (address field)  (com.sun.mep.bench.Chess.Rook.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 140) IDENTITY (reference)  (ref count: 2)
      <(ID: 149) NEW_OBJECT (reference) 
         <(ID: 139) CONST_CB (address field)  (com.sun.mep.bench.Chess.Rook)

   <(ID: 148) INVOKE (v) 
      <(ID: 147) PARAMETER (reference) 
         <(ID: 140) IDENTITY (reference)  (ref count: 2)
         <(ID: 146) PARAMETER (reference) 
            <(ID: 50) IDENTITY (reference)  (ref count: 14)
            <(ID: 145) PARAMETER (int) 
               <(ID: 117) CONST_JAVA_NUMERIC32 (int)  (ref count: 2)
               <(ID: 144) PARAMETER (int) 
                  <(ID: 141) CONST_JAVA_NUMERIC32 (int)  (63)
                  <(ID: 143) NULL_PARAMETER (NONE) 
      <(ID: 142) CONST_MB (address field)  (com.sun.mep.bench.Chess.Rook.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 152) IDENTITY (reference)  (ref count: 3)
      <(ID: 157) NEW_OBJECT (reference) 
         <(ID: 151) CONST_CB (address field)  (java.util.Vector)

   <(ID: 156) INVOKE (v) 
      <(ID: 155) PARAMETER (reference) 
         <(ID: 152) IDENTITY (reference)  (ref count: 3)
         <(ID: 154) NULL_PARAMETER (NONE) 
      <(ID: 153) CONST_MB (address field)  (java.util.Vector.<init>()V)

   <(ID: 160) ASSIGN (reference) 
      <(ID: 159) FIELD_REF (reference) 
         <(ID: 50) IDENTITY (reference)  (ref count: 14)
         <(ID: 158) CONST_FIELD_OFFSET (NONE)  (39)
      <(ID: 152) IDENTITY (reference)  (ref count: 3)

   <(ID: 162) IDENTITY (reference)  (ref count: 2)
      <(ID: 171) NEW_OBJECT (reference) 
         <(ID: 161) CONST_CB (address field)  (com.sun.mep.bench.Chess.Queen)

   <(ID: 170) INVOKE (v) 
      <(ID: 169) PARAMETER (reference) 
         <(ID: 162) IDENTITY (reference)  (ref count: 2)
         <(ID: 168) PARAMETER (reference) 
            <(ID: 50) IDENTITY (reference)  (ref count: 14)
            <(ID: 167) PARAMETER (int) 
               <(ID: 150) CONST_JAVA_NUMERIC32 (int)  (4)
               <(ID: 166) PARAMETER (int) 
                  <(ID: 163) CONST_JAVA_NUMERIC32 (int)  (59)
                  <(ID: 165) NULL_PARAMETER (NONE) 
      <(ID: 164) CONST_MB (address field)  (com.sun.mep.bench.Chess.Queen.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 174) IDENTITY (reference)  (ref count: 3)
      <(ID: 183) NEW_OBJECT (reference) 
         <(ID: 173) CONST_CB (address field)  (com.sun.mep.bench.Chess.King)

   <(ID: 182) INVOKE (v) 
      <(ID: 181) PARAMETER (reference) 
         <(ID: 174) IDENTITY (reference)  (ref count: 3)
         <(ID: 180) PARAMETER (reference) 
            <(ID: 50) IDENTITY (reference)  (ref count: 14)
            <(ID: 179) PARAMETER (int) 
               <(ID: 172) CONST_JAVA_NUMERIC32 (int)  (5)
               <(ID: 178) PARAMETER (int) 
                  <(ID: 175) CONST_JAVA_NUMERIC32 (int)  (60)
                  <(ID: 177) NULL_PARAMETER (NONE) 
      <(ID: 176) CONST_MB (address field)  (com.sun.mep.bench.Chess.King.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 186) ASSIGN (reference) 
      <(ID: 185) FIELD_REF (reference) 
         <(ID: 50) IDENTITY (reference)  (ref count: 14)
         <(ID: 184) CONST_FIELD_OFFSET (NONE)  (29)
      <(ID: 174) IDENTITY (reference)  (ref count: 3)

   <(ID: 189) IDENTITY (reference)  (ref count: 3)
      <(ID: 194) NEW_OBJECT (reference) 
         <(ID: 188) CONST_CB (address field)  (java.util.Vector)

   <(ID: 193) INVOKE (v) 
      <(ID: 192) PARAMETER (reference) 
         <(ID: 189) IDENTITY (reference)  (ref count: 3)
         <(ID: 191) NULL_PARAMETER (NONE) 
      <(ID: 190) CONST_MB (address field)  (java.util.Vector.<init>()V)

   <(ID: 197) ASSIGN (reference) 
      <(ID: 196) FIELD_REF (reference) 
         <(ID: 50) IDENTITY (reference)  (ref count: 14)
         <(ID: 195) CONST_FIELD_OFFSET (NONE)  (32)
      <(ID: 189) IDENTITY (reference)  (ref count: 3)

   <(ID: 200) ASSIGN (int)  (assignIdx: 0)
      <(ID: 199) LOCAL (int)   1>
      <(ID: 187) CONST_JAVA_NUMERIC32 (int)  (6)

   <(ID: 202) ASSIGN (int)  (assignIdx: 1)
      <(ID: 201) LOCAL (int)   4>
      <(ID: 198) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 203) GOTO (NONE) 
   target: (BlockID: 5 BlockPC: 254)


*************************************************
*
* (block ID:6 block PC:236 )
* IR root list contains 4 root nodes: in block 
* flags: 0x361
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0xb
* Source: com.sun.mep.bench.Chess.ChessGame.initialise()V(ChessGame.java:211)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<236>  (0x948940):    new_quick #43 <com.sun.mep.bench.Chess.Pawn>
<239>  (0x948943):    dup 
<240>  (0x948944):    aload_0 
<241>  (0x948945):    iload_1 
<242>  (0x948946):    bipush 8
<244>  (0x948948):    iload 4
<246>  (0x94894a):    iadd 
<247>  (0x94894b):    invokenonvirtual_quick #44 <com.sun.mep.bench.Chess.Pawn.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<250>  (0x94894e):    pop 
<251>  (0x94894f):    iinc 4 1
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(1)	ID(372)
 	local(4)	ID(374)
 
Incoming Locals(4): 
	local(4)	ID(374)
 	local(1)	ID(372)
 	<null>
	<null>

Assigned Locals(1): 
	ASSIGN(387): local(4)	ID(386)	rhsID(385)
 
Successor Blocks(1): 
	ID(5) LocalOrder(2) AssignOrder(1) RefsOK(0) Locals(4 1 <null> 0)

   <(ID: 368) MAP_PC (NONE)   236>

   <(ID: 370) IDENTITY (reference)  (ref count: 2)
      <(ID: 383) NEW_OBJECT (reference) 
         <(ID: 369) CONST_CB (address field)  (com.sun.mep.bench.Chess.Pawn)

   <(ID: 382) INVOKE (v) 
      <(ID: 381) PARAMETER (reference) 
         <(ID: 370) IDENTITY (reference)  (ref count: 2)
         <(ID: 380) PARAMETER (reference) 
            <(ID: 371) LOCAL (reference)   0>
            <(ID: 379) PARAMETER (int) 
               <(ID: 372) LOCAL (int)   1>
               <(ID: 378) PARAMETER (int) 
                  <(ID: 375) ADD (int) 
                     <(ID: 374) IDENTITY (int)  (ref count: 2)
                        <(ID: 388) LOCAL (int)   4>
                     <(ID: 373) CONST_JAVA_NUMERIC32 (int)  (8)
                  <(ID: 377) NULL_PARAMETER (NONE) 
      <(ID: 376) CONST_MB (address field)  (com.sun.mep.bench.Chess.Pawn.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 387) ASSIGN (int)  (assignIdx: 0)
      <(ID: 386) LOCAL (int)   4>
      <(ID: 385) ADD (int) 
         <(ID: 374) IDENTITY (int)  (ref count: 2)
         <(ID: 384) CONST_JAVA_NUMERIC32 (int)  (1)


*************************************************
*
* (block ID:5 block PC:254 )
* IR root list contains 32 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0xf
* Source: com.sun.mep.bench.Chess.ChessGame.initialise()V(ChessGame.java:209)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<254>  (0x948952):    iload 4
<256>  (0x948954):    bipush 8
<258>  (0x948956):    if_icmplt <236>
<261>  (0x948959):    bipush 7
<263>  (0x94895b):    istore_1 
<264>  (0x94895c):    aload_0 
<265>  (0x94895d):    new_quick #40 <java.util.Vector>
<268>  (0x948960):    dup 
<269>  (0x948961):    invokenonvirtual_quick #41 <java.util.Vector.<init>()V>
<272>  (0x948964):    aputfield_quick #36
<275>  (0x948967):    new_quick #46 <com.sun.mep.bench.Chess.Knight>
<278>  (0x94896a):    dup 
<279>  (0x94896b):    aload_0 
<280>  (0x94896c):    iload_1 
<281>  (0x94896d):    iconst_1 
<282>  (0x94896e):    invokenonvirtual_quick #47 <com.sun.mep.bench.Chess.Knight.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<285>  (0x948971):    pop 
<286>  (0x948972):    new_quick #46 <com.sun.mep.bench.Chess.Knight>
<289>  (0x948975):    dup 
<290>  (0x948976):    aload_0 
<291>  (0x948977):    iload_1 
<292>  (0x948978):    bipush 6
<294>  (0x94897a):    invokenonvirtual_quick #47 <com.sun.mep.bench.Chess.Knight.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<297>  (0x94897d):    pop 
<298>  (0x94897e):    bipush 8
<300>  (0x948980):    istore_1 
<301>  (0x948981):    aload_0 
<302>  (0x948982):    new_quick #40 <java.util.Vector>
<305>  (0x948985):    dup 
<306>  (0x948986):    invokenonvirtual_quick #41 <java.util.Vector.<init>()V>
<309>  (0x948989):    aputfield_quick #38
<312>  (0x94898c):    new_quick #49 <com.sun.mep.bench.Chess.Bishop>
<315>  (0x94898f):    dup 
<316>  (0x948990):    aload_0 
<317>  (0x948991):    iload_1 
<318>  (0x948992):    iconst_2 
<319>  (0x948993):    invokenonvirtual_quick #50 <com.sun.mep.bench.Chess.Bishop.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<322>  (0x948996):    pop 
<323>  (0x948997):    new_quick #49 <com.sun.mep.bench.Chess.Bishop>
<326>  (0x94899a):    dup 
<327>  (0x94899b):    aload_0 
<328>  (0x94899c):    iload_1 
<329>  (0x94899d):    iconst_5 
<330>  (0x94899e):    invokenonvirtual_quick #50 <com.sun.mep.bench.Chess.Bishop.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<333>  (0x9489a1):    pop 
<334>  (0x9489a2):    bipush 9
<336>  (0x9489a4):    istore_1 
<337>  (0x9489a5):    aload_0 
<338>  (0x9489a6):    new_quick #40 <java.util.Vector>
<341>  (0x9489a9):    dup 
<342>  (0x9489aa):    invokenonvirtual_quick #41 <java.util.Vector.<init>()V>
<345>  (0x9489ad):    aputfield_quick #34
<348>  (0x9489b0):    new_quick #52 <com.sun.mep.bench.Chess.Rook>
<351>  (0x9489b3):    dup 
<352>  (0x9489b4):    aload_0 
<353>  (0x9489b5):    iload_1 
<354>  (0x9489b6):    iconst_0 
<355>  (0x9489b7):    invokenonvirtual_quick #53 <com.sun.mep.bench.Chess.Rook.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<358>  (0x9489ba):    pop 
<359>  (0x9489bb):    new_quick #52 <com.sun.mep.bench.Chess.Rook>
<362>  (0x9489be):    dup 
<363>  (0x9489bf):    aload_0 
<364>  (0x9489c0):    iload_1 
<365>  (0x9489c1):    bipush 7
<367>  (0x9489c3):    invokenonvirtual_quick #53 <com.sun.mep.bench.Chess.Rook.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<370>  (0x9489c6):    pop 
<371>  (0x9489c7):    bipush 10
<373>  (0x9489c9):    istore_1 
<374>  (0x9489ca):    aload_0 
<375>  (0x9489cb):    new_quick #40 <java.util.Vector>
<378>  (0x9489ce):    dup 
<379>  (0x9489cf):    invokenonvirtual_quick #41 <java.util.Vector.<init>()V>
<382>  (0x9489d2):    aputfield_quick #40
<385>  (0x9489d5):    new_quick #55 <com.sun.mep.bench.Chess.Queen>
<388>  (0x9489d8):    dup 
<389>  (0x9489d9):    aload_0 
<390>  (0x9489da):    iload_1 
<391>  (0x9489db):    iconst_3 
<392>  (0x9489dc):    invokenonvirtual_quick #56 <com.sun.mep.bench.Chess.Queen.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<395>  (0x9489df):    pop 
<396>  (0x9489e0):    bipush 11
<398>  (0x9489e2):    istore_1 
<399>  (0x9489e3):    aload_0 
<400>  (0x9489e4):    new_quick #57 <com.sun.mep.bench.Chess.King>
<403>  (0x9489e7):    dup 
<404>  (0x9489e8):    aload_0 
<405>  (0x9489e9):    iload_1 
<406>  (0x9489ea):    iconst_4 
<407>  (0x9489eb):    invokenonvirtual_quick #58 <com.sun.mep.bench.Chess.King.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V>
<410>  (0x9489ee):    aputfield_quick #30
<413>  (0x9489f1):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(4)	ID(226)
 	local(0)	ID(230)
 
Incoming Locals(4): 
	local(4)	ID(226)
 	local(1)	ID(372)
 	<null>
	local(0)	ID(230)
 
Successor Blocks(1): 
	ID(6) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(4 1 <null> <null>)

   <(ID: 225) MAP_PC (NONE)   254>

   <(ID: 228) BCOND (int) 
   target: (BlockID: 6 BlockPC: 236)
   condition: LT
   flags: 0
      <(ID: 226) LOCAL (int)   4>
      <(ID: 227) CONST_JAVA_NUMERIC32 (int)  (8)


   <(ID: 232) IDENTITY (reference)  (ref count: 3)
      <(ID: 237) NEW_OBJECT (reference) 
         <(ID: 231) CONST_CB (address field)  (java.util.Vector)

   <(ID: 236) INVOKE (v) 
      <(ID: 235) PARAMETER (reference) 
         <(ID: 232) IDENTITY (reference)  (ref count: 3)
         <(ID: 234) NULL_PARAMETER (NONE) 
      <(ID: 233) CONST_MB (address field)  (java.util.Vector.<init>()V)

   <(ID: 240) ASSIGN (reference) 
      <(ID: 239) FIELD_REF (reference) 
         <(ID: 230) IDENTITY (reference)  (ref count: 13)
            <(ID: 252) LOCAL (reference)   0>
         <(ID: 238) CONST_FIELD_OFFSET (NONE)  (36)
      <(ID: 232) IDENTITY (reference)  (ref count: 3)

   <(ID: 242) IDENTITY (reference)  (ref count: 2)
      <(ID: 251) NEW_OBJECT (reference) 
         <(ID: 241) CONST_CB (address field)  (com.sun.mep.bench.Chess.Knight)

   <(ID: 250) INVOKE (v) 
      <(ID: 249) PARAMETER (reference) 
         <(ID: 242) IDENTITY (reference)  (ref count: 2)
         <(ID: 248) PARAMETER (reference) 
            <(ID: 230) IDENTITY (reference)  (ref count: 13)
            <(ID: 247) PARAMETER (int) 
               <(ID: 229) CONST_JAVA_NUMERIC32 (int)  (ref count: 2) (7)
               <(ID: 246) PARAMETER (int) 
                  <(ID: 243) CONST_JAVA_NUMERIC32 (int)  (1)
                  <(ID: 245) NULL_PARAMETER (NONE) 
      <(ID: 244) CONST_MB (address field)  (com.sun.mep.bench.Chess.Knight.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 254) IDENTITY (reference)  (ref count: 2)
      <(ID: 263) NEW_OBJECT (reference) 
         <(ID: 253) CONST_CB (address field)  (com.sun.mep.bench.Chess.Knight)

   <(ID: 262) INVOKE (v) 
      <(ID: 261) PARAMETER (reference) 
         <(ID: 254) IDENTITY (reference)  (ref count: 2)
         <(ID: 260) PARAMETER (reference) 
            <(ID: 230) IDENTITY (reference)  (ref count: 13)
            <(ID: 259) PARAMETER (int) 
               <(ID: 229) CONST_JAVA_NUMERIC32 (int)  (ref count: 2)
               <(ID: 258) PARAMETER (int) 
                  <(ID: 255) CONST_JAVA_NUMERIC32 (int)  (6)
                  <(ID: 257) NULL_PARAMETER (NONE) 
      <(ID: 256) CONST_MB (address field)  (com.sun.mep.bench.Chess.Knight.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 266) IDENTITY (reference)  (ref count: 3)
      <(ID: 271) NEW_OBJECT (reference) 
         <(ID: 265) CONST_CB (address field)  (java.util.Vector)

   <(ID: 270) INVOKE (v) 
      <(ID: 269) PARAMETER (reference) 
         <(ID: 266) IDENTITY (reference)  (ref count: 3)
         <(ID: 268) NULL_PARAMETER (NONE) 
      <(ID: 267) CONST_MB (address field)  (java.util.Vector.<init>()V)

   <(ID: 274) ASSIGN (reference) 
      <(ID: 273) FIELD_REF (reference) 
         <(ID: 230) IDENTITY (reference)  (ref count: 13)
         <(ID: 272) CONST_FIELD_OFFSET (NONE)  (38)
      <(ID: 266) IDENTITY (reference)  (ref count: 3)

   <(ID: 276) IDENTITY (reference)  (ref count: 2)
      <(ID: 285) NEW_OBJECT (reference) 
         <(ID: 275) CONST_CB (address field)  (com.sun.mep.bench.Chess.Bishop)

   <(ID: 284) INVOKE (v) 
      <(ID: 283) PARAMETER (reference) 
         <(ID: 276) IDENTITY (reference)  (ref count: 2)
         <(ID: 282) PARAMETER (reference) 
            <(ID: 230) IDENTITY (reference)  (ref count: 13)
            <(ID: 281) PARAMETER (int) 
               <(ID: 264) CONST_JAVA_NUMERIC32 (int)  (ref count: 2) (8)
               <(ID: 280) PARAMETER (int) 
                  <(ID: 277) CONST_JAVA_NUMERIC32 (int)  (2)
                  <(ID: 279) NULL_PARAMETER (NONE) 
      <(ID: 278) CONST_MB (address field)  (com.sun.mep.bench.Chess.Bishop.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 287) IDENTITY (reference)  (ref count: 2)
      <(ID: 296) NEW_OBJECT (reference) 
         <(ID: 286) CONST_CB (address field)  (com.sun.mep.bench.Chess.Bishop)

   <(ID: 295) INVOKE (v) 
      <(ID: 294) PARAMETER (reference) 
         <(ID: 287) IDENTITY (reference)  (ref count: 2)
         <(ID: 293) PARAMETER (reference) 
            <(ID: 230) IDENTITY (reference)  (ref count: 13)
            <(ID: 292) PARAMETER (int) 
               <(ID: 264) CONST_JAVA_NUMERIC32 (int)  (ref count: 2)
               <(ID: 291) PARAMETER (int) 
                  <(ID: 288) CONST_JAVA_NUMERIC32 (int)  (5)
                  <(ID: 290) NULL_PARAMETER (NONE) 
      <(ID: 289) CONST_MB (address field)  (com.sun.mep.bench.Chess.Bishop.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 299) IDENTITY (reference)  (ref count: 3)
      <(ID: 304) NEW_OBJECT (reference) 
         <(ID: 298) CONST_CB (address field)  (java.util.Vector)

   <(ID: 303) INVOKE (v) 
      <(ID: 302) PARAMETER (reference) 
         <(ID: 299) IDENTITY (reference)  (ref count: 3)
         <(ID: 301) NULL_PARAMETER (NONE) 
      <(ID: 300) CONST_MB (address field)  (java.util.Vector.<init>()V)

   <(ID: 307) ASSIGN (reference) 
      <(ID: 306) FIELD_REF (reference) 
         <(ID: 230) IDENTITY (reference)  (ref count: 13)
         <(ID: 305) CONST_FIELD_OFFSET (NONE)  (34)
      <(ID: 299) IDENTITY (reference)  (ref count: 3)

   <(ID: 309) IDENTITY (reference)  (ref count: 2)
      <(ID: 318) NEW_OBJECT (reference) 
         <(ID: 308) CONST_CB (address field)  (com.sun.mep.bench.Chess.Rook)

   <(ID: 317) INVOKE (v) 
      <(ID: 316) PARAMETER (reference) 
         <(ID: 309) IDENTITY (reference)  (ref count: 2)
         <(ID: 315) PARAMETER (reference) 
            <(ID: 230) IDENTITY (reference)  (ref count: 13)
            <(ID: 314) PARAMETER (int) 
               <(ID: 297) CONST_JAVA_NUMERIC32 (int)  (ref count: 2) (9)
               <(ID: 313) PARAMETER (int) 
                  <(ID: 310) CONST_JAVA_NUMERIC32 (int)  (0)
                  <(ID: 312) NULL_PARAMETER (NONE) 
      <(ID: 311) CONST_MB (address field)  (com.sun.mep.bench.Chess.Rook.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 320) IDENTITY (reference)  (ref count: 2)
      <(ID: 329) NEW_OBJECT (reference) 
         <(ID: 319) CONST_CB (address field)  (com.sun.mep.bench.Chess.Rook)

   <(ID: 328) INVOKE (v) 
      <(ID: 327) PARAMETER (reference) 
         <(ID: 320) IDENTITY (reference)  (ref count: 2)
         <(ID: 326) PARAMETER (reference) 
            <(ID: 230) IDENTITY (reference)  (ref count: 13)
            <(ID: 325) PARAMETER (int) 
               <(ID: 297) CONST_JAVA_NUMERIC32 (int)  (ref count: 2)
               <(ID: 324) PARAMETER (int) 
                  <(ID: 321) CONST_JAVA_NUMERIC32 (int)  (7)
                  <(ID: 323) NULL_PARAMETER (NONE) 
      <(ID: 322) CONST_MB (address field)  (com.sun.mep.bench.Chess.Rook.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 332) IDENTITY (reference)  (ref count: 3)
      <(ID: 337) NEW_OBJECT (reference) 
         <(ID: 331) CONST_CB (address field)  (java.util.Vector)

   <(ID: 336) INVOKE (v) 
      <(ID: 335) PARAMETER (reference) 
         <(ID: 332) IDENTITY (reference)  (ref count: 3)
         <(ID: 334) NULL_PARAMETER (NONE) 
      <(ID: 333) CONST_MB (address field)  (java.util.Vector.<init>()V)

   <(ID: 340) ASSIGN (reference) 
      <(ID: 339) FIELD_REF (reference) 
         <(ID: 230) IDENTITY (reference)  (ref count: 13)
         <(ID: 338) CONST_FIELD_OFFSET (NONE)  (40)
      <(ID: 332) IDENTITY (reference)  (ref count: 3)

   <(ID: 342) IDENTITY (reference)  (ref count: 2)
      <(ID: 351) NEW_OBJECT (reference) 
         <(ID: 341) CONST_CB (address field)  (com.sun.mep.bench.Chess.Queen)

   <(ID: 350) INVOKE (v) 
      <(ID: 349) PARAMETER (reference) 
         <(ID: 342) IDENTITY (reference)  (ref count: 2)
         <(ID: 348) PARAMETER (reference) 
            <(ID: 230) IDENTITY (reference)  (ref count: 13)
            <(ID: 347) PARAMETER (int) 
               <(ID: 330) CONST_JAVA_NUMERIC32 (int)  (10)
               <(ID: 346) PARAMETER (int) 
                  <(ID: 343) CONST_JAVA_NUMERIC32 (int)  (3)
                  <(ID: 345) NULL_PARAMETER (NONE) 
      <(ID: 344) CONST_MB (address field)  (com.sun.mep.bench.Chess.Queen.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 354) IDENTITY (reference)  (ref count: 3)
      <(ID: 363) NEW_OBJECT (reference) 
         <(ID: 353) CONST_CB (address field)  (com.sun.mep.bench.Chess.King)

   <(ID: 362) INVOKE (v) 
      <(ID: 361) PARAMETER (reference) 
         <(ID: 354) IDENTITY (reference)  (ref count: 3)
         <(ID: 360) PARAMETER (reference) 
            <(ID: 230) IDENTITY (reference)  (ref count: 13)
            <(ID: 359) PARAMETER (int) 
               <(ID: 352) CONST_JAVA_NUMERIC32 (int)  (11)
               <(ID: 358) PARAMETER (int) 
                  <(ID: 355) CONST_JAVA_NUMERIC32 (int)  (4)
                  <(ID: 357) NULL_PARAMETER (NONE) 
      <(ID: 356) CONST_MB (address field)  (com.sun.mep.bench.Chess.King.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V)

   <(ID: 366) ASSIGN (reference) 
      <(ID: 365) FIELD_REF (reference) 
         <(ID: 230) IDENTITY (reference)  (ref count: 13)
         <(ID: 364) CONST_FIELD_OFFSET (NONE)  (30)
      <(ID: 354) IDENTITY (reference)  (ref count: 3)

   <(ID: 367) RETURN (v) 


NUM BARRIER BYTES = 192
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 8
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 2492
ESTIMATED BUFFER SIZE = 2860
CODE BUFFER ADDRESS = 0x2bcc49bc
PC MAP TABLE ADDRESS = 0x2bcc49c4
GC CHECK PCS ADDRESS = 0x2bcc49e4
CODE ENTRY ADDRESS = 0x2bcc4a28
          		@ Method prologue
0x2bcc4a28	0:	addiu	a1, JSP, 72	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc4a2c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc4a30	8:	sltu	t7, a1, CHUNKEND
0x2bcc4a34	12:	bne	t7, zero, PC=0x2bcc4a28	@ goto .skip
0x2bcc4a38	16:	nop
0x2bcc4a3c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc4a40	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc4a34) >>>>>>>>
0x2bcc4a34	12:	bne	t7, zero, PC=0x2bcc4a44	@ goto .skip
0x2bcc4a38	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc4a44) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc4a44	28:	sw	JFP, 16(JSP)	@ Store curr JFP into new frame
0x2bcc4a48	32:	addiu	JFP, JSP, 16	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc4a4c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc4a50	40:	addiu	a3, zero, 0
0x2bcc4a54	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc4a58	48:	addiu	a3, zero, -1
0x2bcc4a5c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc4a60	56:	move	a0, EE
0x2bcc4a64	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc4a68	64:	lui	t9, hi16(0x65)
0x2bcc4a6c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc4a70	72:	jalr	t9
0x2bcc4a74	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc4a78	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc4a7c	84:	nop
0x2bcc4a80	88:	nop
0x2bcc4a84	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(21)
0x2bcc4a88	96:	lw	s5, -20(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
0x2bcc4a8c	100:	sw	zero, -12(JFP)	@ Java local cell # 2
			@ Outgoing local(2) reg(20): in wrong register
0x2bcc4a90	104:	move	s4, zero
			@ Outgoing local(0) reg(21): in correct register
0x2bcc4a94	108:	b	PC=0x2bcc4a94	@ branch to block L1
0x2bcc4a98	112:	nop
			@ Initial Temp REF set is 
	L2:	116:	@ Patchable GC Check point
0x2bcc4a9c	116:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcc4a9c	116:	nop
0x2bcc4aa0	120:	nop
          		@ Captured a stackmap here.
	L2:	124:	@ entry point when locals need to be loaded
			@ Preloading incoming local(2) reg(20)
0x2bcc4aa4	124:	lw	s4, -12(JFP)	@ Java local cell # 2
			@ Preloading incoming local(0) reg(21)
0x2bcc4aa8	128:	lw	s5, -20(JFP)	@ Java local cell # 0
	L2:	132:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=5 compiledPc=124
          		@ Do getfield:
0x2bcc4aac	132:	lw	s7, 164(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc4ab0	136:	lw	s6, 8(s7)	@ arraylength
          		@ deferred comparison: 
0x2bcc4ab4	140:	sltu	t7, s4, s6
0x2bcc4ab8	144:	bne	t7, zero, PC=0x2bcc4ab4	@ br .skip
0x2bcc4abc	148:	nop
0x2bcc4ac0	152:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcc4ac4	156:	nop
		.skip
--->Fixed instruction at 144(0x2bcc4ab8) to reference 160
          		@ Do store(arrayObj, index) (elem type=B):
0x2bcc4ac8	160:	addiu	s6, zero, 99	@ const 99
0x2bcc4acc	164:	addu	ra, s7, s4
0x2bcc4ad0	168:	sb	s6, 12(ra)
0x2bcc4ad4	172:	addiu	s4, s4, 1
0x2bcc4ad8	176:	sw	s4, -12(JFP)	@ Java local cell # 2
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
			@ Initial Temp REF set is 
	L1:	180:	@ entry point for branches
			@ Binding Incoming Local(2) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 108(0x2bcc4a94) to reference 180
          		@ MAP_PC idepth=0 javaPc=16 compiledPc=180
			@ Outgoing local(2) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcc4adc	180:	sltiu	t7, s4, 64
0x2bcc4ae0	184:	bne	t7, zero, PC=0x2bcc4a9c	@ branch to block L2
0x2bcc4ae4	188:	nop
0x2bcc4adc	180:	sltiu	t7, s4, 64
0x2bcc4ae0	184:	bne	t7, zero, PC=0x2bcc4aac	@ branch to block L2, skip GC
0x2bcc4ae4	188:	nop
0x2bcc4ae8	192:	lw	a1, 0(CP)	@ cb java.util.Vector
          		@ Do new:
          		@ cb: java.util.Vector
0x2bcc4aec	196:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4af0	200:	nop
          		@ Captured a stackmap here.
0x2bcc4af4	204:	sw	v0, 0(JSP)
0x2bcc4af8	208:	lw	a0, 0(CP)	@ mb java.util.Vector.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc4afc	212:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc4b00	216:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc4b04	220:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4b08	224:	jalr	s7
0x2bcc4b0c	228:	nop
          		@ Captured a stackmap here.
0x2bcc4b10	232:	lw	s6, -20(JFP)	@ Java local cell # 0
          		@ Do putfield:
0x2bcc4b14	236:	addiu	s7, s6, 124	@ fieldAddr = obj + fieldOffset;
0x2bcc4b18	240:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcc4b1c	244:	sw	s5, 0(s7)	@ putfield(fieldAddr, valueObj);
0x2bcc4b20	248:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc4b24	252:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc4b28	256:	srl	t7, s7, 9	@ mark card table
0x2bcc4b2c	260:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc4b30	264:	sb	ra, 0(t7)
0x2bcc4b34	268:	sw	zero, -16(JFP)	@ Java local cell # 1
0x2bcc4b38	272:	sw	zero, -8(JFP)	@ Java local cell # 3
			@ Outgoing local(3) reg(20): not in register
0x2bcc4b3c	276:	lw	s4, -8(JFP)	@ Java local cell # 3
			@ Outgoing local(1) reg(21): not in register
0x2bcc4b40	280:	lw	s5, -16(JFP)	@ Java local cell # 1
			@ Outgoing local(0) reg(22): in correct register
0x2bcc4b44	284:	b	PC=0x2bcc4b44	@ branch to block L3
0x2bcc4b48	288:	nop
			@ Initial Temp REF set is 
	L4:	292:	@ Patchable GC Check point
0x2bcc4b4c	292:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcc4b4c	292:	nop
0x2bcc4b50	296:	nop
          		@ Captured a stackmap here.
	L4:	300:	@ entry point when locals need to be loaded
			@ Preloading incoming local(3) reg(20)
0x2bcc4b54	300:	lw	s4, -8(JFP)	@ Java local cell # 3
			@ Preloading incoming local(1) reg(21)
0x2bcc4b58	304:	lw	s5, -16(JFP)	@ Java local cell # 1
	L4:	308:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=40 compiledPc=300
0x2bcc4b5c	308:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Pawn
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Pawn
0x2bcc4b60	312:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4b64	316:	nop
          		@ Captured a stackmap here.
0x2bcc4b68	320:	sw	v0, 0(JSP)
0x2bcc4b6c	324:	lw	s6, -20(JFP)	@ Java local cell # 0
0x2bcc4b70	328:	sw	s6, 4(JSP)
0x2bcc4b74	332:	sw	s5, 8(JSP)
0x2bcc4b78	336:	addiu	s7, s4, 48
0x2bcc4b7c	340:	sw	s7, 12(JSP)
0x2bcc4b80	344:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Pawn.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc4b84	348:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc4b88	352:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4b8c	356:	jalr	s7
0x2bcc4b90	360:	nop
          		@ Captured a stackmap here.
0x2bcc4b94	364:	lw	s7, -8(JFP)	@ Java local cell # 3
0x2bcc4b98	368:	addiu	s4, s7, 1
0x2bcc4b9c	372:	sw	s4, -8(JFP)	@ Java local cell # 3
			@ Outgoing local(3) reg(20): in correct register
			@ Outgoing local(1) reg(21): not in register
0x2bcc4ba0	376:	lw	s5, -16(JFP)	@ Java local cell # 1
			@ Outgoing local(0) reg(22): not in register
0x2bcc4ba4	380:	lw	s6, -20(JFP)	@ Java local cell # 0
			@ Initial Temp REF set is 
	L3:	384:	@ entry point for branches
			@ Binding Incoming Local(3) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
			@ Binding Incoming Local(0) to reg(22)
--->Fixed instruction at 284(0x2bcc4b44) to reference 384
          		@ MAP_PC idepth=0 javaPc=57 compiledPc=384
			@ Outgoing local(3) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcc4ba8	384:	sltiu	t7, s4, 8
0x2bcc4bac	388:	bne	t7, zero, PC=0x2bcc4b4c	@ branch to block L4
0x2bcc4bb0	392:	nop
0x2bcc4ba8	384:	sltiu	t7, s4, 8
0x2bcc4bac	388:	bne	t7, zero, PC=0x2bcc4b5c	@ branch to block L4, skip GC
0x2bcc4bb0	392:	nop
0x2bcc4bb4	396:	lw	a1, 0(CP)	@ cb java.util.Vector
          		@ Do new:
          		@ cb: java.util.Vector
0x2bcc4bb8	400:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4bbc	404:	nop
          		@ Captured a stackmap here.
0x2bcc4bc0	408:	sw	v0, 0(JSP)
0x2bcc4bc4	412:	lw	a0, 0(CP)	@ mb java.util.Vector.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc4bc8	416:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc4bcc	420:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc4bd0	424:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4bd4	428:	jalr	s7
0x2bcc4bd8	432:	nop
          		@ Captured a stackmap here.
0x2bcc4bdc	436:	lw	s6, -20(JFP)	@ Java local cell # 0
          		@ Do putfield:
0x2bcc4be0	440:	addiu	s7, s6, 140	@ fieldAddr = obj + fieldOffset;
0x2bcc4be4	444:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcc4be8	448:	sw	s5, 0(s7)	@ putfield(fieldAddr, valueObj);
0x2bcc4bec	452:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc4bf0	456:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc4bf4	460:	srl	t7, s7, 9	@ mark card table
0x2bcc4bf8	464:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc4bfc	468:	sb	ra, 0(t7)
0x2bcc4c00	472:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Knight
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Knight
0x2bcc4c04	476:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4c08	480:	nop
          		@ Captured a stackmap here.
0x2bcc4c0c	484:	sw	v0, 0(JSP)
0x2bcc4c10	488:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc4c14	492:	sw	s7, 4(JSP)
0x2bcc4c18	496:	addiu	s6, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc4c1c	500:	sw	s6, 8(JSP)
0x2bcc4c20	504:	addiu	s5, zero, 57	@ const 57
0x2bcc4c24	508:	sw	s5, 12(JSP)
0x2bcc4c28	512:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Knight.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc4c2c	516:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc4c30	520:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4c34	524:	jalr	s7
0x2bcc4c38	528:	nop
          		@ Captured a stackmap here.
0x2bcc4c3c	532:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Knight
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Knight
0x2bcc4c40	536:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4c44	540:	nop
          		@ Captured a stackmap here.
0x2bcc4c48	544:	sw	v0, 0(JSP)
0x2bcc4c4c	548:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc4c50	552:	sw	s7, 4(JSP)
0x2bcc4c54	556:	addiu	s6, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc4c58	560:	sw	s6, 8(JSP)
0x2bcc4c5c	564:	addiu	s5, zero, 62	@ const 62
0x2bcc4c60	568:	sw	s5, 12(JSP)
0x2bcc4c64	572:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Knight.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc4c68	576:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc4c6c	580:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4c70	584:	jalr	s7
0x2bcc4c74	588:	nop
          		@ Captured a stackmap here.
0x2bcc4c78	592:	lw	a1, 0(CP)	@ cb java.util.Vector
          		@ Do new:
          		@ cb: java.util.Vector
0x2bcc4c7c	596:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4c80	600:	nop
          		@ Captured a stackmap here.
0x2bcc4c84	604:	sw	v0, 0(JSP)
0x2bcc4c88	608:	lw	a0, 0(CP)	@ mb java.util.Vector.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc4c8c	612:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc4c90	616:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc4c94	620:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4c98	624:	jalr	s7
0x2bcc4c9c	628:	nop
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcc4ca0	632:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc4ca4	636:	addiu	s6, s7, 148	@ fieldAddr = obj + fieldOffset;
0x2bcc4ca8	640:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcc4cac	644:	sw	s5, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcc4cb0	648:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc4cb4	652:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc4cb8	656:	srl	t7, s6, 9	@ mark card table
0x2bcc4cbc	660:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc4cc0	664:	sb	ra, 0(t7)
0x2bcc4cc4	668:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Bishop
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Bishop
0x2bcc4cc8	672:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4ccc	676:	nop
          		@ Captured a stackmap here.
0x2bcc4cd0	680:	sw	v0, 0(JSP)
0x2bcc4cd4	684:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc4cd8	688:	sw	s7, 4(JSP)
0x2bcc4cdc	692:	addiu	s6, zero, 2	@ const 2
0x2bcc4ce0	696:	sw	s6, 8(JSP)
0x2bcc4ce4	700:	addiu	s5, zero, 58	@ const 58
0x2bcc4ce8	704:	sw	s5, 12(JSP)
0x2bcc4cec	708:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Bishop.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc4cf0	712:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc4cf4	716:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4cf8	720:	jalr	s7
0x2bcc4cfc	724:	nop
          		@ Captured a stackmap here.
0x2bcc4d00	728:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Bishop
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Bishop
0x2bcc4d04	732:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4d08	736:	nop
          		@ Captured a stackmap here.
0x2bcc4d0c	740:	sw	v0, 0(JSP)
0x2bcc4d10	744:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc4d14	748:	sw	s7, 4(JSP)
0x2bcc4d18	752:	addiu	s6, zero, 2	@ const 2
0x2bcc4d1c	756:	sw	s6, 8(JSP)
0x2bcc4d20	760:	addiu	s5, zero, 61	@ const 61
0x2bcc4d24	764:	sw	s5, 12(JSP)
0x2bcc4d28	768:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Bishop.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc4d2c	772:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc4d30	776:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4d34	780:	jalr	s7
0x2bcc4d38	784:	nop
          		@ Captured a stackmap here.
0x2bcc4d3c	788:	lw	a1, 0(CP)	@ cb java.util.Vector
          		@ Do new:
          		@ cb: java.util.Vector
0x2bcc4d40	792:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4d44	796:	nop
          		@ Captured a stackmap here.
0x2bcc4d48	800:	sw	v0, 0(JSP)
0x2bcc4d4c	804:	lw	a0, 0(CP)	@ mb java.util.Vector.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc4d50	808:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc4d54	812:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc4d58	816:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4d5c	820:	jalr	s7
0x2bcc4d60	824:	nop
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcc4d64	828:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc4d68	832:	addiu	s6, s7, 132	@ fieldAddr = obj + fieldOffset;
0x2bcc4d6c	836:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcc4d70	840:	sw	s5, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcc4d74	844:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc4d78	848:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc4d7c	852:	srl	t7, s6, 9	@ mark card table
0x2bcc4d80	856:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc4d84	860:	sb	ra, 0(t7)
0x2bcc4d88	864:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Rook
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Rook
0x2bcc4d8c	868:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4d90	872:	nop
          		@ Captured a stackmap here.
0x2bcc4d94	876:	sw	v0, 0(JSP)
0x2bcc4d98	880:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc4d9c	884:	sw	s7, 4(JSP)
0x2bcc4da0	888:	addiu	s6, zero, 3	@ const 3
0x2bcc4da4	892:	sw	s6, 8(JSP)
0x2bcc4da8	896:	addiu	s5, zero, 56	@ const 56
0x2bcc4dac	900:	sw	s5, 12(JSP)
0x2bcc4db0	904:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Rook.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc4db4	908:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc4db8	912:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4dbc	916:	jalr	s7
0x2bcc4dc0	920:	nop
          		@ Captured a stackmap here.
0x2bcc4dc4	924:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Rook
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Rook
0x2bcc4dc8	928:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4dcc	932:	nop
          		@ Captured a stackmap here.
0x2bcc4dd0	936:	sw	v0, 0(JSP)
0x2bcc4dd4	940:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc4dd8	944:	sw	s7, 4(JSP)
0x2bcc4ddc	948:	addiu	s6, zero, 3	@ const 3
0x2bcc4de0	952:	sw	s6, 8(JSP)
0x2bcc4de4	956:	addiu	s5, zero, 63	@ const 63
0x2bcc4de8	960:	sw	s5, 12(JSP)
0x2bcc4dec	964:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Rook.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc4df0	968:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc4df4	972:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4df8	976:	jalr	s7
0x2bcc4dfc	980:	nop
          		@ Captured a stackmap here.
0x2bcc4e00	984:	lw	a1, 0(CP)	@ cb java.util.Vector
          		@ Do new:
          		@ cb: java.util.Vector
0x2bcc4e04	988:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4e08	992:	nop
          		@ Captured a stackmap here.
0x2bcc4e0c	996:	sw	v0, 0(JSP)
0x2bcc4e10	1000:	lw	a0, 0(CP)	@ mb java.util.Vector.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc4e14	1004:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc4e18	1008:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc4e1c	1012:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4e20	1016:	jalr	s7
0x2bcc4e24	1020:	nop
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcc4e28	1024:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc4e2c	1028:	addiu	s6, s7, 156	@ fieldAddr = obj + fieldOffset;
0x2bcc4e30	1032:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcc4e34	1036:	sw	s5, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcc4e38	1040:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc4e3c	1044:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc4e40	1048:	srl	t7, s6, 9	@ mark card table
0x2bcc4e44	1052:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc4e48	1056:	sb	ra, 0(t7)
0x2bcc4e4c	1060:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Queen
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Queen
0x2bcc4e50	1064:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4e54	1068:	nop
          		@ Captured a stackmap here.
0x2bcc4e58	1072:	sw	v0, 0(JSP)
0x2bcc4e5c	1076:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc4e60	1080:	sw	s7, 4(JSP)
0x2bcc4e64	1084:	addiu	s6, zero, 4	@ const 4
0x2bcc4e68	1088:	sw	s6, 8(JSP)
0x2bcc4e6c	1092:	addiu	s5, zero, 59	@ const 59
0x2bcc4e70	1096:	sw	s5, 12(JSP)
0x2bcc4e74	1100:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Queen.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc4e78	1104:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc4e7c	1108:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4e80	1112:	jalr	s7
0x2bcc4e84	1116:	nop
          		@ Captured a stackmap here.
0x2bcc4e88	1120:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.King
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.King
0x2bcc4e8c	1124:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4e90	1128:	nop
          		@ Captured a stackmap here.
0x2bcc4e94	1132:	sw	v0, 0(JSP)
0x2bcc4e98	1136:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc4e9c	1140:	sw	s7, 4(JSP)
0x2bcc4ea0	1144:	addiu	s6, zero, 5	@ const 5
0x2bcc4ea4	1148:	sw	s6, 8(JSP)
0x2bcc4ea8	1152:	addiu	s5, zero, 60	@ const 60
0x2bcc4eac	1156:	sw	s5, 12(JSP)
0x2bcc4eb0	1160:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.King.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc4eb4	1164:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc4eb8	1168:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc4ebc	1172:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4ec0	1176:	jalr	s7
0x2bcc4ec4	1180:	nop
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcc4ec8	1184:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc4ecc	1188:	addiu	s6, s7, 116	@ fieldAddr = obj + fieldOffset;
0x2bcc4ed0	1192:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcc4ed4	1196:	sw	s5, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcc4ed8	1200:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc4edc	1204:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc4ee0	1208:	srl	t7, s6, 9	@ mark card table
0x2bcc4ee4	1212:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc4ee8	1216:	sb	ra, 0(t7)
0x2bcc4eec	1220:	lw	a1, 0(CP)	@ cb java.util.Vector
          		@ Do new:
          		@ cb: java.util.Vector
0x2bcc4ef0	1224:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4ef4	1228:	nop
          		@ Captured a stackmap here.
0x2bcc4ef8	1232:	sw	v0, 0(JSP)
0x2bcc4efc	1236:	lw	a0, 0(CP)	@ mb java.util.Vector.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc4f00	1240:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc4f04	1244:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc4f08	1248:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4f0c	1252:	jalr	s7
0x2bcc4f10	1256:	nop
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcc4f14	1260:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc4f18	1264:	addiu	s6, s7, 128	@ fieldAddr = obj + fieldOffset;
0x2bcc4f1c	1268:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcc4f20	1272:	sw	s5, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcc4f24	1276:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc4f28	1280:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc4f2c	1284:	srl	t7, s6, 9	@ mark card table
0x2bcc4f30	1288:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc4f34	1292:	sb	ra, 0(t7)
0x2bcc4f38	1296:	addiu	s5, zero, 6	@ const 6
0x2bcc4f3c	1300:	sw	s5, -16(JFP)	@ Java local cell # 1
0x2bcc4f40	1304:	sw	zero, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(4) reg(20): not in register
0x2bcc4f44	1308:	lw	s4, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(1) reg(21): in correct register
			@ Outgoing local(0) reg(23): in correct register
0x2bcc4f48	1312:	b	PC=0x2bcc4f48	@ branch to block L5
0x2bcc4f4c	1316:	nop
			@ Initial Temp REF set is 
	L6:	1320:	@ Patchable GC Check point
0x2bcc4f50	1320:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcc4f50	1320:	nop
0x2bcc4f54	1324:	nop
          		@ Captured a stackmap here.
	L6:	1328:	@ entry point when locals need to be loaded
			@ Preloading incoming local(4) reg(20)
0x2bcc4f58	1328:	lw	s4, -4(JFP)	@ Java local cell # 4
			@ Preloading incoming local(1) reg(21)
0x2bcc4f5c	1332:	lw	s5, -16(JFP)	@ Java local cell # 1
	L6:	1336:	@ entry point for branches
          		@ MAP_PC idepth=0 javaPc=236 compiledPc=1328
0x2bcc4f60	1336:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Pawn
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Pawn
0x2bcc4f64	1340:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4f68	1344:	nop
          		@ Captured a stackmap here.
0x2bcc4f6c	1348:	sw	v0, 0(JSP)
0x2bcc4f70	1352:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc4f74	1356:	sw	s7, 4(JSP)
0x2bcc4f78	1360:	sw	s5, 8(JSP)
0x2bcc4f7c	1364:	addiu	s6, s4, 8
0x2bcc4f80	1368:	sw	s6, 12(JSP)
0x2bcc4f84	1372:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Pawn.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc4f88	1376:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc4f8c	1380:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4f90	1384:	jalr	s7
0x2bcc4f94	1388:	nop
          		@ Captured a stackmap here.
0x2bcc4f98	1392:	lw	s7, -4(JFP)	@ Java local cell # 4
0x2bcc4f9c	1396:	addiu	s4, s7, 1
0x2bcc4fa0	1400:	sw	s4, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(4) reg(20): in correct register
			@ Outgoing local(1) reg(21): not in register
0x2bcc4fa4	1404:	lw	s5, -16(JFP)	@ Java local cell # 1
			@ Outgoing local(0) reg(23): not in register
0x2bcc4fa8	1408:	lw	s7, -20(JFP)	@ Java local cell # 0
			@ Initial Temp REF set is 
	L5:	1412:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(20)
			@ Binding Incoming Local(1) to reg(21)
			@ Binding Incoming Local(0) to reg(23)
--->Fixed instruction at 1312(0x2bcc4f48) to reference 1412
          		@ MAP_PC idepth=0 javaPc=254 compiledPc=1412
			@ Outgoing local(4) reg(20): in correct register
			@ Outgoing local(1) reg(21): in correct register
          		@ deferred comparison: 
          		@ Patchable backwards branch:
0x2bcc4fac	1412:	sltiu	t7, s4, 8
0x2bcc4fb0	1416:	bne	t7, zero, PC=0x2bcc4f50	@ branch to block L6
0x2bcc4fb4	1420:	nop
0x2bcc4fac	1412:	sltiu	t7, s4, 8
0x2bcc4fb0	1416:	bne	t7, zero, PC=0x2bcc4f60	@ branch to block L6, skip GC
0x2bcc4fb4	1420:	nop
0x2bcc4fb8	1424:	lw	a1, 0(CP)	@ cb java.util.Vector
          		@ Do new:
          		@ cb: java.util.Vector
0x2bcc4fbc	1428:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc4fc0	1432:	nop
          		@ Captured a stackmap here.
0x2bcc4fc4	1436:	sw	v0, 0(JSP)
0x2bcc4fc8	1440:	lw	a0, 0(CP)	@ mb java.util.Vector.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc4fcc	1444:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc4fd0	1448:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc4fd4	1452:	lw	s7, 0(a0)	@ call method through mb
0x2bcc4fd8	1456:	jalr	s7
0x2bcc4fdc	1460:	nop
          		@ Captured a stackmap here.
0x2bcc4fe0	1464:	lw	s7, -20(JFP)	@ Java local cell # 0
          		@ Do putfield:
0x2bcc4fe4	1468:	addiu	s6, s7, 144	@ fieldAddr = obj + fieldOffset;
0x2bcc4fe8	1472:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcc4fec	1476:	sw	s5, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcc4ff0	1480:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc4ff4	1484:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc4ff8	1488:	srl	t7, s6, 9	@ mark card table
0x2bcc4ffc	1492:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc5000	1496:	sb	ra, 0(t7)
0x2bcc5004	1500:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Knight
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Knight
0x2bcc5008	1504:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc500c	1508:	nop
          		@ Captured a stackmap here.
0x2bcc5010	1512:	sw	v0, 0(JSP)
0x2bcc5014	1516:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc5018	1520:	sw	s7, 4(JSP)
0x2bcc501c	1524:	addiu	s6, zero, 7	@ const 7
0x2bcc5020	1528:	sw	s6, 8(JSP)
0x2bcc5024	1532:	addiu	s5, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc5028	1536:	sw	s5, 12(JSP)
0x2bcc502c	1540:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Knight.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc5030	1544:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc5034	1548:	lw	s7, 0(a0)	@ call method through mb
0x2bcc5038	1552:	jalr	s7
0x2bcc503c	1556:	nop
          		@ Captured a stackmap here.
0x2bcc5040	1560:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Knight
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Knight
0x2bcc5044	1564:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc5048	1568:	nop
          		@ Captured a stackmap here.
0x2bcc504c	1572:	sw	v0, 0(JSP)
0x2bcc5050	1576:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc5054	1580:	sw	s7, 4(JSP)
0x2bcc5058	1584:	addiu	s6, zero, 7	@ const 7
0x2bcc505c	1588:	sw	s6, 8(JSP)
0x2bcc5060	1592:	addiu	s5, zero, 6	@ const 6
0x2bcc5064	1596:	sw	s5, 12(JSP)
0x2bcc5068	1600:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Knight.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc506c	1604:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc5070	1608:	lw	s7, 0(a0)	@ call method through mb
0x2bcc5074	1612:	jalr	s7
0x2bcc5078	1616:	nop
          		@ Captured a stackmap here.
0x2bcc507c	1620:	lw	a1, 0(CP)	@ cb java.util.Vector
          		@ Do new:
          		@ cb: java.util.Vector
0x2bcc5080	1624:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc5084	1628:	nop
          		@ Captured a stackmap here.
0x2bcc5088	1632:	sw	v0, 0(JSP)
0x2bcc508c	1636:	lw	a0, 0(CP)	@ mb java.util.Vector.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc5090	1640:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc5094	1644:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc5098	1648:	lw	s7, 0(a0)	@ call method through mb
0x2bcc509c	1652:	jalr	s7
0x2bcc50a0	1656:	nop
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcc50a4	1660:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc50a8	1664:	addiu	s6, s7, 152	@ fieldAddr = obj + fieldOffset;
0x2bcc50ac	1668:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcc50b0	1672:	sw	s5, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcc50b4	1676:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc50b8	1680:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc50bc	1684:	srl	t7, s6, 9	@ mark card table
0x2bcc50c0	1688:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc50c4	1692:	sb	ra, 0(t7)
0x2bcc50c8	1696:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Bishop
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Bishop
0x2bcc50cc	1700:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc50d0	1704:	nop
          		@ Captured a stackmap here.
0x2bcc50d4	1708:	sw	v0, 0(JSP)
0x2bcc50d8	1712:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc50dc	1716:	sw	s7, 4(JSP)
0x2bcc50e0	1720:	addiu	s6, zero, 8	@ const 8
0x2bcc50e4	1724:	sw	s6, 8(JSP)
0x2bcc50e8	1728:	addiu	s5, zero, 2	@ const 2
0x2bcc50ec	1732:	sw	s5, 12(JSP)
0x2bcc50f0	1736:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Bishop.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc50f4	1740:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc50f8	1744:	lw	s7, 0(a0)	@ call method through mb
0x2bcc50fc	1748:	jalr	s7
0x2bcc5100	1752:	nop
          		@ Captured a stackmap here.
0x2bcc5104	1756:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Bishop
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Bishop
0x2bcc5108	1760:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc510c	1764:	nop
          		@ Captured a stackmap here.
0x2bcc5110	1768:	sw	v0, 0(JSP)
0x2bcc5114	1772:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc5118	1776:	sw	s7, 4(JSP)
0x2bcc511c	1780:	addiu	s6, zero, 8	@ const 8
0x2bcc5120	1784:	sw	s6, 8(JSP)
0x2bcc5124	1788:	addiu	s5, zero, 5	@ const 5
0x2bcc5128	1792:	sw	s5, 12(JSP)
0x2bcc512c	1796:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Bishop.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc5130	1800:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc5134	1804:	lw	s7, 0(a0)	@ call method through mb
0x2bcc5138	1808:	jalr	s7
0x2bcc513c	1812:	nop
          		@ Captured a stackmap here.
0x2bcc5140	1816:	lw	a1, 0(CP)	@ cb java.util.Vector
          		@ Do new:
          		@ cb: java.util.Vector
0x2bcc5144	1820:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc5148	1824:	nop
          		@ Captured a stackmap here.
0x2bcc514c	1828:	sw	v0, 0(JSP)
0x2bcc5150	1832:	lw	a0, 0(CP)	@ mb java.util.Vector.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc5154	1836:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc5158	1840:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc515c	1844:	lw	s7, 0(a0)	@ call method through mb
0x2bcc5160	1848:	jalr	s7
0x2bcc5164	1852:	nop
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcc5168	1856:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc516c	1860:	addiu	s6, s7, 136	@ fieldAddr = obj + fieldOffset;
0x2bcc5170	1864:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcc5174	1868:	sw	s5, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcc5178	1872:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc517c	1876:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc5180	1880:	srl	t7, s6, 9	@ mark card table
0x2bcc5184	1884:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc5188	1888:	sb	ra, 0(t7)
0x2bcc518c	1892:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Rook
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Rook
0x2bcc5190	1896:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc5194	1900:	nop
          		@ Captured a stackmap here.
0x2bcc5198	1904:	sw	v0, 0(JSP)
0x2bcc519c	1908:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc51a0	1912:	sw	s7, 4(JSP)
0x2bcc51a4	1916:	addiu	s6, zero, 9	@ const 9
0x2bcc51a8	1920:	sw	s6, 8(JSP)
0x2bcc51ac	1924:	sw	zero, 12(JSP)
0x2bcc51b0	1928:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Rook.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc51b4	1932:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc51b8	1936:	lw	s7, 0(a0)	@ call method through mb
0x2bcc51bc	1940:	jalr	s7
0x2bcc51c0	1944:	nop
          		@ Captured a stackmap here.
0x2bcc51c4	1948:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Rook
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Rook
0x2bcc51c8	1952:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc51cc	1956:	nop
          		@ Captured a stackmap here.
0x2bcc51d0	1960:	sw	v0, 0(JSP)
0x2bcc51d4	1964:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc51d8	1968:	sw	s7, 4(JSP)
0x2bcc51dc	1972:	addiu	s6, zero, 9	@ const 9
0x2bcc51e0	1976:	sw	s6, 8(JSP)
0x2bcc51e4	1980:	addiu	s5, zero, 7	@ const 7
0x2bcc51e8	1984:	sw	s5, 12(JSP)
0x2bcc51ec	1988:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Rook.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc51f0	1992:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc51f4	1996:	lw	s7, 0(a0)	@ call method through mb
0x2bcc51f8	2000:	jalr	s7
0x2bcc51fc	2004:	nop
          		@ Captured a stackmap here.
0x2bcc5200	2008:	lw	a1, 0(CP)	@ cb java.util.Vector
          		@ Do new:
          		@ cb: java.util.Vector
0x2bcc5204	2012:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc5208	2016:	nop
          		@ Captured a stackmap here.
0x2bcc520c	2020:	sw	v0, 0(JSP)
0x2bcc5210	2024:	lw	a0, 0(CP)	@ mb java.util.Vector.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc5214	2028:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc5218	2032:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc521c	2036:	lw	s7, 0(a0)	@ call method through mb
0x2bcc5220	2040:	jalr	s7
0x2bcc5224	2044:	nop
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcc5228	2048:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc522c	2052:	addiu	s6, s7, 160	@ fieldAddr = obj + fieldOffset;
0x2bcc5230	2056:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcc5234	2060:	sw	s5, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcc5238	2064:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc523c	2068:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc5240	2072:	srl	t7, s6, 9	@ mark card table
0x2bcc5244	2076:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc5248	2080:	sb	ra, 0(t7)
0x2bcc524c	2084:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.Queen
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.Queen
0x2bcc5250	2088:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc5254	2092:	nop
          		@ Captured a stackmap here.
0x2bcc5258	2096:	sw	v0, 0(JSP)
0x2bcc525c	2100:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc5260	2104:	sw	s7, 4(JSP)
0x2bcc5264	2108:	addiu	s6, zero, 10	@ const 10
0x2bcc5268	2112:	sw	s6, 8(JSP)
0x2bcc526c	2116:	addiu	s5, zero, 3	@ const 3
0x2bcc5270	2120:	sw	s5, 12(JSP)
0x2bcc5274	2124:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Queen.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc5278	2128:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc527c	2132:	lw	s7, 0(a0)	@ call method through mb
0x2bcc5280	2136:	jalr	s7
0x2bcc5284	2140:	nop
          		@ Captured a stackmap here.
0x2bcc5288	2144:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.King
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.King
0x2bcc528c	2148:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc5290	2152:	nop
          		@ Captured a stackmap here.
0x2bcc5294	2156:	sw	v0, 0(JSP)
0x2bcc5298	2160:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc529c	2164:	sw	s7, 4(JSP)
0x2bcc52a0	2168:	addiu	s6, zero, 11	@ const 11
0x2bcc52a4	2172:	sw	s6, 8(JSP)
0x2bcc52a8	2176:	addiu	s5, zero, 4	@ const 4
0x2bcc52ac	2180:	sw	s5, 12(JSP)
0x2bcc52b0	2184:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.King.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
          		@ Invoke a method w/ a void return type
0x2bcc52b4	2188:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc52b8	2192:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc52bc	2196:	lw	s7, 0(a0)	@ call method through mb
0x2bcc52c0	2200:	jalr	s7
0x2bcc52c4	2204:	nop
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcc52c8	2208:	lw	s7, -20(JFP)	@ Java local cell # 0
0x2bcc52cc	2212:	addiu	s6, s7, 120	@ fieldAddr = obj + fieldOffset;
0x2bcc52d0	2216:	lw	s5, 28(JFP)	@ Java temp cell # 0
0x2bcc52d4	2220:	sw	s5, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcc52d8	2224:	lw	s4, 0(CP)	@ cardTableVirtualBase
0x2bcc52dc	2228:	addiu	ra, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc52e0	2232:	srl	t7, s6, 9	@ mark card table
0x2bcc52e4	2236:	addu	t7, s4, t7	@ add indexReg and baseReg
0x2bcc52e8	2240:	sb	ra, 0(t7)
0x2bcc52ec	2244:	addiu	JSP, JFP, -20
0x2bcc52f0	2248:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc52f4	2252:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc52f8	2256:	nop
0x2bcc52fc	2260:	.word	9796124	@ mb com.sun.mep.bench.Chess.King.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
--->Fixed instruction at 2184(0x2bcc52b0) to reference 2260
--->Fixed instruction at 1160(0x2bcc4eb0) to reference 2260
0x2bcc5300	2264:	.word	9795336	@ cb com.sun.mep.bench.Chess.King
--->Fixed instruction at 2144(0x2bcc5288) to reference 2264
--->Fixed instruction at 1120(0x2bcc4e88) to reference 2264
0x2bcc5304	2268:	.word	9794896	@ mb com.sun.mep.bench.Chess.Queen.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
--->Fixed instruction at 2124(0x2bcc5274) to reference 2268
--->Fixed instruction at 1100(0x2bcc4e74) to reference 2268
0x2bcc5308	2272:	.word	9794488	@ cb com.sun.mep.bench.Chess.Queen
--->Fixed instruction at 2084(0x2bcc524c) to reference 2272
--->Fixed instruction at 1060(0x2bcc4e4c) to reference 2272
0x2bcc530c	2276:	.word	9790772	@ mb com.sun.mep.bench.Chess.Rook.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
--->Fixed instruction at 1988(0x2bcc51ec) to reference 2276
--->Fixed instruction at 1928(0x2bcc51b0) to reference 2276
--->Fixed instruction at 964(0x2bcc4dec) to reference 2276
--->Fixed instruction at 904(0x2bcc4db0) to reference 2276
0x2bcc5310	2280:	.word	9790344	@ cb com.sun.mep.bench.Chess.Rook
--->Fixed instruction at 1948(0x2bcc51c4) to reference 2280
--->Fixed instruction at 1892(0x2bcc518c) to reference 2280
--->Fixed instruction at 924(0x2bcc4dc4) to reference 2280
--->Fixed instruction at 864(0x2bcc4d88) to reference 2280
0x2bcc5314	2284:	.word	9792280	@ mb com.sun.mep.bench.Chess.Bishop.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
--->Fixed instruction at 1796(0x2bcc512c) to reference 2284
--->Fixed instruction at 1736(0x2bcc50f0) to reference 2284
--->Fixed instruction at 768(0x2bcc4d28) to reference 2284
--->Fixed instruction at 708(0x2bcc4cec) to reference 2284
0x2bcc5318	2288:	.word	9791872	@ cb com.sun.mep.bench.Chess.Bishop
--->Fixed instruction at 1756(0x2bcc5104) to reference 2288
--->Fixed instruction at 1696(0x2bcc50c8) to reference 2288
--->Fixed instruction at 728(0x2bcc4d00) to reference 2288
--->Fixed instruction at 668(0x2bcc4cc4) to reference 2288
0x2bcc531c	2292:	.word	9783096	@ mb com.sun.mep.bench.Chess.Knight.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
--->Fixed instruction at 1600(0x2bcc5068) to reference 2292
--->Fixed instruction at 1540(0x2bcc502c) to reference 2292
--->Fixed instruction at 572(0x2bcc4c64) to reference 2292
--->Fixed instruction at 512(0x2bcc4c28) to reference 2292
0x2bcc5320	2296:	.word	9782688	@ cb com.sun.mep.bench.Chess.Knight
--->Fixed instruction at 1560(0x2bcc5040) to reference 2296
--->Fixed instruction at 1500(0x2bcc5004) to reference 2296
--->Fixed instruction at 532(0x2bcc4c3c) to reference 2296
--->Fixed instruction at 472(0x2bcc4c00) to reference 2296
0x2bcc5324	2300:	.word	9785320	@ mb com.sun.mep.bench.Chess.Pawn.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
--->Fixed instruction at 1372(0x2bcc4f84) to reference 2300
--->Fixed instruction at 344(0x2bcc4b80) to reference 2300
0x2bcc5328	2304:	.word	9784720	@ cb com.sun.mep.bench.Chess.Pawn
--->Fixed instruction at 1336(0x2bcc4f60) to reference 2304
--->Fixed instruction at 308(0x2bcc4b5c) to reference 2304
0x2bcc532c	2308:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 2224(0x2bcc52d8) to reference 2308
--->Fixed instruction at 2064(0x2bcc5238) to reference 2308
--->Fixed instruction at 1872(0x2bcc5178) to reference 2308
--->Fixed instruction at 1676(0x2bcc50b4) to reference 2308
--->Fixed instruction at 1480(0x2bcc4ff0) to reference 2308
--->Fixed instruction at 1276(0x2bcc4f24) to reference 2308
--->Fixed instruction at 1200(0x2bcc4ed8) to reference 2308
--->Fixed instruction at 1040(0x2bcc4e38) to reference 2308
--->Fixed instruction at 844(0x2bcc4d74) to reference 2308
--->Fixed instruction at 648(0x2bcc4cb0) to reference 2308
--->Fixed instruction at 452(0x2bcc4bec) to reference 2308
--->Fixed instruction at 248(0x2bcc4b20) to reference 2308
0x2bcc5330	2312:	.word	9094284	@ mb java.util.Vector.<init>()V
--->Fixed instruction at 2024(0x2bcc5210) to reference 2312
--->Fixed instruction at 1832(0x2bcc5150) to reference 2312
--->Fixed instruction at 1636(0x2bcc508c) to reference 2312
--->Fixed instruction at 1440(0x2bcc4fc8) to reference 2312
--->Fixed instruction at 1236(0x2bcc4efc) to reference 2312
--->Fixed instruction at 1000(0x2bcc4e10) to reference 2312
--->Fixed instruction at 804(0x2bcc4d4c) to reference 2312
--->Fixed instruction at 608(0x2bcc4c88) to reference 2312
--->Fixed instruction at 412(0x2bcc4bc4) to reference 2312
--->Fixed instruction at 208(0x2bcc4af8) to reference 2312
0x2bcc5334	2316:	.word	8629924	@ cb java.util.Vector
--->Fixed instruction at 2008(0x2bcc5200) to reference 2316
--->Fixed instruction at 1816(0x2bcc5140) to reference 2316
--->Fixed instruction at 1620(0x2bcc507c) to reference 2316
--->Fixed instruction at 1424(0x2bcc4fb8) to reference 2316
--->Fixed instruction at 1220(0x2bcc4eec) to reference 2316
--->Fixed instruction at 984(0x2bcc4e00) to reference 2316
--->Fixed instruction at 788(0x2bcc4d3c) to reference 2316
--->Fixed instruction at 592(0x2bcc4c78) to reference 2316
--->Fixed instruction at 396(0x2bcc4bb4) to reference 2316
--->Fixed instruction at 192(0x2bcc4ae8) to reference 2316
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc4a28) >>>>>>>>
          		@ Capacity is 20 word(s)
0x2bcc4a28	0:	addiu	a1, JSP, 76
<<<<<<<<<Pop Code Buffer to PC = 2320 (0x2bcc5338) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc4a78) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcc4a78	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcc4a7c	84:	lui	CP, hi16(0x2bcc)
0x2bcc4a80	88:	ori	CP, CP, lo16(0x2bcc52fc)
0x2bcc4a84	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 2320 (0x2bcc5338) <<<<<<<<<
JS: COMPILED: size=2792 startPC=0x2bcc4a28 com.sun.mep.bench.Chess.ChessGame.initialise()V
OSR: Intr2Comp: com.sun.mep.bench.Chess.ChessGame.initialise()V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.ChessPiece.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
JS: COMPILING com.sun.mep.bench.Chess.ChessPiece.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
CSE: Forgetting all CSE'd array index expressions
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 

#################################################

The maximum node counts per root node are 7
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 33 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.ChessPiece.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V(ChessPiece.java:67)
* Compilation depth: 0 locals : 0 .. 3
* Byte-codes for block:
<0>  (0x957e18):    aload_0 
<1>  (0x957e19):    aload_1 
<2>  (0x957e1a):    invokenonvirtual_quick #1 <com.sun.mep.bench.Chess.Actor.<init>(Lcom/sun/mep/bench/Chess/Game;)V>
<5>  (0x957e1d):    aload_0 
<6>  (0x957e1e):    aload_0 
<7>  (0x957e1f):    agetfield_quick #2
<10>  (0x957e22):    getfield_quick #5
<13>  (0x957e25):    bipush 6
<15>  (0x957e27):    imul 
<16>  (0x957e28):    sipush 350
<19>  (0x957e2b):    idiv 
<20>  (0x957e2c):    putfield_quick #26
<23>  (0x957e2f):    aload_0 
<24>  (0x957e30):    aload_1 
<25>  (0x957e31):    checkcast_quick #5 <com.sun.mep.bench.Chess.ChessGame>
<28>  (0x957e34):    aputfield_quick #27
<31>  (0x957e37):    aload_0 
<32>  (0x957e38):    iload_2 
<33>  (0x957e39):    putfield_quick #23
<36>  (0x957e3c):    aload_0 
<37>  (0x957e3d):    iload_3 
<38>  (0x957e3e):    putfield_quick #24
<41>  (0x957e41):    aload_0 
<42>  (0x957e42):    agetfield_quick #27
<45>  (0x957e45):    agetfield_quick #41
<48>  (0x957e48):    iload_3 
<49>  (0x957e49):    iload_2 
<50>  (0x957e4a):    bastore 
<51>  (0x957e4b):    aload_0 
<52>  (0x957e4c):    iconst_0 
<53>  (0x957e4d):    putfield_quick #12
<56>  (0x957e50):    aload_0 
<57>  (0x957e51):    iconst_0 
<58>  (0x957e52):    putfield_quick #13
<61>  (0x957e55):    aload_0 
<62>  (0x957e56):    aload_0 
<63>  (0x957e57):    aload_0 
<64>  (0x957e58):    getfield_quick #24
<67>  (0x957e5b):    invokevirtual_quick_w #12 <com.sun.mep.bench.Chess.ChessPiece.getColumn(I)I>
<70>  (0x957e5e):    putfield_quick #20
<73>  (0x957e61):    aload_0 
<74>  (0x957e62):    aload_0 
<75>  (0x957e63):    aload_0 
<76>  (0x957e64):    getfield_quick #24
<79>  (0x957e67):    invokevirtual_quick_w #14 <com.sun.mep.bench.Chess.ChessPiece.getRow(I)I>
<82>  (0x957e6a):    putfield_quick #19
<85>  (0x957e6d):    aload_0 
<86>  (0x957e6e):    aload_0 
<87>  (0x957e6f):    getfield_quick #19
<90>  (0x957e72):    putfield_quick #21
<93>  (0x957e75):    aload_0 
<94>  (0x957e76):    aload_0 
<95>  (0x957e77):    getfield_quick #20
<98>  (0x957e7a):    putfield_quick #22
<101>  (0x957e7d):    aload_0 
<102>  (0x957e7e):    aload_0 
<103>  (0x957e7f):    getfield_quick #24
<106>  (0x957e82):    putfield_quick #25
<109>  (0x957e85):    aload_0 
<110>  (0x957e86):    aload_0 
<111>  (0x957e87):    getfield_quick #20
<114>  (0x957e8a):    aload_0 
<115>  (0x957e8b):    agetfield_quick #2
<118>  (0x957e8e):    getfield_quick #4
<121>  (0x957e91):    imul 
<122>  (0x957e92):    aload_0 
<123>  (0x957e93):    getfield_quick #26
<126>  (0x957e96):    iadd 
<127>  (0x957e97):    putfield_quick #6
<130>  (0x957e9a):    aload_0 
<131>  (0x957e9b):    aload_0 
<132>  (0x957e9c):    getfield_quick #19
<135>  (0x957e9f):    aload_0 
<136>  (0x957ea0):    agetfield_quick #2
<139>  (0x957ea3):    getfield_quick #4
<142>  (0x957ea6):    imul 
<143>  (0x957ea7):    aload_0 
<144>  (0x957ea8):    getfield_quick #26
<147>  (0x957eab):    iadd 
<148>  (0x957eac):    putfield_quick #7
<151>  (0x957eaf):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 8) INVOKE (v) 
      <(ID: 7) PARAMETER (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 27)
            <(ID: 12) LOCAL (reference)   0>
         <(ID: 6) PARAMETER (reference) 
            <(ID: 3) IDENTITY (reference)  (ref count: 2)
               <(ID: 28) LOCAL (reference)   1>
            <(ID: 5) NULL_PARAMETER (NONE) 
      <(ID: 4) CONST_MB (address field)  (com.sun.mep.bench.Chess.Actor.<init>(Lcom/sun/mep/bench/Chess/Game;)V)

   <(ID: 11) IDENTITY (reference)  (ref count: 2)
      <(ID: 16) FETCH (reference) 
         <(ID: 10) FIELD_REF (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 27)
            <(ID: 9) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 15) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 21) FETCH (32-bit field) 
         <(ID: 14) FIELD_REF (32-bit field) 
            <(ID: 11) IDENTITY (reference)  (ref count: 2)
            <(ID: 13) CONST_FIELD_OFFSET (NONE)  (5)

   <(ID: 20) IDENTITY (int)  (ref count: 2)
      <(ID: 25) DIV (int) 
         <(ID: 18) MUL (int) 
            <(ID: 15) IDENTITY (32-bit field)  (ref count: 2)
            <(ID: 17) CONST_JAVA_NUMERIC32 (int)  (6)
         <(ID: 19) CONST_JAVA_NUMERIC32 (int)  (350)

   <(ID: 24) ASSIGN (32-bit field) 
      <(ID: 23) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 27)
         <(ID: 22) CONST_FIELD_OFFSET (NONE)  (26)
      <(ID: 20) IDENTITY (int)  (ref count: 2)

   <(ID: 27) IDENTITY (reference)  (ref count: 2)
      <(ID: 32) CHECKCAST (reference) 
         <(ID: 3) IDENTITY (reference)  (ref count: 2)
         <(ID: 26) CONST_CB (address field)  (com.sun.mep.bench.Chess.ChessGame)

   <(ID: 31) ASSIGN (reference) 
      <(ID: 30) FIELD_REF (reference) 
         <(ID: 2) IDENTITY (reference)  (ref count: 27)
         <(ID: 29) CONST_FIELD_OFFSET (NONE)  (27)
      <(ID: 27) IDENTITY (reference)  (ref count: 2)

   <(ID: 36) ASSIGN (32-bit field) 
      <(ID: 35) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 27)
         <(ID: 34) CONST_FIELD_OFFSET (NONE)  (23)
      <(ID: 33) IDENTITY (int)  (ref count: 2)
         <(ID: 54) LOCAL (int)   2>

   <(ID: 40) ASSIGN (32-bit field) 
      <(ID: 39) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 27)
         <(ID: 38) CONST_FIELD_OFFSET (NONE)  (24)
      <(ID: 37) IDENTITY (int)  (ref count: 2)
         <(ID: 53) LOCAL (int)   3>

   <(ID: 43) IDENTITY (reference)  (ref count: 2)
      <(ID: 47) FETCH (reference) 
         <(ID: 42) FIELD_REF (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 27)
            <(ID: 41) CONST_FIELD_OFFSET (NONE)  (27)

   <(ID: 46) IDENTITY (reference)  (ref count: 3)
      <(ID: 52) FETCH (reference) 
         <(ID: 45) FIELD_REF (reference) 
            <(ID: 43) IDENTITY (reference)  (ref count: 2)
            <(ID: 44) CONST_FIELD_OFFSET (NONE)  (41)

   <(ID: 51) ASSIGN (byte) 
      <(ID: 50) INDEX (int) 
         <(ID: 46) IDENTITY (reference)  (ref count: 3)
         <(ID: 49) BOUNDS_CHECK (int) 
            <(ID: 37) IDENTITY (int)  (ref count: 2)
            <(ID: 48) ARRAY_LENGTH (int) 
               <(ID: 46) IDENTITY (reference)  (ref count: 3)
      <(ID: 33) IDENTITY (int)  (ref count: 2)

   <(ID: 58) ASSIGN (32-bit field) 
      <(ID: 57) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 27)
         <(ID: 56) CONST_FIELD_OFFSET (NONE)  (12)
      <(ID: 55) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 62) ASSIGN (32-bit field) 
      <(ID: 61) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 27)
         <(ID: 60) CONST_FIELD_OFFSET (NONE)  (13)
      <(ID: 59) CONST_JAVA_NUMERIC32 (int)  (0)

   <(ID: 65) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 73) FETCH (32-bit field) 
         <(ID: 64) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 27)
            <(ID: 63) CONST_FIELD_OFFSET (NONE)  (24)

   <(ID: 72) IDENTITY (int)  (ref count: 2)
      <(ID: 77) INVOKE (int) 
         <(ID: 69) PARAMETER (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 27)
            <(ID: 68) PARAMETER (32-bit field) 
               <(ID: 65) IDENTITY (32-bit field)  (ref count: 2)
               <(ID: 67) NULL_PARAMETER (NONE) 
         <(ID: 71) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 70) GET_VTBL (NONE) 
               <(ID: 2) IDENTITY (reference)  (ref count: 27)
            <(ID: 66) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 34)

   <(ID: 76) ASSIGN (32-bit field) 
      <(ID: 75) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 27)
         <(ID: 74) CONST_FIELD_OFFSET (NONE)  (20)
      <(ID: 72) IDENTITY (int)  (ref count: 2)

   <(ID: 80) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 88) FETCH (32-bit field) 
         <(ID: 79) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 27)
            <(ID: 78) CONST_FIELD_OFFSET (NONE)  (24)

   <(ID: 87) IDENTITY (int)  (ref count: 2)
      <(ID: 92) INVOKE (int) 
         <(ID: 84) PARAMETER (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 27)
            <(ID: 83) PARAMETER (32-bit field) 
               <(ID: 80) IDENTITY (32-bit field)  (ref count: 2)
               <(ID: 82) NULL_PARAMETER (NONE) 
         <(ID: 86) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 85) GET_VTBL (NONE) 
               <(ID: 2) IDENTITY (reference)  (ref count: 27)
            <(ID: 81) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 35)

   <(ID: 91) ASSIGN (32-bit field) 
      <(ID: 90) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 27)
         <(ID: 89) CONST_FIELD_OFFSET (NONE)  (19)
      <(ID: 87) IDENTITY (int)  (ref count: 2)

   <(ID: 95) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 99) FETCH (32-bit field) 
         <(ID: 94) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 27)
            <(ID: 93) CONST_FIELD_OFFSET (NONE)  (19)

   <(ID: 98) ASSIGN (32-bit field) 
      <(ID: 97) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 27)
         <(ID: 96) CONST_FIELD_OFFSET (NONE)  (21)
      <(ID: 95) IDENTITY (32-bit field)  (ref count: 3)

   <(ID: 102) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 106) FETCH (32-bit field) 
         <(ID: 101) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 27)
            <(ID: 100) CONST_FIELD_OFFSET (NONE)  (20)

   <(ID: 105) ASSIGN (32-bit field) 
      <(ID: 104) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 27)
         <(ID: 103) CONST_FIELD_OFFSET (NONE)  (22)
      <(ID: 102) IDENTITY (32-bit field)  (ref count: 3)

   <(ID: 109) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 113) FETCH (32-bit field) 
         <(ID: 108) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 27)
            <(ID: 107) CONST_FIELD_OFFSET (NONE)  (24)

   <(ID: 112) ASSIGN (32-bit field) 
      <(ID: 111) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 27)
         <(ID: 110) CONST_FIELD_OFFSET (NONE)  (25)
      <(ID: 109) IDENTITY (32-bit field)  (ref count: 2)

   <(ID: 116) IDENTITY (reference)  (ref count: 2)
      <(ID: 120) FETCH (reference) 
         <(ID: 115) FIELD_REF (reference) 
            <(ID: 2) IDENTITY (reference)  (ref count: 27)
            <(ID: 114) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 119) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 129) FETCH (32-bit field) 
         <(ID: 118) FIELD_REF (32-bit field) 
            <(ID: 116) IDENTITY (reference)  (ref count: 2)
            <(ID: 117) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 124) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 130) FETCH (32-bit field) 
         <(ID: 123) FIELD_REF (32-bit field) 
            <(ID: 2) IDENTITY (reference)  (ref count: 27)
            <(ID: 122) CONST_FIELD_OFFSET (NONE)  (26)

   <(ID: 128) ASSIGN (32-bit field) 
      <(ID: 127) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 27)
         <(ID: 126) CONST_FIELD_OFFSET (NONE)  (6)
      <(ID: 125) ADD (int) 
         <(ID: 121) MUL (int) 
            <(ID: 102) IDENTITY (32-bit field)  (ref count: 3)
            <(ID: 119) IDENTITY (32-bit field)  (ref count: 3)
         <(ID: 124) IDENTITY (32-bit field)  (ref count: 3)

   <(ID: 135) ASSIGN (32-bit field) 
      <(ID: 134) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 27)
         <(ID: 133) CONST_FIELD_OFFSET (NONE)  (7)
      <(ID: 132) ADD (int) 
         <(ID: 131) MUL (int) 
            <(ID: 95) IDENTITY (32-bit field)  (ref count: 3)
            <(ID: 119) IDENTITY (32-bit field)  (ref count: 3)
         <(ID: 124) IDENTITY (32-bit field)  (ref count: 3)

   <(ID: 136) RETURN (v) 


NUM BARRIER BYTES = 16
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 108
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 920
ESTIMATED BUFFER SIZE = 1148
CODE BUFFER ADDRESS = 0x2bcc54a4
PC MAP TABLE ADDRESS = 0x2bcc54ac
CODE ENTRY ADDRESS = 0x2bcc54d0
          		@ Method prologue
0x2bcc54d0	0:	addiu	a1, JSP, 44	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc54d4	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc54d8	8:	sltu	t7, a1, CHUNKEND
0x2bcc54dc	12:	bne	t7, zero, PC=0x2bcc54d0	@ goto .skip
0x2bcc54e0	16:	nop
0x2bcc54e4	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc54e8	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc54dc) >>>>>>>>
0x2bcc54dc	12:	bne	t7, zero, PC=0x2bcc54ec	@ goto .skip
0x2bcc54e0	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc54ec) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc54ec	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcc54f0	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc54f4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc54f8	40:	addiu	a3, zero, 0
0x2bcc54fc	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc5500	48:	addiu	a3, zero, -1
0x2bcc5504	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc5508	56:	move	a0, EE
0x2bcc550c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc5510	64:	lui	t9, hi16(0x65)
0x2bcc5514	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc5518	72:	jalr	t9
0x2bcc551c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc5520	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc5524	84:	nop
0x2bcc5528	88:	nop
0x2bcc552c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc5530	96:	lw	s4, -16(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcc5534	100:	lw	s5, -12(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
0x2bcc5538	104:	sw	s4, 0(JSP)
0x2bcc553c	108:	sw	s5, 4(JSP)
0x2bcc5540	112:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.Actor.<init>(Lcom/sun/mep/bench/Chess/Game;)V
          		@ Invoke a method w/ a void return type
0x2bcc5544	116:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc5548	120:	lw	s7, 0(a0)	@ call method through mb
0x2bcc554c	124:	jalr	s7
0x2bcc5550	128:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcc5554	132:	lw	s6, -16(JFP)	@ Java local cell # 0
0x2bcc5558	136:	lw	s7, 8(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc555c	140:	lw	s5, 20(s7)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc5560	144:	addiu	s4, zero, 6	@ const 6
0x2bcc5564	148:	mult	s5, s4
0x2bcc5568	152:	mflo	s7
0x2bcc556c	156:	nop
0x2bcc5570	160:	nop
          		@ do idiv by 350:
0x2bcc5574	164:	lw	t9, 0(CP)	@ const 1570730897
0x2bcc5578	168:	sra	s5, s7, 31
0x2bcc557c	172:	mult	s7, t9
0x2bcc5580	176:	mfhi	ra
0x2bcc5584	180:	nop
0x2bcc5588	184:	nop
0x2bcc558c	188:	sra	ra, ra, 7
0x2bcc5590	192:	subu	s5, ra, s5
          		@ Do putfield:
0x2bcc5594	196:	sw	s5, 104(s6)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcc5598	200:	lw	a2, 0(CP)	@ cb com.sun.mep.bench.Chess.ChessGame
          		@ Do checkcast:
          		@ Note: ARG3=cb to check against
0x2bcc559c	204:	lw	s7, -12(JFP)	@ Java local cell # 1
0x2bcc55a0	208:	move	a0, s7	@ set cc to "eq" if object is null
0x2bcc55a4	212:	jal	PC=(0x2bcb818c)	@ call CVMCCMruntimeCheckCastGlue
0x2bcc55a8	216:	nop
0x2bcc55ac	220:	.word	0	@ guessCB i.e. last successful cast CB
		.checkcastDone:
          		@ Captured a stackmap here.
          		@ Do putfield:
0x2bcc55b0	224:	addiu	s5, s6, 108	@ fieldAddr = obj + fieldOffset;
0x2bcc55b4	228:	sw	s7, 0(s5)	@ putfield(fieldAddr, valueObj);
0x2bcc55b8	232:	lw	ra, 0(CP)	@ cardTableVirtualBase
0x2bcc55bc	236:	addiu	t9, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc55c0	240:	srl	t7, s5, 9	@ mark card table
0x2bcc55c4	244:	addu	t7, ra, t7	@ add indexReg and baseReg
0x2bcc55c8	248:	sb	t9, 0(t7)
0x2bcc55cc	252:	lw	t8, -8(JFP)	@ Java local cell # 2
          		@ Do putfield:
0x2bcc55d0	256:	sw	t8, 92(s6)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcc55d4	260:	lw	s5, -4(JFP)	@ Java local cell # 3
          		@ Do putfield:
0x2bcc55d8	264:	sw	s5, 96(s6)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do getfield:
0x2bcc55dc	268:	lw	t6, 108(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc55e0	272:	lw	t5, 164(t6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc55e4	276:	lw	t6, 8(t5)	@ arraylength
          		@ deferred comparison: 
0x2bcc55e8	280:	sltu	t7, s5, t6
0x2bcc55ec	284:	bne	t7, zero, PC=0x2bcc55e8	@ br .skip
0x2bcc55f0	288:	nop
0x2bcc55f4	292:	jal	PC=(0x2bcb8084)	@ ArrayIndexOutOfBounds check
0x2bcc55f8	296:	nop
		.skip
--->Fixed instruction at 284(0x2bcc55ec) to reference 300
          		@ Do store(arrayObj, index) (elem type=B):
0x2bcc55fc	300:	addu	t6, t5, s5
0x2bcc5600	304:	sb	t8, 12(t6)
          		@ Do putfield:
0x2bcc5604	308:	sw	zero, 48(s6)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do putfield:
0x2bcc5608	312:	sw	zero, 52(s6)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do getfield:
0x2bcc560c	316:	lw	t6, 96(s6)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc5610	320:	sw	s6, 0(JSP)
0x2bcc5614	324:	sw	t6, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc5618	328:	lw	t6, 0(s6)	@ Get object.cb
0x2bcc561c	332:	addiu	t7, zero, -4
0x2bcc5620	336:	and	t6, t6, t7
0x2bcc5624	340:	lw	t6, 76(t6)	@ Get cb.vtbl
0x2bcc5628	344:	lw	a0, 136(t6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc562c	348:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc5630	352:	lw	s7, 0(a0)	@ call method through mb
0x2bcc5634	356:	jalr	s7
0x2bcc5638	360:	nop
          		@ Captured a stackmap here.
0x2bcc563c	364:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc5640	368:	lw	s7, 0(JSP)
          		@ Do putfield:
0x2bcc5644	372:	lw	s6, -16(JFP)	@ Java local cell # 0
0x2bcc5648	376:	sw	s7, 80(s6)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do getfield:
0x2bcc564c	380:	lw	s7, 96(s6)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc5650	384:	sw	s6, 0(JSP)
0x2bcc5654	388:	sw	s7, 4(JSP)
          		@ Fetch mb from vtable:
0x2bcc5658	392:	lw	s7, 0(s6)	@ Get object.cb
0x2bcc565c	396:	addiu	t7, zero, -4
0x2bcc5660	400:	and	s7, s7, t7
0x2bcc5664	404:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc5668	408:	lw	a0, 140(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc566c	412:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc5670	416:	lw	s7, 0(a0)	@ call method through mb
0x2bcc5674	420:	jalr	s7
0x2bcc5678	424:	nop
          		@ Captured a stackmap here.
0x2bcc567c	428:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc5680	432:	lw	s7, 0(JSP)
          		@ Do putfield:
0x2bcc5684	436:	lw	s6, -16(JFP)	@ Java local cell # 0
0x2bcc5688	440:	sw	s7, 76(s6)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do getfield:
0x2bcc568c	444:	lw	s7, 76(s6)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do putfield:
0x2bcc5690	448:	sw	s7, 84(s6)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do getfield:
0x2bcc5694	452:	lw	s5, 80(s6)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do putfield:
0x2bcc5698	456:	sw	s5, 88(s6)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do getfield:
0x2bcc569c	460:	lw	s4, 96(s6)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do putfield:
0x2bcc56a0	464:	sw	s4, 100(s6)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do getfield:
0x2bcc56a4	468:	lw	s4, 8(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc56a8	472:	lw	ra, 16(s4)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc56ac	476:	lw	s4, 104(s6)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc56b0	480:	mult	s5, ra
0x2bcc56b4	484:	mflo	t9
0x2bcc56b8	488:	nop
0x2bcc56bc	492:	nop
0x2bcc56c0	496:	addu	s5, t9, s4
          		@ Do putfield:
0x2bcc56c4	500:	sw	s5, 24(s6)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcc56c8	504:	mult	s7, ra
0x2bcc56cc	508:	mflo	s5
0x2bcc56d0	512:	nop
0x2bcc56d4	516:	nop
0x2bcc56d8	520:	addu	s7, s5, s4
          		@ Do putfield:
0x2bcc56dc	524:	sw	s7, 28(s6)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcc56e0	528:	addiu	JSP, JFP, -16
0x2bcc56e4	532:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc56e8	536:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc56ec	540:	nop
0x2bcc56f0	544:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 232(0x2bcc55b8) to reference 544
0x2bcc56f4	548:	.word	9732296	@ cb com.sun.mep.bench.Chess.ChessGame
--->Fixed instruction at 200(0x2bcc5598) to reference 548
0x2bcc56f8	552:	.word	1570730897
--->Fixed instruction at 164(0x2bcc5574) to reference 552
0x2bcc56fc	556:	.word	9787764	@ mb com.sun.mep.bench.Chess.Actor.<init>(Lcom/sun/mep/bench/Chess/Game;)V
--->Fixed instruction at 112(0x2bcc5540) to reference 556
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc54d0) >>>>>>>>
          		@ Capacity is 15 word(s)
0x2bcc54d0	0:	addiu	a1, JSP, 44
<<<<<<<<<Pop Code Buffer to PC = 560 (0x2bcc5700) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc5520) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc5520	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc5524	84:	lui	CP, hi16(0x2bcc)
0x2bcc5528	88:	ori	CP, CP, lo16(0x2bcc56f0)
0x2bcc552c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 560 (0x2bcc5700) <<<<<<<<<
JS: COMPILED: size=636 startPC=0x2bcc54d0 com.sun.mep.bench.Chess.ChessPiece.<init>(Lcom/sun/mep/bench/Chess/Game;BI)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.Actor.createMovementHandler()V
JS: COMPILING com.sun.mep.bench.Chess.Actor.createMovementHandler()V
orig bkID(1) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(1) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
bkID(0) local(0 #0)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(1 0x0): 0- 
+bk  bkID(0) Incoming Locals(1 0x1): 0+ 
-gbk bkID(1) Incoming Locals(1 0x0): 0- 
+gbk bkID(1) Incoming Locals(1 0x1): 0+ 
bkID(0) local(0 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(1 0x1): 0+ 
dstBk(0) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(0) Incoming Locals(1 0x1): 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(1 0x1): 0+ 
dstBk(1) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(1) Incoming Locals(1 0x1): 0+ 

#################################################

The maximum node counts per root node are 6
IR block list contains 2 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 7 root nodes: in block 
* flags: 0x41
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1
* Source: com.sun.mep.bench.Chess.Actor.createMovementHandler()V(Actor.java:188)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x955ddc):    agetstatic_quick #21 <com.sun.mep.bench.Chess.Actor.masterMovement:Lcom/sun/mep/bench/Chess/MovementHandler;>
<3>  (0x955ddf):    ifnonnull <20>
<6>  (0x955de2):    new_quick #22 <com.sun.mep.bench.Chess.NewtonMovement>
<9>  (0x955de5):    dup 
<10>  (0x955de6):    aload_0 
<11>  (0x955de7):    agetfield_quick #2
<14>  (0x955dea):    invokenonvirtual_quick #23 <com.sun.mep.bench.Chess.NewtonMovement.<init>(Lcom/sun/mep/bench/Chess/Game;)V>
<17>  (0x955ded):    aputstatic_quick #21 <com.sun.mep.bench.Chess.Actor.masterMovement:Lcom/sun/mep/bench/Chess/MovementHandler;>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Incoming Locals(1): 
	local(0)	ID(25)
 
Successor Blocks(1): 
	ID(1) LocalOrder(0) AssignOrder(0) RefsOK(1) Locals(0)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 4) IDENTITY (reference)  (ref count: 2)
      <(ID: 7) FETCH (reference) 
         <(ID: 3) STATIC_FIELD_REF (reference) 
            <(ID: 2) CONST_STATIC_FIELD_ADDRESS (address field)  (0x955c80)

   <(ID: 6) BCOND (reference) 
   target: (BlockID: 1 BlockPC: 20)
   condition: NE
   flags: 0
      <(ID: 4) IDENTITY (reference)  (ref count: 2)
      <(ID: 5) CONST_STRING_OBJECT (reference)  (stringObject 0x0)



   <(ID: 9) IDENTITY (reference)  (ref count: 3)
      <(ID: 19) NEW_OBJECT (reference) 
         <(ID: 8) CONST_CB (address field)  (com.sun.mep.bench.Chess.NewtonMovement)

   <(ID: 13) IDENTITY (reference)  (ref count: 2)
      <(ID: 20) FETCH (reference) 
         <(ID: 12) FIELD_REF (reference) 
            <(ID: 10) LOCAL (reference)   0>
            <(ID: 11) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 18) INVOKE (v) 
      <(ID: 17) PARAMETER (reference) 
         <(ID: 9) IDENTITY (reference)  (ref count: 3)
         <(ID: 16) PARAMETER (reference) 
            <(ID: 13) IDENTITY (reference)  (ref count: 2)
            <(ID: 15) NULL_PARAMETER (NONE) 
      <(ID: 14) CONST_MB (address field)  (com.sun.mep.bench.Chess.NewtonMovement.<init>(Lcom/sun/mep/bench/Chess/Game;)V)

   <(ID: 23) ASSIGN (reference) 
      <(ID: 22) STATIC_FIELD_REF (reference) 
         <(ID: 21) CONST_STATIC_FIELD_ADDRESS (address field)  (0x955c80)
      <(ID: 9) IDENTITY (reference)  (ref count: 3)


*************************************************
*
* (block ID:1 block PC:20 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1
* Source: com.sun.mep.bench.Chess.Actor.createMovementHandler()V(Actor.java:191)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<20>  (0x955df0):    aload_0 
<21>  (0x955df1):    agetstatic_quick #21 <com.sun.mep.bench.Chess.Actor.masterMovement:Lcom/sun/mep/bench/Chess/MovementHandler;>
<24>  (0x955df4):    aputfield_quick #3
<27>  (0x955df7):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(25)
 
Incoming Locals(1): 
	local(0)	ID(25)
 
   <(ID: 24) MAP_PC (NONE)   20>

   <(ID: 28) IDENTITY (reference)  (ref count: 2)
      <(ID: 32) FETCH (reference) 
         <(ID: 27) STATIC_FIELD_REF (reference) 
            <(ID: 26) CONST_STATIC_FIELD_ADDRESS (address field)  (0x955c80)

   <(ID: 31) ASSIGN (reference) 
      <(ID: 30) FIELD_REF (reference) 
         <(ID: 25) LOCAL (reference)   0>
         <(ID: 29) CONST_FIELD_OFFSET (NONE)  (3)
      <(ID: 28) IDENTITY (reference)  (ref count: 2)

   <(ID: 33) RETURN (v) 


NUM BARRIER BYTES = 32
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 176
ESTIMATED BUFFER SIZE = 316
CODE BUFFER ADDRESS = 0x2bcc5720
PC MAP TABLE ADDRESS = 0x2bcc5728
CODE ENTRY ADDRESS = 0x2bcc5750
          		@ Method prologue
0x2bcc5750	0:	addiu	a1, JSP, 48	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc5754	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc5758	8:	sltu	t7, a1, CHUNKEND
0x2bcc575c	12:	bne	t7, zero, PC=0x2bcc5750	@ goto .skip
0x2bcc5760	16:	nop
0x2bcc5764	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc5768	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc575c) >>>>>>>>
0x2bcc575c	12:	bne	t7, zero, PC=0x2bcc576c	@ goto .skip
0x2bcc5760	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc576c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc576c	28:	sw	JFP, 4(JSP)	@ Store curr JFP into new frame
0x2bcc5770	32:	addiu	JFP, JSP, 4	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc5774	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc5778	40:	addiu	a3, zero, 0
0x2bcc577c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc5780	48:	addiu	a3, zero, -1
0x2bcc5784	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc5788	56:	move	a0, EE
0x2bcc578c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc5790	64:	lui	t9, hi16(0x65)
0x2bcc5794	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc5798	72:	jalr	t9
0x2bcc579c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc57a0	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc57a4	84:	nop
0x2bcc57a8	88:	nop
0x2bcc57ac	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc57b0	96:	lw	s4, -8(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
0x2bcc57b4	100:	lw	ra, 0(CP)	@ const 9788544
          		@ Do getstatic:
0x2bcc57b8	104:	lw	s7, 0(ra)	@ value{I|F|O} = getstatic(staticFieldAddr);
			@ Outgoing local(0) reg(20): in correct register
          		@ deferred comparison: 
0x2bcc57bc	108:	bne	s7, zero, PC=0x2bcc57bc	@ branch to block L1
0x2bcc57c0	112:	nop
0x2bcc57c4	116:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.NewtonMovement
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.NewtonMovement
0x2bcc57c8	120:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc57cc	124:	nop
          		@ Captured a stackmap here.
0x2bcc57d0	128:	lw	s4, -8(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcc57d4	132:	lw	s7, 8(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc57d8	136:	sw	v0, 0(JSP)
0x2bcc57dc	140:	sw	s7, 4(JSP)
0x2bcc57e0	144:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.NewtonMovement.<init>(Lcom/sun/mep/bench/Chess/Game;)V
          		@ Invoke a method w/ a void return type
0x2bcc57e4	148:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc57e8	152:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc57ec	156:	lw	s7, 0(a0)	@ call method through mb
0x2bcc57f0	160:	jalr	s7
0x2bcc57f4	164:	nop
          		@ Captured a stackmap here.
0x2bcc57f8	168:	lw	s7, 0(CP)	@ const 9788544
          		@ Do putstatic:
0x2bcc57fc	172:	lw	s6, 28(JFP)	@ Java temp cell # 0
0x2bcc5800	176:	sw	s6, 0(s7)	@ putstatic(staticFieldAddr, value{I|F|O})
			@ Outgoing local(0) reg(20): not in register
0x2bcc5804	180:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Initial Temp REF set is 
	L1:	184:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
--->Fixed instruction at 108(0x2bcc57bc) to reference 184
          		@ MAP_PC idepth=0 javaPc=20 compiledPc=184
0x2bcc5808	184:	lw	ra, 0(CP)	@ const 9788544
          		@ Do getstatic:
0x2bcc580c	188:	lw	s7, 0(ra)	@ value{I|F|O} = getstatic(staticFieldAddr);
          		@ Do putfield:
0x2bcc5810	192:	addiu	s6, s4, 12	@ fieldAddr = obj + fieldOffset;
0x2bcc5814	196:	sw	s7, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcc5818	200:	lw	s5, 0(CP)	@ cardTableVirtualBase
0x2bcc581c	204:	addiu	t9, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc5820	208:	srl	t7, s6, 9	@ mark card table
0x2bcc5824	212:	addu	t7, s5, t7	@ add indexReg and baseReg
0x2bcc5828	216:	sb	t9, 0(t7)
0x2bcc582c	220:	addiu	JSP, JFP, -8
0x2bcc5830	224:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc5834	228:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc5838	232:	nop
0x2bcc583c	236:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 200(0x2bcc5818) to reference 236
0x2bcc5840	240:	.word	9783832	@ mb com.sun.mep.bench.Chess.NewtonMovement.<init>(Lcom/sun/mep/bench/Chess/Game;)V
--->Fixed instruction at 144(0x2bcc57e0) to reference 240
0x2bcc5844	244:	.word	9783544	@ cb com.sun.mep.bench.Chess.NewtonMovement
--->Fixed instruction at 116(0x2bcc57c4) to reference 244
0x2bcc5848	248:	.word	9788544
--->Fixed instruction at 184(0x2bcc5808) to reference 248
--->Fixed instruction at 168(0x2bcc57f8) to reference 248
--->Fixed instruction at 100(0x2bcc57b4) to reference 248
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc5750) >>>>>>>>
          		@ Capacity is 14 word(s)
0x2bcc5750	0:	addiu	a1, JSP, 52
<<<<<<<<<Pop Code Buffer to PC = 252 (0x2bcc584c) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc57a0) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcc57a0	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcc57a4	84:	lui	CP, hi16(0x2bcc)
0x2bcc57a8	88:	ori	CP, CP, lo16(0x2bcc583c)
0x2bcc57ac	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 252 (0x2bcc584c) <<<<<<<<<
JS: COMPILED: size=320 startPC=0x2bcc5750 com.sun.mep.bench.Chess.Actor.createMovementHandler()V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.Actor.createBoundaryHandler()V
JS: COMPILING com.sun.mep.bench.Chess.Actor.createBoundaryHandler()V
orig bkID(1) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(1) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
s1   bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
bkID(0) local(0 #0)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(0) Incoming Locals(1 0x0): 0- 
+bk  bkID(0) Incoming Locals(1 0x1): 0+ 
-gbk bkID(1) Incoming Locals(1 0x0): 0- 
+gbk bkID(1) Incoming Locals(1 0x1): 0+ 
bkID(0) local(0 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(1 0x1): 0+ 
dstBk(0) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(0) Incoming Locals(1 0x1): 0+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(1 0x1): 0+ 
dstBk(1) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(1) Incoming Locals(1 0x1): 0+ 

#################################################

The maximum node counts per root node are 8
IR block list contains 2 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 7 root nodes: in block 
* flags: 0x41
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1
* Source: com.sun.mep.bench.Chess.Actor.createBoundaryHandler()V(Actor.java:199)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x955e18):    agetstatic_quick #24 <com.sun.mep.bench.Chess.Actor.masterBoundary:Lcom/sun/mep/bench/Chess/BoundaryHandler;>
<3>  (0x955e1b):    ifnonnull <28>
<6>  (0x955e1e):    new_quick #25 <com.sun.mep.bench.Chess.WrapRectBoundary>
<9>  (0x955e21):    dup 
<10>  (0x955e22):    aload_0 
<11>  (0x955e23):    agetfield_quick #2
<14>  (0x955e26):    iconst_0 
<15>  (0x955e27):    iconst_0 
<16>  (0x955e28):    sipush 400
<19>  (0x955e2b):    sipush 400
<22>  (0x955e2e):    invokenonvirtual_quick #26 <com.sun.mep.bench.Chess.WrapRectBoundary.<init>(Lcom/sun/mep/bench/Chess/Game;IIII)V>
<25>  (0x955e31):    aputstatic_quick #24 <com.sun.mep.bench.Chess.Actor.masterBoundary:Lcom/sun/mep/bench/Chess/BoundaryHandler;>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Incoming Locals(1): 
	local(0)	ID(33)
 
Successor Blocks(1): 
	ID(1) LocalOrder(0) AssignOrder(0) RefsOK(1) Locals(0)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 4) IDENTITY (reference)  (ref count: 2)
      <(ID: 7) FETCH (reference) 
         <(ID: 3) STATIC_FIELD_REF (reference) 
            <(ID: 2) CONST_STATIC_FIELD_ADDRESS (address field)  (0x955c84)

   <(ID: 6) BCOND (reference) 
   target: (BlockID: 1 BlockPC: 28)
   condition: NE
   flags: 0
      <(ID: 4) IDENTITY (reference)  (ref count: 2)
      <(ID: 5) CONST_STRING_OBJECT (reference)  (stringObject 0x0)



   <(ID: 9) IDENTITY (reference)  (ref count: 3)
      <(ID: 27) NEW_OBJECT (reference) 
         <(ID: 8) CONST_CB (address field)  (com.sun.mep.bench.Chess.WrapRectBoundary)

   <(ID: 13) IDENTITY (reference)  (ref count: 2)
      <(ID: 28) FETCH (reference) 
         <(ID: 12) FIELD_REF (reference) 
            <(ID: 10) LOCAL (reference)   0>
            <(ID: 11) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 26) INVOKE (v) 
      <(ID: 25) PARAMETER (reference) 
         <(ID: 9) IDENTITY (reference)  (ref count: 3)
         <(ID: 24) PARAMETER (reference) 
            <(ID: 13) IDENTITY (reference)  (ref count: 2)
            <(ID: 23) PARAMETER (int) 
               <(ID: 14) CONST_JAVA_NUMERIC32 (int)  (0)
               <(ID: 22) PARAMETER (int) 
                  <(ID: 15) CONST_JAVA_NUMERIC32 (int)  (0)
                  <(ID: 21) PARAMETER (int) 
                     <(ID: 16) CONST_JAVA_NUMERIC32 (int)  (400)
                     <(ID: 20) PARAMETER (int) 
                        <(ID: 17) CONST_JAVA_NUMERIC32 (int)  (400)
                        <(ID: 19) NULL_PARAMETER (NONE) 
      <(ID: 18) CONST_MB (address field)  (com.sun.mep.bench.Chess.WrapRectBoundary.<init>(Lcom/sun/mep/bench/Chess/Game;IIII)V)

   <(ID: 31) ASSIGN (reference) 
      <(ID: 30) STATIC_FIELD_REF (reference) 
         <(ID: 29) CONST_STATIC_FIELD_ADDRESS (address field)  (0x955c84)
      <(ID: 9) IDENTITY (reference)  (ref count: 3)


*************************************************
*
* (block ID:1 block PC:28 )
* IR root list contains 4 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1
* Source: com.sun.mep.bench.Chess.Actor.createBoundaryHandler()V(Actor.java:202)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<28>  (0x955e34):    aload_0 
<29>  (0x955e35):    agetstatic_quick #24 <com.sun.mep.bench.Chess.Actor.masterBoundary:Lcom/sun/mep/bench/Chess/BoundaryHandler;>
<32>  (0x955e38):    aputfield_quick #4
<35>  (0x955e3b):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(33)
 
Incoming Locals(1): 
	local(0)	ID(33)
 
   <(ID: 32) MAP_PC (NONE)   28>

   <(ID: 36) IDENTITY (reference)  (ref count: 2)
      <(ID: 40) FETCH (reference) 
         <(ID: 35) STATIC_FIELD_REF (reference) 
            <(ID: 34) CONST_STATIC_FIELD_ADDRESS (address field)  (0x955c84)

   <(ID: 39) ASSIGN (reference) 
      <(ID: 38) FIELD_REF (reference) 
         <(ID: 33) LOCAL (reference)   0>
         <(ID: 37) CONST_FIELD_OFFSET (NONE)  (4)
      <(ID: 36) IDENTITY (reference)  (ref count: 2)

   <(ID: 41) RETURN (v) 


NUM BARRIER BYTES = 32
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 224
ESTIMATED BUFFER SIZE = 364
CODE BUFFER ADDRESS = 0x2bcc5860
PC MAP TABLE ADDRESS = 0x2bcc5868
CODE ENTRY ADDRESS = 0x2bcc5890
          		@ Method prologue
0x2bcc5890	0:	addiu	a1, JSP, 64	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc5894	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc5898	8:	sltu	t7, a1, CHUNKEND
0x2bcc589c	12:	bne	t7, zero, PC=0x2bcc5890	@ goto .skip
0x2bcc58a0	16:	nop
0x2bcc58a4	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc58a8	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc589c) >>>>>>>>
0x2bcc589c	12:	bne	t7, zero, PC=0x2bcc58ac	@ goto .skip
0x2bcc58a0	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc58ac) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc58ac	28:	sw	JFP, 4(JSP)	@ Store curr JFP into new frame
0x2bcc58b0	32:	addiu	JFP, JSP, 4	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc58b4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc58b8	40:	addiu	a3, zero, 0
0x2bcc58bc	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc58c0	48:	addiu	a3, zero, -1
0x2bcc58c4	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc58c8	56:	move	a0, EE
0x2bcc58cc	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc58d0	64:	lui	t9, hi16(0x65)
0x2bcc58d4	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc58d8	72:	jalr	t9
0x2bcc58dc	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc58e0	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc58e4	84:	nop
0x2bcc58e8	88:	nop
0x2bcc58ec	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc58f0	96:	lw	s4, -8(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
0x2bcc58f4	100:	lw	ra, 0(CP)	@ const 9788548
          		@ Do getstatic:
0x2bcc58f8	104:	lw	s7, 0(ra)	@ value{I|F|O} = getstatic(staticFieldAddr);
			@ Outgoing local(0) reg(20): in correct register
          		@ deferred comparison: 
0x2bcc58fc	108:	bne	s7, zero, PC=0x2bcc58fc	@ branch to block L1
0x2bcc5900	112:	nop
0x2bcc5904	116:	lw	a1, 0(CP)	@ cb com.sun.mep.bench.Chess.WrapRectBoundary
          		@ Do new:
          		@ cb: com.sun.mep.bench.Chess.WrapRectBoundary
0x2bcc5908	120:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc590c	124:	nop
          		@ Captured a stackmap here.
0x2bcc5910	128:	lw	s4, -8(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcc5914	132:	lw	s7, 8(s4)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc5918	136:	sw	v0, 0(JSP)
0x2bcc591c	140:	sw	s7, 4(JSP)
0x2bcc5920	144:	sw	zero, 8(JSP)
0x2bcc5924	148:	sw	zero, 12(JSP)
0x2bcc5928	152:	addiu	s7, zero, 400	@ const 400
0x2bcc592c	156:	sw	s7, 16(JSP)
0x2bcc5930	160:	sw	s7, 20(JSP)
0x2bcc5934	164:	lw	a0, 0(CP)	@ mb com.sun.mep.bench.Chess.WrapRectBoundary.<init>(Lcom/sun/mep/bench/Chess/Game;IIII)V
          		@ Invoke a method w/ a void return type
0x2bcc5938	168:	addiu	JSP, JSP, 24	@ adjust JSP before method call
0x2bcc593c	172:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc5940	176:	lw	s7, 0(a0)	@ call method through mb
0x2bcc5944	180:	jalr	s7
0x2bcc5948	184:	nop
          		@ Captured a stackmap here.
0x2bcc594c	188:	lw	s7, 0(CP)	@ const 9788548
          		@ Do putstatic:
0x2bcc5950	192:	lw	s6, 28(JFP)	@ Java temp cell # 0
0x2bcc5954	196:	sw	s6, 0(s7)	@ putstatic(staticFieldAddr, value{I|F|O})
			@ Outgoing local(0) reg(20): not in register
0x2bcc5958	200:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Initial Temp REF set is 
	L1:	204:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
--->Fixed instruction at 108(0x2bcc58fc) to reference 204
          		@ MAP_PC idepth=0 javaPc=28 compiledPc=204
0x2bcc595c	204:	lw	ra, 0(CP)	@ const 9788548
          		@ Do getstatic:
0x2bcc5960	208:	lw	s7, 0(ra)	@ value{I|F|O} = getstatic(staticFieldAddr);
          		@ Do putfield:
0x2bcc5964	212:	addiu	s6, s4, 16	@ fieldAddr = obj + fieldOffset;
0x2bcc5968	216:	sw	s7, 0(s6)	@ putfield(fieldAddr, valueObj);
0x2bcc596c	220:	lw	s5, 0(CP)	@ cardTableVirtualBase
0x2bcc5970	224:	addiu	t9, zero, 1	@ CARD_DIRTY_BYTE
0x2bcc5974	228:	srl	t7, s6, 9	@ mark card table
0x2bcc5978	232:	addu	t7, s5, t7	@ add indexReg and baseReg
0x2bcc597c	236:	sb	t9, 0(t7)
0x2bcc5980	240:	addiu	JSP, JFP, -8
0x2bcc5984	244:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc5988	248:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc598c	252:	nop
0x2bcc5990	256:	.word	733144032	@ cardTableVirtualBase
--->Fixed instruction at 220(0x2bcc596c) to reference 256
0x2bcc5994	260:	.word	9784192	@ mb com.sun.mep.bench.Chess.WrapRectBoundary.<init>(Lcom/sun/mep/bench/Chess/Game;IIII)V
--->Fixed instruction at 164(0x2bcc5934) to reference 260
0x2bcc5998	264:	.word	9783912	@ cb com.sun.mep.bench.Chess.WrapRectBoundary
--->Fixed instruction at 116(0x2bcc5904) to reference 264
0x2bcc599c	268:	.word	9788548
--->Fixed instruction at 204(0x2bcc595c) to reference 268
--->Fixed instruction at 188(0x2bcc594c) to reference 268
--->Fixed instruction at 100(0x2bcc58f4) to reference 268
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc5890) >>>>>>>>
          		@ Capacity is 18 word(s)
0x2bcc5890	0:	addiu	a1, JSP, 68
<<<<<<<<<Pop Code Buffer to PC = 272 (0x2bcc59a0) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc58e0) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcc58e0	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcc58e4	84:	lui	CP, hi16(0x2bcc)
0x2bcc58e8	88:	ori	CP, CP, lo16(0x2bcc5990)
0x2bcc58ec	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 272 (0x2bcc59a0) <<<<<<<<<
JS: COMPILED: size=340 startPC=0x2bcc5890 com.sun.mep.bench.Chess.Actor.createBoundaryHandler()V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.Rectangle.<init>(IIII)V
JS: COMPILING com.sun.mep.bench.Chess.Rectangle.<init>(IIII)V
orig bkID(0) Incoming Locals(5 0x0): 0- 1- 2- 3- 4- 
orig bkID(0) Incoming Locals(5 0x0): 0- 1- 2- 3- 4- 

#################################################

The maximum node counts per root node are 3
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 6 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Rectangle.<init>(IIII)V(Rectangle.java:39)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<0>  (0x94b318):    aload_0 
<1>  (0x94b319):    invokeignored_quick 
<4>  (0x94b31c):    aload_0 
<5>  (0x94b31d):    iload_1 
<6>  (0x94b31e):    putfield_quick #2
<9>  (0x94b321):    aload_0 
<10>  (0x94b322):    iload_2 
<11>  (0x94b323):    putfield_quick #3
<14>  (0x94b326):    aload_0 
<15>  (0x94b327):    iload_3 
<16>  (0x94b328):    putfield_quick #4
<19>  (0x94b32b):    aload_0 
<20>  (0x94b32c):    iload 4
<22>  (0x94b32e):    putfield_quick #5
<25>  (0x94b331):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(5): 
	local(0)	ID(2)
 	local(1)	ID(3)
 	local(2)	ID(7)
 	local(3)	ID(12)
 	local(4)	ID(16)
 
Incoming Locals(5): 
	local(0)	ID(2)
 	local(1)	ID(3)
 	local(2)	ID(7)
 	local(3)	ID(12)
 	local(4)	ID(16)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 6) ASSIGN (32-bit field) 
      <(ID: 5) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
            <(ID: 11) LOCAL (reference)   0>
         <(ID: 4) CONST_FIELD_OFFSET (NONE)  (2)
      <(ID: 3) LOCAL (int)   1>

   <(ID: 10) ASSIGN (32-bit field) 
      <(ID: 9) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 8) CONST_FIELD_OFFSET (NONE)  (3)
      <(ID: 7) LOCAL (int)   2>

   <(ID: 15) ASSIGN (32-bit field) 
      <(ID: 14) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 13) CONST_FIELD_OFFSET (NONE)  (4)
      <(ID: 12) LOCAL (int)   3>

   <(ID: 19) ASSIGN (32-bit field) 
      <(ID: 18) FIELD_REF (32-bit field) 
         <(ID: 2) IDENTITY (reference)  (ref count: 4)
         <(ID: 17) CONST_FIELD_OFFSET (NONE)  (5)
      <(ID: 16) LOCAL (int)   4>

   <(ID: 20) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 164
ESTIMATED BUFFER SIZE = 268
CODE BUFFER ADDRESS = 0x2bcc59b4
PC MAP TABLE ADDRESS = 0x2bcc59bc
CODE ENTRY ADDRESS = 0x2bcc59e0
          		@ Method prologue
0x2bcc59e0	0:	addiu	a1, JSP, 40	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc59e4	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc59e8	8:	sltu	t7, a1, CHUNKEND
0x2bcc59ec	12:	bne	t7, zero, PC=0x2bcc59e0	@ goto .skip
0x2bcc59f0	16:	nop
0x2bcc59f4	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc59f8	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc59ec) >>>>>>>>
0x2bcc59ec	12:	bne	t7, zero, PC=0x2bcc59fc	@ goto .skip
0x2bcc59f0	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc59fc) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc59fc	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcc5a00	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc5a04	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc5a08	40:	addiu	a3, zero, 0
0x2bcc5a0c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc5a10	48:	addiu	a3, zero, -1
0x2bcc5a14	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc5a18	56:	move	a0, EE
0x2bcc5a1c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc5a20	64:	lui	t9, hi16(0x65)
0x2bcc5a24	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc5a28	72:	jalr	t9
0x2bcc5a2c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc5a30	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc5a34	84:	nop
0x2bcc5a38	88:	nop
0x2bcc5a3c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc5a40	96:	lw	s4, -20(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcc5a44	100:	lw	s5, -16(JFP)	@ Java local cell # 1
			@ Preloading incoming local(2) reg(22)
0x2bcc5a48	104:	lw	s6, -12(JFP)	@ Java local cell # 2
			@ Preloading incoming local(3) reg(23)
0x2bcc5a4c	108:	lw	s7, -8(JFP)	@ Java local cell # 3
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=112
          		@ Do putfield:
0x2bcc5a50	112:	sw	s5, 8(s4)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do putfield:
0x2bcc5a54	116:	sw	s6, 12(s4)	@ putfield(obj, fieldOffset, value{I|F});
          		@ Do putfield:
0x2bcc5a58	120:	sw	s7, 16(s4)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcc5a5c	124:	lw	ra, -4(JFP)	@ Java local cell # 4
          		@ Do putfield:
0x2bcc5a60	128:	sw	ra, 20(s4)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcc5a64	132:	addiu	JSP, JFP, -20
0x2bcc5a68	136:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc5a6c	140:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc5a70	144:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc59e0) >>>>>>>>
          		@ Capacity is 15 word(s)
0x2bcc59e0	0:	addiu	a1, JSP, 40
<<<<<<<<<Pop Code Buffer to PC = 148 (0x2bcc5a74) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc5a30) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc5a30	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc5a34	84:	lui	CP, hi16(0x2bcc)
0x2bcc5a38	88:	ori	CP, CP, lo16(0x2bcc5a74)
0x2bcc5a3c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 148 (0x2bcc5a74) <<<<<<<<<
JS: COMPILED: size=196 startPC=0x2bcc59e0 com.sun.mep.bench.Chess.Rectangle.<init>(IIII)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.Actor.notifyForEvents()V
JS: COMPILING com.sun.mep.bench.Chess.Actor.notifyForEvents()V

#################################################

The maximum node counts per root node are 1
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 2 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Actor.notifyForEvents()V(Actor.java:209)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x955e5c):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 2) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 14
ESTIMATED BUFFER SIZE = 120
CODE BUFFER ADDRESS = 0x2bcc5a78
PC MAP TABLE ADDRESS = 0x2bcc5a80
CODE ENTRY ADDRESS = 0x2bcc5aa8
          		@ Method prologue
0x2bcc5aa8	0:	addiu	a1, JSP, 36	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc5aac	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc5ab0	8:	sltu	t7, a1, CHUNKEND
0x2bcc5ab4	12:	bne	t7, zero, PC=0x2bcc5aa8	@ goto .skip
0x2bcc5ab8	16:	nop
0x2bcc5abc	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc5ac0	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc5ab4) >>>>>>>>
0x2bcc5ab4	12:	bne	t7, zero, PC=0x2bcc5ac4	@ goto .skip
0x2bcc5ab8	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc5ac4) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc5ac4	28:	sw	JFP, 4(JSP)	@ Store curr JFP into new frame
0x2bcc5ac8	32:	addiu	JFP, JSP, 4	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc5acc	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc5ad0	40:	addiu	a3, zero, 0
0x2bcc5ad4	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc5ad8	48:	addiu	a3, zero, -1
0x2bcc5adc	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc5ae0	56:	move	a0, EE
0x2bcc5ae4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc5ae8	64:	lui	t9, hi16(0x65)
0x2bcc5aec	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc5af0	72:	jalr	t9
0x2bcc5af4	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc5af8	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc5afc	84:	nop
0x2bcc5b00	88:	nop
0x2bcc5b04	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=96
0x2bcc5b08	96:	addiu	JSP, JFP, -8
0x2bcc5b0c	100:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc5b10	104:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc5b14	108:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc5aa8) >>>>>>>>
          		@ Capacity is 10 word(s)
0x2bcc5aa8	0:	addiu	a1, JSP, 36
<<<<<<<<<Pop Code Buffer to PC = 112 (0x2bcc5b18) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc5af8) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc5af8	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc5afc	84:	lui	CP, hi16(0x2bcc)
0x2bcc5b00	88:	ori	CP, CP, lo16(0x2bcc5b18)
0x2bcc5b04	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 112 (0x2bcc5b18) <<<<<<<<<
JS: COMPILED: size=164 startPC=0x2bcc5aa8 com.sun.mep.bench.Chess.Actor.notifyForEvents()V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.Actor.setFixed(Z)V
JS: COMPILING com.sun.mep.bench.Chess.Actor.setFixed(Z)V
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 
orig bkID(0) Incoming Locals(2 0x0): 0- 1- 

#################################################

The maximum node counts per root node are 3
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 3 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.Actor.setFixed(Z)V(Actor.java:171)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x955d98):    aload_0 
<1>  (0x955d99):    iload_1 
<2>  (0x955d9a):    putfield_quick #17
<5>  (0x955d9d):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
Incoming Locals(2): 
	local(0)	ID(2)
 	local(1)	ID(3)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 6) ASSIGN (32-bit field) 
      <(ID: 5) FIELD_REF (32-bit field) 
         <(ID: 2) LOCAL (reference)   0>
         <(ID: 4) CONST_FIELD_OFFSET (NONE)  (17)
      <(ID: 3) LOCAL (int)   1>

   <(ID: 7) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 44
ESTIMATED BUFFER SIZE = 148
CODE BUFFER ADDRESS = 0x2bcc5b1c
PC MAP TABLE ADDRESS = 0x2bcc5b24
CODE ENTRY ADDRESS = 0x2bcc5b48
          		@ Method prologue
0x2bcc5b48	0:	addiu	a1, JSP, 40	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc5b4c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc5b50	8:	sltu	t7, a1, CHUNKEND
0x2bcc5b54	12:	bne	t7, zero, PC=0x2bcc5b48	@ goto .skip
0x2bcc5b58	16:	nop
0x2bcc5b5c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc5b60	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc5b54) >>>>>>>>
0x2bcc5b54	12:	bne	t7, zero, PC=0x2bcc5b64	@ goto .skip
0x2bcc5b58	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc5b64) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc5b64	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcc5b68	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc5b6c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc5b70	40:	addiu	a3, zero, 0
0x2bcc5b74	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc5b78	48:	addiu	a3, zero, -1
0x2bcc5b7c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc5b80	56:	move	a0, EE
0x2bcc5b84	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc5b88	64:	lui	t9, hi16(0x65)
0x2bcc5b8c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc5b90	72:	jalr	t9
0x2bcc5b94	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc5b98	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc5b9c	84:	nop
0x2bcc5ba0	88:	nop
0x2bcc5ba4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc5ba8	96:	lw	s4, -8(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcc5bac	100:	lw	s5, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=104
          		@ Do putfield:
0x2bcc5bb0	104:	sw	s5, 68(s4)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcc5bb4	108:	addiu	JSP, JFP, -8
0x2bcc5bb8	112:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc5bbc	116:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc5bc0	120:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc5b48) >>>>>>>>
          		@ Capacity is 12 word(s)
0x2bcc5b48	0:	addiu	a1, JSP, 40
<<<<<<<<<Pop Code Buffer to PC = 124 (0x2bcc5bc4) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc5b98) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc5b98	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc5b9c	84:	lui	CP, hi16(0x2bcc)
0x2bcc5ba0	88:	ori	CP, CP, lo16(0x2bcc5bc4)
0x2bcc5ba4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 124 (0x2bcc5bc4) <<<<<<<<<
JS: COMPILED: size=172 startPC=0x2bcc5b48 com.sun.mep.bench.Chess.Actor.setFixed(Z)V
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.ChessPiece.getColumn(I)I
JS: COMPILING com.sun.mep.bench.Chess.ChessPiece.getColumn(I)I
orig bkID(0) Incoming Locals(1 0x0): 1- 
orig bkID(0) Incoming Locals(1 0x0): 1- 

#################################################

The maximum node counts per root node are 3
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 2 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.ChessPiece.getColumn(I)I(ChessPiece.java:252)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x9584c0):    iload_1 
<1>  (0x9584c1):    bipush 8
<3>  (0x9584c3):    irem 
<4>  (0x9584c4):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(1)	ID(2)
 
Incoming Locals(1): 
	local(1)	ID(2)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) RETURN_VALUE (int) 
      <(ID: 4) REM (int) 
         <(ID: 2) LOCAL (int)   1>
         <(ID: 3) CONST_JAVA_NUMERIC32 (int)  (8)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 38
ESTIMATED BUFFER SIZE = 144
CODE BUFFER ADDRESS = 0x2bcc5bc8
PC MAP TABLE ADDRESS = 0x2bcc5bd0
CODE ENTRY ADDRESS = 0x2bcc5bf8
          		@ Method prologue
0x2bcc5bf8	0:	addiu	a1, JSP, 40	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc5bfc	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc5c00	8:	sltu	t7, a1, CHUNKEND
0x2bcc5c04	12:	bne	t7, zero, PC=0x2bcc5bf8	@ goto .skip
0x2bcc5c08	16:	nop
0x2bcc5c0c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc5c10	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc5c04) >>>>>>>>
0x2bcc5c04	12:	bne	t7, zero, PC=0x2bcc5c14	@ goto .skip
0x2bcc5c08	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc5c14) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc5c14	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcc5c18	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc5c1c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc5c20	40:	addiu	a3, zero, 0
0x2bcc5c24	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc5c28	48:	addiu	a3, zero, -1
0x2bcc5c2c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc5c30	56:	move	a0, EE
0x2bcc5c34	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc5c38	64:	lui	t9, hi16(0x65)
0x2bcc5c3c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc5c40	72:	jalr	t9
0x2bcc5c44	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc5c48	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc5c4c	84:	nop
0x2bcc5c50	88:	nop
0x2bcc5c54	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(1) reg(20)
0x2bcc5c58	96:	lw	s4, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
          		@ do irem by 8:
0x2bcc5c5c	100:	sra	s7, s4, 31
0x2bcc5c60	104:	srl	t7, s7, 29
0x2bcc5c64	108:	addu	s7, s4, t7
0x2bcc5c68	112:	addiu	t7, zero, -8
0x2bcc5c6c	116:	and	s7, s7, t7
0x2bcc5c70	120:	subu	s7, s4, s7
0x2bcc5c74	124:	sw	s7, -8(JFP)	@ Java local cell # 0
0x2bcc5c78	128:	addiu	JSP, JFP, -4
0x2bcc5c7c	132:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc5c80	136:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc5c84	140:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc5bf8) >>>>>>>>
          		@ Capacity is 12 word(s)
0x2bcc5bf8	0:	addiu	a1, JSP, 40
<<<<<<<<<Pop Code Buffer to PC = 144 (0x2bcc5c88) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc5c48) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc5c48	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc5c4c	84:	lui	CP, hi16(0x2bcc)
0x2bcc5c50	88:	ori	CP, CP, lo16(0x2bcc5c88)
0x2bcc5c54	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 144 (0x2bcc5c88) <<<<<<<<<
JS: COMPILED: size=196 startPC=0x2bcc5bf8 com.sun.mep.bench.Chess.ChessPiece.getColumn(I)I
JS: ATTEMPTING TO COMPILE com.sun.mep.bench.Chess.ChessPiece.getRow(I)I
JS: COMPILING com.sun.mep.bench.Chess.ChessPiece.getRow(I)I
orig bkID(0) Incoming Locals(1 0x0): 1- 
orig bkID(0) Incoming Locals(1 0x0): 1- 

#################################################

The maximum node counts per root node are 3
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 2 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: com.sun.mep.bench.Chess.ChessPiece.getRow(I)I(ChessPiece.java:257)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x9584dc):    iload_1 
<1>  (0x9584dd):    bipush 8
<3>  (0x9584df):    idiv 
<4>  (0x9584e0):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(1)	ID(2)
 
Incoming Locals(1): 
	local(1)	ID(2)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) RETURN_VALUE (int) 
      <(ID: 4) DIV (int) 
         <(ID: 2) LOCAL (int)   1>
         <(ID: 3) CONST_JAVA_NUMERIC32 (int)  (8)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 38
ESTIMATED BUFFER SIZE = 144
CODE BUFFER ADDRESS = 0x2bcc5c8c
PC MAP TABLE ADDRESS = 0x2bcc5c94
CODE ENTRY ADDRESS = 0x2bcc5cb8
          		@ Method prologue
0x2bcc5cb8	0:	addiu	a1, JSP, 40	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc5cbc	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc5cc0	8:	sltu	t7, a1, CHUNKEND
0x2bcc5cc4	12:	bne	t7, zero, PC=0x2bcc5cb8	@ goto .skip
0x2bcc5cc8	16:	nop
0x2bcc5ccc	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc5cd0	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc5cc4) >>>>>>>>
0x2bcc5cc4	12:	bne	t7, zero, PC=0x2bcc5cd4	@ goto .skip
0x2bcc5cc8	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc5cd4) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc5cd4	28:	sw	JFP, 0(JSP)	@ Store curr JFP into new frame
0x2bcc5cd8	32:	addiu	JFP, JSP, 0	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc5cdc	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc5ce0	40:	addiu	a3, zero, 0
0x2bcc5ce4	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc5ce8	48:	addiu	a3, zero, -1
0x2bcc5cec	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc5cf0	56:	move	a0, EE
0x2bcc5cf4	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc5cf8	64:	lui	t9, hi16(0x65)
0x2bcc5cfc	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc5d00	72:	jalr	t9
0x2bcc5d04	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc5d08	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc5d0c	84:	nop
0x2bcc5d10	88:	nop
0x2bcc5d14	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(1) reg(20)
0x2bcc5d18	96:	lw	s4, -4(JFP)	@ Java local cell # 1
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
          		@ do idiv by 8:
0x2bcc5d1c	100:	sra	s7, s4, 31
0x2bcc5d20	104:	srl	t7, s7, 29
0x2bcc5d24	108:	addu	s7, s4, t7
0x2bcc5d28	112:	sra	s7, s7, 3
0x2bcc5d2c	116:	sw	s7, -8(JFP)	@ Java local cell # 0
0x2bcc5d30	120:	addiu	JSP, JFP, -4
0x2bcc5d34	124:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc5d38	128:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc5d3c	132:	nop
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc5cb8) >>>>>>>>
          		@ Capacity is 12 word(s)
0x2bcc5cb8	0:	addiu	a1, JSP, 40
<<<<<<<<<Pop Code Buffer to PC = 136 (0x2bcc5d40) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc5d08) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc5d08	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc5d0c	84:	lui	CP, hi16(0x2bcc)
0x2bcc5d10	88:	ori	CP, CP, lo16(0x2bcc5d40)
0x2bcc5d14	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 136 (0x2bcc5d40) <<<<<<<<<
JS: COMPILED: size=184 startPC=0x2bcc5cb8 com.sun.mep.bench.Chess.ChessPiece.getRow(I)I
JS: ATTEMPTING TO COMPILE java.lang.StringBuffer.<init>()V
JS: COMPILING java.lang.StringBuffer.<init>()V
orig bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(1 0x0): 0- 

#################################################

The maximum node counts per root node are 4
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 3 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.lang.StringBuffer.<init>()V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x6f61cc):    aload_0 
<1>  (0x6f61cd):    bipush 16
<3>  (0x6f61cf):    invokenonvirtual_quick #9479 <java.lang.StringBuffer.<init>(I)V>
<6>  (0x6f61d2):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(1): 
	local(0)	ID(2)
 
   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 8) INVOKE (v) 
      <(ID: 7) PARAMETER (reference) 
         <(ID: 2) LOCAL (reference)   0>
         <(ID: 6) PARAMETER (int) 
            <(ID: 3) CONST_JAVA_NUMERIC32 (int)  (16)
            <(ID: 5) NULL_PARAMETER (NONE) 
      <(ID: 4) CONST_MB (address field)  (java.lang.StringBuffer.<init>(I)V)

   <(ID: 9) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 50
ESTIMATED BUFFER SIZE = 156
CODE BUFFER ADDRESS = 0x2bcc5d44
PC MAP TABLE ADDRESS = 0x2bcc5d4c
CODE ENTRY ADDRESS = 0x2bcc5d70
          		@ Method prologue
0x2bcc5d70	0:	addiu	a1, JSP, 44	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc5d74	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc5d78	8:	sltu	t7, a1, CHUNKEND
0x2bcc5d7c	12:	bne	t7, zero, PC=0x2bcc5d70	@ goto .skip
0x2bcc5d80	16:	nop
0x2bcc5d84	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc5d88	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc5d7c) >>>>>>>>
0x2bcc5d7c	12:	bne	t7, zero, PC=0x2bcc5d8c	@ goto .skip
0x2bcc5d80	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc5d8c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc5d8c	28:	sw	JFP, 4(JSP)	@ Store curr JFP into new frame
0x2bcc5d90	32:	addiu	JFP, JSP, 4	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc5d94	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc5d98	40:	addiu	a3, zero, 0
0x2bcc5d9c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc5da0	48:	addiu	a3, zero, -1
0x2bcc5da4	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc5da8	56:	move	a0, EE
0x2bcc5dac	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc5db0	64:	lui	t9, hi16(0x65)
0x2bcc5db4	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc5db8	72:	jalr	t9
0x2bcc5dbc	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc5dc0	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc5dc4	84:	nop
0x2bcc5dc8	88:	nop
0x2bcc5dcc	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc5dd0	96:	lw	s4, -8(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
0x2bcc5dd4	100:	sw	s4, 0(JSP)
0x2bcc5dd8	104:	addiu	s7, zero, 16	@ const 16
0x2bcc5ddc	108:	sw	s7, 4(JSP)
0x2bcc5de0	112:	lw	a0, 0(CP)	@ mb java.lang.StringBuffer.<init>(I)V
          		@ Invoke a method w/ a void return type
0x2bcc5de4	116:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc5de8	120:	lw	s7, 0(a0)	@ call method through mb
0x2bcc5dec	124:	jalr	s7
0x2bcc5df0	128:	nop
          		@ Captured a stackmap here.
0x2bcc5df4	132:	addiu	JSP, JFP, -8
0x2bcc5df8	136:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc5dfc	140:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc5e00	144:	nop
0x2bcc5e04	148:	.word	9108996	@ mb java.lang.StringBuffer.<init>(I)V
--->Fixed instruction at 112(0x2bcc5de0) to reference 148
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc5d70) >>>>>>>>
          		@ Capacity is 12 word(s)
0x2bcc5d70	0:	addiu	a1, JSP, 44
<<<<<<<<<Pop Code Buffer to PC = 152 (0x2bcc5e08) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc5dc0) >>>>>>>>
          		@ spillSize is 0 word(s), add to JFP+28
0x2bcc5dc0	80:	addiu	JSP, JFP, 28
          		@ setup cp base register
0x2bcc5dc4	84:	lui	CP, hi16(0x2bcc)
0x2bcc5dc8	88:	ori	CP, CP, lo16(0x2bcc5e04)
0x2bcc5dcc	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 152 (0x2bcc5e08) <<<<<<<<<
JS: COMPILED: size=212 startPC=0x2bcc5d70 java.lang.StringBuffer.<init>()V
JS: ATTEMPTING TO COMPILE java.lang.StringBuffer.toString()Ljava/lang/String;
JS: COMPILING java.lang.StringBuffer.toString()Ljava/lang/String;

#################################################

The maximum node counts per root node are 4
IR block list contains 1 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 4 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.lang.StringBuffer.toString()Ljava/lang/String;(Unknown Source)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x6f7540):    new_checkinit_quick #4904 <java.lang.String>
<3>  (0x6f7543):    dup 
<4>  (0x6f7544):    aload_0 
<5>  (0x6f7545):    invokenonvirtual_quick #6998 <java.lang.String.<init>(Ljava/lang/StringBuffer;)V>
<8>  (0x6f7548):    areturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 3) IDENTITY (reference)  (ref count: 3)
      <(ID: 10) NEW_OBJECT (reference) 
         <(ID: 2) CONST_CB (address field)  (java.lang.String)

   <(ID: 9) INVOKE (v) 
      <(ID: 8) PARAMETER (reference) 
         <(ID: 3) IDENTITY (reference)  (ref count: 3)
         <(ID: 7) PARAMETER (reference) 
            <(ID: 4) LOCAL (reference)   0>
            <(ID: 6) NULL_PARAMETER (NONE) 
      <(ID: 5) CONST_MB (address field)  (java.lang.String.<init>(Ljava/lang/StringBuffer;)V)

   <(ID: 11) RETURN_VALUE (reference) 
      <(ID: 3) IDENTITY (reference)  (ref count: 3)


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 62
ESTIMATED BUFFER SIZE = 168
CODE BUFFER ADDRESS = 0x2bcc5e18
PC MAP TABLE ADDRESS = 0x2bcc5e20
CODE ENTRY ADDRESS = 0x2bcc5e48
          		@ Method prologue
0x2bcc5e48	0:	addiu	a1, JSP, 48	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc5e4c	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc5e50	8:	sltu	t7, a1, CHUNKEND
0x2bcc5e54	12:	bne	t7, zero, PC=0x2bcc5e48	@ goto .skip
0x2bcc5e58	16:	nop
0x2bcc5e5c	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc5e60	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc5e54) >>>>>>>>
0x2bcc5e54	12:	bne	t7, zero, PC=0x2bcc5e64	@ goto .skip
0x2bcc5e58	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc5e64) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc5e64	28:	sw	JFP, 4(JSP)	@ Store curr JFP into new frame
0x2bcc5e68	32:	addiu	JFP, JSP, 4	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc5e6c	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc5e70	40:	addiu	a3, zero, 0
0x2bcc5e74	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc5e78	48:	addiu	a3, zero, -1
0x2bcc5e7c	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc5e80	56:	move	a0, EE
0x2bcc5e84	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc5e88	64:	lui	t9, hi16(0x65)
0x2bcc5e8c	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc5e90	72:	jalr	t9
0x2bcc5e94	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc5e98	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc5e9c	84:	nop
0x2bcc5ea0	88:	nop
0x2bcc5ea4	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=96
0x2bcc5ea8	96:	lw	a1, 0(CP)	@ cb java.lang.String
          		@ Do new:
          		@ cb: java.lang.String
0x2bcc5eac	100:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc5eb0	104:	nop
          		@ Captured a stackmap here.
0x2bcc5eb4	108:	sw	v0, 0(JSP)
0x2bcc5eb8	112:	lw	ra, -8(JFP)	@ Java local cell # 0
0x2bcc5ebc	116:	sw	ra, 4(JSP)
0x2bcc5ec0	120:	lw	a0, 0(CP)	@ mb java.lang.String.<init>(Ljava/lang/StringBuffer;)V
          		@ Invoke a method w/ a void return type
0x2bcc5ec4	124:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc5ec8	128:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc5ecc	132:	lw	s7, 0(a0)	@ call method through mb
0x2bcc5ed0	136:	jalr	s7
0x2bcc5ed4	140:	nop
          		@ Captured a stackmap here.
0x2bcc5ed8	144:	lw	s7, 28(JFP)	@ Java temp cell # 0
0x2bcc5edc	148:	sw	s7, -8(JFP)	@ Java local cell # 0
0x2bcc5ee0	152:	addiu	JSP, JFP, -4
0x2bcc5ee4	156:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc5ee8	160:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc5eec	164:	nop
0x2bcc5ef0	168:	.word	9065008	@ mb java.lang.String.<init>(Ljava/lang/StringBuffer;)V
--->Fixed instruction at 120(0x2bcc5ec0) to reference 168
0x2bcc5ef4	172:	.word	8603840	@ cb java.lang.String
--->Fixed instruction at 96(0x2bcc5ea8) to reference 172
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc5e48) >>>>>>>>
          		@ Capacity is 14 word(s)
0x2bcc5e48	0:	addiu	a1, JSP, 52
<<<<<<<<<Pop Code Buffer to PC = 176 (0x2bcc5ef8) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc5e98) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcc5e98	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcc5e9c	84:	lui	CP, hi16(0x2bcc)
0x2bcc5ea0	88:	ori	CP, CP, lo16(0x2bcc5ef0)
0x2bcc5ea4	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 176 (0x2bcc5ef8) <<<<<<<<<
JS: COMPILED: size=244 startPC=0x2bcc5e48 java.lang.StringBuffer.toString()Ljava/lang/String;
JS: ATTEMPTING TO COMPILE java.util.zip.InflaterInputStream.ensureOpen()V
JS: COMPILING java.util.zip.InflaterInputStream.ensureOpen()V
orig bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
orig bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
o1   bkID(0) Incoming Locals(1 0x0): 0- 
bkID(0) local(0 #0)  not found in goalBk
pre  bkID(0) Incoming Locals(1 0x0): 0- 
local(#0) swapped with local(#0)
post bkID(0) Incoming Locals(1 0x1): 0+ 

#################################################

The maximum node counts per root node are 4
IR block list contains 2 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 6 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1
* Source: java.util.zip.InflaterInputStream.ensureOpen()V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<0>  (0x7263ac):    aload_0 
<1>  (0x7263ad):    getfield_quick #6
<4>  (0x7263b0):    ifeq <17>
<7>  (0x7263b3):    new_quick #7375 <java.io.IOException>
<10>  (0x7263b6):    dup 
<11>  (0x7263b7):    aldc_quick #59
<13>  (0x7263b9):    invokenonvirtual_quick #10215 <java.io.IOException.<init>(Ljava/lang/String;)V>
<16>  (0x7263bc):    athrow 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(1): 
	local(0)	ID(2)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 8) FETCH (32-bit field) 
         <(ID: 4) FIELD_REF (32-bit field) 
            <(ID: 2) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (6)

   <(ID: 7) BCOND (int) 
   target: (BlockID: 1 BlockPC: 17)
   condition: EQ
   flags: 0
      <(ID: 5) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 6) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 10) IDENTITY (reference)  (ref count: 3)
      <(ID: 17) NEW_OBJECT (reference) 
         <(ID: 9) CONST_CB (address field)  (java.io.IOException)

   <(ID: 16) INVOKE (v) 
      <(ID: 15) PARAMETER (reference) 
         <(ID: 10) IDENTITY (reference)  (ref count: 3)
         <(ID: 14) PARAMETER (reference) 
            <(ID: 11) CONST_STRING_OBJECT (reference)  (stringObject 0x898560)

            <(ID: 13) NULL_PARAMETER (NONE) 
      <(ID: 12) CONST_MB (address field)  (java.io.IOException.<init>(Ljava/lang/String;)V)

   <(ID: 18) THROW (NONE) 
      <(ID: 10) IDENTITY (reference)  (ref count: 3)


*************************************************
*
* (block ID:1 block PC:17 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: java.util.zip.InflaterInputStream.ensureOpen()V(Unknown Source)
* Compilation depth: 0 locals : 0 .. 1
* Byte-codes for block:
<17>  (0x7263bd):    return 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 
*************************************************

Number and size of USED nodes in phi array: 0 0

   <(ID: 19) MAP_PC (NONE)   17>

   <(ID: 20) RETURN (v) 


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 0
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 116
ESTIMATED BUFFER SIZE = 224
CODE BUFFER ADDRESS = 0x2bcc5f0c
PC MAP TABLE ADDRESS = 0x2bcc5f14
CODE ENTRY ADDRESS = 0x2bcc5f40
          		@ Method prologue
0x2bcc5f40	0:	addiu	a1, JSP, 48	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc5f44	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc5f48	8:	sltu	t7, a1, CHUNKEND
0x2bcc5f4c	12:	bne	t7, zero, PC=0x2bcc5f40	@ goto .skip
0x2bcc5f50	16:	nop
0x2bcc5f54	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc5f58	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc5f4c) >>>>>>>>
0x2bcc5f4c	12:	bne	t7, zero, PC=0x2bcc5f5c	@ goto .skip
0x2bcc5f50	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc5f5c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc5f5c	28:	sw	JFP, 4(JSP)	@ Store curr JFP into new frame
0x2bcc5f60	32:	addiu	JFP, JSP, 4	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc5f64	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc5f68	40:	addiu	a3, zero, 0
0x2bcc5f6c	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc5f70	48:	addiu	a3, zero, -1
0x2bcc5f74	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc5f78	56:	move	a0, EE
0x2bcc5f7c	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc5f80	64:	lui	t9, hi16(0x65)
0x2bcc5f84	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc5f88	72:	jalr	t9
0x2bcc5f8c	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc5f90	80:	addiu	JSP, JFP, 28	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc5f94	84:	nop
0x2bcc5f98	88:	nop
0x2bcc5f9c	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc5fa0	96:	lw	s4, -8(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
          		@ Do getfield:
0x2bcc5fa4	100:	lw	s7, 24(s4)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ deferred comparison: 
0x2bcc5fa8	104:	beq	s7, zero, PC=0x2bcc5fa8	@ branch to block L1
0x2bcc5fac	108:	nop
0x2bcc5fb0	112:	lw	a1, 0(CP)	@ cb java.io.IOException
          		@ Do new:
          		@ cb: java.io.IOException
0x2bcc5fb4	116:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc5fb8	120:	nop
          		@ Captured a stackmap here.
0x2bcc5fbc	124:	sw	v0, 0(JSP)
0x2bcc5fc0	128:	lw	ra, 0(CP)	@ const 9012576
0x2bcc5fc4	132:	sw	ra, 4(JSP)
0x2bcc5fc8	136:	lw	a0, 0(CP)	@ mb java.io.IOException.<init>(Ljava/lang/String;)V
          		@ Invoke a method w/ a void return type
0x2bcc5fcc	140:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc5fd0	144:	sw	v0, 28(JFP)	@ REF spill Java temp cell # 0
0x2bcc5fd4	148:	lw	s7, 0(a0)	@ call method through mb
0x2bcc5fd8	152:	jalr	s7
0x2bcc5fdc	156:	nop
          		@ Captured a stackmap here.
0x2bcc5fe0	160:	lw	a2, 28(JFP)	@ Java temp cell # 0
0x2bcc5fe4	164:	jal	PC=(0x2bcb8138)	@ goto CVMCCMruntimeThrowObjectGlue
0x2bcc5fe8	168:	nop
			@ Initial Temp REF set is 
	L1:	172:	@ entry point for branches
--->Fixed instruction at 104(0x2bcc5fa8) to reference 172
          		@ MAP_PC idepth=0 javaPc=17 compiledPc=172
0x2bcc5fec	172:	addiu	JSP, JFP, -8
0x2bcc5ff0	176:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc5ff4	180:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc5ff8	184:	nop
0x2bcc5ffc	188:	.word	9137260	@ mb java.io.IOException.<init>(Ljava/lang/String;)V
--->Fixed instruction at 136(0x2bcc5fc8) to reference 188
0x2bcc6000	192:	.word	9012576
--->Fixed instruction at 128(0x2bcc5fc0) to reference 192
0x2bcc6004	196:	.word	8669668	@ cb java.io.IOException
--->Fixed instruction at 112(0x2bcc5fb0) to reference 196
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc5f40) >>>>>>>>
          		@ Capacity is 14 word(s)
0x2bcc5f40	0:	addiu	a1, JSP, 52
<<<<<<<<<Pop Code Buffer to PC = 200 (0x2bcc6008) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc5f90) >>>>>>>>
          		@ spillSize is 1 word(s), add to JFP+28
0x2bcc5f90	80:	addiu	JSP, JFP, 32
          		@ setup cp base register
0x2bcc5f94	84:	lui	CP, hi16(0x2bcc)
0x2bcc5f98	88:	ori	CP, CP, lo16(0x2bcc5ffc)
0x2bcc5f9c	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 200 (0x2bcc6008) <<<<<<<<<
JS: COMPILED: size=272 startPC=0x2bcc5f40 java.util.zip.InflaterInputStream.ensureOpen()V
JS: ATTEMPTING TO COMPILE java.util.zip.InflaterInputStream$NativeReader.readNative([BII)I
JS: COMPILING java.util.zip.InflaterInputStream$NativeReader.readNative([BII)I
orig bkID(4) Incoming Locals(1 0x0): 4- 
orig bkID(5) Incoming Locals(4 0x0): 4- 5- 2- 3- 
o1   bkID(5) Incoming Locals(4 0x0): 4- 5- 2- 3- 
s1   bkID(5) Incoming Locals(5 0x0): 4- 5- 2- 3- 0- 
s1   bkID(5) Incoming Locals(6 0x0): 4- 5- 2- 3- 0- 1- 
o1   bkID(5) Incoming Locals(6 0x0): 4- 5- 2- 3- 0- 1- 
orig bkID(7) Incoming Locals(1 0x0): 0- 
o1   bkID(7) Incoming Locals(1 0x0): 0- 
orig bkID(6) Incoming Locals(1 0x0): 0- 
o1   bkID(6) Incoming Locals(1 0x0): 0- 
orig bkID(9) Incoming Locals(4 0x0): 3- 0- 1- 2- 
o1   bkID(9) Incoming Locals(1 0x0): 3- 
s1   bkID(9) Incoming Locals(2 0x0): 3- 4- 
o1   bkID(9) Incoming Locals(5 0x0): 3- 4- 0- 1- 2- 
s1   bkID(3) Incoming Locals(1 0x0): 3- 
s1   bkID(3) Incoming Locals(2 0x0): 3- 0- 
s1   bkID(3) Incoming Locals(3 0x0): 3- 0- 1- 
s1   bkID(3) Incoming Locals(4 0x0): 3- 0- 1- 2- 
o1   bkID(3) Incoming Locals(4 0x0): 3- 0- 1- 2- 
orig bkID(2) Incoming Locals(1 0x0): 3- 
o1   bkID(2) Incoming Locals(1 0x0): 3- 
s1   bkID(2) Incoming Locals(1 0x0): 3- 
s1   bkID(2) Incoming Locals(2 0x0): 3- 0- 
s1   bkID(2) Incoming Locals(3 0x0): 3- 0- 1- 
s1   bkID(2) Incoming Locals(4 0x0): 3- 0- 1- 2- 
o1   bkID(2) Incoming Locals(4 0x0): 3- 0- 1- 2- 
orig bkID(1) Incoming Locals(1 0x0): 0- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
orig bkID(4) Incoming Locals(1 0x0): 4- 
orig bkID(5) Incoming Locals(6 0x0): 4- 5- 2- 3- 0- 1- 
o1   bkID(5) Incoming Locals(4 0x0): 4- 5- 2- 3- 
s1   bkID(5) Incoming Locals(5 0x0): 4- 5- 2- 3- 0- 
s1   bkID(5) Incoming Locals(6 0x0): 4- 5- 2- 3- 0- 1- 
o1   bkID(5) Incoming Locals(6 0x0): 4- 5- 2- 3- 0- 1- 
orig bkID(7) Incoming Locals(1 0x0): 0- 
o1   bkID(7) Incoming Locals(1 0x0): 0- 
orig bkID(6) Incoming Locals(1 0x0): 0- 
o1   bkID(6) Incoming Locals(1 0x0): 0- 
orig bkID(9) Incoming Locals(5 0x0): 3- 4- 0- 1- 2- 
o1   bkID(9) Incoming Locals(1 0x0): 3- 
s1   bkID(9) Incoming Locals(2 0x0): 3- 4- 
o1   bkID(9) Incoming Locals(5 0x0): 3- 4- 0- 1- 2- 
orig bkID(3) Incoming Locals(4 0x0): 3- 0- 1- 2- 
s1   bkID(3) Incoming Locals(1 0x0): 3- 
s1   bkID(3) Incoming Locals(2 0x0): 3- 0- 
s1   bkID(3) Incoming Locals(3 0x0): 3- 0- 1- 
s1   bkID(3) Incoming Locals(4 0x0): 3- 0- 1- 2- 
o1   bkID(3) Incoming Locals(4 0x0): 3- 0- 1- 2- 
orig bkID(2) Incoming Locals(4 0x0): 3- 0- 1- 2- 
o1   bkID(2) Incoming Locals(1 0x0): 3- 
s1   bkID(2) Incoming Locals(1 0x0): 3- 
s1   bkID(2) Incoming Locals(2 0x0): 3- 0- 
s1   bkID(2) Incoming Locals(3 0x0): 3- 0- 1- 
s1   bkID(2) Incoming Locals(4 0x0): 3- 0- 1- 2- 
o1   bkID(2) Incoming Locals(4 0x0): 3- 0- 1- 2- 
orig bkID(1) Incoming Locals(1 0x0): 0- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
bkID(5) local(0 #4)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(5) Incoming Locals(6 0x0): 4- 5- 2- 3- 0- 1- 
+bk  bkID(5) Incoming Locals(6 0x1): 4+ 5- 2- 3- 0- 1- 
-gbk bkID(9) Incoming Locals(5 0x0): 3- 4- 0- 1- 2- 
+gbk bkID(9) Incoming Locals(5 0x1): 4+ 3- 0- 1- 2- 
bkID(5) local(0 #4)  ordered in goalBk(9)
-bk  bkID(5) Incoming Locals(6 0x1): 4+ 5- 2- 3- 0- 1- 
dstBk(5) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(5) Incoming Locals(6 0x1): 4+ 5- 2- 3- 0- 1- 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1): 4+ 3- 0- 1- 2- 
dstBk(9) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(9) Incoming Locals(5 0x1): 4+ 3- 0- 1- 2- 
bkID(5) local(1 #5)  not found in goalBk
bkID(5) local(2 #2)  not ordered
bestLocal(1) bestLocalScore(8)
-bk  bkID(5) Incoming Locals(6 0x1): 4+ 5- 2- 3- 0- 1- 
+bk  bkID(5) Incoming Locals(6 0x3): 4+ 2+ 5- 3- 0- 1- 
-gbk bkID(9) Incoming Locals(5 0x1): 4+ 3- 0- 1- 2- 
+gbk bkID(9) Incoming Locals(5 0x3): 4+ 2+ 0- 1- 3- 
bkID(5) local(2 #5)  not found in goalBk
bkID(5) local(3 #3)  not ordered
bestLocal(2) bestLocalScore(8)
-bk  bkID(5) Incoming Locals(6 0x3): 4+ 2+ 5- 3- 0- 1- 
+bk  bkID(5) Incoming Locals(6 0x7): 4+ 2+ 3+ 5- 0- 1- 
-gbk bkID(9) Incoming Locals(5 0x3): 4+ 2+ 0- 1- 3- 
+gbk bkID(9) Incoming Locals(5 0x7): 4+ 2+ 3+ 1- 0- 
bkID(5) local(3 #5)  not found in goalBk
bkID(5) local(4 #0)  not ordered
bestLocal(3) bestLocalScore(8)
-bk  bkID(5) Incoming Locals(6 0x7): 4+ 2+ 3+ 5- 0- 1- 
+bk  bkID(5) Incoming Locals(6 0xf): 4+ 2+ 3+ 0+ 5- 1- 
-gbk bkID(9) Incoming Locals(5 0x7): 4+ 2+ 3+ 1- 0- 
+gbk bkID(9) Incoming Locals(5 0xf): 4+ 2+ 3+ 0+ 1- 
bkID(5) local(4 #5)  not found in goalBk
bkID(5) local(5 #1)  not ordered
bestLocal(4) bestLocalScore(8)
-bk  bkID(5) Incoming Locals(6 0xf): 4+ 2+ 3+ 0+ 5- 1- 
+bk  bkID(5) Incoming Locals(6 0x1f): 4+ 2+ 3+ 0+ 1+ 5- 
-gbk bkID(9) Incoming Locals(5 0xf): 4+ 2+ 3+ 0+ 1- 
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
bkID(5) local(5 #5)  not found in goalBk
Pushing blockID(9)
bkID(7) local(0 #0)  ordered in goalBk(9)
-bk  bkID(7) Incoming Locals(1 0x0): 0- 
dstBk(7) local(3 0) found in slot(0)
local(#3) swapped with local(#0)
+bk  bkID(7) Incoming Locals(4 0x8): <null> <null> <null> 0+ 
bkID(7) local(3 #0)  ordered in goalBk(9)
-bk  bkID(7) Incoming Locals(4 0x8): <null> <null> <null> 0+ 
dstBk(7) local(3 0) found in slot(3)
local(3 0) same slot
+bk  bkID(7) Incoming Locals(4 0x8): <null> <null> <null> 0+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(3 0) found in slot(3)
local(3 0) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
bkID(6) local(0 #0)  ordered in goalBk(9)
-bk  bkID(6) Incoming Locals(1 0x0): 0- 
dstBk(6) local(3 0) found in slot(0)
local(#3) swapped with local(#0)
+bk  bkID(6) Incoming Locals(4 0x8): <null> <null> <null> 0+ 
bkID(6) local(3 #0)  ordered in goalBk(9)
-bk  bkID(6) Incoming Locals(4 0x8): <null> <null> <null> 0+ 
dstBk(6) local(3 0) found in slot(3)
local(3 0) same slot
+bk  bkID(6) Incoming Locals(4 0x8): <null> <null> <null> 0+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(3 0) found in slot(3)
local(3 0) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
bkID(9) local(0 #4)  ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
-gbk bkID(4) Incoming Locals(1 0x0): 4- 
dstBk(4) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(4) Incoming Locals(1 0x1): 4+ 
bkID(9) local(1 #2)  not found in goalBk
bkID(9) local(2 #3)  not found in goalBk
bkID(9) local(3 #0)  not found in goalBk
bkID(9) local(4 #1)  not found in goalBk
bkID(9) local(0 #4)  ordered in goalBk(9)
-bk  bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
bkID(9) local(1 #2)  ordered in goalBk(9)
-bk  bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(1 2) found in slot(1)
local(1 2) same slot
+bk  bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(1 2) found in slot(1)
local(1 2) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
bkID(9) local(2 #3)  ordered in goalBk(9)
-bk  bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(2 3) found in slot(2)
local(2 3) same slot
+bk  bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
bkID(9) local(3 #0)  ordered in goalBk(9)
-bk  bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(3 0) found in slot(3)
local(3 0) same slot
+bk  bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(3 0) found in slot(3)
local(3 0) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
bkID(9) local(4 #1)  ordered in goalBk(9)
-bk  bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
bkID(9) local(0 #4)  ordered in goalBk(4)
-bk  bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(0 4) found in slot(0)
local(0 4) same slot
+bk  bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(4) Incoming Locals(1 0x1): 4+ 
dstBk(4) local(0 4) found in slot(0)
local(0 4) same slot
+gbk bkID(4) Incoming Locals(1 0x1): 4+ 
bkID(9) local(1 #2)  not found in goalBk
bkID(9) local(2 #3)  not found in goalBk
bkID(9) local(3 #0)  not found in goalBk
bkID(9) local(4 #1)  not found in goalBk
Popping blockID(9)
bkID(3) local(0 #3)  ordered in goalBk(9)
-bk  bkID(3) Incoming Locals(4 0x0): 3- 0- 1- 2- 
dstBk(3) local(2 3) found in slot(0)
local(#2) swapped with local(#0)
+bk  bkID(3) Incoming Locals(4 0x4): 1- 0- 3+ 2- 
bkID(3) local(1 #0)  ordered in goalBk(9)
-bk  bkID(3) Incoming Locals(4 0x4): 1- 0- 3+ 2- 
dstBk(3) local(3 0) found in slot(1)
local(#3) swapped with local(#1)
+bk  bkID(3) Incoming Locals(4 0xc): 1- 2- 3+ 0+ 
bkID(3) local(2 #3)  ordered in goalBk(9)
-bk  bkID(3) Incoming Locals(4 0xc): 1- 2- 3+ 0+ 
dstBk(3) local(2 3) found in slot(2)
local(2 3) same slot
+bk  bkID(3) Incoming Locals(4 0xc): 1- 2- 3+ 0+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
bkID(3) local(3 #0)  ordered in goalBk(9)
-bk  bkID(3) Incoming Locals(4 0xc): 1- 2- 3+ 0+ 
dstBk(3) local(3 0) found in slot(3)
local(3 0) same slot
+bk  bkID(3) Incoming Locals(4 0xc): 1- 2- 3+ 0+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(3 0) found in slot(3)
local(3 0) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
Pushing blockID(9)
bkID(2) local(0 #3)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(4 0x0): 3- 0- 1- 2- 
dstBk(2) local(2 3) found in slot(0)
local(#2) swapped with local(#0)
+bk  bkID(2) Incoming Locals(4 0x4): 1- 0- 3+ 2- 
bkID(2) local(1 #0)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(4 0x4): 1- 0- 3+ 2- 
dstBk(2) local(3 0) found in slot(1)
local(#3) swapped with local(#1)
+bk  bkID(2) Incoming Locals(4 0xc): 1- 2- 3+ 0+ 
bkID(2) local(2 #3)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(4 0xc): 1- 2- 3+ 0+ 
dstBk(2) local(2 3) found in slot(2)
local(2 3) same slot
+bk  bkID(2) Incoming Locals(4 0xc): 1- 2- 3+ 0+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
-gbk bkID(3) Incoming Locals(4 0xc): 1- 2- 3+ 0+ 
dstBk(3) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(3) Incoming Locals(4 0xc): 1- 2- 3+ 0+ 
bkID(2) local(3 #0)  ordered in goalBk(3)
-bk  bkID(2) Incoming Locals(4 0xc): 1- 2- 3+ 0+ 
dstBk(2) local(3 0) found in slot(3)
local(3 0) same slot
+bk  bkID(2) Incoming Locals(4 0xc): 1- 2- 3+ 0+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(3 0) found in slot(3)
local(3 0) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
-gbk bkID(3) Incoming Locals(4 0xc): 1- 2- 3+ 0+ 
dstBk(3) local(3 0) found in slot(3)
local(3 0) same slot
+gbk bkID(3) Incoming Locals(4 0xc): 1- 2- 3+ 0+ 
bkID(2) local(0 #1)  ordered in goalBk(9)
-bk  bkID(2) Incoming Locals(4 0xc): 1- 2- 3+ 0+ 
dstBk(2) local(4 1) found in slot(0)
local(#4) swapped with local(#0)
+bk  bkID(2) Incoming Locals(5 0x1c): <null> 2- 3+ 0+ 1+ 
bkID(2) local(1 #2)  ordered in goalBk(9)
-bk  bkID(2) Incoming Locals(5 0x1c): <null> 2- 3+ 0+ 1+ 
dstBk(2) local(1 2) found in slot(1)
local(1 2) same slot
+bk  bkID(2) Incoming Locals(5 0x1e): <null> 2+ 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(1 2) found in slot(1)
local(1 2) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
bkID(2) local(2 #3)  ordered in goalBk(9)
-bk  bkID(2) Incoming Locals(5 0x1e): <null> 2+ 3+ 0+ 1+ 
dstBk(2) local(2 3) found in slot(2)
local(2 3) same slot
+bk  bkID(2) Incoming Locals(5 0x1e): <null> 2+ 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
bkID(2) local(3 #0)  ordered in goalBk(9)
-bk  bkID(2) Incoming Locals(5 0x1e): <null> 2+ 3+ 0+ 1+ 
dstBk(2) local(3 0) found in slot(3)
local(3 0) same slot
+bk  bkID(2) Incoming Locals(5 0x1e): <null> 2+ 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(3 0) found in slot(3)
local(3 0) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
bkID(2) local(4 #1)  ordered in goalBk(9)
-bk  bkID(2) Incoming Locals(5 0x1e): <null> 2+ 3+ 0+ 1+ 
dstBk(2) local(4 1) found in slot(4)
local(4 1) same slot
+bk  bkID(2) Incoming Locals(5 0x1e): <null> 2+ 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(4 1) found in slot(4)
local(4 1) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
bkID(9) local(0 #4)  not found in goalBk
bkID(9) local(1 #2)  ordered in bk
-gbk bkID(3) Incoming Locals(4 0xc): 1- 2- 3+ 0+ 
dstBk(3) local(1 2) found in slot(1)
local(1 2) same slot
+gbk bkID(3) Incoming Locals(4 0xe): 1- 2+ 3+ 0+ 
bkID(9) local(2 #3)  ordered in goalBk(3)
-bk  bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(2 3) found in slot(2)
local(2 3) same slot
+bk  bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(4 0xe): 1- 2+ 3+ 0+ 
dstBk(3) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(3) Incoming Locals(4 0xe): 1- 2+ 3+ 0+ 
bkID(9) local(3 #0)  ordered in goalBk(3)
-bk  bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(3 0) found in slot(3)
local(3 0) same slot
+bk  bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(4 0xe): 1- 2+ 3+ 0+ 
dstBk(3) local(3 0) found in slot(3)
local(3 0) same slot
+gbk bkID(3) Incoming Locals(4 0xe): 1- 2+ 3+ 0+ 
bkID(9) local(4 #1)  ordered in bk
-gbk bkID(3) Incoming Locals(4 0xe): 1- 2+ 3+ 0+ 
dstBk(3) local(4 1) found in slot(0)
local(#4) swapped with local(#0)
+gbk bkID(3) Incoming Locals(5 0x1e): <null> 2+ 3+ 0+ 1+ 
bkID(1) local(0 #0)  ordered in goalBk(9)
-bk  bkID(1) Incoming Locals(1 0x0): 0- 
dstBk(1) local(3 0) found in slot(0)
local(#3) swapped with local(#0)
+bk  bkID(1) Incoming Locals(4 0x8): <null> <null> <null> 0+ 
bkID(1) local(3 #0)  ordered in goalBk(9)
-bk  bkID(1) Incoming Locals(4 0x8): <null> <null> <null> 0+ 
dstBk(1) local(3 0) found in slot(3)
local(3 0) same slot
+bk  bkID(1) Incoming Locals(4 0x8): <null> <null> <null> 0+ 
 ordered in bk
-gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
dstBk(9) local(3 0) found in slot(3)
local(3 0) same slot
+gbk bkID(9) Incoming Locals(5 0x1f): 4+ 2+ 3+ 0+ 1+ 
pre  bkID(5) Incoming Locals(6 0x1f): 4+ 2+ 3+ 0+ 1+ 5- 
local(#5) swapped with local(#5)
post bkID(5) Incoming Locals(6 0x3f): 4+ 2+ 3+ 0+ 1+ 5+ 

#################################################

The maximum node counts per root node are 7
IR block list contains 12 blocks in method
#################################################

*************************************************
*
* (block ID:1 block PC:0 )
* IR root list contains 8 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x8
* Source: java.util.zip.InflaterInputStream$NativeReader.readNative([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<0>  (0x796064):    aload_0 
<1>  (0x796065):    agetfield_quick #2
<4>  (0x796068):    invokestatic_quick #5103 <java.util.zip.InflaterInputStream.access$100(Ljava/util/zip/InflaterInputStream;)V>
<7>  (0x79606b):    iload_2 
<8>  (0x79606c):    iload_3 
<9>  (0x79606d):    ior 
<10>  (0x79606e):    iload_2 
<11>  (0x79606f):    iload_3 
<12>  (0x796070):    iadd 
<13>  (0x796071):    ior 
<14>  (0x796072):    aload_1 
<15>  (0x796073):    arraylength 
<16>  (0x796074):    iload_2 
<17>  (0x796075):    iload_3 
<18>  (0x796076):    iadd 
<19>  (0x796077):    isub 
<20>  (0x796078):    ior 
<21>  (0x796079):    ifge <32>
<24>  (0x79607c):    new_quick #9940 <java.lang.IndexOutOfBoundsException>
<27>  (0x79607f):    dup 
<28>  (0x796080):    invokenonvirtual_quick #11202 <java.lang.IndexOutOfBoundsException.<init>()V>
<31>  (0x796083):    athrow 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(0)	ID(2)
 
Incoming Locals(4): 
	<null>
	<null>
	<null>
	local(0)	ID(2)
 
Successor Blocks(1): 
	ID(2) LocalOrder(1) AssignOrder(0) RefsOK(0) Locals(<null> 2 3 0 1)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 5) IDENTITY (reference)  (ref count: 2)
      <(ID: 10) FETCH (reference) 
         <(ID: 4) FIELD_REF (reference) 
            <(ID: 2) LOCAL (reference)   0>
            <(ID: 3) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 9) INVOKE (v) 
      <(ID: 8) PARAMETER (reference) 
         <(ID: 5) IDENTITY (reference)  (ref count: 2)
         <(ID: 7) NULL_PARAMETER (NONE) 
      <(ID: 6) CONST_MB (address field)  (java.util.zip.InflaterInputStream.access$100(Ljava/util/zip/InflaterInputStream;)V)

   <(ID: 20) IDENTITY (int)  (ref count: 2)
      <(ID: 25) OR (int) 
         <(ID: 15) OR (int) 
            <(ID: 13) OR (int) 
               <(ID: 11) IDENTITY (int)  (ref count: 3)
                  <(ID: 23) LOCAL (int)   2>
               <(ID: 12) IDENTITY (int)  (ref count: 3)
                  <(ID: 24) LOCAL (int)   3>
            <(ID: 14) ADD (int) 
               <(ID: 11) IDENTITY (int)  (ref count: 3)
               <(ID: 12) IDENTITY (int)  (ref count: 3)
         <(ID: 19) SUB (int) 
            <(ID: 17) ARRAY_LENGTH (int) 
               <(ID: 16) LOCAL (reference)   1>
            <(ID: 18) ADD (int) 
               <(ID: 11) IDENTITY (int)  (ref count: 3)
               <(ID: 12) IDENTITY (int)  (ref count: 3)

   <(ID: 22) BCOND (int) 
   target: (BlockID: 2 BlockPC: 32)
   condition: GE
   flags: 0
      <(ID: 20) IDENTITY (int)  (ref count: 2)
      <(ID: 21) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 27) IDENTITY (reference)  (ref count: 3)
      <(ID: 32) NEW_OBJECT (reference) 
         <(ID: 26) CONST_CB (address field)  (java.lang.IndexOutOfBoundsException)

   <(ID: 31) INVOKE (v) 
      <(ID: 30) PARAMETER (reference) 
         <(ID: 27) IDENTITY (reference)  (ref count: 3)
         <(ID: 29) NULL_PARAMETER (NONE) 
      <(ID: 28) CONST_MB (address field)  (java.lang.IndexOutOfBoundsException.<init>()V)

   <(ID: 33) THROW (NONE) 
      <(ID: 27) IDENTITY (reference)  (ref count: 3)


*************************************************
*
* (block ID:2 block PC:32 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1e
* Source: java.util.zip.InflaterInputStream$NativeReader.readNative([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<32>  (0x796084):    iload_3 
<33>  (0x796085):    ifne <38>
<36>  (0x796088):    iconst_0 
<37>  (0x796089):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(3)	ID(35)
 
Incoming Locals(5): 
	<null>
	local(2)	ID(57)
 	local(3)	ID(35)
 	local(0)	ID(48)
 	local(1)	ID(56)
 
Successor Blocks(1): 
	ID(3) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(<null> 2 3 0 1)

   <(ID: 34) MAP_PC (NONE)   32>

   <(ID: 37) BCOND (int) 
   target: (BlockID: 3 BlockPC: 38)
   condition: NE
   flags: 0
      <(ID: 35) LOCAL (int)   3>
      <(ID: 36) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 39) RETURN_VALUE (int) 
      <(ID: 38) CONST_JAVA_NUMERIC32 (int)  (0)


*************************************************
*
* (block ID:3 block PC:38 )
* IR root list contains 2 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1e
* Source: java.util.zip.InflaterInputStream$NativeReader.readNative([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<38>  (0x79608a):    iconst_0 
<39>  (0x79608b):    istore 4
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Incoming Locals(5): 
	<null>
	local(2)	ID(57)
 	local(3)	ID(45)
 	local(0)	ID(48)
 	local(1)	ID(56)
 
Assigned Locals(1): 
	ASSIGN(43): local(4)	ID(42)	rhsID(41)
 
Successor Blocks(1): 
	ID(9) LocalOrder(0) AssignOrder(1) RefsOK(1) Locals(4 2 3 0 1 <null>)

   <(ID: 40) MAP_PC (NONE)   38>

   <(ID: 43) ASSIGN (int)  (assignIdx: 0)
      <(ID: 42) LOCAL (int)   4>
      <(ID: 41) CONST_JAVA_NUMERIC32 (int)  (0)


*************************************************
*
* (block ID:9 block PC:41 )
* IR root list contains 15 root nodes: in block 
* flags: 0x361
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x3f
* Source: java.util.zip.InflaterInputStream$NativeReader.readNative([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<41>  (0x79608d):    iload_3 
<42>  (0x79608e):    ifle <150>
<45>  (0x796091):    aload_0 
<46>  (0x796092):    agetfield_quick #2
<49>  (0x796095):    agetfield_quick #3
<52>  (0x796098):    aload_1 
<53>  (0x796099):    iload_2 
<54>  (0x79609a):    iload_3 
<55>  (0x79609b):    invokevirtual_quick_w #11083 <java.util.zip.Inflater.inflate([BII)I>
<58>  (0x79609e):    istore 5
<60>  (0x7960a0):    iload 5
<62>  (0x7960a2):    ifne <130>
<65>  (0x7960a5):    aload_0 
<66>  (0x7960a6):    agetfield_quick #2
<69>  (0x7960a9):    agetfield_quick #3
<72>  (0x7960ac):    invokevirtual_quick_w #7600 <java.util.zip.Inflater.finished()Z>
<75>  (0x7960af):    ifne <91>
<78>  (0x7960b2):    aload_0 
<79>  (0x7960b3):    agetfield_quick #2
<82>  (0x7960b6):    agetfield_quick #3
<85>  (0x7960b9):    invokevirtual_quick_w #6734 <java.util.zip.Inflater.needsDictionary()Z>
<88>  (0x7960bc):    ifeq <110>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(4): 
	local(3)	ID(45)
 	local(0)	ID(48)
 	local(1)	ID(56)
 	local(2)	ID(57)
 
Incoming Locals(6): 
	local(4)	ID(110)
 	local(2)	ID(57)
 	local(3)	ID(45)
 	local(0)	ID(48)
 	local(1)	ID(56)
 	<null>

Assigned Locals(1): 
	ASSIGN(72): local(5)	ID(71)	rhsID(66)
 
Successor Blocks(4): 
	ID(4) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(4)
	ID(5) LocalOrder(4) AssignOrder(1) RefsOK(0) Locals(4 2 3 0 1 5)
	ID(6) LocalOrder(4) AssignOrder(1) RefsOK(0) Locals(<null> <null> <null> 0)
	ID(7) LocalOrder(4) AssignOrder(1) RefsOK(0) Locals(<null> <null> <null> 0)

   <(ID: 44) MAP_PC (NONE)   41>

   <(ID: 47) BCOND (int) 
   target: (BlockID: 4 BlockPC: 150)
   condition: LE
   flags: 0
      <(ID: 45) IDENTITY (int)  (ref count: 2)
         <(ID: 68) LOCAL (int)   3>
      <(ID: 46) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 51) IDENTITY (reference)  (ref count: 2)
      <(ID: 55) FETCH (reference) 
         <(ID: 50) FIELD_REF (reference) 
            <(ID: 48) IDENTITY (reference)  (ref count: 3)
               <(ID: 77) LOCAL (reference)   0>
            <(ID: 49) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 54) IDENTITY (reference)  (ref count: 3)
      <(ID: 67) FETCH (reference) 
         <(ID: 53) FIELD_REF (reference) 
            <(ID: 51) IDENTITY (reference)  (ref count: 2)
            <(ID: 52) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 66) IDENTITY (int)  (ref count: 3)
      <(ID: 73) INVOKE (int) 
         <(ID: 63) PARAMETER (reference) 
            <(ID: 54) IDENTITY (reference)  (ref count: 3)
            <(ID: 62) PARAMETER (reference) 
               <(ID: 56) LOCAL (reference)   1>
               <(ID: 61) PARAMETER (int) 
                  <(ID: 57) LOCAL (int)   2>
                  <(ID: 60) PARAMETER (int) 
                     <(ID: 45) IDENTITY (int)  (ref count: 2)
                     <(ID: 59) NULL_PARAMETER (NONE) 
         <(ID: 65) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 64) GET_VTBL (NONE) 
               <(ID: 54) IDENTITY (reference)  (ref count: 3)
            <(ID: 58) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 19)

   <(ID: 72) ASSIGN (int)  (assignIdx: 0)
      <(ID: 71) LOCAL (int)   5>
      <(ID: 66) IDENTITY (int)  (ref count: 3)

   <(ID: 70) BCOND (int) 
   target: (BlockID: 5 BlockPC: 130)
   condition: NE
   flags: 0
      <(ID: 66) IDENTITY (int)  (ref count: 3)
      <(ID: 69) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 76) IDENTITY (reference)  (ref count: 2)
      <(ID: 81) FETCH (reference) 
         <(ID: 75) FIELD_REF (reference) 
            <(ID: 48) IDENTITY (reference)  (ref count: 3)
            <(ID: 74) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 80) IDENTITY (reference)  (ref count: 3)
      <(ID: 90) FETCH (reference) 
         <(ID: 79) FIELD_REF (reference) 
            <(ID: 76) IDENTITY (reference)  (ref count: 2)
            <(ID: 78) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 87) IDENTITY (int)  (ref count: 2)
      <(ID: 91) INVOKE (int) 
         <(ID: 84) PARAMETER (reference) 
            <(ID: 80) IDENTITY (reference)  (ref count: 3)
            <(ID: 83) NULL_PARAMETER (NONE) 
         <(ID: 86) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 85) GET_VTBL (NONE) 
               <(ID: 80) IDENTITY (reference)  (ref count: 3)
            <(ID: 82) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 18)

   <(ID: 89) BCOND (int) 
   target: (BlockID: 6 BlockPC: 91)
   condition: NE
   flags: 0
      <(ID: 87) IDENTITY (int)  (ref count: 2)
      <(ID: 88) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 94) IDENTITY (reference)  (ref count: 2)
      <(ID: 98) FETCH (reference) 
         <(ID: 93) FIELD_REF (reference) 
            <(ID: 48) IDENTITY (reference)  (ref count: 3)
            <(ID: 92) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 97) IDENTITY (reference)  (ref count: 3)
      <(ID: 107) FETCH (reference) 
         <(ID: 96) FIELD_REF (reference) 
            <(ID: 94) IDENTITY (reference)  (ref count: 2)
            <(ID: 95) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 104) IDENTITY (int)  (ref count: 2)
      <(ID: 108) INVOKE (int) 
         <(ID: 101) PARAMETER (reference) 
            <(ID: 97) IDENTITY (reference)  (ref count: 3)
            <(ID: 100) NULL_PARAMETER (NONE) 
         <(ID: 103) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 102) GET_VTBL (NONE) 
               <(ID: 97) IDENTITY (reference)  (ref count: 3)
            <(ID: 99) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 17)

   <(ID: 106) BCOND (int) 
   target: (BlockID: 7 BlockPC: 110)
   condition: EQ
   flags: 0
      <(ID: 104) IDENTITY (int)  (ref count: 2)
      <(ID: 105) CONST_JAVA_NUMERIC32 (int)  (0)



*************************************************
*
* (block ID:6 block PC:91 )
* IR root list contains 6 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x8
* Source: java.util.zip.InflaterInputStream$NativeReader.readNative([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<91>  (0x7960bf):    aload_0 
<92>  (0x7960c0):    agetfield_quick #2
<95>  (0x7960c3):    iconst_1 
<96>  (0x7960c4):    invokestatic_quick #7133 <java.util.zip.InflaterInputStream.access$202(Ljava/util/zip/InflaterInputStream;Z)Z>
<99>  (0x7960c7):    pop 
<100>  (0x7960c8):    iload 4
<102>  (0x7960ca):    ifle <108>
<105>  (0x7960cd):    iload 4
<107>  (0x7960cf):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(167)
 
Incoming Locals(4): 
	<null>
	<null>
	<null>
	local(0)	ID(167)
 
Successor Blocks(1): 
	ID(8) LocalOrder(1) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 166) MAP_PC (NONE)   91>

   <(ID: 170) IDENTITY (reference)  (ref count: 2)
      <(ID: 177) FETCH (reference) 
         <(ID: 169) FIELD_REF (reference) 
            <(ID: 167) LOCAL (reference)   0>
            <(ID: 168) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 176) INVOKE (int) 
      <(ID: 175) PARAMETER (reference) 
         <(ID: 170) IDENTITY (reference)  (ref count: 2)
         <(ID: 174) PARAMETER (int) 
            <(ID: 171) CONST_JAVA_NUMERIC32 (int)  (1)
            <(ID: 173) NULL_PARAMETER (NONE) 
      <(ID: 172) CONST_MB (address field)  (java.util.zip.InflaterInputStream.access$202(Ljava/util/zip/InflaterInputStream;Z)Z)

   <(ID: 180) BCOND (int) 
   target: (BlockID: 8 BlockPC: 108)
   condition: LE
   flags: 0
      <(ID: 178) IDENTITY (int)  (ref count: 2)
         <(ID: 183) LOCAL (int)   4>
      <(ID: 179) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 181) MAP_PC (NONE)   107>

   <(ID: 182) RETURN_VALUE (int) 
      <(ID: 178) IDENTITY (int)  (ref count: 2)


*************************************************
*
* (block ID:8 block PC:108 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x0
* Source: java.util.zip.InflaterInputStream$NativeReader.readNative([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<108>  (0x7960d0):    iconst_m1 
<109>  (0x7960d1):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

   <(ID: 231) MAP_PC (NONE)   108>

   <(ID: 233) MAP_PC (NONE)   109>

   <(ID: 234) RETURN_VALUE (int) 
      <(ID: 232) CONST_JAVA_NUMERIC32 (int)  (-1)


*************************************************
*
* (block ID:7 block PC:110 )
* IR root list contains 7 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x8
* Source: java.util.zip.InflaterInputStream$NativeReader.readNative([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<110>  (0x7960d2):    aload_0 
<111>  (0x7960d3):    agetfield_quick #2
<114>  (0x7960d6):    agetfield_quick #3
<117>  (0x7960d9):    invokevirtual_quick_w #3929 <java.util.zip.Inflater.needsInput()Z>
<120>  (0x7960dc):    ifeq <130>
<123>  (0x7960df):    aload_0 
<124>  (0x7960e0):    agetfield_quick #2
<127>  (0x7960e3):    invokevirtual_quick_w #5872 <java.util.zip.InflaterInputStream.fill()V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(185)
 
Incoming Locals(4): 
	<null>
	<null>
	<null>
	local(0)	ID(185)
 
Successor Blocks(1): 
	ID(5) LocalOrder(1) AssignOrder(0) RefsOK(0) Locals(4 2 3 0 1 5)

   <(ID: 184) MAP_PC (NONE)   110>

   <(ID: 188) IDENTITY (reference)  (ref count: 2)
      <(ID: 192) FETCH (reference) 
         <(ID: 187) FIELD_REF (reference) 
            <(ID: 185) IDENTITY (reference)  (ref count: 2)
               <(ID: 206) LOCAL (reference)   0>
            <(ID: 186) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 191) IDENTITY (reference)  (ref count: 3)
      <(ID: 201) FETCH (reference) 
         <(ID: 190) FIELD_REF (reference) 
            <(ID: 188) IDENTITY (reference)  (ref count: 2)
            <(ID: 189) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 198) IDENTITY (int)  (ref count: 2)
      <(ID: 202) INVOKE (int) 
         <(ID: 195) PARAMETER (reference) 
            <(ID: 191) IDENTITY (reference)  (ref count: 3)
            <(ID: 194) NULL_PARAMETER (NONE) 
         <(ID: 197) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 196) GET_VTBL (NONE) 
               <(ID: 191) IDENTITY (reference)  (ref count: 3)
            <(ID: 193) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 16)

   <(ID: 200) BCOND (int) 
   target: (BlockID: 5 BlockPC: 130)
   condition: EQ
   flags: 0
      <(ID: 198) IDENTITY (int)  (ref count: 2)
      <(ID: 199) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 205) IDENTITY (reference)  (ref count: 3)
      <(ID: 213) FETCH (reference) 
         <(ID: 204) FIELD_REF (reference) 
            <(ID: 185) IDENTITY (reference)  (ref count: 2)
            <(ID: 203) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 212) INVOKE (v) 
      <(ID: 209) PARAMETER (reference) 
         <(ID: 205) IDENTITY (reference)  (ref count: 3)
         <(ID: 208) NULL_PARAMETER (NONE) 
      <(ID: 211) FETCH_MB_FROM_VTABLE (address field) 
         <(ID: 210) GET_VTBL (NONE) 
            <(ID: 205) IDENTITY (reference)  (ref count: 3)
         <(ID: 207) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 20)


*************************************************
*
* (block ID:5 block PC:130 )
* IR root list contains 8 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3f
* Source: java.util.zip.InflaterInputStream$NativeReader.readNative([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<130>  (0x7960e6):    iload 4
<132>  (0x7960e8):    iload 5
<134>  (0x7960ea):    iadd 
<135>  (0x7960eb):    istore 4
<137>  (0x7960ed):    iload_2 
<138>  (0x7960ee):    iload 5
<140>  (0x7960f0):    iadd 
<141>  (0x7960f1):    istore_2 
<142>  (0x7960f2):    iload_3 
<143>  (0x7960f3):    iload 5
<145>  (0x7960f5):    isub 
<146>  (0x7960f6):    istore_3 
<147>  (0x7960f7):    goto <41>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(4): 
	local(4)	ID(148)
 	local(5)	ID(149)
 	local(2)	ID(151)
 	local(3)	ID(153)
 
Incoming Locals(6): 
	local(4)	ID(148)
 	local(2)	ID(151)
 	local(3)	ID(153)
 	local(0)	ID(48)
 	local(1)	ID(56)
 	local(5)	ID(149)
 
Assigned Locals(3): 
	ASSIGN(156): local(2)	ID(155)	rhsID(152)
 	ASSIGN(159): local(3)	ID(158)	rhsID(154)
 	ASSIGN(163): local(4)	ID(162)	rhsID(150)
 
Successor Blocks(1): 
	ID(9) LocalOrder(4) AssignOrder(3) RefsOK(1) Locals(4 2 3 0 1 <null>)

   <(ID: 147) MAP_PC (NONE)   130>

   <(ID: 151) IDENTITY (int)  (ref count: 2)
      <(ID: 157) LOCAL (int)   2>

   <(ID: 156) ASSIGN (int)  (assignIdx: 0)
      <(ID: 155) LOCAL (int)   2>
      <(ID: 152) ADD (int) 
         <(ID: 151) IDENTITY (int)  (ref count: 2)
         <(ID: 149) IDENTITY (int)  (ref count: 3)
            <(ID: 161) LOCAL (int)   5>

   <(ID: 153) IDENTITY (int)  (ref count: 2)
      <(ID: 160) LOCAL (int)   3>

   <(ID: 159) ASSIGN (int)  (assignIdx: 1)
      <(ID: 158) LOCAL (int)   3>
      <(ID: 154) SUB (int) 
         <(ID: 153) IDENTITY (int)  (ref count: 2)
         <(ID: 149) IDENTITY (int)  (ref count: 3)

   <(ID: 148) IDENTITY (int)  (ref count: 2)
      <(ID: 164) LOCAL (int)   4>

   <(ID: 163) ASSIGN (int)  (assignIdx: 2)
      <(ID: 162) LOCAL (int)   4>
      <(ID: 150) ADD (int) 
         <(ID: 148) IDENTITY (int)  (ref count: 2)
         <(ID: 149) IDENTITY (int)  (ref count: 3)

   <(ID: 165) GOTO (NONE) 
   target: (BlockID: 9 BlockPC: 41)


*************************************************
*
* (block ID:4 block PC:150 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1
* Source: java.util.zip.InflaterInputStream$NativeReader.readNative([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<150>  (0x7960fa):    iload 4
<152>  (0x7960fc):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(4)	ID(110)
 
Incoming Locals(1): 
	local(4)	ID(110)
 
   <(ID: 109) MAP_PC (NONE)   150>

   <(ID: 111) MAP_PC (NONE)   152>

   <(ID: 112) RETURN_VALUE (int) 
      <(ID: 110) LOCAL (int)   4>


*************************************************
*
* (block ID:0 block PC:153 )
* IR root list contains 17 root nodes: in block 
* flags: 0x303
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.util.zip.InflaterInputStream$NativeReader.readNative([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<153>  (0x7960fd):    astore 4
<155>  (0x7960ff):    aload 4
<157>  (0x796101):    invokevirtual_quick_w #7695 <java.lang.Throwable.getMessage()Ljava/lang/String;>
<160>  (0x796104):    astore 5
<162>  (0x796106):    new_quick #5511 <java.util.zip.ZipException>
<165>  (0x796109):    dup 
<166>  (0x79610a):    aload 5
<168>  (0x79610c):    ifnull <176>
<171>  (0x79610f):    aload 5
<173>  (0x796111):    goto <179>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Assigned Locals(2): 
	ASSIGN(127): local(4)	ID(126)	rhsID(114)
 	ASSIGN(129): local(5)	ID(128)	rhsID(120)
 
Successor Blocks(2): 
	ID(10) LocalOrder(0) AssignOrder(2) RefsOK(0) Locals()
	ID(11) LocalOrder(0) AssignOrder(2) RefsOK(0) Locals()

   <(ID: 113) MAP_PC (NONE)   153>

   <(ID: 114) IDENTITY (reference)  (ref count: 4)
      <(ID: 121) EXCEPTION_OBJECT (reference) 

   <(ID: 120) IDENTITY (reference)  (ref count: 4)
      <(ID: 130) INVOKE (reference) 
         <(ID: 117) PARAMETER (reference) 
            <(ID: 114) IDENTITY (reference)  (ref count: 4)
            <(ID: 116) NULL_PARAMETER (NONE) 
         <(ID: 119) FETCH_MB_FROM_VTABLE (address field) 
            <(ID: 118) GET_VTBL (NONE) 
               <(ID: 114) IDENTITY (reference)  (ref count: 4)
            <(ID: 115) CONST_METHODTABLE_INDEX (NONE)  (mtIndex 11)

   <(ID: 123) IDENTITY (reference)  (ref count: 5)
      <(ID: 133) NEW_OBJECT (reference) 
         <(ID: 122) CONST_CB (address field)  (java.util.zip.ZipException)

   <(ID: 127) ASSIGN (reference)  (assignIdx: 0)
      <(ID: 126) LOCAL (reference)   4>
      <(ID: 114) IDENTITY (reference)  (ref count: 4)

   <(ID: 129) ASSIGN (reference)  (assignIdx: 1)
      <(ID: 128) LOCAL (reference)   5>
      <(ID: 120) IDENTITY (reference)  (ref count: 4)

   <(ID: 132) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 123) IDENTITY (reference)  (ref count: 5)


   <(ID: 135) DEFINE (reference) 
   spillLocation: 1
   registerSpillOk: 1
   operand:       <(ID: 123) IDENTITY (reference)  (ref count: 5)


   <(ID: 136) LOAD_PHIS (NONE) 

   <(ID: 125) BCOND (reference) 
   target: (BlockID: 10 BlockPC: 176)
   condition: EQ
   flags: 0
      <(ID: 120) IDENTITY (reference)  (ref count: 4)
      <(ID: 124) CONST_STRING_OBJECT (reference)  (stringObject 0x0)



   <(ID: 137) RELEASE_PHIS (NONE) 

   <(ID: 139) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 123) IDENTITY (reference)  (ref count: 5)


   <(ID: 141) DEFINE (reference) 
   spillLocation: 1
   registerSpillOk: 1
   operand:       <(ID: 123) IDENTITY (reference)  (ref count: 5)


   <(ID: 143) DEFINE (reference) 
   spillLocation: 2
   registerSpillOk: 1
   operand:       <(ID: 120) IDENTITY (reference)  (ref count: 4)


   <(ID: 144) LOAD_PHIS (NONE) 

   <(ID: 145) RELEASE_PHIS (NONE) 

   <(ID: 146) GOTO (NONE) 
   target: (BlockID: 11 BlockPC: 179)


*************************************************
*
* (block ID:10 block PC:176 )
* IR root list contains 6 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.util.zip.InflaterInputStream$NativeReader.readNative([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<176>  (0x796114):    aldc_w_quick #1337
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 4 5 
*************************************************

Number and size of USED nodes in phi array: 2 2

Successor Blocks(1): 
	ID(11) LocalOrder(0) AssignOrder(0) RefsOK(0) Locals()

   <(ID: 214) MAP_PC (NONE)   176>

   <(ID: 216) DEFINE (reference) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 131) USED (reference) 
      spillLocation: 0
      registerSpillOk: 1



   <(ID: 217) DEFINE (reference) 
   spillLocation: 1
   registerSpillOk: 1
   operand:       <(ID: 134) USED (reference) 
      spillLocation: 1
      registerSpillOk: 1



   <(ID: 218) DEFINE (reference) 
   spillLocation: 2
   registerSpillOk: 1
   operand:       <(ID: 215) CONST_STRING_OBJECT (reference)  (stringObject 0x89cb10)



   <(ID: 219) LOAD_PHIS (NONE) 

   <(ID: 220) RELEASE_PHIS (NONE) 


*************************************************
*
* (block ID:11 block PC:179 )
* IR root list contains 3 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: java.util.zip.InflaterInputStream$NativeReader.readNative([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 5
* Byte-codes for block:
<179>  (0x796117):    invokenonvirtual_quick #6891 <java.util.zip.ZipException.<init>(Ljava/lang/String;)V>
<182>  (0x79611a):    athrow 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 4 5 
*************************************************

Number and size of USED nodes in phi array: 3 3

   <(ID: 221) MAP_PC (NONE)   179>

   <(ID: 228) INVOKE (v) 
      <(ID: 225) PARAMETER (reference) 
         <(ID: 140) IDENTITY (reference)  (ref count: 2)
            <(ID: 229) USED (reference) 
            spillLocation: 1
            registerSpillOk: 1

         <(ID: 224) PARAMETER (reference) 
            <(ID: 142) USED (reference) 
            spillLocation: 2
            registerSpillOk: 1

            <(ID: 223) NULL_PARAMETER (NONE) 
      <(ID: 227) SEQUENCE_R (address field) 
         <(ID: 226) NULL_CHECK (reference) 
            <(ID: 140) IDENTITY (reference)  (ref count: 2)
         <(ID: 222) CONST_MB (address field)  (java.util.zip.ZipException.<init>(Ljava/lang/String;)V)

   <(ID: 230) THROW (NONE) 
      <(ID: 138) USED (reference) 
      spillLocation: 0
      registerSpillOk: 1



NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 120
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 1106
ESTIMATED BUFFER SIZE = 1404
CODE BUFFER ADDRESS = 0x2bcc601c
PC MAP TABLE ADDRESS = 0x2bcc6024
GC CHECK PCS ADDRESS = 0x2bcc6064
CODE ENTRY ADDRESS = 0x2bcc6090
          		@ Method prologue
0x2bcc6090	0:	addiu	a1, JSP, 68	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc6094	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc6098	8:	sltu	t7, a1, CHUNKEND
0x2bcc609c	12:	bne	t7, zero, PC=0x2bcc6090	@ goto .skip
0x2bcc60a0	16:	nop
0x2bcc60a4	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc60a8	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc609c) >>>>>>>>
0x2bcc609c	12:	bne	t7, zero, PC=0x2bcc60ac	@ goto .skip
0x2bcc60a0	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc60ac) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc60ac	28:	sw	JFP, 8(JSP)	@ Store curr JFP into new frame
0x2bcc60b0	32:	addiu	JFP, JSP, 8	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc60b4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc60b8	40:	addiu	a3, zero, 0
0x2bcc60bc	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc60c0	48:	addiu	a3, zero, -1
0x2bcc60c4	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc60c8	56:	move	a0, EE
0x2bcc60cc	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc60d0	64:	lui	t9, hi16(0x65)
0x2bcc60d4	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc60d8	72:	jalr	t9
0x2bcc60dc	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc60e0	80:	addiu	JSP, JFP, 40	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc60e4	84:	nop
0x2bcc60e8	88:	nop
0x2bcc60ec	92:	nop
			@ Initial Temp REF set is 
	L1:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(23)
0x2bcc60f0	96:	lw	s7, -24(JFP)	@ Java local cell # 0
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=100
          		@ Do getfield:
0x2bcc60f4	100:	lw	s6, 8(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc60f8	104:	sw	s6, 0(JSP)
0x2bcc60fc	108:	lw	a0, 0(CP)	@ mb java.util.zip.InflaterInputStream.access$100(Ljava/util/zip/InflaterInputStream;)V
          		@ Invoke a method w/ a void return type
0x2bcc6100	112:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc6104	116:	lw	s7, 0(a0)	@ call method through mb
0x2bcc6108	120:	jalr	s7
0x2bcc610c	124:	nop
          		@ Captured a stackmap here.
0x2bcc6110	128:	lw	ra, -16(JFP)	@ Java local cell # 2
0x2bcc6114	132:	lw	t9, -12(JFP)	@ Java local cell # 3
0x2bcc6118	136:	or	s7, ra, t9
0x2bcc611c	140:	addu	s6, ra, t9
0x2bcc6120	144:	or	s5, s7, s6
0x2bcc6124	148:	lw	t8, -20(JFP)	@ Java local cell # 1
0x2bcc6128	152:	lw	s7, 8(t8)	@ arraylength
0x2bcc612c	156:	addu	s6, ra, t9
0x2bcc6130	160:	subu	s4, s7, s6
0x2bcc6134	164:	or	s7, s5, s4
			@ Outgoing local(2) reg(21): in wrong register
0x2bcc6138	168:	move	s5, ra
			@ Outgoing local(3) reg(22): in wrong register
0x2bcc613c	172:	move	s6, t9
			@ Outgoing local(0) reg(23): not in register
0x2bcc6140	176:	sw	s7, 40(JFP)	@ spill Java temp cell # 3
0x2bcc6144	180:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcc6148	184:	lw	s4, 40(JFP)	@ Java temp cell # 3
          		@ deferred comparison: 
0x2bcc614c	188:	sltiu	t7, s4, 0
0x2bcc6150	192:	beq	t7, zero, PC=0x2bcc614c	@ branch to block L2
0x2bcc6154	196:	nop
0x2bcc6158	200:	lw	a1, 0(CP)	@ cb java.lang.IndexOutOfBoundsException
          		@ Do new:
          		@ cb: java.lang.IndexOutOfBoundsException
0x2bcc615c	204:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc6160	208:	nop
          		@ Captured a stackmap here.
0x2bcc6164	212:	sw	v0, 0(JSP)
0x2bcc6168	216:	lw	a0, 0(CP)	@ mb java.lang.IndexOutOfBoundsException.<init>()V
          		@ Invoke a method w/ a void return type
0x2bcc616c	220:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc6170	224:	sw	v0, 40(JFP)	@ REF spill Java temp cell # 3
0x2bcc6174	228:	lw	s7, 0(a0)	@ call method through mb
0x2bcc6178	232:	jalr	s7
0x2bcc617c	236:	nop
          		@ Captured a stackmap here.
0x2bcc6180	240:	lw	a2, 40(JFP)	@ Java temp cell # 3
0x2bcc6184	244:	jal	PC=(0x2bcb8138)	@ goto CVMCCMruntimeThrowObjectGlue
0x2bcc6188	248:	nop
			@ Initial Temp REF set is 
	L2:	252:	@ entry point for branches
			@ Binding Incoming Local(2) to reg(21)
			@ Binding Incoming Local(3) to reg(22)
			@ Binding Incoming Local(0) to reg(23)
--->Fixed instruction at 192(0x2bcc6150) to reference 252
          		@ MAP_PC idepth=0 javaPc=32 compiledPc=252
			@ Outgoing local(2) reg(21): in correct register
			@ Outgoing local(3) reg(22): in correct register
			@ Outgoing local(0) reg(23): in correct register
          		@ deferred comparison: 
0x2bcc618c	252:	bne	s6, zero, PC=0x2bcc618c	@ branch to block L3
0x2bcc6190	256:	nop
0x2bcc6194	260:	sw	zero, -24(JFP)	@ Java local cell # 0
0x2bcc6198	264:	addiu	JSP, JFP, -20
0x2bcc619c	268:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc61a0	272:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc61a4	276:	nop
			@ Initial Temp REF set is 
	L3:	280:	@ entry point for branches
			@ Binding Incoming Local(2) to reg(21)
			@ Binding Incoming Local(3) to reg(22)
			@ Binding Incoming Local(0) to reg(23)
--->Fixed instruction at 252(0x2bcc618c) to reference 280
          		@ MAP_PC idepth=0 javaPc=38 compiledPc=280
0x2bcc61a8	280:	sw	zero, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(4) reg(20): in wrong register
0x2bcc61ac	284:	move	s4, zero
			@ Outgoing local(2) reg(21): in correct register
			@ Outgoing local(3) reg(22): in correct register
			@ Outgoing local(0) reg(23): in correct register
0x2bcc61b0	288:	b	PC=0x2bcc61b0	@ fallthrough to block L9, which is backward branch target
0x2bcc61b4	292:	nop
			@ Initial Temp REF set is 
	L9:	296:	@ Patchable GC Check point
0x2bcc61b8	296:	jal	PC=(0x2bcb800c)	@ call CVMCCMruntimeGCRendezvousGlue
0x2bcc61b8	296:	nop
0x2bcc61bc	300:	nop
          		@ Captured a stackmap here.
	L9:	304:	@ entry point when locals need to be loaded
			@ Preloading incoming local(4) reg(20)
0x2bcc61c0	304:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Preloading incoming local(2) reg(21)
0x2bcc61c4	308:	lw	s5, -16(JFP)	@ Java local cell # 2
			@ Preloading incoming local(3) reg(22)
0x2bcc61c8	312:	lw	s6, -12(JFP)	@ Java local cell # 3
			@ Preloading incoming local(0) reg(23)
0x2bcc61cc	316:	lw	s7, -24(JFP)	@ Java local cell # 0
	L9:	320:	@ entry point for branches
--->Fixed instruction at 288(0x2bcc61b0) to reference 320
          		@ MAP_PC idepth=0 javaPc=41 compiledPc=304
			@ Outgoing local(4) reg(20): in correct register
          		@ deferred comparison: 
0x2bcc61d0	320:	slt	t7, zero, s6
0x2bcc61d4	324:	beq	t7, zero, PC=0x2bcc61d0	@ branch to block L4
0x2bcc61d8	328:	nop
          		@ Do getfield:
0x2bcc61dc	332:	lw	ra, 8(s7)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc61e0	336:	lw	t9, 12(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc61e4	340:	sw	t9, 0(JSP)
0x2bcc61e8	344:	lw	ra, -20(JFP)	@ Java local cell # 1
0x2bcc61ec	348:	sw	ra, 4(JSP)
0x2bcc61f0	352:	sw	s5, 8(JSP)
0x2bcc61f4	356:	sw	s6, 12(JSP)
          		@ Fetch mb from vtable:
0x2bcc61f8	360:	lw	t8, 0(t9)	@ Get object.cb
0x2bcc61fc	364:	addiu	t7, zero, -4
0x2bcc6200	368:	and	t8, t8, t7
0x2bcc6204	372:	lw	t8, 76(t8)	@ Get cb.vtbl
0x2bcc6208	376:	lw	a0, 76(t8)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc620c	380:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc6210	384:	lw	s7, 0(a0)	@ call method through mb
0x2bcc6214	388:	jalr	s7
0x2bcc6218	392:	nop
          		@ Captured a stackmap here.
0x2bcc621c	396:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc6220	400:	lw	s7, 0(JSP)
0x2bcc6224	404:	sw	s7, -4(JFP)	@ Java local cell # 5
			@ Outgoing local(4) reg(20): not in register
0x2bcc6228	408:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(2) reg(21): not in register
0x2bcc622c	412:	lw	s5, -16(JFP)	@ Java local cell # 2
			@ Outgoing local(3) reg(22): not in register
0x2bcc6230	416:	lw	s6, -12(JFP)	@ Java local cell # 3
			@ Outgoing local(0) reg(23): not in register
0x2bcc6234	420:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcc6238	424:	lw	ra, -4(JFP)	@ Java local cell # 5
          		@ deferred comparison: 
0x2bcc623c	428:	bne	ra, zero, PC=0x2bcc623c	@ branch to block L5
0x2bcc6240	432:	nop
          		@ Do getfield:
0x2bcc6244	436:	lw	t9, 8(s7)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc6248	440:	lw	t8, 12(t9)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc624c	444:	sw	t8, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc6250	448:	lw	t9, 0(t8)	@ Get object.cb
0x2bcc6254	452:	addiu	t7, zero, -4
0x2bcc6258	456:	and	t9, t9, t7
0x2bcc625c	460:	lw	t9, 76(t9)	@ Get cb.vtbl
0x2bcc6260	464:	lw	a0, 72(t9)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc6264	468:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc6268	472:	lw	s7, 0(a0)	@ call method through mb
0x2bcc626c	476:	jalr	s7
0x2bcc6270	480:	nop
          		@ Captured a stackmap here.
0x2bcc6274	484:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc6278	488:	lw	s7, 0(JSP)
			@ Outgoing local(0) reg(23): not in register
0x2bcc627c	492:	sw	s7, 40(JFP)	@ spill Java temp cell # 3
0x2bcc6280	496:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcc6284	500:	lw	s6, 40(JFP)	@ Java temp cell # 3
          		@ deferred comparison: 
0x2bcc6288	504:	bne	s6, zero, PC=0x2bcc6288	@ branch to block L6
0x2bcc628c	508:	nop
          		@ Do getfield:
0x2bcc6290	512:	lw	s6, 8(s7)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc6294	516:	lw	s5, 12(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc6298	520:	sw	s5, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc629c	524:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc62a0	528:	addiu	t7, zero, -4
0x2bcc62a4	532:	and	s6, s6, t7
0x2bcc62a8	536:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc62ac	540:	lw	a0, 68(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc62b0	544:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc62b4	548:	lw	s7, 0(a0)	@ call method through mb
0x2bcc62b8	552:	jalr	s7
0x2bcc62bc	556:	nop
          		@ Captured a stackmap here.
0x2bcc62c0	560:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc62c4	564:	lw	s7, 0(JSP)
			@ Outgoing local(0) reg(23): not in register
0x2bcc62c8	568:	sw	s7, 40(JFP)	@ spill Java temp cell # 3
0x2bcc62cc	572:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcc62d0	576:	lw	s6, 40(JFP)	@ Java temp cell # 3
          		@ deferred comparison: 
0x2bcc62d4	580:	beq	s6, zero, PC=0x2bcc62d4	@ branch to block L7
0x2bcc62d8	584:	nop
			@ Outgoing local(0) reg(23): in correct register
			@ Initial Temp REF set is 
	L6:	588:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(23)
--->Fixed instruction at 504(0x2bcc6288) to reference 588
          		@ MAP_PC idepth=0 javaPc=91 compiledPc=588
          		@ Do getfield:
0x2bcc62dc	588:	lw	s6, 8(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc62e0	592:	sw	s6, 0(JSP)
0x2bcc62e4	596:	addiu	s6, zero, 1	@ const 1
0x2bcc62e8	600:	sw	s6, 4(JSP)
0x2bcc62ec	604:	lw	a0, 0(CP)	@ mb java.util.zip.InflaterInputStream.access$202(Ljava/util/zip/InflaterInputStream;Z)Z
          		@ Invoke a method w/ a 32bit return type
0x2bcc62f0	608:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc62f4	612:	lw	s7, 0(a0)	@ call method through mb
0x2bcc62f8	616:	jalr	s7
0x2bcc62fc	620:	nop
          		@ Captured a stackmap here.
0x2bcc6300	624:	addiu	JSP, JSP, -4
0x2bcc6304	628:	lw	ra, -8(JFP)	@ Java local cell # 4
          		@ deferred comparison: 
0x2bcc6308	632:	slt	t7, zero, ra
0x2bcc630c	636:	beq	t7, zero, PC=0x2bcc6308	@ branch to block L8
0x2bcc6310	640:	nop
          		@ MAP_PC idepth=0 javaPc=107 compiledPc=644
0x2bcc6314	644:	sw	ra, -24(JFP)	@ Java local cell # 0
0x2bcc6318	648:	addiu	JSP, JFP, -20
0x2bcc631c	652:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc6320	656:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc6324	660:	nop
			@ Initial Temp REF set is 
	L8:	664:	@ entry point for branches
--->Fixed instruction at 636(0x2bcc630c) to reference 664
          		@ MAP_PC idepth=0 javaPc=108 compiledPc=664
          		@ MAP_PC idepth=0 javaPc=109 compiledPc=664
0x2bcc6328	664:	addiu	s7, zero, -1	@ const -1
0x2bcc632c	668:	sw	s7, -24(JFP)	@ Java local cell # 0
0x2bcc6330	672:	addiu	JSP, JFP, -20
0x2bcc6334	676:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc6338	680:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc633c	684:	nop
			@ Initial Temp REF set is 
	L7:	688:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(23)
--->Fixed instruction at 580(0x2bcc62d4) to reference 688
          		@ MAP_PC idepth=0 javaPc=110 compiledPc=688
          		@ Do getfield:
0x2bcc6340	688:	lw	s6, 8(s7)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc6344	692:	lw	s5, 12(s6)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc6348	696:	sw	s5, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc634c	700:	lw	s6, 0(s5)	@ Get object.cb
0x2bcc6350	704:	addiu	t7, zero, -4
0x2bcc6354	708:	and	s6, s6, t7
0x2bcc6358	712:	lw	s6, 76(s6)	@ Get cb.vtbl
0x2bcc635c	716:	lw	a0, 64(s6)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc6360	720:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc6364	724:	lw	s7, 0(a0)	@ call method through mb
0x2bcc6368	728:	jalr	s7
0x2bcc636c	732:	nop
          		@ Captured a stackmap here.
0x2bcc6370	736:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc6374	740:	lw	s7, 0(JSP)
			@ Outgoing local(4) reg(20): not in register
0x2bcc6378	744:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(2) reg(21): not in register
0x2bcc637c	748:	lw	s5, -16(JFP)	@ Java local cell # 2
			@ Outgoing local(3) reg(22): not in register
0x2bcc6380	752:	lw	s6, -12(JFP)	@ Java local cell # 3
			@ Outgoing local(0) reg(23): not in register
0x2bcc6384	756:	sw	s7, 40(JFP)	@ spill Java temp cell # 3
0x2bcc6388	760:	lw	s7, -24(JFP)	@ Java local cell # 0
0x2bcc638c	764:	lw	ra, 40(JFP)	@ Java temp cell # 3
          		@ deferred comparison: 
0x2bcc6390	768:	beq	ra, zero, PC=0x2bcc6390	@ branch to block L5
0x2bcc6394	772:	nop
          		@ Do getfield:
0x2bcc6398	776:	lw	ra, 8(s7)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc639c	780:	sw	ra, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc63a0	784:	lw	t9, 0(ra)	@ Get object.cb
0x2bcc63a4	788:	addiu	t7, zero, -4
0x2bcc63a8	792:	and	t9, t9, t7
0x2bcc63ac	796:	lw	t9, 76(t9)	@ Get cb.vtbl
0x2bcc63b0	800:	lw	a0, 80(t9)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a void return type
0x2bcc63b4	804:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc63b8	808:	lw	s7, 0(a0)	@ call method through mb
0x2bcc63bc	812:	jalr	s7
0x2bcc63c0	816:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(4) reg(20): not in register
0x2bcc63c4	820:	lw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(2) reg(21): not in register
0x2bcc63c8	824:	lw	s5, -16(JFP)	@ Java local cell # 2
			@ Outgoing local(3) reg(22): not in register
0x2bcc63cc	828:	lw	s6, -12(JFP)	@ Java local cell # 3
			@ Outgoing local(0) reg(23): not in register
0x2bcc63d0	832:	lw	s7, -24(JFP)	@ Java local cell # 0
			@ Initial Temp REF set is 
	L5:	836:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(20)
			@ Binding Incoming Local(2) to reg(21)
			@ Binding Incoming Local(3) to reg(22)
			@ Binding Incoming Local(0) to reg(23)
--->Fixed instruction at 768(0x2bcc6390) to reference 836
--->Fixed instruction at 428(0x2bcc623c) to reference 836
          		@ MAP_PC idepth=0 javaPc=130 compiledPc=836
0x2bcc63d4	836:	lw	ra, -4(JFP)	@ Java local cell # 5
0x2bcc63d8	840:	addu	s5, s5, ra
0x2bcc63dc	844:	sw	s5, -16(JFP)	@ Java local cell # 2
0x2bcc63e0	848:	subu	s6, s6, ra
0x2bcc63e4	852:	sw	s6, -12(JFP)	@ Java local cell # 3
0x2bcc63e8	856:	addu	s4, s4, ra
0x2bcc63ec	860:	sw	s4, -8(JFP)	@ Java local cell # 4
			@ Outgoing local(4) reg(20): in correct register
			@ Outgoing local(2) reg(21): in correct register
			@ Outgoing local(3) reg(22): in correct register
			@ Outgoing local(0) reg(23): in correct register
          		@ Patchable backwards branch:
0x2bcc63f0	864:	b	PC=0x2bcc61b8	@ branch to block L9
0x2bcc63f4	868:	nop
0x2bcc63f0	864:	b	PC=0x2bcc61d0	@ branch to block L9, skip GC
0x2bcc63f4	868:	nop
			@ Initial Temp REF set is 
	L4:	872:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(20)
--->Fixed instruction at 324(0x2bcc61d4) to reference 872
          		@ MAP_PC idepth=0 javaPc=150 compiledPc=872
          		@ MAP_PC idepth=0 javaPc=152 compiledPc=872
0x2bcc63f8	872:	sw	s4, -24(JFP)	@ Java local cell # 0
0x2bcc63fc	876:	addiu	JSP, JFP, -20
0x2bcc6400	880:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc6404	884:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc6408	888:	nop
			@ Initial Temp REF set is 
	L0:	892:	@ entry point for exception handler
          		@ Captured a stackmap here.
          		@ MAP_PC idepth=0 javaPc=153 compiledPc=892
0x2bcc640c	892:	sw	a0, 0(JSP)
          		@ Fetch mb from vtable:
0x2bcc6410	896:	lw	s7, 0(a0)	@ Get object.cb
0x2bcc6414	900:	addiu	t7, zero, -4
0x2bcc6418	904:	and	s7, s7, t7
0x2bcc641c	908:	lw	s7, 76(s7)	@ Get cb.vtbl
0x2bcc6420	912:	sw	a0, 40(JFP)	@ REF spill Java temp cell # 3
0x2bcc6424	916:	lw	a0, 44(s7)	@ method = cb.vtbl[methodIdx]
          		@ Invoke a method w/ a 32bit return type
0x2bcc6428	920:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc642c	924:	lw	s7, 0(a0)	@ call method through mb
0x2bcc6430	928:	jalr	s7
0x2bcc6434	932:	nop
          		@ Captured a stackmap here.
0x2bcc6438	936:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc643c	940:	lw	s6, 0(JSP)
0x2bcc6440	944:	lw	a1, 0(CP)	@ cb java.util.zip.ZipException
          		@ Do new:
0x2bcc6444	948:	sw	s6, 44(JFP)	@ REF spill Java temp cell # 4
          		@ cb: java.util.zip.ZipException
0x2bcc6448	952:	jal	PC=(0x2bcb87ac)	@ call CVMCCMruntimeNewGlue
0x2bcc644c	956:	nop
          		@ Captured a stackmap here.
0x2bcc6450	960:	lw	s7, 40(JFP)	@ Java temp cell # 3
0x2bcc6454	964:	sw	s7, -8(JFP)	@ Java local cell # 4
0x2bcc6458	968:	lw	s6, 44(JFP)	@ Java temp cell # 4
0x2bcc645c	972:	sw	s6, -4(JFP)	@ Java local cell # 5
			@ Processing DEFINE(0) reg(20): in wrong register
			@ Processing DEFINE(1) reg(21): in wrong register
			@ Loading DEFINE(0) register(20): in wrong register
0x2bcc6460	976:	move	s4, v0
			@ Loading DEFINE(1) register(21): in wrong register
0x2bcc6464	980:	move	s5, s4
          		@ deferred comparison: 
0x2bcc6468	984:	beq	s6, zero, PC=0x2bcc6468	@ branch to block L10
0x2bcc646c	988:	nop
			@ Processing DEFINE(0) reg(20): in correct register
			@ Processing DEFINE(1) reg(21): in wrong register
			@ Processing DEFINE(2) reg(22): in correct register
			@ Loading DEFINE(0) register(20): in correct register
			@ Loading DEFINE(1) register(21): in wrong register
0x2bcc6470	992:	move	s5, s4
			@ Loading DEFINE(2) register(22): in correct register
0x2bcc6474	996:	b	PC=0x2bcc6474	@ branch to block L11
0x2bcc6478	1000:	nop
			@ Initial Temp REF set is 
	L10:	1004:	@ entry point for branches
--->Fixed instruction at 984(0x2bcc6468) to reference 1004
          		@ MAP_PC idepth=0 javaPc=176 compiledPc=1004
			@ Processing DEFINE(0) reg(20): in correct register
			@ Processing DEFINE(1) reg(21): in correct register
0x2bcc647c	1004:	lw	s6, 0(CP)	@ const 9030416
			@ Processing DEFINE(2) reg(22): in correct register
			@ Loading DEFINE(0) register(20): in correct register
			@ Loading DEFINE(1) register(21): in correct register
			@ Loading DEFINE(2) register(22): in correct register
			@ Initial Temp REF set is 
	L11:	1008:	@ entry point for branches
--->Fixed instruction at 996(0x2bcc6474) to reference 1008
          		@ MAP_PC idepth=0 javaPc=179 compiledPc=1008
0x2bcc6480	1008:	sw	s5, 0(JSP)
0x2bcc6484	1012:	sw	s6, 4(JSP)
0x2bcc6488	1016:	lw	s7, 0(s5)	@ NULL check
0x2bcc648c	1020:	lw	a0, 0(CP)	@ mb java.util.zip.ZipException.<init>(Ljava/lang/String;)V
          		@ Invoke a method w/ a void return type
0x2bcc6490	1024:	addiu	JSP, JSP, 8	@ adjust JSP before method call
0x2bcc6494	1028:	sw	s4, 40(JFP)	@ REF spill Java temp cell # 3
0x2bcc6498	1032:	lw	s7, 0(a0)	@ call method through mb
0x2bcc649c	1036:	jalr	s7
0x2bcc64a0	1040:	nop
          		@ Captured a stackmap here.
0x2bcc64a4	1044:	lw	a2, 40(JFP)	@ Java temp cell # 3
0x2bcc64a8	1048:	jal	PC=(0x2bcb8138)	@ goto CVMCCMruntimeThrowObjectGlue
0x2bcc64ac	1052:	nop
0x2bcc64b0	1056:	.word	9256812	@ mb java.util.zip.ZipException.<init>(Ljava/lang/String;)V
--->Fixed instruction at 1020(0x2bcc648c) to reference 1056
0x2bcc64b4	1060:	.word	9030416
--->Fixed instruction at 1004(0x2bcc647c) to reference 1060
0x2bcc64b8	1064:	.word	8815020	@ cb java.util.zip.ZipException
--->Fixed instruction at 944(0x2bcc6440) to reference 1064
0x2bcc64bc	1068:	.word	9156736	@ mb java.util.zip.InflaterInputStream.access$202(Ljava/util/zip/InflaterInputStream;Z)Z
--->Fixed instruction at 604(0x2bcc62ec) to reference 1068
0x2bcc64c0	1072:	.word	9230684	@ mb java.lang.IndexOutOfBoundsException.<init>()V
--->Fixed instruction at 216(0x2bcc6168) to reference 1072
0x2bcc64c4	1076:	.word	8774816	@ cb java.lang.IndexOutOfBoundsException
--->Fixed instruction at 200(0x2bcc6158) to reference 1076
0x2bcc64c8	1080:	.word	9156708	@ mb java.util.zip.InflaterInputStream.access$100(Ljava/util/zip/InflaterInputStream;)V
--->Fixed instruction at 108(0x2bcc60fc) to reference 1080
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc6090) >>>>>>>>
          		@ Capacity is 23 word(s)
0x2bcc6090	0:	addiu	a1, JSP, 76
<<<<<<<<<Pop Code Buffer to PC = 1084 (0x2bcc64cc) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc60e0) >>>>>>>>
          		@ spillSize is 5 word(s), add to JFP+28
0x2bcc60e0	80:	addiu	JSP, JFP, 48
          		@ setup cp base register
0x2bcc60e4	84:	lui	CP, hi16(0x2bcc)
0x2bcc60e8	88:	ori	CP, CP, lo16(0x2bcc64b0)
0x2bcc60ec	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 1084 (0x2bcc64cc) <<<<<<<<<
JS: COMPILED: size=1292 startPC=0x2bcc6090 java.util.zip.InflaterInputStream$NativeReader.readNative([BII)I
OSR: Intr2Comp: java.util.zip.InflaterInputStream$NativeReader.readNative([BII)I
JS: ATTEMPTING TO COMPILE sun.io.MarkableReader.read([BII)I
JS: COMPILING sun.io.MarkableReader.read([BII)I
orig bkID(11) Incoming Locals(1 0x0): 4- 
orig bkID(5) Incoming Locals(2 0x0): 0- 4- 
o1   bkID(5) Incoming Locals(1 0x0): 0- 
s1   bkID(5) Incoming Locals(2 0x0): 0- 4- 
o1   bkID(5) Incoming Locals(2 0x0): 0- 4- 
orig bkID(9) Incoming Locals(1 0x0): 3- 
o1   bkID(9) Incoming Locals(1 0x0): 3- 
o1   bkID(9) Incoming Locals(1 0x0): 3- 
orig bkID(6) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(6) Incoming Locals(2 0x0): 0- 3- 
s1   bkID(6) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(6) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(6) Incoming Locals(2 0x0): 0- 3- 
orig bkID(7) Incoming Locals(1 0x0): 3- 
o1   bkID(7) Incoming Locals(1 0x0): 3- 
o1   bkID(7) Incoming Locals(1 0x0): 3- 
orig bkID(4) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(4) Incoming Locals(1 0x0): 0- 
s1   bkID(4) Incoming Locals(1 0x0): 0- 
s1   bkID(4) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(4) Incoming Locals(2 0x0): 0- 3- 
s1   bkID(4) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(4) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(4) Incoming Locals(2 0x0): 0- 3- 
orig bkID(3) Incoming Locals(4 0x0): 0- 1- 2- 3- 
o1   bkID(3) Incoming Locals(1 0x0): 0- 
s1   bkID(3) Incoming Locals(1 0x0): 0- 
s1   bkID(3) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(3) Incoming Locals(4 0x0): 0- 3- 1- 2- 
orig bkID(2) Incoming Locals(1 0x0): 0- 
o1   bkID(2) Incoming Locals(1 0x0): 0- 
orig bkID(1) Incoming Locals(1 0x0): 0- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
s1   bkID(1) Incoming Locals(1 0x0): 0- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
s1   bkID(1) Incoming Locals(1 0x0): 0- 
s1   bkID(1) Incoming Locals(2 0x0): 0- 3- 
s1   bkID(1) Incoming Locals(3 0x0): 0- 3- 1- 
s1   bkID(1) Incoming Locals(4 0x0): 0- 3- 1- 2- 
o1   bkID(1) Incoming Locals(4 0x0): 0- 3- 1- 2- 
orig bkID(0) Incoming Locals(1 0x0): 3- 
o1   bkID(0) Incoming Locals(1 0x0): 3- 
s1   bkID(0) Incoming Locals(2 0x0): 3- 0- 
s1   bkID(0) Incoming Locals(2 0x0): 3- 0- 
s1   bkID(0) Incoming Locals(3 0x0): 3- 0- 1- 
s1   bkID(0) Incoming Locals(4 0x0): 3- 0- 1- 2- 
o1   bkID(0) Incoming Locals(4 0x0): 3- 0- 1- 2- 
orig bkID(11) Incoming Locals(1 0x0): 4- 
orig bkID(5) Incoming Locals(2 0x0): 0- 4- 
o1   bkID(5) Incoming Locals(1 0x0): 0- 
s1   bkID(5) Incoming Locals(2 0x0): 0- 4- 
o1   bkID(5) Incoming Locals(2 0x0): 0- 4- 
orig bkID(9) Incoming Locals(1 0x0): 3- 
o1   bkID(9) Incoming Locals(1 0x0): 3- 
o1   bkID(9) Incoming Locals(1 0x0): 3- 
orig bkID(6) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(6) Incoming Locals(2 0x0): 0- 3- 
s1   bkID(6) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(6) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(6) Incoming Locals(2 0x0): 0- 3- 
orig bkID(7) Incoming Locals(1 0x0): 3- 
o1   bkID(7) Incoming Locals(1 0x0): 3- 
o1   bkID(7) Incoming Locals(1 0x0): 3- 
orig bkID(4) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(4) Incoming Locals(1 0x0): 0- 
s1   bkID(4) Incoming Locals(1 0x0): 0- 
s1   bkID(4) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(4) Incoming Locals(2 0x0): 0- 3- 
s1   bkID(4) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(4) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(4) Incoming Locals(2 0x0): 0- 3- 
orig bkID(3) Incoming Locals(4 0x0): 0- 3- 1- 2- 
o1   bkID(3) Incoming Locals(1 0x0): 0- 
s1   bkID(3) Incoming Locals(1 0x0): 0- 
s1   bkID(3) Incoming Locals(2 0x0): 0- 3- 
o1   bkID(3) Incoming Locals(4 0x0): 0- 3- 1- 2- 
orig bkID(2) Incoming Locals(1 0x0): 0- 
o1   bkID(2) Incoming Locals(1 0x0): 0- 
orig bkID(1) Incoming Locals(4 0x0): 0- 3- 1- 2- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
s1   bkID(1) Incoming Locals(1 0x0): 0- 
o1   bkID(1) Incoming Locals(1 0x0): 0- 
s1   bkID(1) Incoming Locals(1 0x0): 0- 
s1   bkID(1) Incoming Locals(2 0x0): 0- 3- 
s1   bkID(1) Incoming Locals(3 0x0): 0- 3- 1- 
s1   bkID(1) Incoming Locals(4 0x0): 0- 3- 1- 2- 
o1   bkID(1) Incoming Locals(4 0x0): 0- 3- 1- 2- 
orig bkID(0) Incoming Locals(4 0x0): 3- 0- 1- 2- 
o1   bkID(0) Incoming Locals(1 0x0): 3- 
s1   bkID(0) Incoming Locals(2 0x0): 3- 0- 
s1   bkID(0) Incoming Locals(2 0x0): 3- 0- 
s1   bkID(0) Incoming Locals(3 0x0): 3- 0- 1- 
s1   bkID(0) Incoming Locals(4 0x0): 3- 0- 1- 2- 
o1   bkID(0) Incoming Locals(4 0x0): 3- 0- 1- 2- 
bkID(5) local(0 #0)  not found in goalBk
bkID(5) local(1 #4)  not ordered
bestLocal(0) bestLocalScore(8)
-bk  bkID(5) Incoming Locals(2 0x0): 0- 4- 
+bk  bkID(5) Incoming Locals(2 0x1): 4+ 0- 
-gbk bkID(11) Incoming Locals(1 0x0): 4- 
+gbk bkID(11) Incoming Locals(1 0x1): 4+ 
bkID(5) local(1 #0)  not found in goalBk
bkID(9) local(0 #3)  not found in goalBk
bkID(6) local(0 #0)  not found in goalBk
bkID(6) local(1 #3)  not ordered
bestLocal(0) bestLocalScore(24)
-bk  bkID(6) Incoming Locals(2 0x0): 0- 3- 
+bk  bkID(6) Incoming Locals(2 0x1): 3+ 0- 
-gbk bkID(9) Incoming Locals(1 0x0): 3- 
+gbk bkID(9) Incoming Locals(1 0x1): 3+ 
bkID(6) local(1 #0)  not found in goalBk
bkID(6) local(0 #3)  not found in goalBk
bkID(6) local(1 #0)  not found in goalBk
bkID(7) local(0 #3)  not found in goalBk
bkID(4) local(0 #0)  not ordered
bestLocal(1) bestLocalScore(48)
-bk  bkID(4) Incoming Locals(2 0x0): 0- 3- 
+bk  bkID(4) Incoming Locals(2 0x2): 3- 0+ 
-gbk bkID(6) Incoming Locals(2 0x1): 3+ 0- 
+gbk bkID(6) Incoming Locals(2 0x3): 3+ 0+ 
bkID(4) local(0 #3)  ordered in goalBk(6)
-bk  bkID(4) Incoming Locals(2 0x2): 3- 0+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 3+ 0+ 
 ordered in bk
-gbk bkID(7) Incoming Locals(1 0x0): 3- 
dstBk(7) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(7) Incoming Locals(1 0x1): 3+ 
-gbk bkID(6) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(6) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(6) Incoming Locals(2 0x3): 3+ 0+ 
bkID(4) local(1 #0)  ordered in goalBk(6)
-bk  bkID(4) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 3+ 0+ 
 ordered in bk
-gbk bkID(7) Incoming Locals(1 0x1): 3+ 
+gbk bkID(7) Incoming Locals(1 0x1): 3+ 
-gbk bkID(6) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(6) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(6) Incoming Locals(2 0x3): 3+ 0+ 
bkID(4) local(0 #3)  ordered in goalBk(7)
-bk  bkID(4) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(4) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(4) Incoming Locals(2 0x3): 3+ 0+ 
 ordered in bk
-gbk bkID(7) Incoming Locals(1 0x1): 3+ 
dstBk(7) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(7) Incoming Locals(1 0x1): 3+ 
bkID(4) local(1 #0)  not found in goalBk
bkID(4) local(0 #3)  not found in goalBk
bkID(4) local(1 #0)  not found in goalBk
bkID(7) local(0 #3)  ordered in goalBk(6)
-bk  bkID(7) Incoming Locals(1 0x1): 3+ 
dstBk(7) local(0 3) found in slot(0)
local(0 3) same slot
+bk  bkID(7) Incoming Locals(1 0x1): 3+ 
 ordered in bk
-gbk bkID(6) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(6) local(0 3) found in slot(0)
local(0 3) same slot
+gbk bkID(6) Incoming Locals(2 0x3): 3+ 0+ 
bkID(3) local(0 #0)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(4 0x0): 0- 3- 1- 2- 
dstBk(3) local(1 0) found in slot(0)
local(#1) swapped with local(#0)
+bk  bkID(3) Incoming Locals(4 0x2): 3- 0+ 1- 2- 
bkID(3) local(1 #0)  ordered in goalBk(4)
-bk  bkID(3) Incoming Locals(4 0x2): 3- 0+ 1- 2- 
dstBk(3) local(1 0) found in slot(1)
local(1 0) same slot
+bk  bkID(3) Incoming Locals(4 0x2): 3- 0+ 1- 2- 
 ordered in bk
-gbk bkID(4) Incoming Locals(2 0x3): 3+ 0+ 
dstBk(4) local(1 0) found in slot(1)
local(1 0) same slot
+gbk bkID(4) Incoming Locals(2 0x3): 3+ 0+ 
bkID(3) local(2 #1)  not found in goalBk
bkID(3) local(3 #2)  not found in goalBk
bkID(1) local(0 #0)  not ordered
bestLocal(0) bestLocalScore(24)
-bk  bkID(1) Incoming Locals(4 0x0): 0- 3- 1- 2- 
+bk  bkID(1) Incoming Locals(4 0x1): 0+ 3- 1- 2- 
-gbk bkID(2) Incoming Locals(1 0x0): 0- 
+gbk bkID(2) Incoming Locals(1 0x1): 0+ 
bkID(1) local(0 #0)  ordered in goalBk(2)
-bk  bkID(1) Incoming Locals(4 0x1): 0+ 3- 1- 2- 
dstBk(1) local(0 0) found in slot(0)
local(0 0) same slot
+bk  bkID(1) Incoming Locals(4 0x1): 0+ 3- 1- 2- 
 ordered in bk
-gbk bkID(3) Incoming Locals(4 0x2): 3- 0+ 1- 2- 
dstBk(3) local(0 0) found in slot(1)
dstIdx local(1 0) already ordered in dst
+gbk bkID(3) Incoming Locals(4 0x2): 3- 0+ 1- 2- 
-gbk bkID(2) Incoming Locals(1 0x1): 0+ 
dstBk(2) local(0 0) found in slot(0)
local(0 0) same slot
+gbk bkID(2) Incoming Locals(1 0x1): 0+ 
bkID(1) local(1 #3)  not found in goalBk
bkID(1) local(2 #1)  not found in goalBk
bkID(1) local(3 #2)  not found in goalBk
bkID(1) local(0 #0)  ordered in goalBk(3)
-bk  bkID(1) Incoming Locals(4 0x1): 0+ 3- 1- 2- 
dstBk(1) local(1 0) found in slot(0)
dstIdx local(0 0) already ordered in dst
+bk  bkID(1) Incoming Locals(4 0x1): 0+ 3- 1- 2- 
 ordered in bk
-gbk bkID(3) Incoming Locals(4 0x2): 3- 0+ 1- 2- 
dstBk(3) local(0 0) found in slot(1)
dstIdx local(1 0) already ordered in dst
+gbk bkID(3) Incoming Locals(4 0x2): 3- 0+ 1- 2- 
bkID(1) local(1 #3)  not ordered
bestLocal(2) bestLocalScore(8)
-bk  bkID(1) Incoming Locals(4 0x1): 0+ 3- 1- 2- 
+bk  bkID(1) Incoming Locals(4 0x5): 0+ 1- 3+ 2- 
-gbk bkID(3) Incoming Locals(4 0x2): 3- 0+ 1- 2- 
+gbk bkID(3) Incoming Locals(4 0x6): 1- 0+ 3+ 2- 
bkID(1) local(1 #1)  not ordered
bestLocal(3) bestLocalScore(8)
-bk  bkID(1) Incoming Locals(4 0x5): 0+ 1- 3+ 2- 
+bk  bkID(1) Incoming Locals(4 0xd): 0+ 2- 3+ 1+ 
-gbk bkID(3) Incoming Locals(4 0x6): 1- 0+ 3+ 2- 
+gbk bkID(3) Incoming Locals(4 0xe): 2- 0+ 3+ 1+ 
bkID(1) local(1 #2)  not ordered
bestLocal(4) bestLocalScore(8)
-bk  bkID(1) Incoming Locals(4 0xd): 0+ 2- 3+ 1+ 
+bk  bkID(1) Incoming Locals(5 0x1d): 0+ <null> 3+ 1+ 2+ 
-gbk bkID(3) Incoming Locals(4 0xe): 2- 0+ 3+ 1+ 
+gbk bkID(3) Incoming Locals(5 0x1e): <null> 0+ 3+ 1+ 2+ 
bkID(1) local(2 #3)  ordered in goalBk(3)
-bk  bkID(1) Incoming Locals(5 0x1d): 0+ <null> 3+ 1+ 2+ 
dstBk(1) local(2 3) found in slot(2)
local(2 3) same slot
+bk  bkID(1) Incoming Locals(5 0x1d): 0+ <null> 3+ 1+ 2+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(5 0x1e): <null> 0+ 3+ 1+ 2+ 
dstBk(3) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(3) Incoming Locals(5 0x1e): <null> 0+ 3+ 1+ 2+ 
bkID(1) local(3 #1)  ordered in goalBk(3)
-bk  bkID(1) Incoming Locals(5 0x1d): 0+ <null> 3+ 1+ 2+ 
dstBk(1) local(3 1) found in slot(3)
local(3 1) same slot
+bk  bkID(1) Incoming Locals(5 0x1d): 0+ <null> 3+ 1+ 2+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(5 0x1e): <null> 0+ 3+ 1+ 2+ 
dstBk(3) local(3 1) found in slot(3)
local(3 1) same slot
+gbk bkID(3) Incoming Locals(5 0x1e): <null> 0+ 3+ 1+ 2+ 
bkID(1) local(4 #2)  ordered in goalBk(3)
-bk  bkID(1) Incoming Locals(5 0x1d): 0+ <null> 3+ 1+ 2+ 
dstBk(1) local(4 2) found in slot(4)
local(4 2) same slot
+bk  bkID(1) Incoming Locals(5 0x1d): 0+ <null> 3+ 1+ 2+ 
 ordered in bk
-gbk bkID(3) Incoming Locals(5 0x1e): <null> 0+ 3+ 1+ 2+ 
dstBk(3) local(4 2) found in slot(4)
local(4 2) same slot
+gbk bkID(3) Incoming Locals(5 0x1e): <null> 0+ 3+ 1+ 2+ 
bkID(3) local(1 #0)  ordered in goalBk(2)
-bk  bkID(3) Incoming Locals(5 0x1e): <null> 0+ 3+ 1+ 2+ 
dstBk(3) local(0 0) found in slot(1)
dstIdx local(1 0) already ordered in dst
+bk  bkID(3) Incoming Locals(5 0x1e): <null> 0+ 3+ 1+ 2+ 
 ordered in bk
-gbk bkID(2) Incoming Locals(1 0x1): 0+ 
dstBk(2) local(1 0) found in slot(0)
dstIdx local(0 0) already ordered in dst
+gbk bkID(2) Incoming Locals(1 0x1): 0+ 
bkID(3) local(2 #3)  not found in goalBk
bkID(3) local(3 #1)  not found in goalBk
bkID(3) local(4 #2)  not found in goalBk
bkID(0) local(0 #3)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(4 0x0): 3- 0- 1- 2- 
dstBk(0) local(2 3) found in slot(0)
local(#2) swapped with local(#0)
+bk  bkID(0) Incoming Locals(4 0x4): 1- 0- 3+ 2- 
bkID(0) local(1 #0)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(4 0x4): 1- 0- 3+ 2- 
dstBk(0) local(0 0) found in slot(1)
local(#0) swapped with local(#1)
+bk  bkID(0) Incoming Locals(4 0x5): 0+ 1- 3+ 2- 
bkID(0) local(2 #3)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(4 0x5): 0+ 1- 3+ 2- 
dstBk(0) local(2 3) found in slot(2)
local(2 3) same slot
+bk  bkID(0) Incoming Locals(4 0x5): 0+ 1- 3+ 2- 
 ordered in bk
-gbk bkID(1) Incoming Locals(5 0x1d): 0+ <null> 3+ 1+ 2+ 
dstBk(1) local(2 3) found in slot(2)
local(2 3) same slot
+gbk bkID(1) Incoming Locals(5 0x1d): 0+ <null> 3+ 1+ 2+ 
bkID(0) local(3 #2)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(4 0x5): 0+ 1- 3+ 2- 
dstBk(0) local(4 2) found in slot(3)
local(#4) swapped with local(#3)
+bk  bkID(0) Incoming Locals(5 0x15): 0+ 1- 3+ <null> 2+ 
bkID(0) local(4 #2)  ordered in goalBk(1)
-bk  bkID(0) Incoming Locals(5 0x15): 0+ 1- 3+ <null> 2+ 
dstBk(0) local(4 2) found in slot(4)
local(4 2) same slot
+bk  bkID(0) Incoming Locals(5 0x15): 0+ 1- 3+ <null> 2+ 
 ordered in bk
-gbk bkID(1) Incoming Locals(5 0x1d): 0+ <null> 3+ 1+ 2+ 
dstBk(1) local(4 2) found in slot(4)
local(4 2) same slot
+gbk bkID(1) Incoming Locals(5 0x1d): 0+ <null> 3+ 1+ 2+ 
pre  bkID(0) Incoming Locals(5 0x15): 0+ 1- 3+ <null> 2+ 
local(#1) swapped with local(#1)
post bkID(0) Incoming Locals(5 0x17): 0+ 1+ 3+ <null> 2+ 
pre  bkID(5) Incoming Locals(2 0x1): 4+ 0- 
local(#1) swapped with local(#1)
post bkID(5) Incoming Locals(2 0x3): 4+ 0+ 

#################################################

The maximum node counts per root node are 12
IR block list contains 12 blocks in method
#################################################

*************************************************
*
* (block ID:0 block PC:0 )
* IR root list contains 3 root nodes: in block 
* flags: 0x1
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x17
* Source: sun.io.MarkableReader.read([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<0>  (0x7bde38):    iload_3 
<1>  (0x7bde39):    ifne <6>
<4>  (0x7bde3c):    iconst_0 
<5>  (0x7bde3d):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: -1 0

Original Incoming Locals(1): 
	local(3)	ID(2)
 
Incoming Locals(5): 
	local(0)	ID(8)
 	local(1)	ID(44)
 	local(3)	ID(2)
 	<null>
	local(2)	ID(45)
 
Successor Blocks(1): 
	ID(1) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(0 <null> 3 1 2)

   <(ID: 1) MAP_PC (NONE)   0>

   <(ID: 4) BCOND (int) 
   target: (BlockID: 1 BlockPC: 6)
   condition: NE
   flags: 0
      <(ID: 2) LOCAL (int)   3>
      <(ID: 3) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 6) RETURN_VALUE (int) 
      <(ID: 5) CONST_JAVA_NUMERIC32 (int)  (0)


*************************************************
*
* (block ID:1 block PC:6 )
* IR root list contains 7 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1f
* Source: sun.io.MarkableReader.read([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<6>  (0x7bde3e):    aload_0 
<7>  (0x7bde3f):    getfield_quick #4
<10>  (0x7bde42):    ifeq <35>
<13>  (0x7bde45):    aload_0 
<14>  (0x7bde46):    getfield_quick #5
<17>  (0x7bde49):    aload_0 
<18>  (0x7bde4a):    getfield_quick #4
<21>  (0x7bde4d):    if_icmpne <39>
<24>  (0x7bde50):    aload_0 
<25>  (0x7bde51):    getfield_quick #3
<28>  (0x7bde54):    aload_0 
<29>  (0x7bde55):    getfield_quick #4
<32>  (0x7bde58):    if_icmpne <39>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(8)
 
Incoming Locals(5): 
	local(0)	ID(8)
 	<null>
	local(3)	ID(104)
 	local(1)	ID(44)
 	local(2)	ID(45)
 
Successor Blocks(2): 
	ID(2) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(0)
	ID(3) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(<null> 0 3 1 2)

   <(ID: 7) MAP_PC (NONE)   6>

   <(ID: 11) IDENTITY (32-bit field)  (ref count: 4)
      <(ID: 14) FETCH (32-bit field) 
         <(ID: 10) FIELD_REF (32-bit field) 
            <(ID: 8) IDENTITY (reference)  (ref count: 3)
               <(ID: 18) LOCAL (reference)   0>
            <(ID: 9) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 13) BCOND (int) 
   target: (BlockID: 2 BlockPC: 35)
   condition: EQ
   flags: 0
      <(ID: 11) IDENTITY (32-bit field)  (ref count: 4)
      <(ID: 12) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 17) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 20) FETCH (32-bit field) 
         <(ID: 16) FIELD_REF (32-bit field) 
            <(ID: 8) IDENTITY (reference)  (ref count: 3)
            <(ID: 15) CONST_FIELD_OFFSET (NONE)  (5)

   <(ID: 19) BCOND (int) 
   target: (BlockID: 3 BlockPC: 39)
   condition: NE
   flags: 0
      <(ID: 17) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 11) IDENTITY (32-bit field)  (ref count: 4)


   <(ID: 23) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 25) FETCH (32-bit field) 
         <(ID: 22) FIELD_REF (32-bit field) 
            <(ID: 8) IDENTITY (reference)  (ref count: 3)
            <(ID: 21) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 24) BCOND (int) 
   target: (BlockID: 3 BlockPC: 39)
   condition: NE
   flags: 0
      <(ID: 23) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 11) IDENTITY (32-bit field)  (ref count: 4)



*************************************************
*
* (block ID:2 block PC:35 )
* IR root list contains 2 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1
* Source: sun.io.MarkableReader.read([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<35>  (0x7bde5b):    aload_0 
<36>  (0x7bde5c):    invokenonvirtual_quick #6000 <sun.io.MarkableReader.clearPosition()V>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(0)	ID(27)
 
Incoming Locals(1): 
	local(0)	ID(27)
 
Successor Blocks(1): 
	ID(3) LocalOrder(1) AssignOrder(0) RefsOK(0) Locals(<null> 0 3 1 2)

   <(ID: 26) MAP_PC (NONE)   35>

   <(ID: 31) INVOKE (v) 
      <(ID: 30) PARAMETER (reference) 
         <(ID: 27) LOCAL (reference)   0>
         <(ID: 29) NULL_PARAMETER (NONE) 
      <(ID: 28) CONST_MB (address field)  (sun.io.MarkableReader.clearPosition()V)


*************************************************
*
* (block ID:3 block PC:39 )
* IR root list contains 7 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x1e
* Source: sun.io.MarkableReader.read([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<39>  (0x7bde5f):    aload_0 
<40>  (0x7bde60):    getfield_quick #4
<43>  (0x7bde63):    ifgt <63>
<46>  (0x7bde66):    aload_0 
<47>  (0x7bde67):    agetfield_quick #6
<50>  (0x7bde6a):    aload_1 
<51>  (0x7bde6b):    iload_2 
<52>  (0x7bde6c):    iload_3 
<53>  (0x7bde6d):    invokeinterface_quick #4823 <sun.io.Markable.readNative([BII)I>
<58>  (0x7bde72):    istore 4
<60>  (0x7bde74):    goto <196>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(4): 
	local(0)	ID(33)
 	local(1)	ID(44)
 	local(2)	ID(45)
 	local(3)	ID(46)
 
Incoming Locals(5): 
	<null>
	local(0)	ID(33)
 	local(3)	ID(104)
 	local(1)	ID(44)
 	local(2)	ID(45)
 
Assigned Locals(1): 
	ASSIGN(59): local(4)	ID(58)	rhsID(56)
 
Successor Blocks(2): 
	ID(4) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(3 0)
	ID(5) LocalOrder(4) AssignOrder(1) RefsOK(0) Locals(4 0)

   <(ID: 32) MAP_PC (NONE)   39>

   <(ID: 36) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 39) FETCH (32-bit field) 
         <(ID: 35) FIELD_REF (32-bit field) 
            <(ID: 33) IDENTITY (reference)  (ref count: 2)
               <(ID: 43) LOCAL (reference)   0>
            <(ID: 34) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 38) BCOND (int) 
   target: (BlockID: 4 BlockPC: 63)
   condition: GT
   flags: 0
      <(ID: 36) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 37) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 42) IDENTITY (reference)  (ref count: 3)
      <(ID: 57) FETCH (reference) 
         <(ID: 41) FIELD_REF (reference) 
            <(ID: 33) IDENTITY (reference)  (ref count: 2)
            <(ID: 40) CONST_FIELD_OFFSET (NONE)  (6)

   <(ID: 56) IDENTITY (int)  (ref count: 2)
      <(ID: 60) INVOKE (int) 
         <(ID: 52) PARAMETER (reference) 
            <(ID: 42) IDENTITY (reference)  (ref count: 3)
            <(ID: 51) PARAMETER (reference) 
               <(ID: 44) LOCAL (reference)   1>
               <(ID: 50) PARAMETER (int) 
                  <(ID: 45) LOCAL (int)   2>
                  <(ID: 49) PARAMETER (int) 
                     <(ID: 46) LOCAL (int)   3>
                     <(ID: 48) NULL_PARAMETER (NONE) 
         <(ID: 55) FETCH_MB_FROM_INTERFACETABLE (address field) 
            <(ID: 54) GET_ITBL (NONE) 
               <(ID: 53) NULL_CHECK (reference) 
                  <(ID: 42) IDENTITY (reference)  (ref count: 3)
            <(ID: 47) CONST_MB (address field)  (sun.io.Markable.readNative([BII)I)

   <(ID: 59) ASSIGN (int)  (assignIdx: 0)
      <(ID: 58) LOCAL (int)   4>
      <(ID: 56) IDENTITY (int)  (ref count: 2)

   <(ID: 61) GOTO (NONE) 
   target: (BlockID: 5 BlockPC: 196)


*************************************************
*
* (block ID:4 block PC:63 )
* IR root list contains 10 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: sun.io.MarkableReader.read([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<63>  (0x7bde77):    aload_0 
<64>  (0x7bde78):    getfield_quick #3
<67>  (0x7bde7b):    iflt <127>
<70>  (0x7bde7e):    aload_0 
<71>  (0x7bde7f):    getfield_quick #3
<74>  (0x7bde82):    aload_0 
<75>  (0x7bde83):    getfield_quick #5
<78>  (0x7bde86):    if_icmpge <127>
<81>  (0x7bde89):    aload_0 
<82>  (0x7bde8a):    getfield_quick #3
<85>  (0x7bde8d):    iload_3 
<86>  (0x7bde8e):    iadd 
<87>  (0x7bde8f):    aload_0 
<88>  (0x7bde90):    getfield_quick #5
<91>  (0x7bde93):    if_icmple <106>
<94>  (0x7bde96):    aload_0 
<95>  (0x7bde97):    getfield_quick #5
<98>  (0x7bde9a):    aload_0 
<99>  (0x7bde9b):    getfield_quick #3
<102>  (0x7bde9e):    isub 
<103>  (0x7bde9f):    goto <107>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(63)
 	local(3)	ID(76)
 
Incoming Locals(2): 
	local(3)	ID(104)
 	local(0)	ID(63)
 
Successor Blocks(3): 
	ID(6) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(3 0)
	ID(7) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(3)
	ID(8) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 62) MAP_PC (NONE)   63>

   <(ID: 66) IDENTITY (32-bit field)  (ref count: 5)
      <(ID: 69) FETCH (32-bit field) 
         <(ID: 65) FIELD_REF (32-bit field) 
            <(ID: 63) IDENTITY (reference)  (ref count: 2)
               <(ID: 73) LOCAL (reference)   0>
            <(ID: 64) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 68) BCOND (int) 
   target: (BlockID: 6 BlockPC: 127)
   condition: LT
   flags: 0
      <(ID: 66) IDENTITY (32-bit field)  (ref count: 5)
      <(ID: 67) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 72) IDENTITY (32-bit field)  (ref count: 4)
      <(ID: 75) FETCH (32-bit field) 
         <(ID: 71) FIELD_REF (32-bit field) 
            <(ID: 63) IDENTITY (reference)  (ref count: 2)
            <(ID: 70) CONST_FIELD_OFFSET (NONE)  (5)

   <(ID: 74) BCOND (int) 
   target: (BlockID: 6 BlockPC: 127)
   condition: GE
   flags: 0
      <(ID: 66) IDENTITY (32-bit field)  (ref count: 5)
      <(ID: 72) IDENTITY (32-bit field)  (ref count: 4)


   <(ID: 78) BCOND (int) 
   target: (BlockID: 7 BlockPC: 106)
   condition: LE
   flags: 0
      <(ID: 77) ADD (int) 
         <(ID: 66) IDENTITY (32-bit field)  (ref count: 5)
         <(ID: 76) LOCAL (int)   3>
      <(ID: 72) IDENTITY (32-bit field)  (ref count: 4)


   <(ID: 81) DEFINE (int) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 79) SUB (int) 
         <(ID: 72) IDENTITY (32-bit field)  (ref count: 4)
         <(ID: 66) IDENTITY (32-bit field)  (ref count: 5)


   <(ID: 82) LOAD_PHIS (NONE) 

   <(ID: 83) RELEASE_PHIS (NONE) 

   <(ID: 84) GOTO (NONE) 
   target: (BlockID: 8 BlockPC: 107)


*************************************************
*
* (block ID:7 block PC:106 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1
* Source: sun.io.MarkableReader.read([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<106>  (0x7bdea2):    iload_3 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(3)	ID(120)
 
Incoming Locals(1): 
	local(3)	ID(120)
 
Successor Blocks(1): 
	ID(8) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 119) MAP_PC (NONE)   106>

   <(ID: 121) DEFINE (int) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 120) LOCAL (int)   3>


   <(ID: 122) LOAD_PHIS (NONE) 

   <(ID: 123) RELEASE_PHIS (NONE) 


*************************************************
*
* (block ID:8 block PC:107 )
* IR root list contains 6 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: sun.io.MarkableReader.read([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<107>  (0x7bdea3):    istore 4
<109>  (0x7bdea5):    aload_0 
<110>  (0x7bdea6):    agetfield_quick #2
<113>  (0x7bdea9):    aload_0 
<114>  (0x7bdeaa):    getfield_quick #3
<117>  (0x7bdead):    aload_1 
<118>  (0x7bdeae):    iload_2 
<119>  (0x7bdeaf):    iload 4
<121>  (0x7bdeb1):    invokestatic_checkinit_quick #9277 <java.lang.System.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V>
<124>  (0x7bdeb4):    goto <196>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 1 1

Assigned Locals(1): 
	ASSIGN(146): local(4)	ID(145)	rhsID(80)
 
Successor Blocks(1): 
	ID(5) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(4 0)

   <(ID: 124) MAP_PC (NONE)   107>

   <(ID: 128) IDENTITY (reference)  (ref count: 2)
      <(ID: 143) FETCH (reference) 
         <(ID: 127) FIELD_REF (reference) 
            <(ID: 125) IDENTITY (reference)  (ref count: 2)
               <(ID: 132) LOCAL (reference)   0>
            <(ID: 126) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 131) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 144) FETCH (32-bit field) 
         <(ID: 130) FIELD_REF (32-bit field) 
            <(ID: 125) IDENTITY (reference)  (ref count: 2)
            <(ID: 129) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 142) INVOKE (v) 
      <(ID: 141) PARAMETER (reference) 
         <(ID: 128) IDENTITY (reference)  (ref count: 2)
         <(ID: 140) PARAMETER (32-bit field) 
            <(ID: 131) IDENTITY (32-bit field)  (ref count: 2)
            <(ID: 139) PARAMETER (reference) 
               <(ID: 133) LOCAL (reference)   1>
               <(ID: 138) PARAMETER (int) 
                  <(ID: 134) LOCAL (int)   2>
                  <(ID: 137) PARAMETER (int) 
                     <(ID: 80) IDENTITY (int)  (ref count: 2)
                        <(ID: 147) USED (int) 
                        spillLocation: 0
                        registerSpillOk: 1

                     <(ID: 136) NULL_PARAMETER (NONE) 
      <(ID: 135) CONST_MB (address field)  (java.lang.System.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V)

   <(ID: 146) ASSIGN (int)  (assignIdx: 0)
      <(ID: 145) LOCAL (int)   4>
      <(ID: 80) IDENTITY (int)  (ref count: 2)

   <(ID: 148) GOTO (NONE) 
   target: (BlockID: 5 BlockPC: 196)


*************************************************
*
* (block ID:6 block PC:127 )
* IR root list contains 8 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: sun.io.MarkableReader.read([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<127>  (0x7bdeb7):    aload_0 
<128>  (0x7bdeb8):    getfield_quick #5
<131>  (0x7bdebb):    iload_3 
<132>  (0x7bdebc):    iadd 
<133>  (0x7bdebd):    aload_0 
<134>  (0x7bdebe):    getfield_quick #4
<137>  (0x7bdec1):    if_icmple <152>
<140>  (0x7bdec4):    aload_0 
<141>  (0x7bdec5):    getfield_quick #4
<144>  (0x7bdec8):    aload_0 
<145>  (0x7bdec9):    getfield_quick #5
<148>  (0x7bdecc):    isub 
<149>  (0x7bdecd):    goto <153>
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(100)
 	local(3)	ID(104)
 
Incoming Locals(2): 
	local(3)	ID(104)
 	local(0)	ID(100)
 
Successor Blocks(2): 
	ID(9) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals(3)
	ID(10) LocalOrder(2) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 99) MAP_PC (NONE)   127>

   <(ID: 103) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 111) FETCH (32-bit field) 
         <(ID: 102) FIELD_REF (32-bit field) 
            <(ID: 100) IDENTITY (reference)  (ref count: 2)
               <(ID: 109) LOCAL (reference)   0>
            <(ID: 101) CONST_FIELD_OFFSET (NONE)  (5)

   <(ID: 108) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 112) FETCH (32-bit field) 
         <(ID: 107) FIELD_REF (32-bit field) 
            <(ID: 100) IDENTITY (reference)  (ref count: 2)
            <(ID: 106) CONST_FIELD_OFFSET (NONE)  (4)

   <(ID: 110) BCOND (int) 
   target: (BlockID: 9 BlockPC: 152)
   condition: LE
   flags: 0
      <(ID: 105) ADD (int) 
         <(ID: 103) IDENTITY (32-bit field)  (ref count: 3)
         <(ID: 104) LOCAL (int)   3>
      <(ID: 108) IDENTITY (32-bit field)  (ref count: 3)


   <(ID: 115) DEFINE (int) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 113) SUB (int) 
         <(ID: 108) IDENTITY (32-bit field)  (ref count: 3)
         <(ID: 103) IDENTITY (32-bit field)  (ref count: 3)


   <(ID: 116) LOAD_PHIS (NONE) 

   <(ID: 117) RELEASE_PHIS (NONE) 

   <(ID: 118) GOTO (NONE) 
   target: (BlockID: 10 BlockPC: 153)


*************************************************
*
* (block ID:9 block PC:152 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x1
* Source: sun.io.MarkableReader.read([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<152>  (0x7bded0):    iload_3 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(3)	ID(153)
 
Incoming Locals(1): 
	local(3)	ID(153)
 
Successor Blocks(1): 
	ID(10) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals()

   <(ID: 152) MAP_PC (NONE)   152>

   <(ID: 154) DEFINE (int) 
   spillLocation: 0
   registerSpillOk: 1
   operand:       <(ID: 153) LOCAL (int)   3>


   <(ID: 155) LOAD_PHIS (NONE) 

   <(ID: 156) RELEASE_PHIS (NONE) 


*************************************************
*
* (block ID:10 block PC:153 )
* IR root list contains 9 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x1
* noMoreIncomingRefLocals: 0x1
* orderedIncomingLocals: 0x0
* Source: sun.io.MarkableReader.read([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<153>  (0x7bded1):    istore 4
<155>  (0x7bded3):    aload_0 
<156>  (0x7bded4):    agetfield_quick #6
<159>  (0x7bded7):    aload_1 
<160>  (0x7bded8):    iload_2 
<161>  (0x7bded9):    iload 4
<163>  (0x7bdedb):    invokeinterface_quick #4823 <sun.io.Markable.readNative([BII)I>
<168>  (0x7bdee0):    istore 4
<170>  (0x7bdee2):    aload_1 
<171>  (0x7bdee3):    iload_2 
<172>  (0x7bdee4):    aload_0 
<173>  (0x7bdee5):    agetfield_quick #2
<176>  (0x7bdee8):    aload_0 
<177>  (0x7bdee9):    getfield_quick #5
<180>  (0x7bdeec):    iload 4
<182>  (0x7bdeee):    invokestatic_checkinit_quick #9277 <java.lang.System.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V>
<185>  (0x7bdef1):    aload_0 
<186>  (0x7bdef2):    dup 
<187>  (0x7bdef3):    getfield_quick #5
<190>  (0x7bdef6):    iload 4
<192>  (0x7bdef8):    iadd 
<193>  (0x7bdef9):    putfield_quick #5
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 1 1

Assigned Locals(1): 
	ASSIGN(204): local(4)	ID(203)	rhsID(173)
 
Successor Blocks(1): 
	ID(5) LocalOrder(0) AssignOrder(1) RefsOK(0) Locals(4 0)

   <(ID: 157) MAP_PC (NONE)   153>

   <(ID: 161) IDENTITY (reference)  (ref count: 3)
      <(ID: 174) FETCH (reference) 
         <(ID: 160) FIELD_REF (reference) 
            <(ID: 158) IDENTITY (reference)  (ref count: 5)
               <(ID: 178) LOCAL (reference)   0>
            <(ID: 159) CONST_FIELD_OFFSET (NONE)  (6)

   <(ID: 173) IDENTITY (int)  (ref count: 4)
      <(ID: 194) INVOKE (int) 
         <(ID: 169) PARAMETER (reference) 
            <(ID: 161) IDENTITY (reference)  (ref count: 3)
            <(ID: 168) PARAMETER (reference) 
               <(ID: 162) IDENTITY (reference)  (ref count: 2)
                  <(ID: 190) LOCAL (reference)   1>
               <(ID: 167) PARAMETER (int) 
                  <(ID: 163) IDENTITY (int)  (ref count: 2)
                     <(ID: 191) LOCAL (int)   2>
                  <(ID: 166) PARAMETER (int) 
                     <(ID: 114) USED (int) 
                     spillLocation: 0
                     registerSpillOk: 1

                     <(ID: 165) NULL_PARAMETER (NONE) 
         <(ID: 172) FETCH_MB_FROM_INTERFACETABLE (address field) 
            <(ID: 171) GET_ITBL (NONE) 
               <(ID: 170) NULL_CHECK (reference) 
                  <(ID: 161) IDENTITY (reference)  (ref count: 3)
            <(ID: 164) CONST_MB (address field)  (sun.io.Markable.readNative([BII)I)

   <(ID: 177) IDENTITY (reference)  (ref count: 2)
      <(ID: 192) FETCH (reference) 
         <(ID: 176) FIELD_REF (reference) 
            <(ID: 158) IDENTITY (reference)  (ref count: 5)
            <(ID: 175) CONST_FIELD_OFFSET (NONE)  (2)

   <(ID: 181) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 193) FETCH (32-bit field) 
         <(ID: 180) FIELD_REF (32-bit field) 
            <(ID: 158) IDENTITY (reference)  (ref count: 5)
            <(ID: 179) CONST_FIELD_OFFSET (NONE)  (5)

   <(ID: 189) INVOKE (v) 
      <(ID: 188) PARAMETER (reference) 
         <(ID: 162) IDENTITY (reference)  (ref count: 2)
         <(ID: 187) PARAMETER (int) 
            <(ID: 163) IDENTITY (int)  (ref count: 2)
            <(ID: 186) PARAMETER (reference) 
               <(ID: 177) IDENTITY (reference)  (ref count: 2)
               <(ID: 185) PARAMETER (32-bit field) 
                  <(ID: 181) IDENTITY (32-bit field)  (ref count: 2)
                  <(ID: 184) PARAMETER (int) 
                     <(ID: 173) IDENTITY (int)  (ref count: 4)
                     <(ID: 183) NULL_PARAMETER (NONE) 
      <(ID: 182) CONST_MB (address field)  (java.lang.System.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V)

   <(ID: 197) IDENTITY (32-bit field)  (ref count: 2)
      <(ID: 202) FETCH (32-bit field) 
         <(ID: 196) FIELD_REF (32-bit field) 
            <(ID: 158) IDENTITY (reference)  (ref count: 5)
            <(ID: 195) CONST_FIELD_OFFSET (NONE)  (5)

   <(ID: 201) ASSIGN (32-bit field) 
      <(ID: 200) FIELD_REF (32-bit field) 
         <(ID: 158) IDENTITY (reference)  (ref count: 5)
         <(ID: 199) CONST_FIELD_OFFSET (NONE)  (5)
      <(ID: 198) ADD (int) 
         <(ID: 197) IDENTITY (32-bit field)  (ref count: 2)
         <(ID: 173) IDENTITY (int)  (ref count: 4)

   <(ID: 204) ASSIGN (int)  (assignIdx: 0)
      <(ID: 203) LOCAL (int)   4>
      <(ID: 173) IDENTITY (int)  (ref count: 4)


*************************************************
*
* (block ID:5 block PC:196 )
* IR root list contains 4 root nodes: in block 
* flags: 0x341
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: sun.io.MarkableReader.read([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<196>  (0x7bdefc):    aload_0 
<197>  (0x7bdefd):    getfield_quick #3
<200>  (0x7bdf00):    iflt <214>
<203>  (0x7bdf03):    aload_0 
<204>  (0x7bdf04):    dup 
<205>  (0x7bdf05):    getfield_quick #3
<208>  (0x7bdf08):    iload 4
<210>  (0x7bdf0a):    iadd 
<211>  (0x7bdf0b):    putfield_quick #3
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(2): 
	local(0)	ID(86)
 	local(4)	ID(93)
 
Incoming Locals(2): 
	local(4)	ID(150)
 	local(0)	ID(86)
 
Successor Blocks(1): 
	ID(11) LocalOrder(1) AssignOrder(0) RefsOK(1) Locals(4 <null>)

   <(ID: 85) MAP_PC (NONE)   196>

   <(ID: 89) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 92) FETCH (32-bit field) 
         <(ID: 88) FIELD_REF (32-bit field) 
            <(ID: 86) IDENTITY (reference)  (ref count: 2)
               <(ID: 98) LOCAL (reference)   0>
            <(ID: 87) CONST_FIELD_OFFSET (NONE)  (3)

   <(ID: 91) BCOND (int) 
   target: (BlockID: 11 BlockPC: 214)
   condition: LT
   flags: 0
      <(ID: 89) IDENTITY (32-bit field)  (ref count: 3)
      <(ID: 90) CONST_JAVA_NUMERIC32 (int)  (0)


   <(ID: 97) ASSIGN (32-bit field) 
      <(ID: 96) FIELD_REF (32-bit field) 
         <(ID: 86) IDENTITY (reference)  (ref count: 2)
         <(ID: 95) CONST_FIELD_OFFSET (NONE)  (3)
      <(ID: 94) ADD (int) 
         <(ID: 89) IDENTITY (32-bit field)  (ref count: 3)
         <(ID: 93) LOCAL (int)   4>


*************************************************
*
* (block ID:11 block PC:214 )
* IR root list contains 2 root nodes: in block 
* flags: 0x301
* noMoreIncomingLocals: 0x0
* noMoreIncomingRefLocals: 0x0
* orderedIncomingLocals: 0x3
* Source: sun.io.MarkableReader.read([BII)I(Unknown Source)
* Compilation depth: 0 locals : 0 .. 4
* Byte-codes for block:
<214>  (0x7bdf0e):    iload 4
<216>  (0x7bdf10):    ireturn 
LOCALS MERGE INFO AT HEAD OF BLOCK: 0 1 
*************************************************

Number and size of USED nodes in phi array: 0 0

Original Incoming Locals(1): 
	local(4)	ID(150)
 
Incoming Locals(2): 
	local(4)	ID(150)
 	<null>

   <(ID: 149) MAP_PC (NONE)   214>

   <(ID: 151) RETURN_VALUE (int) 
      <(ID: 150) LOCAL (int)   4>


NUM BARRIER BYTES = 0
NUM VIRTUAL INLINE BYTES = 0
NUM LARGE OPCODE BYTES = 56
NUM MAIN LINE INSTRUCTION BYTES ESTIMATE = 1310
ESTIMATED BUFFER SIZE = 1516
CODE BUFFER ADDRESS = 0x2bcc6528
PC MAP TABLE ADDRESS = 0x2bcc6530
CODE ENTRY ADDRESS = 0x2bcc6580
          		@ Method prologue
0x2bcc6580	0:	addiu	a1, JSP, 60	@ Set R1 = JSP + (capacity - argsSize) * 4
          		@ Stack limit check
0x2bcc6584	4:	sw	ra, 16(JFP)	@ Store LR into frame
0x2bcc6588	8:	sltu	t7, a1, CHUNKEND
0x2bcc658c	12:	bne	t7, zero, PC=0x2bcc6580	@ goto .skip
0x2bcc6590	16:	nop
0x2bcc6594	20:	jal	PC=(0x2bcb9060)	@ check for chunk overflow call letInterpreterDoInvoke if overflow
0x2bcc6598	24:	nop
>>>>>>>>>Push Code Buffer to PC = 12 (0x2bcc658c) >>>>>>>>
0x2bcc658c	12:	bne	t7, zero, PC=0x2bcc659c	@ goto .skip
0x2bcc6590	16:	nop
<<<<<<<<<Pop Code Buffer to PC = 28 (0x2bcc659c) <<<<<<<<<
		.skip
          		@ Set up frame for method
0x2bcc659c	28:	sw	JFP, 4(JSP)	@ Store curr JFP into new frame
0x2bcc65a0	32:	addiu	JFP, JSP, 4	@ JFP = JSP + (maxLocals - argsSize) * 4
0x2bcc65a4	36:	sw	a0, 12(JFP)	@ Store MB into frame
          		@ DEBUG-ONLY CODE
0x2bcc65a8	40:	addiu	a3, zero, 0
0x2bcc65ac	44:	sb	a3, 4(JFP)	@ Store NONE into frame.type
0x2bcc65b0	48:	addiu	a3, zero, -1
0x2bcc65b4	52:	sb	a3, 5(JFP)	@ Store -1 into frame.flags
          		@ END OF DEBUG-ONLY CODE
          		@ DEBUG-ONLY CODE FOR TRACING METHOD CALLS
0x2bcc65b8	56:	move	a0, EE
0x2bcc65bc	60:	move	a1, JFP	@ arg2 = JFP
0x2bcc65c0	64:	lui	t9, hi16(0x65)
0x2bcc65c4	68:	ori	t9, t9, lo16(0x65a9f8)	@ CVMCCMtraceMethodCallGlue()
0x2bcc65c8	72:	jalr	t9
0x2bcc65cc	76:	nop
          		@ END OF DEBUG-ONLY CODE FOR TRACING
          		@ Interpreted -> compiled entry point
0x2bcc65d0	80:	addiu	JSP, JFP, 32	@ spill adjust goes here
          		@ 3 words for setting up cp base register
0x2bcc65d4	84:	nop
0x2bcc65d8	88:	nop
0x2bcc65dc	92:	nop
			@ Initial Temp REF set is 
	L0:	96:	@ entry point for first block
			@ Preloading incoming local(0) reg(20)
0x2bcc65e0	96:	lw	s4, -20(JFP)	@ Java local cell # 0
			@ Preloading incoming local(1) reg(21)
0x2bcc65e4	100:	lw	s5, -16(JFP)	@ Java local cell # 1
			@ Preloading incoming local(3) reg(22)
0x2bcc65e8	104:	lw	s6, -8(JFP)	@ Java local cell # 3
          		@ MAP_PC idepth=0 javaPc=0 compiledPc=108
			@ Outgoing local(0) reg(20): in correct register
			@ Outgoing local(3) reg(22): in correct register
			@ Outgoing local(1) reg(23): in wrong register
0x2bcc65ec	108:	move	s7, s5
          		@ deferred comparison: 
0x2bcc65f0	112:	bne	s6, zero, PC=0x2bcc65f0	@ branch to block L1
0x2bcc65f4	116:	nop
0x2bcc65f8	120:	sw	zero, -20(JFP)	@ Java local cell # 0
0x2bcc65fc	124:	addiu	JSP, JFP, -16
0x2bcc6600	128:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc6604	132:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc6608	136:	nop
			@ Initial Temp REF set is 
	L1:	140:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
			@ Binding Incoming Local(3) to reg(22)
			@ Binding Incoming Local(1) to reg(23)
--->Fixed instruction at 112(0x2bcc65f0) to reference 140
          		@ MAP_PC idepth=0 javaPc=6 compiledPc=140
          		@ Do getfield:
0x2bcc660c	140:	lw	s5, 16(s4)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(0) reg(20): in correct register
          		@ deferred comparison: 
0x2bcc6610	144:	beq	s5, zero, PC=0x2bcc6610	@ branch to block L2
0x2bcc6614	148:	nop
          		@ Do getfield:
0x2bcc6618	152:	lw	ra, 20(s4)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(0) reg(21): in wrong register
0x2bcc661c	156:	sw	s5, 32(JFP)	@ spill Java temp cell # 1
0x2bcc6620	160:	move	s5, s4
			@ Outgoing local(3) reg(22): in correct register
			@ Outgoing local(1) reg(23): in correct register
0x2bcc6624	164:	lw	s4, 32(JFP)	@ Java temp cell # 1
          		@ deferred comparison: 
0x2bcc6628	168:	bne	ra, s4, PC=0x2bcc6628	@ branch to block L3
0x2bcc662c	172:	nop
          		@ Do getfield:
0x2bcc6630	176:	lw	ra, 12(s5)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(0) reg(21): in correct register
			@ Outgoing local(3) reg(22): in correct register
			@ Outgoing local(1) reg(23): in correct register
          		@ deferred comparison: 
0x2bcc6634	180:	bne	ra, s4, PC=0x2bcc6634	@ branch to block L3
0x2bcc6638	184:	nop
			@ Outgoing local(0) reg(20): in wrong register
0x2bcc663c	188:	move	s4, s5
			@ Initial Temp REF set is 
	L2:	192:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(20)
--->Fixed instruction at 144(0x2bcc6610) to reference 192
          		@ MAP_PC idepth=0 javaPc=35 compiledPc=192
0x2bcc6640	192:	sw	s4, 0(JSP)
0x2bcc6644	196:	lw	a0, 0(CP)	@ mb sun.io.MarkableReader.clearPosition()V
          		@ Invoke a method w/ a void return type
0x2bcc6648	200:	addiu	JSP, JSP, 4	@ adjust JSP before method call
0x2bcc664c	204:	lw	s7, 0(a0)	@ call method through mb
0x2bcc6650	208:	jalr	s7
0x2bcc6654	212:	nop
          		@ Captured a stackmap here.
			@ Outgoing local(0) reg(21): not in register
0x2bcc6658	216:	lw	s5, -20(JFP)	@ Java local cell # 0
			@ Outgoing local(3) reg(22): not in register
0x2bcc665c	220:	lw	s6, -8(JFP)	@ Java local cell # 3
			@ Outgoing local(1) reg(23): not in register
0x2bcc6660	224:	lw	s7, -16(JFP)	@ Java local cell # 1
			@ Initial Temp REF set is 
	L3:	228:	@ entry point for branches
			@ Binding Incoming Local(0) to reg(21)
			@ Binding Incoming Local(3) to reg(22)
			@ Binding Incoming Local(1) to reg(23)
--->Fixed instruction at 180(0x2bcc6634) to reference 228
--->Fixed instruction at 168(0x2bcc6628) to reference 228
          		@ MAP_PC idepth=0 javaPc=39 compiledPc=228
          		@ Do getfield:
0x2bcc6664	228:	lw	s4, 16(s5)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(3) reg(20): in wrong register
0x2bcc6668	232:	sw	s4, 32(JFP)	@ spill Java temp cell # 1
0x2bcc666c	236:	move	s4, s6
			@ Outgoing local(0) reg(21): in correct register
0x2bcc6670	240:	lw	s6, 32(JFP)	@ Java temp cell # 1
          		@ deferred comparison: 
0x2bcc6674	244:	slt	t7, zero, s6
0x2bcc6678	248:	bne	t7, zero, PC=0x2bcc6674	@ branch to block L4
0x2bcc667c	252:	nop
          		@ Do getfield:
0x2bcc6680	256:	lw	s6, 24(s5)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc6684	260:	sw	s6, 0(JSP)
0x2bcc6688	264:	sw	s7, 4(JSP)
0x2bcc668c	268:	lw	ra, -12(JFP)	@ Java local cell # 2
0x2bcc6690	272:	sw	ra, 8(JSP)
0x2bcc6694	276:	sw	s4, 12(JSP)
0x2bcc6698	280:	lw	t9, 0(s6)	@ NULL check
0x2bcc669c	284:	lw	a2, 0(CP)	@ mb sun.io.Markable.readNative([BII)I
0x2bcc66a0	288:	move	a1, s6
          		@ Fetch mb from itable:
0x2bcc66a4	292:	jal	PC=(0x2bcb848c)	@ call CVMCCMruntimeLookupInterfaceMBGlue
0x2bcc66a8	296:	nop
0x2bcc66ac	300:	.word	0	@ interface lookup guess
          		@ Captured a stackmap here.
          		@ Invoke a method w/ a 32bit return type
0x2bcc66b0	304:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc66b4	308:	move	a0, v0
0x2bcc66b8	312:	lw	s7, 0(a0)	@ call method through mb
0x2bcc66bc	316:	jalr	s7
0x2bcc66c0	320:	nop
          		@ Captured a stackmap here.
0x2bcc66c4	324:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc66c8	328:	lw	s4, 0(JSP)
0x2bcc66cc	332:	sw	s4, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(4) reg(20): in correct register
			@ Outgoing local(0) reg(21): not in register
0x2bcc66d0	336:	lw	s5, -20(JFP)	@ Java local cell # 0
0x2bcc66d4	340:	b	PC=0x2bcc66d4	@ branch to block L5
0x2bcc66d8	344:	nop
			@ Initial Temp REF set is 
	L4:	348:	@ entry point for branches
			@ Binding Incoming Local(3) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 248(0x2bcc6678) to reference 348
          		@ MAP_PC idepth=0 javaPc=63 compiledPc=348
          		@ Do getfield:
0x2bcc66dc	348:	lw	s7, 12(s5)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(3) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
0x2bcc66e0	352:	sltiu	t7, s7, 0
0x2bcc66e4	356:	bne	t7, zero, PC=0x2bcc66e0	@ branch to block L6
0x2bcc66e8	360:	nop
          		@ Do getfield:
0x2bcc66ec	364:	lw	s6, 20(s5)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(3) reg(20): in correct register
			@ Outgoing local(0) reg(21): in correct register
          		@ deferred comparison: 
0x2bcc66f0	368:	slt	t7, s7, s6
0x2bcc66f4	372:	beq	t7, zero, PC=0x2bcc66f0	@ branch to block L6
0x2bcc66f8	376:	nop
0x2bcc66fc	380:	addu	ra, s7, s4
			@ Outgoing local(3) reg(20): in correct register
          		@ deferred comparison: 
0x2bcc6700	384:	slt	t7, s6, ra
0x2bcc6704	388:	beq	t7, zero, PC=0x2bcc6700	@ branch to block L7
0x2bcc6708	392:	nop
0x2bcc670c	396:	subu	s4, s6, s7
			@ Processing DEFINE(0) reg(20): in correct register
			@ Loading DEFINE(0) register(20): in correct register
0x2bcc6710	400:	b	PC=0x2bcc6710	@ branch to block L8
0x2bcc6714	404:	nop
			@ Initial Temp REF set is 
	L7:	408:	@ entry point for branches
			@ Binding Incoming Local(3) to reg(20)
--->Fixed instruction at 388(0x2bcc6704) to reference 408
          		@ MAP_PC idepth=0 javaPc=106 compiledPc=408
			@ Processing DEFINE(0) reg(20): in correct register
			@ Loading DEFINE(0) register(20): in correct register
			@ Initial Temp REF set is 
	L8:	408:	@ entry point for branches
--->Fixed instruction at 400(0x2bcc6710) to reference 408
          		@ MAP_PC idepth=0 javaPc=107 compiledPc=408
0x2bcc6718	408:	lw	ra, -20(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcc671c	412:	lw	s7, 8(ra)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc6720	416:	lw	s6, 12(ra)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc6724	420:	sw	s7, 0(JSP)
0x2bcc6728	424:	sw	s6, 4(JSP)
0x2bcc672c	428:	lw	t9, -16(JFP)	@ Java local cell # 1
0x2bcc6730	432:	sw	t9, 8(JSP)
0x2bcc6734	436:	lw	t8, -12(JFP)	@ Java local cell # 2
0x2bcc6738	440:	sw	t8, 12(JSP)
0x2bcc673c	444:	sw	s4, 16(JSP)
0x2bcc6740	448:	lw	a0, 0(CP)	@ mb java.lang.System.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
          		@ Invoke a method w/ a void return type
0x2bcc6744	452:	addiu	JSP, JSP, 20	@ adjust JSP before method call
0x2bcc6748	456:	jal	PC=(0x2bcb8ff8)	@ call CVMCCMinvokeJNIMethod() for java.lang.System.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
0x2bcc674c	460:	nop
          		@ Captured a stackmap here.
0x2bcc6750	464:	sw	s4, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(4) reg(20): in correct register
			@ Outgoing local(0) reg(21): not in register
0x2bcc6754	468:	lw	s5, -20(JFP)	@ Java local cell # 0
0x2bcc6758	472:	b	PC=0x2bcc6758	@ branch to block L5
0x2bcc675c	476:	nop
			@ Initial Temp REF set is 
	L6:	480:	@ entry point for branches
			@ Binding Incoming Local(3) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 372(0x2bcc66f4) to reference 480
--->Fixed instruction at 356(0x2bcc66e4) to reference 480
          		@ MAP_PC idepth=0 javaPc=127 compiledPc=480
          		@ Do getfield:
0x2bcc6760	480:	lw	s7, 20(s5)	@ value{I|F} = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc6764	484:	lw	s6, 16(s5)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc6768	488:	addu	ra, s7, s4
			@ Outgoing local(3) reg(20): in correct register
          		@ deferred comparison: 
0x2bcc676c	492:	slt	t7, s6, ra
0x2bcc6770	496:	beq	t7, zero, PC=0x2bcc676c	@ branch to block L9
0x2bcc6774	500:	nop
0x2bcc6778	504:	subu	s4, s6, s7
			@ Processing DEFINE(0) reg(20): in correct register
			@ Loading DEFINE(0) register(20): in correct register
0x2bcc677c	508:	b	PC=0x2bcc677c	@ branch to block L10
0x2bcc6780	512:	nop
			@ Initial Temp REF set is 
	L9:	516:	@ entry point for branches
			@ Binding Incoming Local(3) to reg(20)
--->Fixed instruction at 496(0x2bcc6770) to reference 516
          		@ MAP_PC idepth=0 javaPc=152 compiledPc=516
			@ Processing DEFINE(0) reg(20): in correct register
			@ Loading DEFINE(0) register(20): in correct register
			@ Initial Temp REF set is 
	L10:	516:	@ entry point for branches
--->Fixed instruction at 508(0x2bcc677c) to reference 516
          		@ MAP_PC idepth=0 javaPc=153 compiledPc=516
0x2bcc6784	516:	lw	ra, -20(JFP)	@ Java local cell # 0
          		@ Do getfield:
0x2bcc6788	520:	lw	s7, 24(ra)	@ valueObj = getfield(obj, fieldIdx);
0x2bcc678c	524:	sw	s7, 0(JSP)
0x2bcc6790	528:	lw	t9, -16(JFP)	@ Java local cell # 1
0x2bcc6794	532:	sw	t9, 4(JSP)
0x2bcc6798	536:	lw	t8, -12(JFP)	@ Java local cell # 2
0x2bcc679c	540:	sw	t8, 8(JSP)
0x2bcc67a0	544:	sw	s4, 12(JSP)
0x2bcc67a4	548:	lw	s6, 0(s7)	@ NULL check
0x2bcc67a8	552:	lw	a2, 0(CP)	@ mb sun.io.Markable.readNative([BII)I
0x2bcc67ac	556:	move	a1, s7
          		@ Fetch mb from itable:
0x2bcc67b0	560:	jal	PC=(0x2bcb848c)	@ call CVMCCMruntimeLookupInterfaceMBGlue
0x2bcc67b4	564:	nop
0x2bcc67b8	568:	.word	0	@ interface lookup guess
          		@ Captured a stackmap here.
          		@ Invoke a method w/ a 32bit return type
0x2bcc67bc	572:	addiu	JSP, JSP, 16	@ adjust JSP before method call
0x2bcc67c0	576:	move	a0, v0
0x2bcc67c4	580:	lw	s7, 0(a0)	@ call method through mb
0x2bcc67c8	584:	jalr	s7
0x2bcc67cc	588:	nop
          		@ Captured a stackmap here.
0x2bcc67d0	592:	addiu	JSP, JSP, -4	@ do manual pre decrement
0x2bcc67d4	596:	lw	s4, 0(JSP)
          		@ Do getfield:
0x2bcc67d8	600:	lw	s6, -20(JFP)	@ Java local cell # 0
0x2bcc67dc	604:	lw	s7, 8(s6)	@ valueObj = getfield(obj, fieldIdx);
          		@ Do getfield:
0x2bcc67e0	608:	lw	s5, 20(s6)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc67e4	612:	lw	ra, -16(JFP)	@ Java local cell # 1
0x2bcc67e8	616:	sw	ra, 0(JSP)
0x2bcc67ec	620:	lw	t9, -12(JFP)	@ Java local cell # 2
0x2bcc67f0	624:	sw	t9, 4(JSP)
0x2bcc67f4	628:	sw	s7, 8(JSP)
0x2bcc67f8	632:	sw	s5, 12(JSP)
0x2bcc67fc	636:	sw	s4, 16(JSP)
0x2bcc6800	640:	lw	a0, 0(CP)	@ mb java.lang.System.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
          		@ Invoke a method w/ a void return type
0x2bcc6804	644:	addiu	JSP, JSP, 20	@ adjust JSP before method call
0x2bcc6808	648:	jal	PC=(0x2bcb8ff8)	@ call CVMCCMinvokeJNIMethod() for java.lang.System.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
0x2bcc680c	652:	nop
          		@ Captured a stackmap here.
          		@ Do getfield:
0x2bcc6810	656:	lw	s6, -20(JFP)	@ Java local cell # 0
0x2bcc6814	660:	lw	s7, 20(s6)	@ value{I|F} = getfield(obj, fieldIdx);
0x2bcc6818	664:	addu	s5, s7, s4
          		@ Do putfield:
0x2bcc681c	668:	sw	s5, 20(s6)	@ putfield(obj, fieldOffset, value{I|F});
0x2bcc6820	672:	sw	s4, -4(JFP)	@ Java local cell # 4
			@ Outgoing local(4) reg(20): in correct register
			@ Outgoing local(0) reg(21): in wrong register
0x2bcc6824	676:	move	s5, s6
			@ Initial Temp REF set is 
	L5:	680:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(20)
			@ Binding Incoming Local(0) to reg(21)
--->Fixed instruction at 472(0x2bcc6758) to reference 680
--->Fixed instruction at 340(0x2bcc66d4) to reference 680
          		@ MAP_PC idepth=0 javaPc=196 compiledPc=680
          		@ Do getfield:
0x2bcc6828	680:	lw	s7, 12(s5)	@ value{I|F} = getfield(obj, fieldIdx);
			@ Outgoing local(4) reg(20): in correct register
          		@ deferred comparison: 
0x2bcc682c	684:	sltiu	t7, s7, 0
0x2bcc6830	688:	bne	t7, zero, PC=0x2bcc682c	@ branch to block L11
0x2bcc6834	692:	nop
0x2bcc6838	696:	addu	s6, s7, s4
          		@ Do putfield:
0x2bcc683c	700:	sw	s6, 12(s5)	@ putfield(obj, fieldOffset, value{I|F});
			@ Outgoing local(4) reg(20): in correct register
			@ Initial Temp REF set is 
	L11:	704:	@ entry point for branches
			@ Binding Incoming Local(4) to reg(20)
--->Fixed instruction at 688(0x2bcc6830) to reference 704
          		@ MAP_PC idepth=0 javaPc=214 compiledPc=704
0x2bcc6840	704:	sw	s4, -20(JFP)	@ Java local cell # 0
0x2bcc6844	708:	addiu	JSP, JFP, -16
0x2bcc6848	712:	lw	t8, 0(JFP)	@ PREV(t8) = frame.prevX for return helper to use
0x2bcc684c	716:	b	PC=0x2bcb912c	@ goto CVMCCMreturnFromMethod
0x2bcc6850	720:	nop
0x2bcc6854	724:	.word	9227556	@ mb java.lang.System.arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
--->Fixed instruction at 640(0x2bcc6800) to reference 724
--->Fixed instruction at 448(0x2bcc6740) to reference 724
0x2bcc6858	728:	.word	9206864	@ mb sun.io.Markable.readNative([BII)I
--->Fixed instruction at 552(0x2bcc67a8) to reference 728
--->Fixed instruction at 284(0x2bcc669c) to reference 728
0x2bcc685c	732:	.word	9296736	@ mb sun.io.MarkableReader.clearPosition()V
--->Fixed instruction at 196(0x2bcc6644) to reference 732
>>>>>>>>>Push Code Buffer to PC = 0 (0x2bcc6580) >>>>>>>>
          		@ Capacity is 20 word(s)
0x2bcc6580	0:	addiu	a1, JSP, 64
<<<<<<<<<Pop Code Buffer to PC = 736 (0x2bcc6860) <<<<<<<<<
>>>>>>>>>Push Code Buffer to PC = 80 (0x2bcc65d0) >>>>>>>>
          		@ spillSize is 2 word(s), add to JFP+28
0x2bcc65d0	80:	addiu	JSP, JFP, 36
          		@ setup cp base register
0x2bcc65d4	84:	lui	CP, hi16(0x2bcc)
0x2bcc65d8	88:	ori	CP, CP, lo16(0x2bcc6854)
0x2bcc65dc	92:	sw	CP, 24(JFP)	@ save to frame->cpBaseRegX
<<<<<<<<<Pop Code Buffer to PC = 736 (0x2bcc6860) <<<<<<<<<
JS: COMPILED: size=876 startPC=0x2bcc6580 sun.io.MarkableReader.read([BII)I
